
LAN8720A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd14  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002848  0800dec4  0800dec4  0000eec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801070c  0801070c  00012084  2**0
                  CONTENTS
  4 .ARM          00000008  0801070c  0801070c  0001170c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010714  08010714  00012084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010714  08010714  00011714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010718  08010718  00011718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0801071c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012084  2**0
                  CONTENTS
 10 .bss          000083d4  20000084  20000084  00012084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008458  20008458  00012084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016178  00000000  00000000  000120b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004860  00000000  00000000  0002822c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  0002ca90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db6  00000000  00000000  0002dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e59d  00000000  00000000  0002e98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fcc2  00000000  00000000  0005cf2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7656  00000000  00000000  0007cbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00164243  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c98  00000000  00000000  00164288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00168f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800deac 	.word	0x0800deac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	0800deac 	.word	0x0800deac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <MX_GPIO_Init+0xb4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a25      	ldr	r2, [pc, #148]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a17      	ldr	r2, [pc, #92]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a10      	ldr	r2, [pc, #64]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <MX_GPIO_Init+0xb4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2102      	movs	r1, #2
 800060a:	480b      	ldr	r0, [pc, #44]	@ (8000638 <MX_GPIO_Init+0xb8>)
 800060c:	f001 ff72 	bl	80024f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4619      	mov	r1, r3
 8000626:	4804      	ldr	r0, [pc, #16]	@ (8000638 <MX_GPIO_Init+0xb8>)
 8000628:	f001 fdb8 	bl	800219c <HAL_GPIO_Init>

}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	@ 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40022000 	.word	0x40022000

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fafc 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f80a 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f7ff ff9a 	bl	8000580 <MX_GPIO_Init>
  MX_LWIP_Init();
 800064c:	f002 fbec 	bl	8002e28 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  /* 手動 RESET LAN8720A */
  LAN8720_Reset();
 8000650:	f000 f874 	bl	800073c <LAN8720_Reset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MX_LWIP_Process();
 8000654:	f002 fd28 	bl	80030a8 <MX_LWIP_Process>
 8000658:	e7fc      	b.n	8000654 <main+0x18>
	...

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00c fd79 	bl	800d162 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b2b      	ldr	r3, [pc, #172]	@ (8000734 <SystemClock_Config+0xd8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a2a      	ldr	r2, [pc, #168]	@ (8000734 <SystemClock_Config+0xd8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <SystemClock_Config+0xd8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <SystemClock_Config+0xdc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a24      	ldr	r2, [pc, #144]	@ (8000738 <SystemClock_Config+0xdc>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b22      	ldr	r3, [pc, #136]	@ (8000738 <SystemClock_Config+0xdc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006d0:	23b4      	movs	r3, #180	@ 0xb4
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 ff71 	bl	80025c8 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f83c 	bl	8000768 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f0:	f001 ff1a 	bl	8002528 <HAL_PWREx_EnableOverDrive>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006fa:	f000 f835 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2105      	movs	r1, #5
 800071c:	4618      	mov	r0, r3
 800071e:	f002 f9cb 	bl	8002ab8 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000728:	f000 f81e 	bl	8000768 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	@ 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <LAN8720_Reset>:

/* USER CODE BEGIN 4 */
void LAN8720_Reset(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET); // 拉低 RESET（關閉）
 8000740:	2200      	movs	r2, #0
 8000742:	2102      	movs	r1, #2
 8000744:	4807      	ldr	r0, [pc, #28]	@ (8000764 <LAN8720_Reset+0x28>)
 8000746:	f001 fed5 	bl	80024f4 <HAL_GPIO_WritePin>
    HAL_Delay(100); // 延遲 100us 以上，確保 RESET 有效
 800074a:	2064      	movs	r0, #100	@ 0x64
 800074c:	f000 fae8 	bl	8000d20 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET); // 釋放 RESET（開啟）
 8000750:	2201      	movs	r2, #1
 8000752:	2102      	movs	r1, #2
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <LAN8720_Reset+0x28>)
 8000756:	f001 fecd 	bl	80024f4 <HAL_GPIO_WritePin>
    HAL_Delay(100); // 等待 100ms，確保 LAN8720 初始化完成
 800075a:	2064      	movs	r0, #100	@ 0x64
 800075c:	f000 fae0 	bl	8000d20 <HAL_Delay>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40022000 	.word	0x40022000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000782:	4a0f      	ldr	r2, [pc, #60]	@ (80007c0 <HAL_MspInit+0x4c>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000788:	6453      	str	r3, [r2, #68]	@ 0x44
 800078a:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079e:	4a08      	ldr	r2, [pc, #32]	@ (80007c0 <HAL_MspInit+0x4c>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <NMI_Handler+0x4>

080007cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <MemManage_Handler+0x4>

080007dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <BusFault_Handler+0x4>

080007e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <UsageFault_Handler+0x4>

080007ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081a:	f000 fa61 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}

08000822 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  return 1;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <_kill>:

int _kill(int pid, int sig)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800083e:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <_kill+0x20>)
 8000840:	2216      	movs	r2, #22
 8000842:	601a      	str	r2, [r3, #0]
  return -1;
 8000844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	20008448 	.word	0x20008448

08000858 <_exit>:

void _exit (int status)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000860:	f04f 31ff 	mov.w	r1, #4294967295
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ffe5 	bl	8000834 <_kill>
  while (1) {}    /* Make sure we hang here */
 800086a:	bf00      	nop
 800086c:	e7fd      	b.n	800086a <_exit+0x12>

0800086e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	e00a      	b.n	8000896 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000880:	f3af 8000 	nop.w
 8000884:	4601      	mov	r1, r0
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	60ba      	str	r2, [r7, #8]
 800088c:	b2ca      	uxtb	r2, r1
 800088e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	3301      	adds	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	429a      	cmp	r2, r3
 800089c:	dbf0      	blt.n	8000880 <_read+0x12>
  }

  return len;
 800089e:	687b      	ldr	r3, [r7, #4]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	e009      	b.n	80008ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	60ba      	str	r2, [r7, #8]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3301      	adds	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbf1      	blt.n	80008ba <_write+0x12>
  }
  return len;
 80008d6:	687b      	ldr	r3, [r7, #4]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_close>:

int _close(int file)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000908:	605a      	str	r2, [r3, #4]
  return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <_isatty>:

int _isatty(int file)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000920:	2301      	movs	r3, #1
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800092e:	b480      	push	{r7}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000948:	b480      	push	{r7}
 800094a:	b087      	sub	sp, #28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000950:	4a14      	ldr	r2, [pc, #80]	@ (80009a4 <_sbrk+0x5c>)
 8000952:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <_sbrk+0x60>)
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800095c:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <_sbrk+0x64>)
 8000966:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <_sbrk+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	429a      	cmp	r2, r3
 8000976:	d205      	bcs.n	8000984 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <_sbrk+0x6c>)
 800097a:	220c      	movs	r2, #12
 800097c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	e009      	b.n	8000998 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a06      	ldr	r2, [pc, #24]	@ (80009ac <_sbrk+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	371c      	adds	r7, #28
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	20030000 	.word	0x20030000
 80009a8:	00000400 	.word	0x00000400
 80009ac:	200000a0 	.word	0x200000a0
 80009b0:	20008458 	.word	0x20008458
 80009b4:	20008448 	.word	0x20008448

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <SystemInit+0x20>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <SystemInit+0x20>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009e0:	f7ff ffea 	bl	80009b8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	@ (8000a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f00c fbf9 	bl	800d200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0e:	f7ff fe15 	bl	800063c <main>
  bx  lr    
 8000a12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000a20:	0801071c 	.word	0x0801071c
  ldr r2, =_sbss
 8000a24:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000a28:	20008458 	.word	0x20008458

08000a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC_IRQHandler>

08000a2e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00b      	beq.n	8000a56 <LAN8742_RegisterBusIO+0x28>
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d007      	beq.n	8000a56 <LAN8742_RegisterBusIO+0x28>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <LAN8742_RegisterBusIO+0x28>
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	691b      	ldr	r3, [r3, #16]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d102      	bne.n	8000a5c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	e014      	b.n	8000a86 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685a      	ldr	r2, [r3, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	691a      	ldr	r2, [r3, #16]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b086      	sub	sp, #24
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d139      	bne.n	8000b22 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2220      	movs	r2, #32
 8000ac0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	e01c      	b.n	8000b02 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	f107 020c 	add.w	r2, r7, #12
 8000ad0:	2112      	movs	r1, #18
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	4798      	blx	r3
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	da03      	bge.n	8000ae4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000adc:	f06f 0304 	mvn.w	r3, #4
 8000ae0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000ae2:	e00b      	b.n	8000afc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 031f 	and.w	r3, r3, #31
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d105      	bne.n	8000afc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
         break;
 8000afa:	e005      	b.n	8000b08 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3301      	adds	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	2b1f      	cmp	r3, #31
 8000b06:	d9df      	bls.n	8000ac8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b1f      	cmp	r3, #31
 8000b0e:	d902      	bls.n	8000b16 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000b10:	f06f 0302 	mvn.w	r3, #2
 8000b14:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000b22:	693b      	ldr	r3, [r7, #16]
 }
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	6810      	ldr	r0, [r2, #0]
 8000b40:	f107 020c 	add.w	r2, r7, #12
 8000b44:	2101      	movs	r1, #1
 8000b46:	4798      	blx	r3
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	da02      	bge.n	8000b54 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b4e:	f06f 0304 	mvn.w	r3, #4
 8000b52:	e06e      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	6810      	ldr	r0, [r2, #0]
 8000b5c:	f107 020c 	add.w	r2, r7, #12
 8000b60:	2101      	movs	r1, #1
 8000b62:	4798      	blx	r3
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	da02      	bge.n	8000b70 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b6a:	f06f 0304 	mvn.w	r3, #4
 8000b6e:	e060      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e059      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	6810      	ldr	r0, [r2, #0]
 8000b86:	f107 020c 	add.w	r2, r7, #12
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4798      	blx	r3
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	da02      	bge.n	8000b9a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b94:	f06f 0304 	mvn.w	r3, #4
 8000b98:	e04b      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d11b      	bne.n	8000bdc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d006      	beq.n	8000bbc <LAN8742_GetLinkState+0x90>
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	e03a      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e033      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	e02c      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	e02a      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	6810      	ldr	r0, [r2, #0]
 8000be4:	f107 020c 	add.w	r2, r7, #12
 8000be8:	211f      	movs	r1, #31
 8000bea:	4798      	blx	r3
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	da02      	bge.n	8000bf8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000bf2:	f06f 0304 	mvn.w	r3, #4
 8000bf6:	e01c      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000c02:	2306      	movs	r3, #6
 8000c04:	e015      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f003 031c 	and.w	r3, r3, #28
 8000c0c:	2b18      	cmp	r3, #24
 8000c0e:	d101      	bne.n	8000c14 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000c10:	2302      	movs	r3, #2
 8000c12:	e00e      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 031c 	and.w	r3, r3, #28
 8000c1a:	2b08      	cmp	r3, #8
 8000c1c:	d101      	bne.n	8000c22 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e007      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f003 031c 	and.w	r3, r3, #28
 8000c28:	2b14      	cmp	r3, #20
 8000c2a:	d101      	bne.n	8000c30 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	e000      	b.n	8000c32 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000c30:	2305      	movs	r3, #5
    }
  }
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <HAL_Init+0x40>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_Init+0x40>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <HAL_Init+0x40>)
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f931 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f000 f808 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fd80 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f93b 	bl	8000f1a <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 f911 	bl	8000ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	200000a4 	.word	0x200000a4

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	@ (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	200000a4 	.word	0x200000a4

08000d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff ffee 	bl	8000d08 <HAL_GetTick>
 8000d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d38:	d005      	beq.n	8000d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <HAL_Delay+0x44>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d46:	bf00      	nop
 8000d48:	f7ff ffde 	bl	8000d08 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8f7      	bhi.n	8000d48 <HAL_Delay+0x28>
  {
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	@ (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	@ (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	@ 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	@ 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e98:	d301      	bcc.n	8000e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00f      	b.n	8000ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <SysTick_Config+0x40>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f7ff ff8e 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <SysTick_Config+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <SysTick_Config+0x40>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff47 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef4:	f7ff ff5c 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff ff8e 	bl	8000e20 <NVIC_EncodePriority>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff5d 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffb0 	bl	8000e88 <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e08a      	b.n	800105c <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d106      	bne.n	8000f5e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2223      	movs	r2, #35	@ 0x23
 8000f54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f002 fa69 	bl	8003430 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b40      	ldr	r3, [pc, #256]	@ (8001064 <HAL_ETH_Init+0x130>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	4a3f      	ldr	r2, [pc, #252]	@ (8001064 <HAL_ETH_Init+0x130>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001064 <HAL_ETH_Init+0x130>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <HAL_ETH_Init+0x134>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8001068 <HAL_ETH_Init+0x134>)
 8000f80:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000f84:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f86:	4b38      	ldr	r3, [pc, #224]	@ (8001068 <HAL_ETH_Init+0x134>)
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	4936      	ldr	r1, [pc, #216]	@ (8001068 <HAL_ETH_Init+0x134>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000f94:	4b34      	ldr	r3, [pc, #208]	@ (8001068 <HAL_ETH_Init+0x134>)
 8000f96:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6812      	ldr	r2, [r2, #0]
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000fae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb0:	f7ff feaa 	bl	8000d08 <HAL_GetTick>
 8000fb4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000fb6:	e011      	b.n	8000fdc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000fb8:	f7ff fea6 	bl	8000d08 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fc6:	d909      	bls.n	8000fdc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2204      	movs	r2, #4
 8000fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	22e0      	movs	r2, #224	@ 0xe0
 8000fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e03f      	b.n	800105c <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1e4      	bne.n	8000fb8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fe16 	bl	8001c20 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 fec1 	bl	8001d7c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 ff17 	bl	8001e2e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	461a      	mov	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fe7f 	bl	8001d0c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800101c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800102e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001032:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001046:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2210      	movs	r2, #16
 8001056:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40013800 	.word	0x40013800

0800106c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800107a:	2b10      	cmp	r3, #16
 800107c:	d150      	bne.n	8001120 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2223      	movs	r2, #35	@ 0x23
 8001082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2204      	movs	r2, #4
 800108a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f9f8 	bl	8001482 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0208 	orr.w	r2, r2, #8
 80010a0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f7ff fe38 	bl	8000d20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0204 	orr.w	r2, r2, #4
 80010c6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f7ff fe25 	bl	8000d20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 fc3a 	bl	8001958 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80010fa:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001112:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2223      	movs	r2, #35	@ 0x23
 8001118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	e000      	b.n	8001122 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
  }
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001138:	2b23      	cmp	r3, #35	@ 0x23
 800113a:	d14a      	bne.n	80011d2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2223      	movs	r2, #35	@ 0x23
 8001140:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001156:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800115a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	f023 0302 	bic.w	r3, r3, #2
 800116e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001172:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0204 	bic.w	r2, r2, #4
 8001182:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff fdc7 	bl	8000d20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 fbdc 	bl	8001958 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0208 	bic.w	r2, r2, #8
 80011ae:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff fdb1 	bl	8000d20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2210      	movs	r2, #16
 80011ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
  }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e07c      	b.n	80012fc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001208:	2b23      	cmp	r3, #35	@ 0x23
 800120a:	d176      	bne.n	80012fa <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800120c:	2200      	movs	r2, #0
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 fe7b 	bl	8001f0c <ETH_Prepare_Tx_Descriptors>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d009      	beq.n	8001230 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001222:	f043 0202 	orr.w	r2, r3, #2
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e065      	b.n	80012fc <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001230:	f3bf 8f4f 	dsb	sy
}
 8001234:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3206      	adds	r2, #6
 800123e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001242:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	629a      	str	r2, [r3, #40]	@ 0x28
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001252:	2b03      	cmp	r3, #3
 8001254:	d904      	bls.n	8001260 <HAL_ETH_Transmit+0x84>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125a:	1f1a      	subs	r2, r3, #4
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3106      	adds	r1, #6
 800126c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001270:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001274:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001276:	f7ff fd47 	bl	8000d08 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800127c:	e037      	b.n	80012ee <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d011      	beq.n	80012b4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001296:	f043 0208 	orr.w	r2, r3, #8
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e023      	b.n	80012fc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ba:	d018      	beq.n	80012ee <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012bc:	f7ff fd24 	bl	8000d08 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d302      	bcc.n	80012d2 <HAL_ETH_Transmit+0xf6>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10d      	bne.n	80012ee <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d8:	f043 0204 	orr.w	r2, r3, #4
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80012e8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e006      	b.n	80012fc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dbc3      	blt.n	800127e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
  }
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d109      	bne.n	8001330 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0a4      	b.n	800147a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001336:	2b23      	cmp	r3, #35	@ 0x23
 8001338:	d001      	beq.n	800133e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e09d      	b.n	800147a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001342:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	3212      	adds	r2, #18
 800134a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001354:	f1c3 0304 	rsb	r3, r3, #4
 8001358:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800135a:	e066      	b.n	800142a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	69da      	ldr	r2, [r3, #28]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001380:	2b00      	cmp	r3, #0
 8001382:	d103      	bne.n	800138c <HAL_ETH_ReadData+0x88>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001388:	2b00      	cmp	r3, #0
 800138a:	d03c      	beq.n	8001406 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0c1b      	lsrs	r3, r3, #16
 80013aa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80013ae:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80013e0:	461a      	mov	r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	f002 f9d3 	bl	8003790 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	441a      	add	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b03      	cmp	r3, #3
 8001410:	d902      	bls.n	8001418 <HAL_ETH_ReadData+0x114>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b04      	subs	r3, #4
 8001416:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	3212      	adds	r2, #18
 800141e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001422:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800142e:	2b00      	cmp	r3, #0
 8001430:	db06      	blt.n	8001440 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	429a      	cmp	r2, r3
 8001438:	d202      	bcs.n	8001440 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800143a:	7cfb      	ldrb	r3, [r7, #19]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d08d      	beq.n	800135c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	441a      	add	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f814 	bl	8001482 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001460:	7cfb      	ldrb	r3, [r7, #19]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d108      	bne.n	8001478 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	e000      	b.n	800147a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
}
 800147a:	4618      	mov	r0, r3
 800147c:	3720      	adds	r7, #32
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b088      	sub	sp, #32
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800148e:	2301      	movs	r3, #1
 8001490:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001496:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	3212      	adds	r2, #18
 800149e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a2:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014a8:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80014aa:	e044      	b.n	8001536 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d112      	bne.n	80014da <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 f939 	bl	8003730 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	74fb      	strb	r3, [r7, #19]
 80014c8:	e007      	b.n	80014da <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	461a      	mov	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	461a      	mov	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80014da:	7cfb      	ldrb	r3, [r7, #19]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d02a      	beq.n	8001536 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d108      	bne.n	80014fa <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	6053      	str	r3, [r2, #4]
 80014f8:	e005      	b.n	8001506 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d902      	bls.n	8001524 <ETH_UpdateDescriptor+0xa2>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b04      	subs	r3, #4
 8001522:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	3212      	adds	r2, #18
 800152a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152e:	617b      	str	r3, [r7, #20]
      desccount--;
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	3b01      	subs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <ETH_UpdateDescriptor+0xc0>
 800153c:	7cfb      	ldrb	r3, [r7, #19]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1b4      	bne.n	80014ac <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	429a      	cmp	r2, r3
 800154a:	d01a      	beq.n	8001582 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	3301      	adds	r3, #1
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001556:	f3bf 8f5f 	dmb	sy
}
 800155a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6919      	ldr	r1, [r3, #16]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	18ca      	adds	r2, r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001574:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001582:	bf00      	nop
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f003 031c 	and.w	r3, r3, #28
 80015a6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	02db      	lsls	r3, r3, #11
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	019b      	lsls	r3, r3, #6
 80015b8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	4313      	orrs	r3, r2
 80015c0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f023 0302 	bic.w	r3, r3, #2
 80015c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80015da:	f7ff fb95 	bl	8000d08 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015e0:	e00d      	b.n	80015fe <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80015e2:	f7ff fb91 	bl	8000d08 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f0:	d301      	bcc.n	80015f6 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e010      	b.n	8001618 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ec      	bne.n	80015e2 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	b29b      	uxth	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 031c 	and.w	r3, r3, #28
 800163c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	02db      	lsls	r3, r3, #11
 8001642:	b29b      	uxth	r3, r3
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	4313      	orrs	r3, r2
 8001648:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	019b      	lsls	r3, r3, #6
 800164e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b29a      	uxth	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800167a:	f7ff fb45 	bl	8000d08 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001680:	e00d      	b.n	800169e <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001682:	f7ff fb41 	bl	8000d08 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001690:	d301      	bcc.n	8001696 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e009      	b.n	80016aa <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1ec      	bne.n	8001682 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0e6      	b.n	8001894 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf14      	ite	ne
 80016d4:	2301      	movne	r3, #1
 80016d6:	2300      	moveq	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf0c      	ite	eq
 80016fe:	2301      	moveq	r3, #1
 8001700:	2300      	movne	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf0c      	ite	eq
 8001734:	2301      	moveq	r3, #1
 8001736:	2300      	movne	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	461a      	mov	r2, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800174a:	2b00      	cmp	r3, #0
 800174c:	bf14      	ite	ne
 800174e:	2301      	movne	r3, #1
 8001750:	2300      	moveq	r3, #0
 8001752:	b2db      	uxtb	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800179a:	2b00      	cmp	r3, #0
 800179c:	bf0c      	ite	eq
 800179e:	2301      	moveq	r3, #1
 80017a0:	2300      	movne	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	bf14      	ite	ne
 80017b8:	2301      	movne	r3, #1
 80017ba:	2300      	moveq	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf14      	ite	ne
 80017e0:	2301      	movne	r3, #1
 80017e2:	2300      	moveq	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf14      	ite	ne
 8001814:	2301      	movne	r3, #1
 8001816:	2300      	moveq	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	b29a      	uxth	r2, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf14      	ite	ne
 8001868:	2301      	movne	r3, #1
 800186a:	2300      	moveq	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf14      	ite	ne
 8001884:	2301      	movne	r3, #1
 8001886:	2300      	moveq	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e00b      	b.n	80018cc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018ba:	2b10      	cmp	r3, #16
 80018bc:	d105      	bne.n	80018ca <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f86f 	bl	80019a4 <ETH_SetMACConfig>

    return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
  }
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f023 031c 	bic.w	r3, r3, #28
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80018ec:	f001 fa90 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 80018f0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <HAL_ETH_SetMDIOClockRange+0x74>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d804      	bhi.n	8001904 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f043 0308 	orr.w	r3, r3, #8
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e019      	b.n	8001938 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4a11      	ldr	r2, [pc, #68]	@ (800194c <HAL_ETH_SetMDIOClockRange+0x78>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d204      	bcs.n	8001916 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f043 030c 	orr.w	r3, r3, #12
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e010      	b.n	8001938 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d90c      	bls.n	8001938 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	4a0c      	ldr	r2, [pc, #48]	@ (8001954 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d804      	bhi.n	8001930 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e003      	b.n	8001938 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f043 0310 	orr.w	r3, r3, #16
 8001936:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	611a      	str	r2, [r3, #16]
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	02160ebf 	.word	0x02160ebf
 800194c:	03938700 	.word	0x03938700
 8001950:	05f5e0ff 	.word	0x05f5e0ff
 8001954:	08f0d17f 	.word	0x08f0d17f

08001958 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001976:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800197a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff f9c9 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001998:	6193      	str	r3, [r2, #24]
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4b53      	ldr	r3, [pc, #332]	@ (8001b08 <ETH_SetMACConfig+0x164>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	7b9b      	ldrb	r3, [r3, #14]
 80019c2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	7c12      	ldrb	r2, [r2, #16]
 80019c8:	2a00      	cmp	r2, #0
 80019ca:	d102      	bne.n	80019d2 <ETH_SetMACConfig+0x2e>
 80019cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019d0:	e000      	b.n	80019d4 <ETH_SetMACConfig+0x30>
 80019d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80019d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	7c52      	ldrb	r2, [r2, #17]
 80019da:	2a00      	cmp	r2, #0
 80019dc:	d102      	bne.n	80019e4 <ETH_SetMACConfig+0x40>
 80019de:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80019e2:	e000      	b.n	80019e6 <ETH_SetMACConfig+0x42>
 80019e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80019ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	7fdb      	ldrb	r3, [r3, #31]
 80019f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80019f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80019fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	7f92      	ldrb	r2, [r2, #30]
 8001a00:	2a00      	cmp	r2, #0
 8001a02:	d102      	bne.n	8001a0a <ETH_SetMACConfig+0x66>
 8001a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a08:	e000      	b.n	8001a0c <ETH_SetMACConfig+0x68>
 8001a0a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001a0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	7f1b      	ldrb	r3, [r3, #28]
 8001a12:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a14:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	791b      	ldrb	r3, [r3, #4]
 8001a20:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001a22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	d102      	bne.n	8001a34 <ETH_SetMACConfig+0x90>
 8001a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a32:	e000      	b.n	8001a36 <ETH_SetMACConfig+0x92>
 8001a34:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	7bdb      	ldrb	r3, [r3, #15]
 8001a3c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a3e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001a4c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff f95a 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001a92:	2a00      	cmp	r2, #0
 8001a94:	d101      	bne.n	8001a9a <ETH_SetMACConfig+0xf6>
 8001a96:	2280      	movs	r2, #128	@ 0x80
 8001a98:	e000      	b.n	8001a9c <ETH_SetMACConfig+0xf8>
 8001a9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a9c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001aa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d101      	bne.n	8001ab2 <ETH_SetMACConfig+0x10e>
 8001aae:	2208      	movs	r2, #8
 8001ab0:	e000      	b.n	8001ab4 <ETH_SetMACConfig+0x110>
 8001ab2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001ab4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001abc:	2a01      	cmp	r2, #1
 8001abe:	d101      	bne.n	8001ac4 <ETH_SetMACConfig+0x120>
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	e000      	b.n	8001ac6 <ETH_SetMACConfig+0x122>
 8001ac4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ac6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001ace:	2a01      	cmp	r2, #1
 8001ad0:	d101      	bne.n	8001ad6 <ETH_SetMACConfig+0x132>
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	e000      	b.n	8001ad8 <ETH_SetMACConfig+0x134>
 8001ad6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff f915 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	619a      	str	r2, [r3, #24]
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	fd20810f 	.word	0xfd20810f

08001b0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4b3d      	ldr	r3, [pc, #244]	@ (8001c1c <ETH_SetDMAConfig+0x110>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	7b1b      	ldrb	r3, [r3, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <ETH_SetDMAConfig+0x2c>
 8001b32:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b36:	e000      	b.n	8001b3a <ETH_SetDMAConfig+0x2e>
 8001b38:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	7b5b      	ldrb	r3, [r3, #13]
 8001b3e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b40:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	7f52      	ldrb	r2, [r2, #29]
 8001b46:	2a00      	cmp	r2, #0
 8001b48:	d102      	bne.n	8001b50 <ETH_SetDMAConfig+0x44>
 8001b4a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b4e:	e000      	b.n	8001b52 <ETH_SetDMAConfig+0x46>
 8001b50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	7b9b      	ldrb	r3, [r3, #14]
 8001b58:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b5a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	7f1b      	ldrb	r3, [r3, #28]
 8001b66:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001b68:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	7f9b      	ldrb	r3, [r3, #30]
 8001b6e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b70:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b76:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b7e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b80:	4313      	orrs	r3, r2
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b90:	461a      	mov	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7ff f8bc 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	791b      	ldrb	r3, [r3, #4]
 8001bba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bc0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001bc6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001bcc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001bd4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001bd6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bdc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001bde:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001be4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bf2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f7ff f88d 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	f8de3f23 	.word	0xf8de3f23

08001c20 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0a6      	sub	sp, #152	@ 0x98
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001c34:	2300      	movs	r3, #0
 8001c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c62:	2300      	movs	r3, #0
 8001c64:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c9a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fe7f 	bl	80019a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001caa:	2301      	movs	r3, #1
 8001cac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001cd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cda:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cdc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ce0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ce6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001cf6:	f107 0308 	add.w	r3, r7, #8
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff05 	bl	8001b0c <ETH_SetDMAConfig>
}
 8001d02:	bf00      	nop
 8001d04:	3798      	adds	r7, #152	@ 0x98
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3305      	adds	r3, #5
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	3204      	adds	r2, #4
 8001d24:	7812      	ldrb	r2, [r2, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <ETH_MACAddressConfig+0x68>)
 8001d2e:	4413      	add	r3, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3303      	adds	r3, #3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	061a      	lsls	r2, r3, #24
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3302      	adds	r3, #2
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	041b      	lsls	r3, r3, #16
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	4313      	orrs	r3, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <ETH_MACAddressConfig+0x6c>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	6013      	str	r3, [r2, #0]
}
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40028040 	.word	0x40028040
 8001d78:	40028044 	.word	0x40028044

08001d7c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e03e      	b.n	8001e08 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68d9      	ldr	r1, [r3, #12]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2200      	movs	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	3206      	adds	r2, #6
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d80c      	bhi.n	8001dec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68d9      	ldr	r1, [r3, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	461a      	mov	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	e004      	b.n	8001df6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	461a      	mov	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3301      	adds	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d9bd      	bls.n	8001d8a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e20:	611a      	str	r2, [r3, #16]
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	e048      	b.n	8001ece <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6919      	ldr	r1, [r3, #16]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2200      	movs	r2, #0
 8001e58:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001e78:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	3212      	adds	r2, #18
 8001e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d80c      	bhi.n	8001ebe <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6919      	ldr	r1, [r3, #16]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60da      	str	r2, [r3, #12]
 8001ebc:	e004      	b.n	8001ec8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d9b3      	bls.n	8001e3c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001efe:	60da      	str	r2, [r3, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b091      	sub	sp, #68	@ 0x44
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3318      	adds	r3, #24
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f36:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f4e:	d007      	beq.n	8001f60 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f54:	3304      	adds	r3, #4
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001f60:	2302      	movs	r3, #2
 8001f62:	e115      	b.n	8002190 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8001f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f66:	3301      	adds	r3, #1
 8001f68:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f72:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8001f7c:	f023 031f 	bic.w	r3, r3, #31
 8001f80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f82:	6852      	ldr	r2, [r2, #4]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f88:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d008      	beq.n	8001fa8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001fea:	e084      	b.n	80020f6 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e005      	b.n	8002018 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800200c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002016:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800201a:	3301      	adds	r3, #1
 800201c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800201e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002020:	2b03      	cmp	r3, #3
 8002022:	d902      	bls.n	800202a <ETH_Prepare_Tx_Descriptors+0x11e>
 8002024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002026:	3b04      	subs	r3, #4
 8002028:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800202e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002032:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800203c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002040:	d007      	beq.n	8002052 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002046:	3304      	adds	r3, #4
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d029      	beq.n	80020a6 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800205a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002060:	2300      	movs	r3, #0
 8002062:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002064:	e019      	b.n	800209a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8002066:	f3bf 8f5f 	dmb	sy
}
 800206a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800206c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002076:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800207a:	3301      	adds	r3, #1
 800207c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800207e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002080:	2b03      	cmp	r3, #3
 8002082:	d902      	bls.n	800208a <ETH_Prepare_Tx_Descriptors+0x17e>
 8002084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002086:	3b04      	subs	r3, #4
 8002088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800208e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002092:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002096:	3301      	adds	r3, #1
 8002098:	63bb      	str	r3, [r7, #56]	@ 0x38
 800209a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800209c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3e1      	bcc.n	8002066 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 80020a2:	2302      	movs	r3, #2
 80020a4:	e074      	b.n	8002190 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80020a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80020ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80020b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b4:	3301      	adds	r3, #1
 80020b6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80020b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80020be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80020c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80020d0:	f023 031f 	bic.w	r3, r3, #31
 80020d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020d6:	6852      	ldr	r2, [r2, #4]
 80020d8:	431a      	orrs	r2, r3
 80020da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020dc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80020de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e0:	3301      	adds	r3, #1
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80020e4:	f3bf 8f5f 	dmb	sy
}
 80020e8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80020ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80020f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f47f af76 	bne.w	8001fec <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800210e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e005      	b.n	8002120 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800211c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800211e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800212a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	6a3a      	ldr	r2, [r7, #32]
 8002130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002134:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002136:	f3bf 8f5f 	dmb	sy
}
 800213a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800213c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002146:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800214c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800214e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002150:	3304      	adds	r3, #4
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800215c:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800215e:	f3ef 8310 	mrs	r3, PRIMASK
 8002162:	613b      	str	r3, [r7, #16]
  return(result);
 8002164:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	2301      	movs	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f383 8810 	msr	PRIMASK, r3
}
 8002172:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217a:	4413      	add	r3, r2
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	629a      	str	r2, [r3, #40]	@ 0x28
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f383 8810 	msr	PRIMASK, r3
}
 800218c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3744      	adds	r7, #68	@ 0x44
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	@ 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e177      	b.n	80024a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 8166 	bne.w	80024a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d130      	bne.n	8002250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 0201 	and.w	r2, r3, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b03      	cmp	r3, #3
 800225a:	d017      	beq.n	800228c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d123      	bne.n	80022e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80c0 	beq.w	80024a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b66      	ldr	r3, [pc, #408]	@ (80024c0 <HAL_GPIO_Init+0x324>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	4a65      	ldr	r2, [pc, #404]	@ (80024c0 <HAL_GPIO_Init+0x324>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002330:	6453      	str	r3, [r2, #68]	@ 0x44
 8002332:	4b63      	ldr	r3, [pc, #396]	@ (80024c0 <HAL_GPIO_Init+0x324>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233e:	4a61      	ldr	r2, [pc, #388]	@ (80024c4 <HAL_GPIO_Init+0x328>)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a58      	ldr	r2, [pc, #352]	@ (80024c8 <HAL_GPIO_Init+0x32c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d037      	beq.n	80023da <HAL_GPIO_Init+0x23e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a57      	ldr	r2, [pc, #348]	@ (80024cc <HAL_GPIO_Init+0x330>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d031      	beq.n	80023d6 <HAL_GPIO_Init+0x23a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a56      	ldr	r2, [pc, #344]	@ (80024d0 <HAL_GPIO_Init+0x334>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d02b      	beq.n	80023d2 <HAL_GPIO_Init+0x236>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a55      	ldr	r2, [pc, #340]	@ (80024d4 <HAL_GPIO_Init+0x338>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d025      	beq.n	80023ce <HAL_GPIO_Init+0x232>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a54      	ldr	r2, [pc, #336]	@ (80024d8 <HAL_GPIO_Init+0x33c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01f      	beq.n	80023ca <HAL_GPIO_Init+0x22e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a53      	ldr	r2, [pc, #332]	@ (80024dc <HAL_GPIO_Init+0x340>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d019      	beq.n	80023c6 <HAL_GPIO_Init+0x22a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a52      	ldr	r2, [pc, #328]	@ (80024e0 <HAL_GPIO_Init+0x344>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_GPIO_Init+0x226>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a51      	ldr	r2, [pc, #324]	@ (80024e4 <HAL_GPIO_Init+0x348>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00d      	beq.n	80023be <HAL_GPIO_Init+0x222>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a50      	ldr	r2, [pc, #320]	@ (80024e8 <HAL_GPIO_Init+0x34c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <HAL_GPIO_Init+0x21e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4f      	ldr	r2, [pc, #316]	@ (80024ec <HAL_GPIO_Init+0x350>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_GPIO_Init+0x21a>
 80023b2:	2309      	movs	r3, #9
 80023b4:	e012      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023b6:	230a      	movs	r3, #10
 80023b8:	e010      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023ba:	2308      	movs	r3, #8
 80023bc:	e00e      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023be:	2307      	movs	r3, #7
 80023c0:	e00c      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023c2:	2306      	movs	r3, #6
 80023c4:	e00a      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023c6:	2305      	movs	r3, #5
 80023c8:	e008      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023ca:	2304      	movs	r3, #4
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023ce:	2303      	movs	r3, #3
 80023d0:	e004      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e002      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_GPIO_Init+0x240>
 80023da:	2300      	movs	r3, #0
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	f002 0203 	and.w	r2, r2, #3
 80023e2:	0092      	lsls	r2, r2, #2
 80023e4:	4093      	lsls	r3, r2
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ec:	4935      	ldr	r1, [pc, #212]	@ (80024c4 <HAL_GPIO_Init+0x328>)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fa:	4b3d      	ldr	r3, [pc, #244]	@ (80024f0 <HAL_GPIO_Init+0x354>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800241e:	4a34      	ldr	r2, [pc, #208]	@ (80024f0 <HAL_GPIO_Init+0x354>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002424:	4b32      	ldr	r3, [pc, #200]	@ (80024f0 <HAL_GPIO_Init+0x354>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002448:	4a29      	ldr	r2, [pc, #164]	@ (80024f0 <HAL_GPIO_Init+0x354>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800244e:	4b28      	ldr	r3, [pc, #160]	@ (80024f0 <HAL_GPIO_Init+0x354>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002472:	4a1f      	ldr	r2, [pc, #124]	@ (80024f0 <HAL_GPIO_Init+0x354>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002478:	4b1d      	ldr	r3, [pc, #116]	@ (80024f0 <HAL_GPIO_Init+0x354>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800249c:	4a14      	ldr	r2, [pc, #80]	@ (80024f0 <HAL_GPIO_Init+0x354>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3301      	adds	r3, #1
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	f67f ae84 	bls.w	80021b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3724      	adds	r7, #36	@ 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40013800 	.word	0x40013800
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40020400 	.word	0x40020400
 80024d0:	40020800 	.word	0x40020800
 80024d4:	40020c00 	.word	0x40020c00
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40021400 	.word	0x40021400
 80024e0:	40021800 	.word	0x40021800
 80024e4:	40021c00 	.word	0x40021c00
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40022400 	.word	0x40022400
 80024f0:	40013c00 	.word	0x40013c00

080024f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	807b      	strh	r3, [r7, #2]
 8002500:	4613      	mov	r3, r2
 8002502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002504:	787b      	ldrb	r3, [r7, #1]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002510:	e003      	b.n	800251a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002512:	887b      	ldrh	r3, [r7, #2]
 8002514:	041a      	lsls	r2, r3, #16
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	619a      	str	r2, [r3, #24]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	4a1f      	ldr	r2, [pc, #124]	@ (80025b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	@ 0x40
 8002542:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800254e:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <HAL_PWREx_EnableOverDrive+0x94>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002554:	f7fe fbd8 	bl	8000d08 <HAL_GetTick>
 8002558:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800255a:	e009      	b.n	8002570 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800255c:	f7fe fbd4 	bl	8000d08 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800256a:	d901      	bls.n	8002570 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e01f      	b.n	80025b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002570:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800257c:	d1ee      	bne.n	800255c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002584:	f7fe fbc0 	bl	8000d08 <HAL_GetTick>
 8002588:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800258a:	e009      	b.n	80025a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800258c:	f7fe fbbc 	bl	8000d08 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800259a:	d901      	bls.n	80025a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e007      	b.n	80025b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025ac:	d1ee      	bne.n	800258c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40023800 	.word	0x40023800
 80025bc:	420e0040 	.word	0x420e0040
 80025c0:	40007000 	.word	0x40007000
 80025c4:	420e0044 	.word	0x420e0044

080025c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e267      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d075      	beq.n	80026d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025e6:	4b88      	ldr	r3, [pc, #544]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d00c      	beq.n	800260c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f2:	4b85      	ldr	r3, [pc, #532]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d112      	bne.n	8002624 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025fe:	4b82      	ldr	r3, [pc, #520]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002606:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800260a:	d10b      	bne.n	8002624 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	4b7e      	ldr	r3, [pc, #504]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d05b      	beq.n	80026d0 <HAL_RCC_OscConfig+0x108>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d157      	bne.n	80026d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e242      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262c:	d106      	bne.n	800263c <HAL_RCC_OscConfig+0x74>
 800262e:	4b76      	ldr	r3, [pc, #472]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a75      	ldr	r2, [pc, #468]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e01d      	b.n	8002678 <HAL_RCC_OscConfig+0xb0>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x98>
 8002646:	4b70      	ldr	r3, [pc, #448]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a6f      	ldr	r2, [pc, #444]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800264c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b6d      	ldr	r3, [pc, #436]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6c      	ldr	r2, [pc, #432]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0xb0>
 8002660:	4b69      	ldr	r3, [pc, #420]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a68      	ldr	r2, [pc, #416]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b66      	ldr	r3, [pc, #408]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a65      	ldr	r2, [pc, #404]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7fe fb42 	bl	8000d08 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002688:	f7fe fb3e 	bl	8000d08 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	@ 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e207      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	4b5b      	ldr	r3, [pc, #364]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0xc0>
 80026a6:	e014      	b.n	80026d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7fe fb2e 	bl	8000d08 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7fe fb2a 	bl	8000d08 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	@ 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e1f3      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	4b51      	ldr	r3, [pc, #324]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0xe8>
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d063      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026de:	4b4a      	ldr	r3, [pc, #296]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ea:	4b47      	ldr	r3, [pc, #284]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d11c      	bne.n	8002730 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f6:	4b44      	ldr	r3, [pc, #272]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d116      	bne.n	8002730 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x152>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e1c7      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	4b3b      	ldr	r3, [pc, #236]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4937      	ldr	r1, [pc, #220]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272e:	e03a      	b.n	80027a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002738:	4b34      	ldr	r3, [pc, #208]	@ (800280c <HAL_RCC_OscConfig+0x244>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273e:	f7fe fae3 	bl	8000d08 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002746:	f7fe fadf 	bl	8000d08 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e1a8      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	4b2b      	ldr	r3, [pc, #172]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	4b28      	ldr	r3, [pc, #160]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4925      	ldr	r1, [pc, #148]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
 8002778:	e015      	b.n	80027a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277a:	4b24      	ldr	r3, [pc, #144]	@ (800280c <HAL_RCC_OscConfig+0x244>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fac2 	bl	8000d08 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002788:	f7fe fabe 	bl	8000d08 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e187      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d036      	beq.n	8002820 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d016      	beq.n	80027e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <HAL_RCC_OscConfig+0x248>)
 80027bc:	2201      	movs	r2, #1
 80027be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe faa2 	bl	8000d08 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c8:	f7fe fa9e 	bl	8000d08 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e167      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_RCC_OscConfig+0x240>)
 80027dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x200>
 80027e6:	e01b      	b.n	8002820 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e8:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <HAL_RCC_OscConfig+0x248>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fa8b 	bl	8000d08 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f4:	e00e      	b.n	8002814 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f6:	f7fe fa87 	bl	8000d08 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d907      	bls.n	8002814 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e150      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
 8002808:	40023800 	.word	0x40023800
 800280c:	42470000 	.word	0x42470000
 8002810:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	4b88      	ldr	r3, [pc, #544]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ea      	bne.n	80027f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8097 	beq.w	800295c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002832:	4b81      	ldr	r3, [pc, #516]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10f      	bne.n	800285e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	4b7d      	ldr	r3, [pc, #500]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	4a7c      	ldr	r2, [pc, #496]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800284c:	6413      	str	r3, [r2, #64]	@ 0x40
 800284e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285a:	2301      	movs	r3, #1
 800285c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b77      	ldr	r3, [pc, #476]	@ (8002a3c <HAL_RCC_OscConfig+0x474>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d118      	bne.n	800289c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286a:	4b74      	ldr	r3, [pc, #464]	@ (8002a3c <HAL_RCC_OscConfig+0x474>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a73      	ldr	r2, [pc, #460]	@ (8002a3c <HAL_RCC_OscConfig+0x474>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002876:	f7fe fa47 	bl	8000d08 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7fe fa43 	bl	8000d08 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e10c      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	4b6a      	ldr	r3, [pc, #424]	@ (8002a3c <HAL_RCC_OscConfig+0x474>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2ea>
 80028a4:	4b64      	ldr	r3, [pc, #400]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a8:	4a63      	ldr	r2, [pc, #396]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b0:	e01c      	b.n	80028ec <HAL_RCC_OscConfig+0x324>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x30c>
 80028ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028be:	4a5e      	ldr	r2, [pc, #376]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0x324>
 80028d4:	4b58      	ldr	r3, [pc, #352]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	4a57      	ldr	r2, [pc, #348]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e0:	4b55      	ldr	r3, [pc, #340]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	4a54      	ldr	r2, [pc, #336]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80028e6:	f023 0304 	bic.w	r3, r3, #4
 80028ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d015      	beq.n	8002920 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe fa08 	bl	8000d08 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe fa04 	bl	8000d08 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0cb      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	4b49      	ldr	r3, [pc, #292]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0ee      	beq.n	80028fc <HAL_RCC_OscConfig+0x334>
 800291e:	e014      	b.n	800294a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002920:	f7fe f9f2 	bl	8000d08 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002926:	e00a      	b.n	800293e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002928:	f7fe f9ee 	bl	8000d08 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0b5      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ee      	bne.n	8002928 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002950:	4b39      	ldr	r3, [pc, #228]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	4a38      	ldr	r2, [pc, #224]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800295a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80a1 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002966:	4b34      	ldr	r3, [pc, #208]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d05c      	beq.n	8002a2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d141      	bne.n	80029fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b31      	ldr	r3, [pc, #196]	@ (8002a40 <HAL_RCC_OscConfig+0x478>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7fe f9c2 	bl	8000d08 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe f9be 	bl	8000d08 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e087      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	019b      	lsls	r3, r3, #6
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	085b      	lsrs	r3, r3, #1
 80029be:	3b01      	subs	r3, #1
 80029c0:	041b      	lsls	r3, r3, #16
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	061b      	lsls	r3, r3, #24
 80029ca:	491b      	ldr	r1, [pc, #108]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <HAL_RCC_OscConfig+0x478>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7fe f997 	bl	8000d08 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029de:	f7fe f993 	bl	8000d08 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e05c      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f0:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x416>
 80029fc:	e054      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <HAL_RCC_OscConfig+0x478>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe f980 	bl	8000d08 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7fe f97c 	bl	8000d08 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e045      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_RCC_OscConfig+0x470>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x444>
 8002a2a:	e03d      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e038      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a44:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <HAL_RCC_OscConfig+0x4ec>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d028      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d121      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d11a      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a74:	4013      	ands	r3, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d111      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8a:	085b      	lsrs	r3, r3, #1
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0cc      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002acc:	4b68      	ldr	r3, [pc, #416]	@ (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d90c      	bls.n	8002af4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b65      	ldr	r3, [pc, #404]	@ (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae2:	4b63      	ldr	r3, [pc, #396]	@ (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0b8      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b0c:	4b59      	ldr	r3, [pc, #356]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a58      	ldr	r2, [pc, #352]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b24:	4b53      	ldr	r3, [pc, #332]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a52      	ldr	r2, [pc, #328]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b30:	4b50      	ldr	r3, [pc, #320]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	494d      	ldr	r1, [pc, #308]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d044      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d107      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	4b47      	ldr	r3, [pc, #284]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d119      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e07f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b76:	4b3f      	ldr	r3, [pc, #252]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e06f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b86:	4b3b      	ldr	r3, [pc, #236]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e067      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b96:	4b37      	ldr	r3, [pc, #220]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f023 0203 	bic.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4934      	ldr	r1, [pc, #208]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe f8ae 	bl	8000d08 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb0:	f7fe f8aa 	bl	8000d08 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e04f      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 020c 	and.w	r2, r3, #12
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d1eb      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b25      	ldr	r3, [pc, #148]	@ (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d20c      	bcs.n	8002c00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b22      	ldr	r3, [pc, #136]	@ (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e032      	b.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0c:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4916      	ldr	r1, [pc, #88]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2a:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	490e      	ldr	r1, [pc, #56]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c3e:	f000 f821 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002c42:	4602      	mov	r2, r0
 8002c44:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	490a      	ldr	r1, [pc, #40]	@ (8002c78 <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	5ccb      	ldrb	r3, [r1, r3]
 8002c52:	fa22 f303 	lsr.w	r3, r2, r3
 8002c56:	4a09      	ldr	r2, [pc, #36]	@ (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c5a:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe f80e 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023c00 	.word	0x40023c00
 8002c74:	40023800 	.word	0x40023800
 8002c78:	08010540 	.word	0x08010540
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	20000004 	.word	0x20000004

08002c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c88:	b090      	sub	sp, #64	@ 0x40
 8002c8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c9c:	4b59      	ldr	r3, [pc, #356]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	f200 80a1 	bhi.w	8002df0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002cb6:	e09b      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4b53      	ldr	r3, [pc, #332]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cbc:	e09b      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cbe:	4b53      	ldr	r3, [pc, #332]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cc2:	e098      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ccc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cce:	4b4d      	ldr	r3, [pc, #308]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d028      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cda:	4b4a      	ldr	r3, [pc, #296]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	099b      	lsrs	r3, r3, #6
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	623b      	str	r3, [r7, #32]
 8002ce4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cec:	2100      	movs	r1, #0
 8002cee:	4b47      	ldr	r3, [pc, #284]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002cf0:	fb03 f201 	mul.w	r2, r3, r1
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	fb00 f303 	mul.w	r3, r0, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	4a43      	ldr	r2, [pc, #268]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002cfe:	fba0 1202 	umull	r1, r2, r0, r2
 8002d02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d04:	460a      	mov	r2, r1
 8002d06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d0a:	4413      	add	r3, r2
 8002d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d10:	2200      	movs	r2, #0
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	61fa      	str	r2, [r7, #28]
 8002d16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d1e:	f7fd fab7 	bl	8000290 <__aeabi_uldivmod>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4613      	mov	r3, r2
 8002d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d2a:	e053      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2c:	4b35      	ldr	r3, [pc, #212]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	099b      	lsrs	r3, r3, #6
 8002d32:	2200      	movs	r2, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	617a      	str	r2, [r7, #20]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d3e:	f04f 0b00 	mov.w	fp, #0
 8002d42:	4652      	mov	r2, sl
 8002d44:	465b      	mov	r3, fp
 8002d46:	f04f 0000 	mov.w	r0, #0
 8002d4a:	f04f 0100 	mov.w	r1, #0
 8002d4e:	0159      	lsls	r1, r3, #5
 8002d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d54:	0150      	lsls	r0, r2, #5
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d5e:	eb63 090b 	sbc.w	r9, r3, fp
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d76:	ebb2 0408 	subs.w	r4, r2, r8
 8002d7a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	00eb      	lsls	r3, r5, #3
 8002d88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8c:	00e2      	lsls	r2, r4, #3
 8002d8e:	4614      	mov	r4, r2
 8002d90:	461d      	mov	r5, r3
 8002d92:	eb14 030a 	adds.w	r3, r4, sl
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	eb45 030b 	adc.w	r3, r5, fp
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002daa:	4629      	mov	r1, r5
 8002dac:	028b      	lsls	r3, r1, #10
 8002dae:	4621      	mov	r1, r4
 8002db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db4:	4621      	mov	r1, r4
 8002db6:	028a      	lsls	r2, r1, #10
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	60fa      	str	r2, [r7, #12]
 8002dc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dc8:	f7fd fa62 	bl	8000290 <__aeabi_uldivmod>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	3301      	adds	r3, #1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002de4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dee:	e002      	b.n	8002df6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002df2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3740      	adds	r7, #64	@ 0x40
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	00f42400 	.word	0x00f42400
 8002e0c:	017d7840 	.word	0x017d7840

08002e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e14:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000000 	.word	0x20000000

08002e28 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8002e2e:	4b87      	ldr	r3, [pc, #540]	@ (800304c <MX_LWIP_Init+0x224>)
 8002e30:	22a9      	movs	r2, #169	@ 0xa9
 8002e32:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8002e34:	4b85      	ldr	r3, [pc, #532]	@ (800304c <MX_LWIP_Init+0x224>)
 8002e36:	22fe      	movs	r2, #254	@ 0xfe
 8002e38:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 243;
 8002e3a:	4b84      	ldr	r3, [pc, #528]	@ (800304c <MX_LWIP_Init+0x224>)
 8002e3c:	22f3      	movs	r2, #243	@ 0xf3
 8002e3e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8002e40:	4b82      	ldr	r3, [pc, #520]	@ (800304c <MX_LWIP_Init+0x224>)
 8002e42:	2202      	movs	r2, #2
 8002e44:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002e46:	4b82      	ldr	r3, [pc, #520]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002e48:	22ff      	movs	r2, #255	@ 0xff
 8002e4a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002e4c:	4b80      	ldr	r3, [pc, #512]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002e4e:	22ff      	movs	r2, #255	@ 0xff
 8002e50:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002e52:	4b7f      	ldr	r3, [pc, #508]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002e54:	22ff      	movs	r2, #255	@ 0xff
 8002e56:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002e58:	4b7d      	ldr	r3, [pc, #500]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002e5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002e60:	22c0      	movs	r2, #192	@ 0xc0
 8002e62:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002e64:	4b7b      	ldr	r3, [pc, #492]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002e66:	22a8      	movs	r2, #168	@ 0xa8
 8002e68:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 249;
 8002e6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002e6c:	22f9      	movs	r2, #249	@ 0xf9
 8002e6e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002e70:	4b78      	ldr	r3, [pc, #480]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8002e76:	f000 fcf9 	bl	800386c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002e7a:	4b74      	ldr	r3, [pc, #464]	@ (800304c <MX_LWIP_Init+0x224>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	061a      	lsls	r2, r3, #24
 8002e80:	4b72      	ldr	r3, [pc, #456]	@ (800304c <MX_LWIP_Init+0x224>)
 8002e82:	785b      	ldrb	r3, [r3, #1]
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	431a      	orrs	r2, r3
 8002e88:	4b70      	ldr	r3, [pc, #448]	@ (800304c <MX_LWIP_Init+0x224>)
 8002e8a:	789b      	ldrb	r3, [r3, #2]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	4a6e      	ldr	r2, [pc, #440]	@ (800304c <MX_LWIP_Init+0x224>)
 8002e92:	78d2      	ldrb	r2, [r2, #3]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	061a      	lsls	r2, r3, #24
 8002e98:	4b6c      	ldr	r3, [pc, #432]	@ (800304c <MX_LWIP_Init+0x224>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	0619      	lsls	r1, r3, #24
 8002e9e:	4b6b      	ldr	r3, [pc, #428]	@ (800304c <MX_LWIP_Init+0x224>)
 8002ea0:	785b      	ldrb	r3, [r3, #1]
 8002ea2:	041b      	lsls	r3, r3, #16
 8002ea4:	4319      	orrs	r1, r3
 8002ea6:	4b69      	ldr	r3, [pc, #420]	@ (800304c <MX_LWIP_Init+0x224>)
 8002ea8:	789b      	ldrb	r3, [r3, #2]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	430b      	orrs	r3, r1
 8002eae:	4967      	ldr	r1, [pc, #412]	@ (800304c <MX_LWIP_Init+0x224>)
 8002eb0:	78c9      	ldrb	r1, [r1, #3]
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	4b63      	ldr	r3, [pc, #396]	@ (800304c <MX_LWIP_Init+0x224>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	0619      	lsls	r1, r3, #24
 8002ec2:	4b62      	ldr	r3, [pc, #392]	@ (800304c <MX_LWIP_Init+0x224>)
 8002ec4:	785b      	ldrb	r3, [r3, #1]
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	4319      	orrs	r1, r3
 8002eca:	4b60      	ldr	r3, [pc, #384]	@ (800304c <MX_LWIP_Init+0x224>)
 8002ecc:	789b      	ldrb	r3, [r3, #2]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	495e      	ldr	r1, [pc, #376]	@ (800304c <MX_LWIP_Init+0x224>)
 8002ed4:	78c9      	ldrb	r1, [r1, #3]
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	4b5a      	ldr	r3, [pc, #360]	@ (800304c <MX_LWIP_Init+0x224>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	0619      	lsls	r1, r3, #24
 8002ee6:	4b59      	ldr	r3, [pc, #356]	@ (800304c <MX_LWIP_Init+0x224>)
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	041b      	lsls	r3, r3, #16
 8002eec:	4319      	orrs	r1, r3
 8002eee:	4b57      	ldr	r3, [pc, #348]	@ (800304c <MX_LWIP_Init+0x224>)
 8002ef0:	789b      	ldrb	r3, [r3, #2]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	4955      	ldr	r1, [pc, #340]	@ (800304c <MX_LWIP_Init+0x224>)
 8002ef8:	78c9      	ldrb	r1, [r1, #3]
 8002efa:	430b      	orrs	r3, r1
 8002efc:	0e1b      	lsrs	r3, r3, #24
 8002efe:	4313      	orrs	r3, r2
 8002f00:	4a55      	ldr	r2, [pc, #340]	@ (8003058 <MX_LWIP_Init+0x230>)
 8002f02:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002f04:	4b52      	ldr	r3, [pc, #328]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	061a      	lsls	r2, r3, #24
 8002f0a:	4b51      	ldr	r3, [pc, #324]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f0c:	785b      	ldrb	r3, [r3, #1]
 8002f0e:	041b      	lsls	r3, r3, #16
 8002f10:	431a      	orrs	r2, r3
 8002f12:	4b4f      	ldr	r3, [pc, #316]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f14:	789b      	ldrb	r3, [r3, #2]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	4a4d      	ldr	r2, [pc, #308]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f1c:	78d2      	ldrb	r2, [r2, #3]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	061a      	lsls	r2, r3, #24
 8002f22:	4b4b      	ldr	r3, [pc, #300]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	0619      	lsls	r1, r3, #24
 8002f28:	4b49      	ldr	r3, [pc, #292]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f2a:	785b      	ldrb	r3, [r3, #1]
 8002f2c:	041b      	lsls	r3, r3, #16
 8002f2e:	4319      	orrs	r1, r3
 8002f30:	4b47      	ldr	r3, [pc, #284]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f32:	789b      	ldrb	r3, [r3, #2]
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	430b      	orrs	r3, r1
 8002f38:	4945      	ldr	r1, [pc, #276]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f3a:	78c9      	ldrb	r1, [r1, #3]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002f44:	431a      	orrs	r2, r3
 8002f46:	4b42      	ldr	r3, [pc, #264]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	0619      	lsls	r1, r3, #24
 8002f4c:	4b40      	ldr	r3, [pc, #256]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	041b      	lsls	r3, r3, #16
 8002f52:	4319      	orrs	r1, r3
 8002f54:	4b3e      	ldr	r3, [pc, #248]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f56:	789b      	ldrb	r3, [r3, #2]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	493c      	ldr	r1, [pc, #240]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f5e:	78c9      	ldrb	r1, [r1, #3]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	4b39      	ldr	r3, [pc, #228]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	0619      	lsls	r1, r3, #24
 8002f70:	4b37      	ldr	r3, [pc, #220]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f72:	785b      	ldrb	r3, [r3, #1]
 8002f74:	041b      	lsls	r3, r3, #16
 8002f76:	4319      	orrs	r1, r3
 8002f78:	4b35      	ldr	r3, [pc, #212]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f7a:	789b      	ldrb	r3, [r3, #2]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	4933      	ldr	r1, [pc, #204]	@ (8003050 <MX_LWIP_Init+0x228>)
 8002f82:	78c9      	ldrb	r1, [r1, #3]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	0e1b      	lsrs	r3, r3, #24
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	4a34      	ldr	r2, [pc, #208]	@ (800305c <MX_LWIP_Init+0x234>)
 8002f8c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002f8e:	4b31      	ldr	r3, [pc, #196]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	061a      	lsls	r2, r3, #24
 8002f94:	4b2f      	ldr	r3, [pc, #188]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002f96:	785b      	ldrb	r3, [r3, #1]
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002f9e:	789b      	ldrb	r3, [r3, #2]
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002fa6:	78d2      	ldrb	r2, [r2, #3]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	061a      	lsls	r2, r3, #24
 8002fac:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	0619      	lsls	r1, r3, #24
 8002fb2:	4b28      	ldr	r3, [pc, #160]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002fb4:	785b      	ldrb	r3, [r3, #1]
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	4319      	orrs	r1, r3
 8002fba:	4b26      	ldr	r3, [pc, #152]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002fbc:	789b      	ldrb	r3, [r3, #2]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	4924      	ldr	r1, [pc, #144]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002fc4:	78c9      	ldrb	r1, [r1, #3]
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	4b20      	ldr	r3, [pc, #128]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	0619      	lsls	r1, r3, #24
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002fd8:	785b      	ldrb	r3, [r3, #1]
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	4319      	orrs	r1, r3
 8002fde:	4b1d      	ldr	r3, [pc, #116]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002fe0:	789b      	ldrb	r3, [r3, #2]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	491b      	ldr	r1, [pc, #108]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002fe8:	78c9      	ldrb	r1, [r1, #3]
 8002fea:	430b      	orrs	r3, r1
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	4b17      	ldr	r3, [pc, #92]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	0619      	lsls	r1, r3, #24
 8002ffa:	4b16      	ldr	r3, [pc, #88]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8002ffc:	785b      	ldrb	r3, [r3, #1]
 8002ffe:	041b      	lsls	r3, r3, #16
 8003000:	4319      	orrs	r1, r3
 8003002:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <MX_LWIP_Init+0x22c>)
 8003004:	789b      	ldrb	r3, [r3, #2]
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	430b      	orrs	r3, r1
 800300a:	4912      	ldr	r1, [pc, #72]	@ (8003054 <MX_LWIP_Init+0x22c>)
 800300c:	78c9      	ldrb	r1, [r1, #3]
 800300e:	430b      	orrs	r3, r1
 8003010:	0e1b      	lsrs	r3, r3, #24
 8003012:	4313      	orrs	r3, r2
 8003014:	4a12      	ldr	r2, [pc, #72]	@ (8003060 <MX_LWIP_Init+0x238>)
 8003016:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003018:	4b12      	ldr	r3, [pc, #72]	@ (8003064 <MX_LWIP_Init+0x23c>)
 800301a:	9302      	str	r3, [sp, #8]
 800301c:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <MX_LWIP_Init+0x240>)
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	2300      	movs	r3, #0
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	4b0e      	ldr	r3, [pc, #56]	@ (8003060 <MX_LWIP_Init+0x238>)
 8003026:	4a0d      	ldr	r2, [pc, #52]	@ (800305c <MX_LWIP_Init+0x234>)
 8003028:	490b      	ldr	r1, [pc, #44]	@ (8003058 <MX_LWIP_Init+0x230>)
 800302a:	4810      	ldr	r0, [pc, #64]	@ (800306c <MX_LWIP_Init+0x244>)
 800302c:	f001 f908 	bl	8004240 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003030:	480e      	ldr	r0, [pc, #56]	@ (800306c <MX_LWIP_Init+0x244>)
 8003032:	f001 fab3 	bl	800459c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003036:	480d      	ldr	r0, [pc, #52]	@ (800306c <MX_LWIP_Init+0x244>)
 8003038:	f001 fac0 	bl	80045bc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800303c:	490c      	ldr	r1, [pc, #48]	@ (8003070 <MX_LWIP_Init+0x248>)
 800303e:	480b      	ldr	r0, [pc, #44]	@ (800306c <MX_LWIP_Init+0x244>)
 8003040:	f001 fbbe 	bl	80047c0 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200000ec 	.word	0x200000ec
 8003050:	200000f0 	.word	0x200000f0
 8003054:	200000f4 	.word	0x200000f4
 8003058:	200000e0 	.word	0x200000e0
 800305c:	200000e4 	.word	0x200000e4
 8003060:	200000e8 	.word	0x200000e8
 8003064:	0800cced 	.word	0x0800cced
 8003068:	08003391 	.word	0x08003391
 800306c:	200000ac 	.word	0x200000ac
 8003070:	080030c5 	.word	0x080030c5

08003074 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800307c:	f7fd fe44 	bl	8000d08 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	4b08      	ldr	r3, [pc, #32]	@ (80030a4 <Ethernet_Link_Periodic_Handle+0x30>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b63      	cmp	r3, #99	@ 0x63
 800308a:	d907      	bls.n	800309c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800308c:	f7fd fe3c 	bl	8000d08 <HAL_GetTick>
 8003090:	4603      	mov	r3, r0
 8003092:	4a04      	ldr	r2, [pc, #16]	@ (80030a4 <Ethernet_Link_Periodic_Handle+0x30>)
 8003094:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fabe 	bl	8003618 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	200000a8 	.word	0x200000a8

080030a8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80030ac:	4804      	ldr	r0, [pc, #16]	@ (80030c0 <MX_LWIP_Process+0x18>)
 80030ae:	f000 f94f 	bl	8003350 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80030b2:	f007 fbf3 	bl	800a89c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80030b6:	4802      	ldr	r0, [pc, #8]	@ (80030c0 <MX_LWIP_Process+0x18>)
 80030b8:	f7ff ffdc 	bl	8003074 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	200000ac 	.word	0x200000ac

080030c4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80030e4:	4b44      	ldr	r3, [pc, #272]	@ (80031f8 <low_level_init+0x120>)
 80030e6:	4a45      	ldr	r2, [pc, #276]	@ (80031fc <low_level_init+0x124>)
 80030e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80030ea:	2300      	movs	r3, #0
 80030ec:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80030ee:	2380      	movs	r3, #128	@ 0x80
 80030f0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80030f2:	23e1      	movs	r3, #225	@ 0xe1
 80030f4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80030f6:	2300      	movs	r3, #0
 80030f8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80030fa:	2300      	movs	r3, #0
 80030fc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80030fe:	2300      	movs	r3, #0
 8003100:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003102:	4a3d      	ldr	r2, [pc, #244]	@ (80031f8 <low_level_init+0x120>)
 8003104:	f107 0308 	add.w	r3, r7, #8
 8003108:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800310a:	4b3b      	ldr	r3, [pc, #236]	@ (80031f8 <low_level_init+0x120>)
 800310c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003110:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003112:	4b39      	ldr	r3, [pc, #228]	@ (80031f8 <low_level_init+0x120>)
 8003114:	4a3a      	ldr	r2, [pc, #232]	@ (8003200 <low_level_init+0x128>)
 8003116:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003118:	4b37      	ldr	r3, [pc, #220]	@ (80031f8 <low_level_init+0x120>)
 800311a:	4a3a      	ldr	r2, [pc, #232]	@ (8003204 <low_level_init+0x12c>)
 800311c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800311e:	4b36      	ldr	r3, [pc, #216]	@ (80031f8 <low_level_init+0x120>)
 8003120:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003124:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003126:	4834      	ldr	r0, [pc, #208]	@ (80031f8 <low_level_init+0x120>)
 8003128:	f7fd ff04 	bl	8000f34 <HAL_ETH_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003130:	2238      	movs	r2, #56	@ 0x38
 8003132:	2100      	movs	r1, #0
 8003134:	4834      	ldr	r0, [pc, #208]	@ (8003208 <low_level_init+0x130>)
 8003136:	f00a f814 	bl	800d162 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800313a:	4b33      	ldr	r3, [pc, #204]	@ (8003208 <low_level_init+0x130>)
 800313c:	2221      	movs	r2, #33	@ 0x21
 800313e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003140:	4b31      	ldr	r3, [pc, #196]	@ (8003208 <low_level_init+0x130>)
 8003142:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003146:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003148:	4b2f      	ldr	r3, [pc, #188]	@ (8003208 <low_level_init+0x130>)
 800314a:	2200      	movs	r2, #0
 800314c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800314e:	482f      	ldr	r0, [pc, #188]	@ (800320c <low_level_init+0x134>)
 8003150:	f000 ff3e 	bl	8003fd0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2206      	movs	r2, #6
 8003158:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800315c:	4b26      	ldr	r3, [pc, #152]	@ (80031f8 <low_level_init+0x120>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003168:	4b23      	ldr	r3, [pc, #140]	@ (80031f8 <low_level_init+0x120>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	785a      	ldrb	r2, [r3, #1]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003174:	4b20      	ldr	r3, [pc, #128]	@ (80031f8 <low_level_init+0x120>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	789a      	ldrb	r2, [r3, #2]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003180:	4b1d      	ldr	r3, [pc, #116]	@ (80031f8 <low_level_init+0x120>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	78da      	ldrb	r2, [r3, #3]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800318c:	4b1a      	ldr	r3, [pc, #104]	@ (80031f8 <low_level_init+0x120>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	791a      	ldrb	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003198:	4b17      	ldr	r3, [pc, #92]	@ (80031f8 <low_level_init+0x120>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	795a      	ldrb	r2, [r3, #5]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80031aa:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80031b2:	f043 030a 	orr.w	r3, r3, #10
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80031be:	4914      	ldr	r1, [pc, #80]	@ (8003210 <low_level_init+0x138>)
 80031c0:	4814      	ldr	r0, [pc, #80]	@ (8003214 <low_level_init+0x13c>)
 80031c2:	f7fd fc34 	bl	8000a2e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80031c6:	4813      	ldr	r0, [pc, #76]	@ (8003214 <low_level_init+0x13c>)
 80031c8:	f7fd fc63 	bl	8000a92 <LAN8742_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d006      	beq.n	80031e0 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f001 fac4 	bl	8004760 <netif_set_link_down>
    netif_set_down(netif);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f001 fa5b 	bl	8004694 <netif_set_down>
 80031de:	e008      	b.n	80031f2 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa16 	bl	8003618 <ethernet_link_check_state>
 80031ec:	e001      	b.n	80031f2 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 80031ee:	f7fd fabb 	bl	8000768 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20004bc4 	.word	0x20004bc4
 80031fc:	40028000 	.word	0x40028000
 8003200:	20004b24 	.word	0x20004b24
 8003204:	20004a84 	.word	0x20004a84
 8003208:	20004c74 	.word	0x20004c74
 800320c:	08010550 	.word	0x08010550
 8003210:	2000000c 	.word	0x2000000c
 8003214:	20004cac 	.word	0x20004cac

08003218 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b092      	sub	sp, #72	@ 0x48
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8003226:	2300      	movs	r3, #0
 8003228:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003230:	f107 030c 	add.w	r3, r7, #12
 8003234:	2230      	movs	r2, #48	@ 0x30
 8003236:	2100      	movs	r1, #0
 8003238:	4618      	mov	r0, r3
 800323a:	f009 ff92 	bl	800d162 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800323e:	f107 030c 	add.w	r3, r7, #12
 8003242:	2230      	movs	r2, #48	@ 0x30
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f009 ff8b 	bl	800d162 <memset>

  for(q = p; q != NULL; q = q->next)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003250:	e045      	b.n	80032de <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003254:	2b03      	cmp	r3, #3
 8003256:	d902      	bls.n	800325e <low_level_output+0x46>
      return ERR_IF;
 8003258:	f06f 030b 	mvn.w	r3, #11
 800325c:	e055      	b.n	800330a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800325e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003264:	4613      	mov	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	3348      	adds	r3, #72	@ 0x48
 800326e:	443b      	add	r3, r7
 8003270:	3b3c      	subs	r3, #60	@ 0x3c
 8003272:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003276:	895b      	ldrh	r3, [r3, #10]
 8003278:	4619      	mov	r1, r3
 800327a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	3348      	adds	r3, #72	@ 0x48
 8003286:	443b      	add	r3, r7
 8003288:	3b38      	subs	r3, #56	@ 0x38
 800328a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800328c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800328e:	2b00      	cmp	r3, #0
 8003290:	d011      	beq.n	80032b6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003294:	1e5a      	subs	r2, r3, #1
 8003296:	f107 000c 	add.w	r0, r7, #12
 800329a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800329c:	460b      	mov	r3, r1
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	440b      	add	r3, r1
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	18c1      	adds	r1, r0, r3
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	3348      	adds	r3, #72	@ 0x48
 80032b0:	443b      	add	r3, r7
 80032b2:	3b34      	subs	r3, #52	@ 0x34
 80032b4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80032b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80032be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032c0:	4613      	mov	r3, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	3348      	adds	r3, #72	@ 0x48
 80032ca:	443b      	add	r3, r7
 80032cc:	3b34      	subs	r3, #52	@ 0x34
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80032d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d4:	3301      	adds	r3, #1
 80032d6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80032d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80032de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1b6      	bne.n	8003252 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	891b      	ldrh	r3, [r3, #8]
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <low_level_output+0xfc>)
 80032ec:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80032ee:	4a09      	ldr	r2, [pc, #36]	@ (8003314 <low_level_output+0xfc>)
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80032f6:	4a07      	ldr	r2, [pc, #28]	@ (8003314 <low_level_output+0xfc>)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80032fc:	2214      	movs	r2, #20
 80032fe:	4905      	ldr	r1, [pc, #20]	@ (8003314 <low_level_output+0xfc>)
 8003300:	4805      	ldr	r0, [pc, #20]	@ (8003318 <low_level_output+0x100>)
 8003302:	f7fd ff6b 	bl	80011dc <HAL_ETH_Transmit>

  return errval;
 8003306:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800330a:	4618      	mov	r0, r3
 800330c:	3748      	adds	r7, #72	@ 0x48
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20004c74 	.word	0x20004c74
 8003318:	20004bc4 	.word	0x20004bc4

0800331c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003328:	4b07      	ldr	r3, [pc, #28]	@ (8003348 <low_level_input+0x2c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d105      	bne.n	800333c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	4619      	mov	r1, r3
 8003336:	4805      	ldr	r0, [pc, #20]	@ (800334c <low_level_input+0x30>)
 8003338:	f7fd ffe4 	bl	8001304 <HAL_ETH_ReadData>
  }

  return p;
 800333c:	68fb      	ldr	r3, [r7, #12]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20004a80 	.word	0x20004a80
 800334c:	20004bc4 	.word	0x20004bc4

08003350 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff ffdd 	bl	800331c <low_level_input>
 8003362:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	4798      	blx	r3
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f001 fda0 	bl	8004ec0 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ea      	bne.n	800335c <ethernetif_input+0xc>
}
 8003386:	bf00      	nop
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <ethernetif_init+0x1c>
 800339e:	4b0e      	ldr	r3, [pc, #56]	@ (80033d8 <ethernetif_init+0x48>)
 80033a0:	f240 126f 	movw	r2, #367	@ 0x16f
 80033a4:	490d      	ldr	r1, [pc, #52]	@ (80033dc <ethernetif_init+0x4c>)
 80033a6:	480e      	ldr	r0, [pc, #56]	@ (80033e0 <ethernetif_init+0x50>)
 80033a8:	f009 fe76 	bl	800d098 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2273      	movs	r2, #115	@ 0x73
 80033b0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2274      	movs	r2, #116	@ 0x74
 80033b8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a09      	ldr	r2, [pc, #36]	@ (80033e4 <ethernetif_init+0x54>)
 80033c0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a08      	ldr	r2, [pc, #32]	@ (80033e8 <ethernetif_init+0x58>)
 80033c6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fe85 	bl	80030d8 <low_level_init>

  return ERR_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	0800dec4 	.word	0x0800dec4
 80033dc:	0800dee0 	.word	0x0800dee0
 80033e0:	0800def0 	.word	0x0800def0
 80033e4:	0800b1b9 	.word	0x0800b1b9
 80033e8:	08003219 	.word	0x08003219

080033ec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80033f8:	68f9      	ldr	r1, [r7, #12]
 80033fa:	4807      	ldr	r0, [pc, #28]	@ (8003418 <pbuf_free_custom+0x2c>)
 80033fc:	f000 feca 	bl	8004194 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003400:	4b06      	ldr	r3, [pc, #24]	@ (800341c <pbuf_free_custom+0x30>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d102      	bne.n	800340e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <pbuf_free_custom+0x30>)
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]
  }
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	08010550 	.word	0x08010550
 800341c:	20004a80 	.word	0x20004a80

08003420 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003424:	f7fd fc70 	bl	8000d08 <HAL_GetTick>
 8003428:	4603      	mov	r3, r0
}
 800342a:	4618      	mov	r0, r3
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08e      	sub	sp, #56	@ 0x38
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a46      	ldr	r2, [pc, #280]	@ (8003568 <HAL_ETH_MspInit+0x138>)
 800344e:	4293      	cmp	r3, r2
 8003450:	f040 8085 	bne.w	800355e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003454:	2300      	movs	r3, #0
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	4b44      	ldr	r3, [pc, #272]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345c:	4a43      	ldr	r2, [pc, #268]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 800345e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003462:	6313      	str	r3, [r2, #48]	@ 0x30
 8003464:	4b41      	ldr	r3, [pc, #260]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346c:	623b      	str	r3, [r7, #32]
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	2300      	movs	r3, #0
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	4b3d      	ldr	r3, [pc, #244]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003478:	4a3c      	ldr	r2, [pc, #240]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 800347a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800347e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003480:	4b3a      	ldr	r3, [pc, #232]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	4b36      	ldr	r3, [pc, #216]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003494:	4a35      	ldr	r2, [pc, #212]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 8003496:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800349a:	6313      	str	r3, [r2, #48]	@ 0x30
 800349c:	4b33      	ldr	r3, [pc, #204]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 800349e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	4b2f      	ldr	r3, [pc, #188]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 80034ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b0:	4a2e      	ldr	r2, [pc, #184]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 80034b2:	f043 0304 	orr.w	r3, r3, #4
 80034b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b8:	4b2c      	ldr	r3, [pc, #176]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 80034ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	4b28      	ldr	r3, [pc, #160]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 80034ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034cc:	4a27      	ldr	r2, [pc, #156]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d4:	4b25      	ldr	r3, [pc, #148]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	4b21      	ldr	r3, [pc, #132]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e8:	4a20      	ldr	r2, [pc, #128]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 80034ea:	f043 0302 	orr.w	r3, r3, #2
 80034ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f0:	4b1e      	ldr	r3, [pc, #120]	@ (800356c <HAL_ETH_MspInit+0x13c>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80034fc:	2332      	movs	r3, #50	@ 0x32
 80034fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003500:	2302      	movs	r3, #2
 8003502:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003508:	2303      	movs	r3, #3
 800350a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800350c:	230b      	movs	r3, #11
 800350e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003514:	4619      	mov	r1, r3
 8003516:	4816      	ldr	r0, [pc, #88]	@ (8003570 <HAL_ETH_MspInit+0x140>)
 8003518:	f7fe fe40 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800351c:	2386      	movs	r3, #134	@ 0x86
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003528:	2303      	movs	r3, #3
 800352a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800352c:	230b      	movs	r3, #11
 800352e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003534:	4619      	mov	r1, r3
 8003536:	480f      	ldr	r0, [pc, #60]	@ (8003574 <HAL_ETH_MspInit+0x144>)
 8003538:	f7fe fe30 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800353c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003542:	2302      	movs	r3, #2
 8003544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354a:	2303      	movs	r3, #3
 800354c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800354e:	230b      	movs	r3, #11
 8003550:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003556:	4619      	mov	r1, r3
 8003558:	4807      	ldr	r0, [pc, #28]	@ (8003578 <HAL_ETH_MspInit+0x148>)
 800355a:	f7fe fe1f 	bl	800219c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800355e:	bf00      	nop
 8003560:	3738      	adds	r7, #56	@ 0x38
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40028000 	.word	0x40028000
 800356c:	40023800 	.word	0x40023800
 8003570:	40020800 	.word	0x40020800
 8003574:	40020000 	.word	0x40020000
 8003578:	40020400 	.word	0x40020400

0800357c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003580:	4802      	ldr	r0, [pc, #8]	@ (800358c <ETH_PHY_IO_Init+0x10>)
 8003582:	f7fe f9a7 	bl	80018d4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20004bc4 	.word	0x20004bc4

08003590 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return 0;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	4807      	ldr	r0, [pc, #28]	@ (80035d0 <ETH_PHY_IO_ReadReg+0x30>)
 80035b4:	f7fd ffe9 	bl	800158a <HAL_ETH_ReadPHYRegister>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	e000      	b.n	80035c6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20004bc4 	.word	0x20004bc4

080035d4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	68f9      	ldr	r1, [r7, #12]
 80035e6:	4807      	ldr	r0, [pc, #28]	@ (8003604 <ETH_PHY_IO_WriteReg+0x30>)
 80035e8:	f7fe f81a 	bl	8001620 <HAL_ETH_WritePHYRegister>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	e000      	b.n	80035fa <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20004bc4 	.word	0x20004bc4

08003608 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800360c:	f7fd fb7c 	bl	8000d08 <HAL_GetTick>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b0a0      	sub	sp, #128	@ 0x80
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003620:	f107 030c 	add.w	r3, r7, #12
 8003624:	2264      	movs	r2, #100	@ 0x64
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f009 fd9a 	bl	800d162 <memset>
  int32_t PHYLinkState = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003636:	2300      	movs	r3, #0
 8003638:	67bb      	str	r3, [r7, #120]	@ 0x78
 800363a:	2300      	movs	r3, #0
 800363c:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800363e:	483a      	ldr	r0, [pc, #232]	@ (8003728 <ethernet_link_check_state+0x110>)
 8003640:	f7fd fa74 	bl	8000b2c <LAN8742_GetLinkState>
 8003644:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00c      	beq.n	8003672 <ethernet_link_check_state+0x5a>
 8003658:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800365a:	2b01      	cmp	r3, #1
 800365c:	dc09      	bgt.n	8003672 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800365e:	4833      	ldr	r0, [pc, #204]	@ (800372c <ethernet_link_check_state+0x114>)
 8003660:	f7fd fd63 	bl	800112a <HAL_ETH_Stop>
    netif_set_down(netif);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f001 f815 	bl	8004694 <netif_set_down>
    netif_set_link_down(netif);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f001 f878 	bl	8004760 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003670:	e055      	b.n	800371e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d14e      	bne.n	800371e <ethernet_link_check_state+0x106>
 8003680:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003682:	2b01      	cmp	r3, #1
 8003684:	dd4b      	ble.n	800371e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003686:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003688:	3b02      	subs	r3, #2
 800368a:	2b03      	cmp	r3, #3
 800368c:	d82a      	bhi.n	80036e4 <ethernet_link_check_state+0xcc>
 800368e:	a201      	add	r2, pc, #4	@ (adr r2, 8003694 <ethernet_link_check_state+0x7c>)
 8003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003694:	080036a5 	.word	0x080036a5
 8003698:	080036b7 	.word	0x080036b7
 800369c:	080036c7 	.word	0x080036c7
 80036a0:	080036d7 	.word	0x080036d7
      duplex = ETH_FULLDUPLEX_MODE;
 80036a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036a8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80036aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036ae:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80036b0:	2301      	movs	r3, #1
 80036b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80036b4:	e017      	b.n	80036e6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80036ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036be:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80036c0:	2301      	movs	r3, #1
 80036c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80036c4:	e00f      	b.n	80036e6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80036c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036ca:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80036cc:	2300      	movs	r3, #0
 80036ce:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80036d0:	2301      	movs	r3, #1
 80036d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80036d4:	e007      	b.n	80036e6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80036da:	2300      	movs	r3, #0
 80036dc:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80036de:	2301      	movs	r3, #1
 80036e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80036e2:	e000      	b.n	80036e6 <ethernet_link_check_state+0xce>
      break;
 80036e4:	bf00      	nop
    if(linkchanged)
 80036e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d018      	beq.n	800371e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80036ec:	f107 030c 	add.w	r3, r7, #12
 80036f0:	4619      	mov	r1, r3
 80036f2:	480e      	ldr	r0, [pc, #56]	@ (800372c <ethernet_link_check_state+0x114>)
 80036f4:	f7fd ffdd 	bl	80016b2 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80036f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80036fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036fe:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003700:	f107 030c 	add.w	r3, r7, #12
 8003704:	4619      	mov	r1, r3
 8003706:	4809      	ldr	r0, [pc, #36]	@ (800372c <ethernet_link_check_state+0x114>)
 8003708:	f7fe f8ca 	bl	80018a0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800370c:	4807      	ldr	r0, [pc, #28]	@ (800372c <ethernet_link_check_state+0x114>)
 800370e:	f7fd fcad 	bl	800106c <HAL_ETH_Start>
      netif_set_up(netif);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 ff52 	bl	80045bc <netif_set_up>
      netif_set_link_up(netif);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 ffed 	bl	80046f8 <netif_set_link_up>
}
 800371e:	bf00      	nop
 8003720:	3780      	adds	r7, #128	@ 0x80
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20004cac 	.word	0x20004cac
 800372c:	20004bc4 	.word	0x20004bc4

08003730 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af02      	add	r7, sp, #8
 8003736:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003738:	4812      	ldr	r0, [pc, #72]	@ (8003784 <HAL_ETH_RxAllocateCallback+0x54>)
 800373a:	f000 fcbd 	bl	80040b8 <memp_malloc_pool>
 800373e:	60f8      	str	r0, [r7, #12]
  if (p)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d014      	beq.n	8003770 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f103 0220 	add.w	r2, r3, #32
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a0d      	ldr	r2, [pc, #52]	@ (8003788 <HAL_ETH_RxAllocateCallback+0x58>)
 8003754:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800375e:	9201      	str	r2, [sp, #4]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2241      	movs	r2, #65	@ 0x41
 8003766:	2100      	movs	r1, #0
 8003768:	2000      	movs	r0, #0
 800376a:	f001 f9ef 	bl	8004b4c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800376e:	e005      	b.n	800377c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003770:	4b06      	ldr	r3, [pc, #24]	@ (800378c <HAL_ETH_RxAllocateCallback+0x5c>)
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	08010550 	.word	0x08010550
 8003788:	080033ed 	.word	0x080033ed
 800378c:	20004a80 	.word	0x20004a80

08003790 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	@ 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3b20      	subs	r3, #32
 80037ae:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	2200      	movs	r2, #0
 80037ba:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	887a      	ldrh	r2, [r7, #2]
 80037c0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e003      	b.n	80037da <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e009      	b.n	80037fc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	891a      	ldrh	r2, [r3, #8]
 80037ec:	887b      	ldrh	r3, [r7, #2]
 80037ee:	4413      	add	r3, r2
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f2      	bne.n	80037e8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003802:	bf00      	nop
 8003804:	bf00      	nop
 8003806:	3724      	adds	r7, #36	@ 0x24
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	b21a      	sxth	r2, r3
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	b29b      	uxth	r3, r3
 8003826:	b21b      	sxth	r3, r3
 8003828:	4313      	orrs	r3, r2
 800382a:	b21b      	sxth	r3, r3
 800382c:	b29b      	uxth	r3, r3
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	061a      	lsls	r2, r3, #24
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	0e1b      	lsrs	r3, r3, #24
 800385e:	4313      	orrs	r3, r2
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003876:	f000 f8d3 	bl	8003a20 <mem_init>
  memp_init();
 800387a:	f000 fbd9 	bl	8004030 <memp_init>
  pbuf_init();
  netif_init();
 800387e:	f000 fcd7 	bl	8004230 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003882:	f001 fdab 	bl	80053dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003886:	f006 ffc1 	bl	800a80c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800389e:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <ptr_to_mem+0x20>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	4413      	add	r3, r2
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20005338 	.word	0x20005338

080038b8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80038c0:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <mem_to_ptr+0x20>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	b29b      	uxth	r3, r3
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20005338 	.word	0x20005338

080038dc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80038e4:	4b45      	ldr	r3, [pc, #276]	@ (80039fc <plug_holes+0x120>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d206      	bcs.n	80038fc <plug_holes+0x20>
 80038ee:	4b44      	ldr	r3, [pc, #272]	@ (8003a00 <plug_holes+0x124>)
 80038f0:	f240 12df 	movw	r2, #479	@ 0x1df
 80038f4:	4943      	ldr	r1, [pc, #268]	@ (8003a04 <plug_holes+0x128>)
 80038f6:	4844      	ldr	r0, [pc, #272]	@ (8003a08 <plug_holes+0x12c>)
 80038f8:	f009 fbce 	bl	800d098 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80038fc:	4b43      	ldr	r3, [pc, #268]	@ (8003a0c <plug_holes+0x130>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	429a      	cmp	r2, r3
 8003904:	d306      	bcc.n	8003914 <plug_holes+0x38>
 8003906:	4b3e      	ldr	r3, [pc, #248]	@ (8003a00 <plug_holes+0x124>)
 8003908:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800390c:	4940      	ldr	r1, [pc, #256]	@ (8003a10 <plug_holes+0x134>)
 800390e:	483e      	ldr	r0, [pc, #248]	@ (8003a08 <plug_holes+0x12c>)
 8003910:	f009 fbc2 	bl	800d098 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	791b      	ldrb	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d006      	beq.n	800392a <plug_holes+0x4e>
 800391c:	4b38      	ldr	r3, [pc, #224]	@ (8003a00 <plug_holes+0x124>)
 800391e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8003922:	493c      	ldr	r1, [pc, #240]	@ (8003a14 <plug_holes+0x138>)
 8003924:	4838      	ldr	r0, [pc, #224]	@ (8003a08 <plug_holes+0x12c>)
 8003926:	f009 fbb7 	bl	800d098 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003932:	d906      	bls.n	8003942 <plug_holes+0x66>
 8003934:	4b32      	ldr	r3, [pc, #200]	@ (8003a00 <plug_holes+0x124>)
 8003936:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800393a:	4937      	ldr	r1, [pc, #220]	@ (8003a18 <plug_holes+0x13c>)
 800393c:	4832      	ldr	r0, [pc, #200]	@ (8003a08 <plug_holes+0x12c>)
 800393e:	f009 fbab 	bl	800d098 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ffa4 	bl	8003894 <ptr_to_mem>
 800394c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	429a      	cmp	r2, r3
 8003954:	d024      	beq.n	80039a0 <plug_holes+0xc4>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	791b      	ldrb	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d120      	bne.n	80039a0 <plug_holes+0xc4>
 800395e:	4b2b      	ldr	r3, [pc, #172]	@ (8003a0c <plug_holes+0x130>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	429a      	cmp	r2, r3
 8003966:	d01b      	beq.n	80039a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003968:	4b2c      	ldr	r3, [pc, #176]	@ (8003a1c <plug_holes+0x140>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	429a      	cmp	r2, r3
 8003970:	d102      	bne.n	8003978 <plug_holes+0x9c>
      lfree = mem;
 8003972:	4a2a      	ldr	r2, [pc, #168]	@ (8003a1c <plug_holes+0x140>)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003988:	d00a      	beq.n	80039a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff ff80 	bl	8003894 <ptr_to_mem>
 8003994:	4604      	mov	r4, r0
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff ff8e 	bl	80038b8 <mem_to_ptr>
 800399c:	4603      	mov	r3, r0
 800399e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	885b      	ldrh	r3, [r3, #2]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff75 	bl	8003894 <ptr_to_mem>
 80039aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d01f      	beq.n	80039f4 <plug_holes+0x118>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	791b      	ldrb	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d11b      	bne.n	80039f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80039bc:	4b17      	ldr	r3, [pc, #92]	@ (8003a1c <plug_holes+0x140>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d102      	bne.n	80039cc <plug_holes+0xf0>
      lfree = pmem;
 80039c6:	4a15      	ldr	r2, [pc, #84]	@ (8003a1c <plug_holes+0x140>)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	881a      	ldrh	r2, [r3, #0]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80039dc:	d00a      	beq.n	80039f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff ff56 	bl	8003894 <ptr_to_mem>
 80039e8:	4604      	mov	r4, r0
 80039ea:	68b8      	ldr	r0, [r7, #8]
 80039ec:	f7ff ff64 	bl	80038b8 <mem_to_ptr>
 80039f0:	4603      	mov	r3, r0
 80039f2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd90      	pop	{r4, r7, pc}
 80039fc:	20005338 	.word	0x20005338
 8003a00:	0800df18 	.word	0x0800df18
 8003a04:	0800df48 	.word	0x0800df48
 8003a08:	0800df60 	.word	0x0800df60
 8003a0c:	2000533c 	.word	0x2000533c
 8003a10:	0800df88 	.word	0x0800df88
 8003a14:	0800dfa4 	.word	0x0800dfa4
 8003a18:	0800dfc0 	.word	0x0800dfc0
 8003a1c:	20005340 	.word	0x20005340

08003a20 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003a26:	4b18      	ldr	r3, [pc, #96]	@ (8003a88 <mem_init+0x68>)
 8003a28:	3303      	adds	r3, #3
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	4b16      	ldr	r3, [pc, #88]	@ (8003a8c <mem_init+0x6c>)
 8003a32:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003a34:	4b15      	ldr	r3, [pc, #84]	@ (8003a8c <mem_init+0x6c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003a40:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003a4e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8003a52:	f7ff ff1f 	bl	8003894 <ptr_to_mem>
 8003a56:	4603      	mov	r3, r0
 8003a58:	4a0d      	ldr	r2, [pc, #52]	@ (8003a90 <mem_init+0x70>)
 8003a5a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <mem_init+0x70>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2201      	movs	r2, #1
 8003a62:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003a64:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <mem_init+0x70>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003a6c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003a6e:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <mem_init+0x70>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003a76:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003a78:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <mem_init+0x6c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a05      	ldr	r2, [pc, #20]	@ (8003a94 <mem_init+0x74>)
 8003a7e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20004ce4 	.word	0x20004ce4
 8003a8c:	20005338 	.word	0x20005338
 8003a90:	2000533c 	.word	0x2000533c
 8003a94:	20005340 	.word	0x20005340

08003a98 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ff09 	bl	80038b8 <mem_to_ptr>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fef0 	bl	8003894 <ptr_to_mem>
 8003ab4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	885b      	ldrh	r3, [r3, #2]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff feea 	bl	8003894 <ptr_to_mem>
 8003ac0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003aca:	d818      	bhi.n	8003afe <mem_link_valid+0x66>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	885b      	ldrh	r3, [r3, #2]
 8003ad0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003ad4:	d813      	bhi.n	8003afe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003ada:	8afa      	ldrh	r2, [r7, #22]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d004      	beq.n	8003aea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	8afa      	ldrh	r2, [r7, #22]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d109      	bne.n	8003afe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003aea:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <mem_link_valid+0x74>)
 8003aec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d006      	beq.n	8003b02 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	885b      	ldrh	r3, [r3, #2]
 8003af8:	8afa      	ldrh	r2, [r7, #22]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d001      	beq.n	8003b02 <mem_link_valid+0x6a>
    return 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <mem_link_valid+0x6c>
  }
  return 1;
 8003b02:	2301      	movs	r3, #1
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	2000533c 	.word	0x2000533c

08003b10 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d04c      	beq.n	8003bb8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003b28:	4b25      	ldr	r3, [pc, #148]	@ (8003bc0 <mem_free+0xb0>)
 8003b2a:	f240 2273 	movw	r2, #627	@ 0x273
 8003b2e:	4925      	ldr	r1, [pc, #148]	@ (8003bc4 <mem_free+0xb4>)
 8003b30:	4825      	ldr	r0, [pc, #148]	@ (8003bc8 <mem_free+0xb8>)
 8003b32:	f009 fab1 	bl	800d098 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b36:	e040      	b.n	8003bba <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b08      	subs	r3, #8
 8003b3c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003b3e:	4b23      	ldr	r3, [pc, #140]	@ (8003bcc <mem_free+0xbc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d306      	bcc.n	8003b56 <mem_free+0x46>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f103 020c 	add.w	r2, r3, #12
 8003b4e:	4b20      	ldr	r3, [pc, #128]	@ (8003bd0 <mem_free+0xc0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d907      	bls.n	8003b66 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003b56:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc0 <mem_free+0xb0>)
 8003b58:	f240 227f 	movw	r2, #639	@ 0x27f
 8003b5c:	491d      	ldr	r1, [pc, #116]	@ (8003bd4 <mem_free+0xc4>)
 8003b5e:	481a      	ldr	r0, [pc, #104]	@ (8003bc8 <mem_free+0xb8>)
 8003b60:	f009 fa9a 	bl	800d098 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b64:	e029      	b.n	8003bba <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	791b      	ldrb	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d107      	bne.n	8003b7e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003b6e:	4b14      	ldr	r3, [pc, #80]	@ (8003bc0 <mem_free+0xb0>)
 8003b70:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8003b74:	4918      	ldr	r1, [pc, #96]	@ (8003bd8 <mem_free+0xc8>)
 8003b76:	4814      	ldr	r0, [pc, #80]	@ (8003bc8 <mem_free+0xb8>)
 8003b78:	f009 fa8e 	bl	800d098 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b7c:	e01d      	b.n	8003bba <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f7ff ff8a 	bl	8003a98 <mem_link_valid>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc0 <mem_free+0xb0>)
 8003b8c:	f240 2295 	movw	r2, #661	@ 0x295
 8003b90:	4912      	ldr	r1, [pc, #72]	@ (8003bdc <mem_free+0xcc>)
 8003b92:	480d      	ldr	r0, [pc, #52]	@ (8003bc8 <mem_free+0xb8>)
 8003b94:	f009 fa80 	bl	800d098 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003b98:	e00f      	b.n	8003bba <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8003be0 <mem_free+0xd0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d202      	bcs.n	8003bb0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003baa:	4a0d      	ldr	r2, [pc, #52]	@ (8003be0 <mem_free+0xd0>)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7ff fe93 	bl	80038dc <plug_holes>
 8003bb6:	e000      	b.n	8003bba <mem_free+0xaa>
    return;
 8003bb8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	0800df18 	.word	0x0800df18
 8003bc4:	0800dfec 	.word	0x0800dfec
 8003bc8:	0800df60 	.word	0x0800df60
 8003bcc:	20005338 	.word	0x20005338
 8003bd0:	2000533c 	.word	0x2000533c
 8003bd4:	0800e010 	.word	0x0800e010
 8003bd8:	0800e02c 	.word	0x0800e02c
 8003bdc:	0800e054 	.word	0x0800e054
 8003be0:	20005340 	.word	0x20005340

08003be4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003bf0:	887b      	ldrh	r3, [r7, #2]
 8003bf2:	3303      	adds	r3, #3
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003bfc:	8bfb      	ldrh	r3, [r7, #30]
 8003bfe:	2b0b      	cmp	r3, #11
 8003c00:	d801      	bhi.n	8003c06 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003c02:	230c      	movs	r3, #12
 8003c04:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003c06:	8bfb      	ldrh	r3, [r7, #30]
 8003c08:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003c0c:	d803      	bhi.n	8003c16 <mem_trim+0x32>
 8003c0e:	8bfa      	ldrh	r2, [r7, #30]
 8003c10:	887b      	ldrh	r3, [r7, #2]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d201      	bcs.n	8003c1a <mem_trim+0x36>
    return NULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e0cc      	b.n	8003db4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003c1a:	4b68      	ldr	r3, [pc, #416]	@ (8003dbc <mem_trim+0x1d8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d304      	bcc.n	8003c2e <mem_trim+0x4a>
 8003c24:	4b66      	ldr	r3, [pc, #408]	@ (8003dc0 <mem_trim+0x1dc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d306      	bcc.n	8003c3c <mem_trim+0x58>
 8003c2e:	4b65      	ldr	r3, [pc, #404]	@ (8003dc4 <mem_trim+0x1e0>)
 8003c30:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8003c34:	4964      	ldr	r1, [pc, #400]	@ (8003dc8 <mem_trim+0x1e4>)
 8003c36:	4865      	ldr	r0, [pc, #404]	@ (8003dcc <mem_trim+0x1e8>)
 8003c38:	f009 fa2e 	bl	800d098 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003c3c:	4b5f      	ldr	r3, [pc, #380]	@ (8003dbc <mem_trim+0x1d8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d304      	bcc.n	8003c50 <mem_trim+0x6c>
 8003c46:	4b5e      	ldr	r3, [pc, #376]	@ (8003dc0 <mem_trim+0x1dc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d301      	bcc.n	8003c54 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	e0af      	b.n	8003db4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3b08      	subs	r3, #8
 8003c58:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003c5a:	69b8      	ldr	r0, [r7, #24]
 8003c5c:	f7ff fe2c 	bl	80038b8 <mem_to_ptr>
 8003c60:	4603      	mov	r3, r0
 8003c62:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	881a      	ldrh	r2, [r3, #0]
 8003c68:	8afb      	ldrh	r3, [r7, #22]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b08      	subs	r3, #8
 8003c70:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003c72:	8bfa      	ldrh	r2, [r7, #30]
 8003c74:	8abb      	ldrh	r3, [r7, #20]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d906      	bls.n	8003c88 <mem_trim+0xa4>
 8003c7a:	4b52      	ldr	r3, [pc, #328]	@ (8003dc4 <mem_trim+0x1e0>)
 8003c7c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8003c80:	4953      	ldr	r1, [pc, #332]	@ (8003dd0 <mem_trim+0x1ec>)
 8003c82:	4852      	ldr	r0, [pc, #328]	@ (8003dcc <mem_trim+0x1e8>)
 8003c84:	f009 fa08 	bl	800d098 <iprintf>
  if (newsize > size) {
 8003c88:	8bfa      	ldrh	r2, [r7, #30]
 8003c8a:	8abb      	ldrh	r3, [r7, #20]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d901      	bls.n	8003c94 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e08f      	b.n	8003db4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003c94:	8bfa      	ldrh	r2, [r7, #30]
 8003c96:	8abb      	ldrh	r3, [r7, #20]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d101      	bne.n	8003ca0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	e089      	b.n	8003db4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fdf5 	bl	8003894 <ptr_to_mem>
 8003caa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	791b      	ldrb	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d13f      	bne.n	8003d34 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003cbc:	d106      	bne.n	8003ccc <mem_trim+0xe8>
 8003cbe:	4b41      	ldr	r3, [pc, #260]	@ (8003dc4 <mem_trim+0x1e0>)
 8003cc0:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8003cc4:	4943      	ldr	r1, [pc, #268]	@ (8003dd4 <mem_trim+0x1f0>)
 8003cc6:	4841      	ldr	r0, [pc, #260]	@ (8003dcc <mem_trim+0x1e8>)
 8003cc8:	f009 f9e6 	bl	800d098 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003cd2:	8afa      	ldrh	r2, [r7, #22]
 8003cd4:	8bfb      	ldrh	r3, [r7, #30]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3308      	adds	r3, #8
 8003cdc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003cde:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd8 <mem_trim+0x1f4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d106      	bne.n	8003cf6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003ce8:	89fb      	ldrh	r3, [r7, #14]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fdd2 	bl	8003894 <ptr_to_mem>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4a39      	ldr	r2, [pc, #228]	@ (8003dd8 <mem_trim+0x1f4>)
 8003cf4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003cf6:	89fb      	ldrh	r3, [r7, #14]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fdcb 	bl	8003894 <ptr_to_mem>
 8003cfe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2200      	movs	r2, #0
 8003d04:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	89ba      	ldrh	r2, [r7, #12]
 8003d0a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	8afa      	ldrh	r2, [r7, #22]
 8003d10:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	89fa      	ldrh	r2, [r7, #14]
 8003d16:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003d20:	d047      	beq.n	8003db2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff fdb4 	bl	8003894 <ptr_to_mem>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	89fb      	ldrh	r3, [r7, #14]
 8003d30:	8053      	strh	r3, [r2, #2]
 8003d32:	e03e      	b.n	8003db2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003d34:	8bfb      	ldrh	r3, [r7, #30]
 8003d36:	f103 0214 	add.w	r2, r3, #20
 8003d3a:	8abb      	ldrh	r3, [r7, #20]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d838      	bhi.n	8003db2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003d40:	8afa      	ldrh	r2, [r7, #22]
 8003d42:	8bfb      	ldrh	r3, [r7, #30]
 8003d44:	4413      	add	r3, r2
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3308      	adds	r3, #8
 8003d4a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003d54:	d106      	bne.n	8003d64 <mem_trim+0x180>
 8003d56:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc4 <mem_trim+0x1e0>)
 8003d58:	f240 3216 	movw	r2, #790	@ 0x316
 8003d5c:	491d      	ldr	r1, [pc, #116]	@ (8003dd4 <mem_trim+0x1f0>)
 8003d5e:	481b      	ldr	r0, [pc, #108]	@ (8003dcc <mem_trim+0x1e8>)
 8003d60:	f009 f99a 	bl	800d098 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003d64:	89fb      	ldrh	r3, [r7, #14]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fd94 	bl	8003894 <ptr_to_mem>
 8003d6c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd8 <mem_trim+0x1f4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d202      	bcs.n	8003d7e <mem_trim+0x19a>
      lfree = mem2;
 8003d78:	4a17      	ldr	r2, [pc, #92]	@ (8003dd8 <mem_trim+0x1f4>)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2200      	movs	r2, #0
 8003d82:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	881a      	ldrh	r2, [r3, #0]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	8afa      	ldrh	r2, [r7, #22]
 8003d90:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	89fa      	ldrh	r2, [r7, #14]
 8003d96:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003da0:	d007      	beq.n	8003db2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fd74 	bl	8003894 <ptr_to_mem>
 8003dac:	4602      	mov	r2, r0
 8003dae:	89fb      	ldrh	r3, [r7, #14]
 8003db0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003db2:	687b      	ldr	r3, [r7, #4]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20005338 	.word	0x20005338
 8003dc0:	2000533c 	.word	0x2000533c
 8003dc4:	0800df18 	.word	0x0800df18
 8003dc8:	0800e088 	.word	0x0800e088
 8003dcc:	0800df60 	.word	0x0800df60
 8003dd0:	0800e0a0 	.word	0x0800e0a0
 8003dd4:	0800e0c0 	.word	0x0800e0c0
 8003dd8:	20005340 	.word	0x20005340

08003ddc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <mem_malloc+0x14>
    return NULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	e0d9      	b.n	8003fa4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	3303      	adds	r3, #3
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f023 0303 	bic.w	r3, r3, #3
 8003dfa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003dfc:	8bbb      	ldrh	r3, [r7, #28]
 8003dfe:	2b0b      	cmp	r3, #11
 8003e00:	d801      	bhi.n	8003e06 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003e02:	230c      	movs	r3, #12
 8003e04:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003e06:	8bbb      	ldrh	r3, [r7, #28]
 8003e08:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003e0c:	d803      	bhi.n	8003e16 <mem_malloc+0x3a>
 8003e0e:	8bba      	ldrh	r2, [r7, #28]
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d201      	bcs.n	8003e1a <mem_malloc+0x3e>
    return NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e0c4      	b.n	8003fa4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003e1a:	4b64      	ldr	r3, [pc, #400]	@ (8003fac <mem_malloc+0x1d0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fd4a 	bl	80038b8 <mem_to_ptr>
 8003e24:	4603      	mov	r3, r0
 8003e26:	83fb      	strh	r3, [r7, #30]
 8003e28:	e0b4      	b.n	8003f94 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003e2a:	8bfb      	ldrh	r3, [r7, #30]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fd31 	bl	8003894 <ptr_to_mem>
 8003e32:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	791b      	ldrb	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f040 80a4 	bne.w	8003f86 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	8bfb      	ldrh	r3, [r7, #30]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f1a3 0208 	sub.w	r2, r3, #8
 8003e4c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	f0c0 8099 	bcc.w	8003f86 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	8bfb      	ldrh	r3, [r7, #30]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f1a3 0208 	sub.w	r2, r3, #8
 8003e62:	8bbb      	ldrh	r3, [r7, #28]
 8003e64:	3314      	adds	r3, #20
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d333      	bcc.n	8003ed2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003e6a:	8bfa      	ldrh	r2, [r7, #30]
 8003e6c:	8bbb      	ldrh	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3308      	adds	r3, #8
 8003e74:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003e76:	8a7b      	ldrh	r3, [r7, #18]
 8003e78:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003e7c:	d106      	bne.n	8003e8c <mem_malloc+0xb0>
 8003e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8003fb0 <mem_malloc+0x1d4>)
 8003e80:	f240 3287 	movw	r2, #903	@ 0x387
 8003e84:	494b      	ldr	r1, [pc, #300]	@ (8003fb4 <mem_malloc+0x1d8>)
 8003e86:	484c      	ldr	r0, [pc, #304]	@ (8003fb8 <mem_malloc+0x1dc>)
 8003e88:	f009 f906 	bl	800d098 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003e8c:	8a7b      	ldrh	r3, [r7, #18]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff fd00 	bl	8003894 <ptr_to_mem>
 8003e94:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	881a      	ldrh	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8bfa      	ldrh	r2, [r7, #30]
 8003ea8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	8a7a      	ldrh	r2, [r7, #18]
 8003eae:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003ebe:	d00b      	beq.n	8003ed8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fce5 	bl	8003894 <ptr_to_mem>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	8a7b      	ldrh	r3, [r7, #18]
 8003ece:	8053      	strh	r3, [r2, #2]
 8003ed0:	e002      	b.n	8003ed8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003ed8:	4b34      	ldr	r3, [pc, #208]	@ (8003fac <mem_malloc+0x1d0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d127      	bne.n	8003f32 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003ee2:	4b32      	ldr	r3, [pc, #200]	@ (8003fac <mem_malloc+0x1d0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003ee8:	e005      	b.n	8003ef6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff fcd0 	bl	8003894 <ptr_to_mem>
 8003ef4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	791b      	ldrb	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d004      	beq.n	8003f08 <mem_malloc+0x12c>
 8003efe:	4b2f      	ldr	r3, [pc, #188]	@ (8003fbc <mem_malloc+0x1e0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1f0      	bne.n	8003eea <mem_malloc+0x10e>
          }
          lfree = cur;
 8003f08:	4a28      	ldr	r2, [pc, #160]	@ (8003fac <mem_malloc+0x1d0>)
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003f0e:	4b27      	ldr	r3, [pc, #156]	@ (8003fac <mem_malloc+0x1d0>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4b2a      	ldr	r3, [pc, #168]	@ (8003fbc <mem_malloc+0x1e0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d00b      	beq.n	8003f32 <mem_malloc+0x156>
 8003f1a:	4b24      	ldr	r3, [pc, #144]	@ (8003fac <mem_malloc+0x1d0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	791b      	ldrb	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d006      	beq.n	8003f32 <mem_malloc+0x156>
 8003f24:	4b22      	ldr	r3, [pc, #136]	@ (8003fb0 <mem_malloc+0x1d4>)
 8003f26:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8003f2a:	4925      	ldr	r1, [pc, #148]	@ (8003fc0 <mem_malloc+0x1e4>)
 8003f2c:	4822      	ldr	r0, [pc, #136]	@ (8003fb8 <mem_malloc+0x1dc>)
 8003f2e:	f009 f8b3 	bl	800d098 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003f32:	8bba      	ldrh	r2, [r7, #28]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	4413      	add	r3, r2
 8003f38:	3308      	adds	r3, #8
 8003f3a:	4a20      	ldr	r2, [pc, #128]	@ (8003fbc <mem_malloc+0x1e0>)
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d906      	bls.n	8003f50 <mem_malloc+0x174>
 8003f42:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <mem_malloc+0x1d4>)
 8003f44:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8003f48:	491e      	ldr	r1, [pc, #120]	@ (8003fc4 <mem_malloc+0x1e8>)
 8003f4a:	481b      	ldr	r0, [pc, #108]	@ (8003fb8 <mem_malloc+0x1dc>)
 8003f4c:	f009 f8a4 	bl	800d098 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d006      	beq.n	8003f68 <mem_malloc+0x18c>
 8003f5a:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <mem_malloc+0x1d4>)
 8003f5c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8003f60:	4919      	ldr	r1, [pc, #100]	@ (8003fc8 <mem_malloc+0x1ec>)
 8003f62:	4815      	ldr	r0, [pc, #84]	@ (8003fb8 <mem_malloc+0x1dc>)
 8003f64:	f009 f898 	bl	800d098 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d006      	beq.n	8003f80 <mem_malloc+0x1a4>
 8003f72:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb0 <mem_malloc+0x1d4>)
 8003f74:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8003f78:	4914      	ldr	r1, [pc, #80]	@ (8003fcc <mem_malloc+0x1f0>)
 8003f7a:	480f      	ldr	r0, [pc, #60]	@ (8003fb8 <mem_malloc+0x1dc>)
 8003f7c:	f009 f88c 	bl	800d098 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	3308      	adds	r3, #8
 8003f84:	e00e      	b.n	8003fa4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8003f86:	8bfb      	ldrh	r3, [r7, #30]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fc83 	bl	8003894 <ptr_to_mem>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003f94:	8bfa      	ldrh	r2, [r7, #30]
 8003f96:	8bbb      	ldrh	r3, [r7, #28]
 8003f98:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	f4ff af44 	bcc.w	8003e2a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20005340 	.word	0x20005340
 8003fb0:	0800df18 	.word	0x0800df18
 8003fb4:	0800e0c0 	.word	0x0800e0c0
 8003fb8:	0800df60 	.word	0x0800df60
 8003fbc:	2000533c 	.word	0x2000533c
 8003fc0:	0800e0d4 	.word	0x0800e0d4
 8003fc4:	0800e0f0 	.word	0x0800e0f0
 8003fc8:	0800e120 	.word	0x0800e120
 8003fcc:	0800e150 	.word	0x0800e150

08003fd0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	3303      	adds	r3, #3
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e011      	b.n	8004016 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4413      	add	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3301      	adds	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	885b      	ldrh	r3, [r3, #2]
 800401a:	461a      	mov	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4293      	cmp	r3, r2
 8004020:	dbe7      	blt.n	8003ff2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004036:	2300      	movs	r3, #0
 8004038:	80fb      	strh	r3, [r7, #6]
 800403a:	e009      	b.n	8004050 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	4a08      	ldr	r2, [pc, #32]	@ (8004060 <memp_init+0x30>)
 8004040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ffc3 	bl	8003fd0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	3301      	adds	r3, #1
 800404e:	80fb      	strh	r3, [r7, #6]
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	2b07      	cmp	r3, #7
 8004054:	d9f2      	bls.n	800403c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	080105bc 	.word	0x080105bc

08004064 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d012      	beq.n	80040a0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d006      	beq.n	800409c <do_memp_malloc_pool+0x38>
 800408e:	4b07      	ldr	r3, [pc, #28]	@ (80040ac <do_memp_malloc_pool+0x48>)
 8004090:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8004094:	4906      	ldr	r1, [pc, #24]	@ (80040b0 <do_memp_malloc_pool+0x4c>)
 8004096:	4807      	ldr	r0, [pc, #28]	@ (80040b4 <do_memp_malloc_pool+0x50>)
 8004098:	f008 fffe 	bl	800d098 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	e000      	b.n	80040a2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	0800e174 	.word	0x0800e174
 80040b0:	0800e1a4 	.word	0x0800e1a4
 80040b4:	0800e1c8 	.word	0x0800e1c8

080040b8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <memp_malloc_pool+0x1c>
 80040c6:	4b0a      	ldr	r3, [pc, #40]	@ (80040f0 <memp_malloc_pool+0x38>)
 80040c8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80040cc:	4909      	ldr	r1, [pc, #36]	@ (80040f4 <memp_malloc_pool+0x3c>)
 80040ce:	480a      	ldr	r0, [pc, #40]	@ (80040f8 <memp_malloc_pool+0x40>)
 80040d0:	f008 ffe2 	bl	800d098 <iprintf>
  if (desc == NULL) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <memp_malloc_pool+0x26>
    return NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	e003      	b.n	80040e6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ffc0 	bl	8004064 <do_memp_malloc_pool>
 80040e4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	0800e174 	.word	0x0800e174
 80040f4:	0800e1f0 	.word	0x0800e1f0
 80040f8:	0800e1c8 	.word	0x0800e1c8

080040fc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	2b07      	cmp	r3, #7
 800410a:	d908      	bls.n	800411e <memp_malloc+0x22>
 800410c:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <memp_malloc+0x3c>)
 800410e:	f240 1257 	movw	r2, #343	@ 0x157
 8004112:	490a      	ldr	r1, [pc, #40]	@ (800413c <memp_malloc+0x40>)
 8004114:	480a      	ldr	r0, [pc, #40]	@ (8004140 <memp_malloc+0x44>)
 8004116:	f008 ffbf 	bl	800d098 <iprintf>
 800411a:	2300      	movs	r3, #0
 800411c:	e008      	b.n	8004130 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	4a08      	ldr	r2, [pc, #32]	@ (8004144 <memp_malloc+0x48>)
 8004122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff ff9c 	bl	8004064 <do_memp_malloc_pool>
 800412c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	0800e174 	.word	0x0800e174
 800413c:	0800e204 	.word	0x0800e204
 8004140:	0800e1c8 	.word	0x0800e1c8
 8004144:	080105bc 	.word	0x080105bc

08004148 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d006      	beq.n	800416a <do_memp_free_pool+0x22>
 800415c:	4b0a      	ldr	r3, [pc, #40]	@ (8004188 <do_memp_free_pool+0x40>)
 800415e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8004162:	490a      	ldr	r1, [pc, #40]	@ (800418c <do_memp_free_pool+0x44>)
 8004164:	480a      	ldr	r0, [pc, #40]	@ (8004190 <do_memp_free_pool+0x48>)
 8004166:	f008 ff97 	bl	800d098 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	0800e174 	.word	0x0800e174
 800418c:	0800e224 	.word	0x0800e224
 8004190:	0800e1c8 	.word	0x0800e1c8

08004194 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <memp_free_pool+0x1e>
 80041a4:	4b0a      	ldr	r3, [pc, #40]	@ (80041d0 <memp_free_pool+0x3c>)
 80041a6:	f240 1295 	movw	r2, #405	@ 0x195
 80041aa:	490a      	ldr	r1, [pc, #40]	@ (80041d4 <memp_free_pool+0x40>)
 80041ac:	480a      	ldr	r0, [pc, #40]	@ (80041d8 <memp_free_pool+0x44>)
 80041ae:	f008 ff73 	bl	800d098 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d007      	beq.n	80041c8 <memp_free_pool+0x34>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d004      	beq.n	80041c8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80041be:	6839      	ldr	r1, [r7, #0]
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ffc1 	bl	8004148 <do_memp_free_pool>
 80041c6:	e000      	b.n	80041ca <memp_free_pool+0x36>
    return;
 80041c8:	bf00      	nop
}
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	0800e174 	.word	0x0800e174
 80041d4:	0800e1f0 	.word	0x0800e1f0
 80041d8:	0800e1c8 	.word	0x0800e1c8

080041dc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	6039      	str	r1, [r7, #0]
 80041e6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	2b07      	cmp	r3, #7
 80041ec:	d907      	bls.n	80041fe <memp_free+0x22>
 80041ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <memp_free+0x44>)
 80041f0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80041f4:	490b      	ldr	r1, [pc, #44]	@ (8004224 <memp_free+0x48>)
 80041f6:	480c      	ldr	r0, [pc, #48]	@ (8004228 <memp_free+0x4c>)
 80041f8:	f008 ff4e 	bl	800d098 <iprintf>
 80041fc:	e00c      	b.n	8004218 <memp_free+0x3c>

  if (mem == NULL) {
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	4a09      	ldr	r2, [pc, #36]	@ (800422c <memp_free+0x50>)
 8004208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420c:	6839      	ldr	r1, [r7, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ff9a 	bl	8004148 <do_memp_free_pool>
 8004214:	e000      	b.n	8004218 <memp_free+0x3c>
    return;
 8004216:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	0800e174 	.word	0x0800e174
 8004224:	0800e244 	.word	0x0800e244
 8004228:	0800e1c8 	.word	0x0800e1c8
 800422c:	080105bc 	.word	0x080105bc

08004230 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
	...

08004240 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d108      	bne.n	8004266 <netif_add+0x26>
 8004254:	4b57      	ldr	r3, [pc, #348]	@ (80043b4 <netif_add+0x174>)
 8004256:	f240 1227 	movw	r2, #295	@ 0x127
 800425a:	4957      	ldr	r1, [pc, #348]	@ (80043b8 <netif_add+0x178>)
 800425c:	4857      	ldr	r0, [pc, #348]	@ (80043bc <netif_add+0x17c>)
 800425e:	f008 ff1b 	bl	800d098 <iprintf>
 8004262:	2300      	movs	r3, #0
 8004264:	e0a2      	b.n	80043ac <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	d108      	bne.n	800427e <netif_add+0x3e>
 800426c:	4b51      	ldr	r3, [pc, #324]	@ (80043b4 <netif_add+0x174>)
 800426e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8004272:	4953      	ldr	r1, [pc, #332]	@ (80043c0 <netif_add+0x180>)
 8004274:	4851      	ldr	r0, [pc, #324]	@ (80043bc <netif_add+0x17c>)
 8004276:	f008 ff0f 	bl	800d098 <iprintf>
 800427a:	2300      	movs	r3, #0
 800427c:	e096      	b.n	80043ac <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004284:	4b4f      	ldr	r3, [pc, #316]	@ (80043c4 <netif_add+0x184>)
 8004286:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800428e:	4b4d      	ldr	r3, [pc, #308]	@ (80043c4 <netif_add+0x184>)
 8004290:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004298:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <netif_add+0x184>)
 800429a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a45      	ldr	r2, [pc, #276]	@ (80043c8 <netif_add+0x188>)
 80042b2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a3a      	ldr	r2, [r7, #32]
 80042cc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80042ce:	4b3f      	ldr	r3, [pc, #252]	@ (80043cc <netif_add+0x18c>)
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042dc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f90f 	bl	8004508 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	4798      	blx	r3
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <netif_add+0xba>
    return NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	e058      	b.n	80043ac <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004300:	2bff      	cmp	r3, #255	@ 0xff
 8004302:	d103      	bne.n	800430c <netif_add+0xcc>
        netif->num = 0;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004310:	4b2f      	ldr	r3, [pc, #188]	@ (80043d0 <netif_add+0x190>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	e02b      	b.n	8004370 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	429a      	cmp	r2, r3
 800431e:	d106      	bne.n	800432e <netif_add+0xee>
 8004320:	4b24      	ldr	r3, [pc, #144]	@ (80043b4 <netif_add+0x174>)
 8004322:	f240 128b 	movw	r2, #395	@ 0x18b
 8004326:	492b      	ldr	r1, [pc, #172]	@ (80043d4 <netif_add+0x194>)
 8004328:	4824      	ldr	r0, [pc, #144]	@ (80043bc <netif_add+0x17c>)
 800432a:	f008 feb5 	bl	800d098 <iprintf>
        num_netifs++;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	3301      	adds	r3, #1
 8004332:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2bff      	cmp	r3, #255	@ 0xff
 8004338:	dd06      	ble.n	8004348 <netif_add+0x108>
 800433a:	4b1e      	ldr	r3, [pc, #120]	@ (80043b4 <netif_add+0x174>)
 800433c:	f240 128d 	movw	r2, #397	@ 0x18d
 8004340:	4925      	ldr	r1, [pc, #148]	@ (80043d8 <netif_add+0x198>)
 8004342:	481e      	ldr	r0, [pc, #120]	@ (80043bc <netif_add+0x17c>)
 8004344:	f008 fea8 	bl	800d098 <iprintf>
        if (netif2->num == netif->num) {
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004354:	429a      	cmp	r2, r3
 8004356:	d108      	bne.n	800436a <netif_add+0x12a>
          netif->num++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800435e:	3301      	adds	r3, #1
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8004368:	e005      	b.n	8004376 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1d0      	bne.n	8004318 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1be      	bne.n	80042fa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004382:	2bfe      	cmp	r3, #254	@ 0xfe
 8004384:	d103      	bne.n	800438e <netif_add+0x14e>
    netif_num = 0;
 8004386:	4b11      	ldr	r3, [pc, #68]	@ (80043cc <netif_add+0x18c>)
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	e006      	b.n	800439c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004394:	3301      	adds	r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	4b0c      	ldr	r3, [pc, #48]	@ (80043cc <netif_add+0x18c>)
 800439a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800439c:	4b0c      	ldr	r3, [pc, #48]	@ (80043d0 <netif_add+0x190>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80043a4:	4a0a      	ldr	r2, [pc, #40]	@ (80043d0 <netif_add+0x190>)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80043aa:	68fb      	ldr	r3, [r7, #12]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	0800e260 	.word	0x0800e260
 80043b8:	0800e2f4 	.word	0x0800e2f4
 80043bc:	0800e2b0 	.word	0x0800e2b0
 80043c0:	0800e310 	.word	0x0800e310
 80043c4:	0801061c 	.word	0x0801061c
 80043c8:	080047e3 	.word	0x080047e3
 80043cc:	200081b0 	.word	0x200081b0
 80043d0:	200081a8 	.word	0x200081a8
 80043d4:	0800e334 	.word	0x0800e334
 80043d8:	0800e348 	.word	0x0800e348

080043dc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80043e6:	6839      	ldr	r1, [r7, #0]
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f002 fb41 	bl	8006a70 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <netif_do_set_ipaddr+0x20>
 800440a:	4b1d      	ldr	r3, [pc, #116]	@ (8004480 <netif_do_set_ipaddr+0x88>)
 800440c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8004410:	491c      	ldr	r1, [pc, #112]	@ (8004484 <netif_do_set_ipaddr+0x8c>)
 8004412:	481d      	ldr	r0, [pc, #116]	@ (8004488 <netif_do_set_ipaddr+0x90>)
 8004414:	f008 fe40 	bl	800d098 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <netif_do_set_ipaddr+0x34>
 800441e:	4b18      	ldr	r3, [pc, #96]	@ (8004480 <netif_do_set_ipaddr+0x88>)
 8004420:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8004424:	4917      	ldr	r1, [pc, #92]	@ (8004484 <netif_do_set_ipaddr+0x8c>)
 8004426:	4818      	ldr	r0, [pc, #96]	@ (8004488 <netif_do_set_ipaddr+0x90>)
 8004428:	f008 fe36 	bl	800d098 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3304      	adds	r3, #4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d01c      	beq.n	8004474 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3304      	adds	r3, #4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800444a:	f107 0314 	add.w	r3, r7, #20
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ffc3 	bl	80043dc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <netif_do_set_ipaddr+0x6a>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	e000      	b.n	8004464 <netif_do_set_ipaddr+0x6c>
 8004462:	2300      	movs	r3, #0
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004468:	2101      	movs	r1, #1
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f8d2 	bl	8004614 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	0800e260 	.word	0x0800e260
 8004484:	0800e378 	.word	0x0800e378
 8004488:	0800e2b0 	.word	0x0800e2b0

0800448c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3308      	adds	r3, #8
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d00a      	beq.n	80044bc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <netif_do_set_netmask+0x26>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	e000      	b.n	80044b4 <netif_do_set_netmask+0x28>
 80044b2:	2300      	movs	r3, #0
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	330c      	adds	r3, #12
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d00a      	beq.n	80044fa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <netif_do_set_gw+0x26>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	e000      	b.n	80044f2 <netif_do_set_gw+0x28>
 80044f0:	2300      	movs	r3, #0
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004524:	4b1c      	ldr	r3, [pc, #112]	@ (8004598 <netif_set_addr+0x90>)
 8004526:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800452e:	4b1a      	ldr	r3, [pc, #104]	@ (8004598 <netif_set_addr+0x90>)
 8004530:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004538:	4b17      	ldr	r3, [pc, #92]	@ (8004598 <netif_set_addr+0x90>)
 800453a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <netif_set_addr+0x42>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <netif_set_addr+0x46>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <netif_set_addr+0x48>
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d006      	beq.n	8004566 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004558:	f107 0310 	add.w	r3, r7, #16
 800455c:	461a      	mov	r2, r3
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7ff ff49 	bl	80043f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff ff8e 	bl	800448c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	6839      	ldr	r1, [r7, #0]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff ffa8 	bl	80044ca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004580:	f107 0310 	add.w	r3, r7, #16
 8004584:	461a      	mov	r2, r3
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7ff ff35 	bl	80043f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800458e:	bf00      	nop
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	0801061c 	.word	0x0801061c

0800459c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80045a4:	4a04      	ldr	r2, [pc, #16]	@ (80045b8 <netif_set_default+0x1c>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	200081ac 	.word	0x200081ac

080045bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d107      	bne.n	80045da <netif_set_up+0x1e>
 80045ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004608 <netif_set_up+0x4c>)
 80045cc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80045d0:	490e      	ldr	r1, [pc, #56]	@ (800460c <netif_set_up+0x50>)
 80045d2:	480f      	ldr	r0, [pc, #60]	@ (8004610 <netif_set_up+0x54>)
 80045d4:	f008 fd60 	bl	800d098 <iprintf>
 80045d8:	e013      	b.n	8004602 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10c      	bne.n	8004602 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80045fa:	2103      	movs	r1, #3
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f809 	bl	8004614 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	0800e260 	.word	0x0800e260
 800460c:	0800e3e8 	.word	0x0800e3e8
 8004610:	0800e2b0 	.word	0x0800e2b0

08004614 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <netif_issue_reports+0x20>
 8004626:	4b18      	ldr	r3, [pc, #96]	@ (8004688 <netif_issue_reports+0x74>)
 8004628:	f240 326d 	movw	r2, #877	@ 0x36d
 800462c:	4917      	ldr	r1, [pc, #92]	@ (800468c <netif_issue_reports+0x78>)
 800462e:	4818      	ldr	r0, [pc, #96]	@ (8004690 <netif_issue_reports+0x7c>)
 8004630:	f008 fd32 	bl	800d098 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01e      	beq.n	8004680 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004648:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800464c:	2b00      	cmp	r3, #0
 800464e:	d017      	beq.n	8004680 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d013      	beq.n	8004682 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00e      	beq.n	8004682 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	4619      	mov	r1, r3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f007 f88b 	bl	800b794 <etharp_request>
 800467e:	e000      	b.n	8004682 <netif_issue_reports+0x6e>
    return;
 8004680:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	0800e260 	.word	0x0800e260
 800468c:	0800e404 	.word	0x0800e404
 8004690:	0800e2b0 	.word	0x0800e2b0

08004694 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d107      	bne.n	80046b2 <netif_set_down+0x1e>
 80046a2:	4b12      	ldr	r3, [pc, #72]	@ (80046ec <netif_set_down+0x58>)
 80046a4:	f240 329b 	movw	r2, #923	@ 0x39b
 80046a8:	4911      	ldr	r1, [pc, #68]	@ (80046f0 <netif_set_down+0x5c>)
 80046aa:	4812      	ldr	r0, [pc, #72]	@ (80046f4 <netif_set_down+0x60>)
 80046ac:	f008 fcf4 	bl	800d098 <iprintf>
 80046b0:	e019      	b.n	80046e6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d012      	beq.n	80046e6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f006 fc15 	bl	800af10 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	0800e260 	.word	0x0800e260
 80046f0:	0800e428 	.word	0x0800e428
 80046f4:	0800e2b0 	.word	0x0800e2b0

080046f8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d107      	bne.n	8004716 <netif_set_link_up+0x1e>
 8004706:	4b13      	ldr	r3, [pc, #76]	@ (8004754 <netif_set_link_up+0x5c>)
 8004708:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800470c:	4912      	ldr	r1, [pc, #72]	@ (8004758 <netif_set_link_up+0x60>)
 800470e:	4813      	ldr	r0, [pc, #76]	@ (800475c <netif_set_link_up+0x64>)
 8004710:	f008 fcc2 	bl	800d098 <iprintf>
 8004714:	e01b      	b.n	800474e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d114      	bne.n	800474e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	b2da      	uxtb	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004736:	2103      	movs	r1, #3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff ff6b 	bl	8004614 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <netif_set_link_up+0x56>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	0800e260 	.word	0x0800e260
 8004758:	0800e448 	.word	0x0800e448
 800475c:	0800e2b0 	.word	0x0800e2b0

08004760 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d107      	bne.n	800477e <netif_set_link_down+0x1e>
 800476e:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <netif_set_link_down+0x54>)
 8004770:	f240 4206 	movw	r2, #1030	@ 0x406
 8004774:	4910      	ldr	r1, [pc, #64]	@ (80047b8 <netif_set_link_down+0x58>)
 8004776:	4811      	ldr	r0, [pc, #68]	@ (80047bc <netif_set_link_down+0x5c>)
 8004778:	f008 fc8e 	bl	800d098 <iprintf>
 800477c:	e017      	b.n	80047ae <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d010      	beq.n	80047ae <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004792:	f023 0304 	bic.w	r3, r3, #4
 8004796:	b2da      	uxtb	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <netif_set_link_down+0x4e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	0800e260 	.word	0x0800e260
 80047b8:	0800e46c 	.word	0x0800e46c
 80047bc:	0800e2b0 	.word	0x0800e2b0

080047c0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	61da      	str	r2, [r3, #28]
  }
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b085      	sub	sp, #20
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80047ee:	f06f 030b 	mvn.w	r3, #11
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d013      	beq.n	8004838 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004810:	4b0d      	ldr	r3, [pc, #52]	@ (8004848 <netif_get_by_index+0x48>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	e00c      	b.n	8004832 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800481e:	3301      	adds	r3, #1
 8004820:	b2db      	uxtb	r3, r3
 8004822:	79fa      	ldrb	r2, [r7, #7]
 8004824:	429a      	cmp	r2, r3
 8004826:	d101      	bne.n	800482c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	e006      	b.n	800483a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ef      	bne.n	8004818 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	200081a8 	.word	0x200081a8

0800484c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004852:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <pbuf_free_ooseq+0x38>)
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <pbuf_free_ooseq+0x3c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	607b      	str	r3, [r7, #4]
 800485e:	e00a      	b.n	8004876 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f002 f93f 	bl	8006aec <tcp_free_ooseq>
      return;
 800486e:	e005      	b.n	800487c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	607b      	str	r3, [r7, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f1      	bne.n	8004860 <pbuf_free_ooseq+0x14>
    }
  }
}
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	200081b1 	.word	0x200081b1
 8004888:	200081c0 	.word	0x200081c0

0800488c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004890:	4b03      	ldr	r3, [pc, #12]	@ (80048a0 <pbuf_pool_is_empty+0x14>)
 8004892:	2201      	movs	r2, #1
 8004894:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	200081b1 	.word	0x200081b1

080048a4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	4611      	mov	r1, r2
 80048b0:	461a      	mov	r2, r3
 80048b2:	460b      	mov	r3, r1
 80048b4:	80fb      	strh	r3, [r7, #6]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	88fa      	ldrh	r2, [r7, #6]
 80048ca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	88ba      	ldrh	r2, [r7, #4]
 80048d0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80048d2:	8b3b      	ldrh	r3, [r7, #24]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	7f3a      	ldrb	r2, [r7, #28]
 80048de:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	73da      	strb	r2, [r3, #15]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08c      	sub	sp, #48	@ 0x30
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	4603      	mov	r3, r0
 8004900:	71fb      	strb	r3, [r7, #7]
 8004902:	460b      	mov	r3, r1
 8004904:	80bb      	strh	r3, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800490e:	887b      	ldrh	r3, [r7, #2]
 8004910:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8004914:	d07f      	beq.n	8004a16 <pbuf_alloc+0x11e>
 8004916:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800491a:	f300 80c8 	bgt.w	8004aae <pbuf_alloc+0x1b6>
 800491e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8004922:	d010      	beq.n	8004946 <pbuf_alloc+0x4e>
 8004924:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8004928:	f300 80c1 	bgt.w	8004aae <pbuf_alloc+0x1b6>
 800492c:	2b01      	cmp	r3, #1
 800492e:	d002      	beq.n	8004936 <pbuf_alloc+0x3e>
 8004930:	2b41      	cmp	r3, #65	@ 0x41
 8004932:	f040 80bc 	bne.w	8004aae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004936:	887a      	ldrh	r2, [r7, #2]
 8004938:	88bb      	ldrh	r3, [r7, #4]
 800493a:	4619      	mov	r1, r3
 800493c:	2000      	movs	r0, #0
 800493e:	f000 f8d1 	bl	8004ae4 <pbuf_alloc_reference>
 8004942:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8004944:	e0bd      	b.n	8004ac2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800494e:	88bb      	ldrh	r3, [r7, #4]
 8004950:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004952:	2007      	movs	r0, #7
 8004954:	f7ff fbd2 	bl	80040fc <memp_malloc>
 8004958:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004960:	f7ff ff94 	bl	800488c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <pbuf_alloc+0x78>
            pbuf_free(p);
 800496a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800496c:	f000 faa8 	bl	8004ec0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004970:	2300      	movs	r3, #0
 8004972:	e0a7      	b.n	8004ac4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004974:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004976:	3303      	adds	r3, #3
 8004978:	b29b      	uxth	r3, r3
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	b29b      	uxth	r3, r3
 8004980:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8004984:	b29b      	uxth	r3, r3
 8004986:	8b7a      	ldrh	r2, [r7, #26]
 8004988:	4293      	cmp	r3, r2
 800498a:	bf28      	it	cs
 800498c:	4613      	movcs	r3, r2
 800498e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004990:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004992:	3310      	adds	r3, #16
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4413      	add	r3, r2
 8004998:	3303      	adds	r3, #3
 800499a:	f023 0303 	bic.w	r3, r3, #3
 800499e:	4618      	mov	r0, r3
 80049a0:	89f9      	ldrh	r1, [r7, #14]
 80049a2:	8b7a      	ldrh	r2, [r7, #26]
 80049a4:	2300      	movs	r3, #0
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	460b      	mov	r3, r1
 80049ae:	4601      	mov	r1, r0
 80049b0:	6938      	ldr	r0, [r7, #16]
 80049b2:	f7ff ff77 	bl	80048a4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d006      	beq.n	80049d0 <pbuf_alloc+0xd8>
 80049c2:	4b42      	ldr	r3, [pc, #264]	@ (8004acc <pbuf_alloc+0x1d4>)
 80049c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049c8:	4941      	ldr	r1, [pc, #260]	@ (8004ad0 <pbuf_alloc+0x1d8>)
 80049ca:	4842      	ldr	r0, [pc, #264]	@ (8004ad4 <pbuf_alloc+0x1dc>)
 80049cc:	f008 fb64 	bl	800d098 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80049d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80049d2:	3303      	adds	r3, #3
 80049d4:	f023 0303 	bic.w	r3, r3, #3
 80049d8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80049dc:	d106      	bne.n	80049ec <pbuf_alloc+0xf4>
 80049de:	4b3b      	ldr	r3, [pc, #236]	@ (8004acc <pbuf_alloc+0x1d4>)
 80049e0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80049e4:	493c      	ldr	r1, [pc, #240]	@ (8004ad8 <pbuf_alloc+0x1e0>)
 80049e6:	483b      	ldr	r0, [pc, #236]	@ (8004ad4 <pbuf_alloc+0x1dc>)
 80049e8:	f008 fb56 	bl	800d098 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f6:	e002      	b.n	80049fe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004a02:	8b7a      	ldrh	r2, [r7, #26]
 8004a04:	89fb      	ldrh	r3, [r7, #14]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8004a0e:	8b7b      	ldrh	r3, [r7, #26]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d19e      	bne.n	8004952 <pbuf_alloc+0x5a>
      break;
 8004a14:	e055      	b.n	8004ac2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004a16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a18:	3303      	adds	r3, #3
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f023 0303 	bic.w	r3, r3, #3
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	88bb      	ldrh	r3, [r7, #4]
 8004a24:	3303      	adds	r3, #3
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f023 0303 	bic.w	r3, r3, #3
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004a32:	8b3b      	ldrh	r3, [r7, #24]
 8004a34:	3310      	adds	r3, #16
 8004a36:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004a38:	8b3a      	ldrh	r2, [r7, #24]
 8004a3a:	88bb      	ldrh	r3, [r7, #4]
 8004a3c:	3303      	adds	r3, #3
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d306      	bcc.n	8004a54 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004a46:	8afa      	ldrh	r2, [r7, #22]
 8004a48:	88bb      	ldrh	r3, [r7, #4]
 8004a4a:	3303      	adds	r3, #3
 8004a4c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d201      	bcs.n	8004a58 <pbuf_alloc+0x160>
        return NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e035      	b.n	8004ac4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004a58:	8afb      	ldrh	r3, [r7, #22]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff f9be 	bl	8003ddc <mem_malloc>
 8004a60:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <pbuf_alloc+0x174>
        return NULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e02b      	b.n	8004ac4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004a6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a6e:	3310      	adds	r3, #16
 8004a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a72:	4413      	add	r3, r2
 8004a74:	3303      	adds	r3, #3
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	88b9      	ldrh	r1, [r7, #4]
 8004a7e:	88ba      	ldrh	r2, [r7, #4]
 8004a80:	2300      	movs	r3, #0
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	887b      	ldrh	r3, [r7, #2]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4601      	mov	r1, r0
 8004a8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a8e:	f7ff ff09 	bl	80048a4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d010      	beq.n	8004ac0 <pbuf_alloc+0x1c8>
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <pbuf_alloc+0x1d4>)
 8004aa0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8004aa4:	490d      	ldr	r1, [pc, #52]	@ (8004adc <pbuf_alloc+0x1e4>)
 8004aa6:	480b      	ldr	r0, [pc, #44]	@ (8004ad4 <pbuf_alloc+0x1dc>)
 8004aa8:	f008 faf6 	bl	800d098 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004aac:	e008      	b.n	8004ac0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004aae:	4b07      	ldr	r3, [pc, #28]	@ (8004acc <pbuf_alloc+0x1d4>)
 8004ab0:	f240 1227 	movw	r2, #295	@ 0x127
 8004ab4:	490a      	ldr	r1, [pc, #40]	@ (8004ae0 <pbuf_alloc+0x1e8>)
 8004ab6:	4807      	ldr	r0, [pc, #28]	@ (8004ad4 <pbuf_alloc+0x1dc>)
 8004ab8:	f008 faee 	bl	800d098 <iprintf>
      return NULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e001      	b.n	8004ac4 <pbuf_alloc+0x1cc>
      break;
 8004ac0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3728      	adds	r7, #40	@ 0x28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	0800e490 	.word	0x0800e490
 8004ad0:	0800e4c0 	.word	0x0800e4c0
 8004ad4:	0800e4f0 	.word	0x0800e4f0
 8004ad8:	0800e518 	.word	0x0800e518
 8004adc:	0800e54c 	.word	0x0800e54c
 8004ae0:	0800e578 	.word	0x0800e578

08004ae4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	807b      	strh	r3, [r7, #2]
 8004af0:	4613      	mov	r3, r2
 8004af2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004af4:	883b      	ldrh	r3, [r7, #0]
 8004af6:	2b41      	cmp	r3, #65	@ 0x41
 8004af8:	d009      	beq.n	8004b0e <pbuf_alloc_reference+0x2a>
 8004afa:	883b      	ldrh	r3, [r7, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d006      	beq.n	8004b0e <pbuf_alloc_reference+0x2a>
 8004b00:	4b0f      	ldr	r3, [pc, #60]	@ (8004b40 <pbuf_alloc_reference+0x5c>)
 8004b02:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8004b06:	490f      	ldr	r1, [pc, #60]	@ (8004b44 <pbuf_alloc_reference+0x60>)
 8004b08:	480f      	ldr	r0, [pc, #60]	@ (8004b48 <pbuf_alloc_reference+0x64>)
 8004b0a:	f008 fac5 	bl	800d098 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004b0e:	2006      	movs	r0, #6
 8004b10:	f7ff faf4 	bl	80040fc <memp_malloc>
 8004b14:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e00b      	b.n	8004b38 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004b20:	8879      	ldrh	r1, [r7, #2]
 8004b22:	887a      	ldrh	r2, [r7, #2]
 8004b24:	2300      	movs	r3, #0
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	883b      	ldrh	r3, [r7, #0]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7ff feb7 	bl	80048a4 <pbuf_init_alloced_pbuf>
  return p;
 8004b36:	68fb      	ldr	r3, [r7, #12]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	0800e490 	.word	0x0800e490
 8004b44:	0800e594 	.word	0x0800e594
 8004b48:	0800e4f0 	.word	0x0800e4f0

08004b4c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	607b      	str	r3, [r7, #4]
 8004b54:	4603      	mov	r3, r0
 8004b56:	73fb      	strb	r3, [r7, #15]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	81bb      	strh	r3, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004b64:	8a7b      	ldrh	r3, [r7, #18]
 8004b66:	3303      	adds	r3, #3
 8004b68:	f023 0203 	bic.w	r2, r3, #3
 8004b6c:	89bb      	ldrh	r3, [r7, #12]
 8004b6e:	441a      	add	r2, r3
 8004b70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d901      	bls.n	8004b7a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e018      	b.n	8004bac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004b80:	8a7b      	ldrh	r3, [r7, #18]
 8004b82:	3303      	adds	r3, #3
 8004b84:	f023 0303 	bic.w	r3, r3, #3
 8004b88:	6a3a      	ldr	r2, [r7, #32]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e001      	b.n	8004b94 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	89b9      	ldrh	r1, [r7, #12]
 8004b98:	89ba      	ldrh	r2, [r7, #12]
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	9301      	str	r3, [sp, #4]
 8004b9e:	897b      	ldrh	r3, [r7, #10]
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	6979      	ldr	r1, [r7, #20]
 8004ba6:	f7ff fe7d 	bl	80048a4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004baa:	687b      	ldr	r3, [r7, #4]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <pbuf_realloc+0x20>
 8004bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8004cb0 <pbuf_realloc+0xfc>)
 8004bc8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8004bcc:	4939      	ldr	r1, [pc, #228]	@ (8004cb4 <pbuf_realloc+0x100>)
 8004bce:	483a      	ldr	r0, [pc, #232]	@ (8004cb8 <pbuf_realloc+0x104>)
 8004bd0:	f008 fa62 	bl	800d098 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	891b      	ldrh	r3, [r3, #8]
 8004bd8:	887a      	ldrh	r2, [r7, #2]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d263      	bcs.n	8004ca6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	891a      	ldrh	r2, [r3, #8]
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004be8:	887b      	ldrh	r3, [r7, #2]
 8004bea:	817b      	strh	r3, [r7, #10]
  q = p;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004bf0:	e018      	b.n	8004c24 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	895b      	ldrh	r3, [r3, #10]
 8004bf6:	897a      	ldrh	r2, [r7, #10]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	891a      	ldrh	r2, [r3, #8]
 8004c00:	893b      	ldrh	r3, [r7, #8]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <pbuf_realloc+0x70>
 8004c16:	4b26      	ldr	r3, [pc, #152]	@ (8004cb0 <pbuf_realloc+0xfc>)
 8004c18:	f240 12af 	movw	r2, #431	@ 0x1af
 8004c1c:	4927      	ldr	r1, [pc, #156]	@ (8004cbc <pbuf_realloc+0x108>)
 8004c1e:	4826      	ldr	r0, [pc, #152]	@ (8004cb8 <pbuf_realloc+0x104>)
 8004c20:	f008 fa3a 	bl	800d098 <iprintf>
  while (rem_len > q->len) {
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	895b      	ldrh	r3, [r3, #10]
 8004c28:	897a      	ldrh	r2, [r7, #10]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d8e1      	bhi.n	8004bf2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	7b1b      	ldrb	r3, [r3, #12]
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d121      	bne.n	8004c7e <pbuf_realloc+0xca>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	895b      	ldrh	r3, [r3, #10]
 8004c3e:	897a      	ldrh	r2, [r7, #10]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d01c      	beq.n	8004c7e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	7b5b      	ldrb	r3, [r3, #13]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d116      	bne.n	8004c7e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	897b      	ldrh	r3, [r7, #10]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	4619      	mov	r1, r3
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7fe ffbe 	bl	8003be4 <mem_trim>
 8004c68:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <pbuf_realloc+0xca>
 8004c70:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb0 <pbuf_realloc+0xfc>)
 8004c72:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8004c76:	4912      	ldr	r1, [pc, #72]	@ (8004cc0 <pbuf_realloc+0x10c>)
 8004c78:	480f      	ldr	r0, [pc, #60]	@ (8004cb8 <pbuf_realloc+0x104>)
 8004c7a:	f008 fa0d 	bl	800d098 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	897a      	ldrh	r2, [r7, #10]
 8004c82:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	895a      	ldrh	r2, [r3, #10]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d004      	beq.n	8004c9e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 f911 	bl	8004ec0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e000      	b.n	8004ca8 <pbuf_realloc+0xf4>
    return;
 8004ca6:	bf00      	nop

}
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	0800e490 	.word	0x0800e490
 8004cb4:	0800e5a8 	.word	0x0800e5a8
 8004cb8:	0800e4f0 	.word	0x0800e4f0
 8004cbc:	0800e5c0 	.word	0x0800e5c0
 8004cc0:	0800e5d8 	.word	0x0800e5d8

08004cc4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <pbuf_add_header_impl+0x22>
 8004cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d88 <pbuf_add_header_impl+0xc4>)
 8004cda:	f240 12df 	movw	r2, #479	@ 0x1df
 8004cde:	492b      	ldr	r1, [pc, #172]	@ (8004d8c <pbuf_add_header_impl+0xc8>)
 8004ce0:	482b      	ldr	r0, [pc, #172]	@ (8004d90 <pbuf_add_header_impl+0xcc>)
 8004ce2:	f008 f9d9 	bl	800d098 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <pbuf_add_header_impl+0x30>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf2:	d301      	bcc.n	8004cf8 <pbuf_add_header_impl+0x34>
    return 1;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e043      	b.n	8004d80 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <pbuf_add_header_impl+0x3e>
    return 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e03e      	b.n	8004d80 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	891a      	ldrh	r2, [r3, #8]
 8004d0a:	8a7b      	ldrh	r3, [r7, #18]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	8a7a      	ldrh	r2, [r7, #18]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d901      	bls.n	8004d1a <pbuf_add_header_impl+0x56>
    return 1;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e032      	b.n	8004d80 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	7b1b      	ldrb	r3, [r3, #12]
 8004d1e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004d20:	8a3b      	ldrh	r3, [r7, #16]
 8004d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00c      	beq.n	8004d44 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	425b      	negs	r3, r3
 8004d32:	4413      	add	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3310      	adds	r3, #16
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d20d      	bcs.n	8004d5c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e01d      	b.n	8004d80 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d006      	beq.n	8004d58 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	425b      	negs	r3, r3
 8004d52:	4413      	add	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e001      	b.n	8004d5c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e011      	b.n	8004d80 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	895a      	ldrh	r2, [r3, #10]
 8004d66:	8a7b      	ldrh	r3, [r7, #18]
 8004d68:	4413      	add	r3, r2
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	891a      	ldrh	r2, [r3, #8]
 8004d74:	8a7b      	ldrh	r3, [r7, #18]
 8004d76:	4413      	add	r3, r2
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	811a      	strh	r2, [r3, #8]


  return 0;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	0800e490 	.word	0x0800e490
 8004d8c:	0800e5f4 	.word	0x0800e5f4
 8004d90:	0800e4f0 	.word	0x0800e4f0

08004d94 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	6839      	ldr	r1, [r7, #0]
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff ff8e 	bl	8004cc4 <pbuf_add_header_impl>
 8004da8:	4603      	mov	r3, r0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <pbuf_remove_header+0x1e>
 8004dc4:	4b20      	ldr	r3, [pc, #128]	@ (8004e48 <pbuf_remove_header+0x94>)
 8004dc6:	f240 224b 	movw	r2, #587	@ 0x24b
 8004dca:	4920      	ldr	r1, [pc, #128]	@ (8004e4c <pbuf_remove_header+0x98>)
 8004dcc:	4820      	ldr	r0, [pc, #128]	@ (8004e50 <pbuf_remove_header+0x9c>)
 8004dce:	f008 f963 	bl	800d098 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <pbuf_remove_header+0x2c>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dde:	d301      	bcc.n	8004de4 <pbuf_remove_header+0x30>
    return 1;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e02c      	b.n	8004e3e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <pbuf_remove_header+0x3a>
    return 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e027      	b.n	8004e3e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	895b      	ldrh	r3, [r3, #10]
 8004df6:	89fa      	ldrh	r2, [r7, #14]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d908      	bls.n	8004e0e <pbuf_remove_header+0x5a>
 8004dfc:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <pbuf_remove_header+0x94>)
 8004dfe:	f240 2255 	movw	r2, #597	@ 0x255
 8004e02:	4914      	ldr	r1, [pc, #80]	@ (8004e54 <pbuf_remove_header+0xa0>)
 8004e04:	4812      	ldr	r0, [pc, #72]	@ (8004e50 <pbuf_remove_header+0x9c>)
 8004e06:	f008 f947 	bl	800d098 <iprintf>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e017      	b.n	8004e3e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	441a      	add	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	895a      	ldrh	r2, [r3, #10]
 8004e24:	89fb      	ldrh	r3, [r7, #14]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	891a      	ldrh	r2, [r3, #8]
 8004e32:	89fb      	ldrh	r3, [r7, #14]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	0800e490 	.word	0x0800e490
 8004e4c:	0800e5f4 	.word	0x0800e5f4
 8004e50:	0800e4f0 	.word	0x0800e4f0
 8004e54:	0800e600 	.word	0x0800e600

08004e58 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	807b      	strh	r3, [r7, #2]
 8004e64:	4613      	mov	r3, r2
 8004e66:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004e68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	da08      	bge.n	8004e82 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004e70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e74:	425b      	negs	r3, r3
 8004e76:	4619      	mov	r1, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ff9b 	bl	8004db4 <pbuf_remove_header>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	e007      	b.n	8004e92 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004e82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e86:	787a      	ldrb	r2, [r7, #1]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff ff1a 	bl	8004cc4 <pbuf_add_header_impl>
 8004e90:	4603      	mov	r3, r0
  }
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004ea6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff ffd2 	bl	8004e58 <pbuf_header_impl>
 8004eb4:	4603      	mov	r3, r0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <pbuf_free+0x22>
 8004ed4:	4b38      	ldr	r3, [pc, #224]	@ (8004fb8 <pbuf_free+0xf8>)
 8004ed6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8004eda:	4938      	ldr	r1, [pc, #224]	@ (8004fbc <pbuf_free+0xfc>)
 8004edc:	4838      	ldr	r0, [pc, #224]	@ (8004fc0 <pbuf_free+0x100>)
 8004ede:	f008 f8db 	bl	800d098 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e063      	b.n	8004fae <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004eea:	e05c      	b.n	8004fa6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	7b9b      	ldrb	r3, [r3, #14]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <pbuf_free+0x42>
 8004ef4:	4b30      	ldr	r3, [pc, #192]	@ (8004fb8 <pbuf_free+0xf8>)
 8004ef6:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8004efa:	4932      	ldr	r1, [pc, #200]	@ (8004fc4 <pbuf_free+0x104>)
 8004efc:	4830      	ldr	r0, [pc, #192]	@ (8004fc0 <pbuf_free+0x100>)
 8004efe:	f008 f8cb 	bl	800d098 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7b9b      	ldrb	r3, [r3, #14]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	739a      	strb	r2, [r3, #14]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	7b9b      	ldrb	r3, [r3, #14]
 8004f12:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004f14:	7dbb      	ldrb	r3, [r7, #22]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d143      	bne.n	8004fa2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	7b1b      	ldrb	r3, [r3, #12]
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	7b5b      	ldrb	r3, [r3, #13]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d011      	beq.n	8004f5a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <pbuf_free+0x90>
 8004f42:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb8 <pbuf_free+0xf8>)
 8004f44:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8004f48:	491f      	ldr	r1, [pc, #124]	@ (8004fc8 <pbuf_free+0x108>)
 8004f4a:	481d      	ldr	r0, [pc, #116]	@ (8004fc0 <pbuf_free+0x100>)
 8004f4c:	f008 f8a4 	bl	800d098 <iprintf>
        pc->custom_free_function(p);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
 8004f58:	e01d      	b.n	8004f96 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d104      	bne.n	8004f6a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	2007      	movs	r0, #7
 8004f64:	f7ff f93a 	bl	80041dc <memp_free>
 8004f68:	e015      	b.n	8004f96 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d104      	bne.n	8004f7a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	2006      	movs	r0, #6
 8004f74:	f7ff f932 	bl	80041dc <memp_free>
 8004f78:	e00d      	b.n	8004f96 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d103      	bne.n	8004f88 <pbuf_free+0xc8>
          mem_free(p);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7fe fdc5 	bl	8003b10 <mem_free>
 8004f86:	e006      	b.n	8004f96 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8004f88:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb8 <pbuf_free+0xf8>)
 8004f8a:	f240 320f 	movw	r2, #783	@ 0x30f
 8004f8e:	490f      	ldr	r1, [pc, #60]	@ (8004fcc <pbuf_free+0x10c>)
 8004f90:	480b      	ldr	r0, [pc, #44]	@ (8004fc0 <pbuf_free+0x100>)
 8004f92:	f008 f881 	bl	800d098 <iprintf>
        }
      }
      count++;
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	607b      	str	r3, [r7, #4]
 8004fa0:	e001      	b.n	8004fa6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d19f      	bne.n	8004eec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	0800e490 	.word	0x0800e490
 8004fbc:	0800e5f4 	.word	0x0800e5f4
 8004fc0:	0800e4f0 	.word	0x0800e4f0
 8004fc4:	0800e620 	.word	0x0800e620
 8004fc8:	0800e638 	.word	0x0800e638
 8004fcc:	0800e65c 	.word	0x0800e65c

08004fd0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004fdc:	e005      	b.n	8004fea <pbuf_clen+0x1a>
    ++len;
 8004fde:	89fb      	ldrh	r3, [r7, #14]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f6      	bne.n	8004fde <pbuf_clen+0xe>
  }
  return len;
 8004ff0:	89fb      	ldrh	r3, [r7, #14]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d010      	beq.n	8005030 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	7b9b      	ldrb	r3, [r3, #14]
 8005012:	3301      	adds	r3, #1
 8005014:	b2da      	uxtb	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	7b9b      	ldrb	r3, [r3, #14]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <pbuf_ref+0x30>
 8005022:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <pbuf_ref+0x38>)
 8005024:	f240 3242 	movw	r2, #834	@ 0x342
 8005028:	4904      	ldr	r1, [pc, #16]	@ (800503c <pbuf_ref+0x3c>)
 800502a:	4805      	ldr	r0, [pc, #20]	@ (8005040 <pbuf_ref+0x40>)
 800502c:	f008 f834 	bl	800d098 <iprintf>
  }
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	0800e490 	.word	0x0800e490
 800503c:	0800e670 	.word	0x0800e670
 8005040:	0800e4f0 	.word	0x0800e4f0

08005044 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <pbuf_cat+0x16>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d107      	bne.n	800506a <pbuf_cat+0x26>
 800505a:	4b20      	ldr	r3, [pc, #128]	@ (80050dc <pbuf_cat+0x98>)
 800505c:	f240 3259 	movw	r2, #857	@ 0x359
 8005060:	491f      	ldr	r1, [pc, #124]	@ (80050e0 <pbuf_cat+0x9c>)
 8005062:	4820      	ldr	r0, [pc, #128]	@ (80050e4 <pbuf_cat+0xa0>)
 8005064:	f008 f818 	bl	800d098 <iprintf>
 8005068:	e034      	b.n	80050d4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e00a      	b.n	8005086 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	891a      	ldrh	r2, [r3, #8]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	891b      	ldrh	r3, [r3, #8]
 8005078:	4413      	add	r3, r2
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	891a      	ldrh	r2, [r3, #8]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	895b      	ldrh	r3, [r3, #10]
 8005096:	429a      	cmp	r2, r3
 8005098:	d006      	beq.n	80050a8 <pbuf_cat+0x64>
 800509a:	4b10      	ldr	r3, [pc, #64]	@ (80050dc <pbuf_cat+0x98>)
 800509c:	f240 3262 	movw	r2, #866	@ 0x362
 80050a0:	4911      	ldr	r1, [pc, #68]	@ (80050e8 <pbuf_cat+0xa4>)
 80050a2:	4810      	ldr	r0, [pc, #64]	@ (80050e4 <pbuf_cat+0xa0>)
 80050a4:	f007 fff8 	bl	800d098 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d006      	beq.n	80050be <pbuf_cat+0x7a>
 80050b0:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <pbuf_cat+0x98>)
 80050b2:	f240 3263 	movw	r2, #867	@ 0x363
 80050b6:	490d      	ldr	r1, [pc, #52]	@ (80050ec <pbuf_cat+0xa8>)
 80050b8:	480a      	ldr	r0, [pc, #40]	@ (80050e4 <pbuf_cat+0xa0>)
 80050ba:	f007 ffed 	bl	800d098 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	891a      	ldrh	r2, [r3, #8]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	891b      	ldrh	r3, [r3, #8]
 80050c6:	4413      	add	r3, r2
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	0800e490 	.word	0x0800e490
 80050e0:	0800e684 	.word	0x0800e684
 80050e4:	0800e4f0 	.word	0x0800e4f0
 80050e8:	0800e6bc 	.word	0x0800e6bc
 80050ec:	0800e6ec 	.word	0x0800e6ec

080050f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <pbuf_copy+0x2a>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <pbuf_copy+0x2a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	891a      	ldrh	r2, [r3, #8]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	891b      	ldrh	r3, [r3, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	d209      	bcs.n	800512e <pbuf_copy+0x3e>
 800511a:	4b57      	ldr	r3, [pc, #348]	@ (8005278 <pbuf_copy+0x188>)
 800511c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8005120:	4956      	ldr	r1, [pc, #344]	@ (800527c <pbuf_copy+0x18c>)
 8005122:	4857      	ldr	r0, [pc, #348]	@ (8005280 <pbuf_copy+0x190>)
 8005124:	f007 ffb8 	bl	800d098 <iprintf>
 8005128:	f06f 030f 	mvn.w	r3, #15
 800512c:	e09f      	b.n	800526e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	895b      	ldrh	r3, [r3, #10]
 8005132:	461a      	mov	r2, r3
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	1ad2      	subs	r2, r2, r3
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	895b      	ldrh	r3, [r3, #10]
 800513c:	4619      	mov	r1, r3
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1acb      	subs	r3, r1, r3
 8005142:	429a      	cmp	r2, r3
 8005144:	d306      	bcc.n	8005154 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	895b      	ldrh	r3, [r3, #10]
 800514a:	461a      	mov	r2, r3
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	e005      	b.n	8005160 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	895b      	ldrh	r3, [r3, #10]
 8005158:	461a      	mov	r2, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	18d0      	adds	r0, r2, r3
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4413      	add	r3, r2
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4619      	mov	r1, r3
 8005174:	f008 f86b 	bl	800d24e <memcpy>
    offset_to += len;
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	895b      	ldrh	r3, [r3, #10]
 800518c:	461a      	mov	r2, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	4293      	cmp	r3, r2
 8005192:	d906      	bls.n	80051a2 <pbuf_copy+0xb2>
 8005194:	4b38      	ldr	r3, [pc, #224]	@ (8005278 <pbuf_copy+0x188>)
 8005196:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800519a:	493a      	ldr	r1, [pc, #232]	@ (8005284 <pbuf_copy+0x194>)
 800519c:	4838      	ldr	r0, [pc, #224]	@ (8005280 <pbuf_copy+0x190>)
 800519e:	f007 ff7b 	bl	800d098 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	895b      	ldrh	r3, [r3, #10]
 80051a6:	461a      	mov	r2, r3
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d906      	bls.n	80051bc <pbuf_copy+0xcc>
 80051ae:	4b32      	ldr	r3, [pc, #200]	@ (8005278 <pbuf_copy+0x188>)
 80051b0:	f240 32da 	movw	r2, #986	@ 0x3da
 80051b4:	4934      	ldr	r1, [pc, #208]	@ (8005288 <pbuf_copy+0x198>)
 80051b6:	4832      	ldr	r0, [pc, #200]	@ (8005280 <pbuf_copy+0x190>)
 80051b8:	f007 ff6e 	bl	800d098 <iprintf>
    if (offset_from >= p_from->len) {
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	895b      	ldrh	r3, [r3, #10]
 80051c0:	461a      	mov	r2, r3
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d304      	bcc.n	80051d2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	895b      	ldrh	r3, [r3, #10]
 80051d6:	461a      	mov	r2, r3
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	4293      	cmp	r3, r2
 80051dc:	d114      	bne.n	8005208 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10c      	bne.n	8005208 <pbuf_copy+0x118>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d009      	beq.n	8005208 <pbuf_copy+0x118>
 80051f4:	4b20      	ldr	r3, [pc, #128]	@ (8005278 <pbuf_copy+0x188>)
 80051f6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80051fa:	4924      	ldr	r1, [pc, #144]	@ (800528c <pbuf_copy+0x19c>)
 80051fc:	4820      	ldr	r0, [pc, #128]	@ (8005280 <pbuf_copy+0x190>)
 80051fe:	f007 ff4b 	bl	800d098 <iprintf>
 8005202:	f06f 030f 	mvn.w	r3, #15
 8005206:	e032      	b.n	800526e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d013      	beq.n	8005236 <pbuf_copy+0x146>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	895a      	ldrh	r2, [r3, #10]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	891b      	ldrh	r3, [r3, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	d10d      	bne.n	8005236 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <pbuf_copy+0x146>
 8005222:	4b15      	ldr	r3, [pc, #84]	@ (8005278 <pbuf_copy+0x188>)
 8005224:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8005228:	4919      	ldr	r1, [pc, #100]	@ (8005290 <pbuf_copy+0x1a0>)
 800522a:	4815      	ldr	r0, [pc, #84]	@ (8005280 <pbuf_copy+0x190>)
 800522c:	f007 ff34 	bl	800d098 <iprintf>
 8005230:	f06f 0305 	mvn.w	r3, #5
 8005234:	e01b      	b.n	800526e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d013      	beq.n	8005264 <pbuf_copy+0x174>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	895a      	ldrh	r2, [r3, #10]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	891b      	ldrh	r3, [r3, #8]
 8005244:	429a      	cmp	r2, r3
 8005246:	d10d      	bne.n	8005264 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d009      	beq.n	8005264 <pbuf_copy+0x174>
 8005250:	4b09      	ldr	r3, [pc, #36]	@ (8005278 <pbuf_copy+0x188>)
 8005252:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8005256:	490e      	ldr	r1, [pc, #56]	@ (8005290 <pbuf_copy+0x1a0>)
 8005258:	4809      	ldr	r0, [pc, #36]	@ (8005280 <pbuf_copy+0x190>)
 800525a:	f007 ff1d 	bl	800d098 <iprintf>
 800525e:	f06f 0305 	mvn.w	r3, #5
 8005262:	e004      	b.n	800526e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f47f af61 	bne.w	800512e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	0800e490 	.word	0x0800e490
 800527c:	0800e738 	.word	0x0800e738
 8005280:	0800e4f0 	.word	0x0800e4f0
 8005284:	0800e768 	.word	0x0800e768
 8005288:	0800e780 	.word	0x0800e780
 800528c:	0800e79c 	.word	0x0800e79c
 8005290:	0800e7ac 	.word	0x0800e7ac

08005294 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	4611      	mov	r1, r2
 80052a0:	461a      	mov	r2, r3
 80052a2:	460b      	mov	r3, r1
 80052a4:	80fb      	strh	r3, [r7, #6]
 80052a6:	4613      	mov	r3, r2
 80052a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d108      	bne.n	80052ca <pbuf_copy_partial+0x36>
 80052b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005368 <pbuf_copy_partial+0xd4>)
 80052ba:	f240 420a 	movw	r2, #1034	@ 0x40a
 80052be:	492b      	ldr	r1, [pc, #172]	@ (800536c <pbuf_copy_partial+0xd8>)
 80052c0:	482b      	ldr	r0, [pc, #172]	@ (8005370 <pbuf_copy_partial+0xdc>)
 80052c2:	f007 fee9 	bl	800d098 <iprintf>
 80052c6:	2300      	movs	r3, #0
 80052c8:	e04a      	b.n	8005360 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d108      	bne.n	80052e2 <pbuf_copy_partial+0x4e>
 80052d0:	4b25      	ldr	r3, [pc, #148]	@ (8005368 <pbuf_copy_partial+0xd4>)
 80052d2:	f240 420b 	movw	r2, #1035	@ 0x40b
 80052d6:	4927      	ldr	r1, [pc, #156]	@ (8005374 <pbuf_copy_partial+0xe0>)
 80052d8:	4825      	ldr	r0, [pc, #148]	@ (8005370 <pbuf_copy_partial+0xdc>)
 80052da:	f007 fedd 	bl	800d098 <iprintf>
 80052de:	2300      	movs	r3, #0
 80052e0:	e03e      	b.n	8005360 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	e034      	b.n	8005352 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80052e8:	88bb      	ldrh	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <pbuf_copy_partial+0x70>
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	895b      	ldrh	r3, [r3, #10]
 80052f2:	88ba      	ldrh	r2, [r7, #4]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d305      	bcc.n	8005304 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	895b      	ldrh	r3, [r3, #10]
 80052fc:	88ba      	ldrh	r2, [r7, #4]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	80bb      	strh	r3, [r7, #4]
 8005302:	e023      	b.n	800534c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	895a      	ldrh	r2, [r3, #10]
 8005308:	88bb      	ldrh	r3, [r7, #4]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800530e:	8b3a      	ldrh	r2, [r7, #24]
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	429a      	cmp	r2, r3
 8005314:	d901      	bls.n	800531a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800531a:	8b7b      	ldrh	r3, [r7, #26]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	18d0      	adds	r0, r2, r3
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	88bb      	ldrh	r3, [r7, #4]
 8005326:	4413      	add	r3, r2
 8005328:	8b3a      	ldrh	r2, [r7, #24]
 800532a:	4619      	mov	r1, r3
 800532c:	f007 ff8f 	bl	800d24e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005330:	8afa      	ldrh	r2, [r7, #22]
 8005332:	8b3b      	ldrh	r3, [r7, #24]
 8005334:	4413      	add	r3, r2
 8005336:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005338:	8b7a      	ldrh	r2, [r7, #26]
 800533a:	8b3b      	ldrh	r3, [r7, #24]
 800533c:	4413      	add	r3, r2
 800533e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005340:	88fa      	ldrh	r2, [r7, #6]
 8005342:	8b3b      	ldrh	r3, [r7, #24]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <pbuf_copy_partial+0xca>
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1c4      	bne.n	80052e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800535e:	8afb      	ldrh	r3, [r7, #22]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	0800e490 	.word	0x0800e490
 800536c:	0800e7d8 	.word	0x0800e7d8
 8005370:	0800e4f0 	.word	0x0800e4f0
 8005374:	0800e7f8 	.word	0x0800e7f8

08005378 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	603a      	str	r2, [r7, #0]
 8005382:	71fb      	strb	r3, [r7, #7]
 8005384:	460b      	mov	r3, r1
 8005386:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	8919      	ldrh	r1, [r3, #8]
 800538c:	88ba      	ldrh	r2, [r7, #4]
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff fab1 	bl	80048f8 <pbuf_alloc>
 8005396:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <pbuf_clone+0x2a>
    return NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	e011      	b.n	80053c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff fea3 	bl	80050f0 <pbuf_copy>
 80053aa:	4603      	mov	r3, r0
 80053ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80053ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d006      	beq.n	80053c4 <pbuf_clone+0x4c>
 80053b6:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <pbuf_clone+0x58>)
 80053b8:	f240 5224 	movw	r2, #1316	@ 0x524
 80053bc:	4905      	ldr	r1, [pc, #20]	@ (80053d4 <pbuf_clone+0x5c>)
 80053be:	4806      	ldr	r0, [pc, #24]	@ (80053d8 <pbuf_clone+0x60>)
 80053c0:	f007 fe6a 	bl	800d098 <iprintf>
  return q;
 80053c4:	68fb      	ldr	r3, [r7, #12]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	0800e490 	.word	0x0800e490
 80053d4:	0800e904 	.word	0x0800e904
 80053d8:	0800e4f0 	.word	0x0800e4f0

080053dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80053e0:	f007 fd5a 	bl	800ce98 <rand>
 80053e4:	4603      	mov	r3, r0
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	4b01      	ldr	r3, [pc, #4]	@ (80053fc <tcp_init+0x20>)
 80053f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80053f8:	bf00      	nop
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000020 	.word	0x20000020

08005400 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	7d1b      	ldrb	r3, [r3, #20]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d105      	bne.n	800541c <tcp_free+0x1c>
 8005410:	4b06      	ldr	r3, [pc, #24]	@ (800542c <tcp_free+0x2c>)
 8005412:	22d4      	movs	r2, #212	@ 0xd4
 8005414:	4906      	ldr	r1, [pc, #24]	@ (8005430 <tcp_free+0x30>)
 8005416:	4807      	ldr	r0, [pc, #28]	@ (8005434 <tcp_free+0x34>)
 8005418:	f007 fe3e 	bl	800d098 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	2000      	movs	r0, #0
 8005420:	f7fe fedc 	bl	80041dc <memp_free>
}
 8005424:	bf00      	nop
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	0800e990 	.word	0x0800e990
 8005430:	0800e9c0 	.word	0x0800e9c0
 8005434:	0800e9d4 	.word	0x0800e9d4

08005438 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	7d1b      	ldrb	r3, [r3, #20]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d105      	bne.n	8005454 <tcp_free_listen+0x1c>
 8005448:	4b06      	ldr	r3, [pc, #24]	@ (8005464 <tcp_free_listen+0x2c>)
 800544a:	22df      	movs	r2, #223	@ 0xdf
 800544c:	4906      	ldr	r1, [pc, #24]	@ (8005468 <tcp_free_listen+0x30>)
 800544e:	4807      	ldr	r0, [pc, #28]	@ (800546c <tcp_free_listen+0x34>)
 8005450:	f007 fe22 	bl	800d098 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	2001      	movs	r0, #1
 8005458:	f7fe fec0 	bl	80041dc <memp_free>
}
 800545c:	bf00      	nop
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	0800e990 	.word	0x0800e990
 8005468:	0800e9fc 	.word	0x0800e9fc
 800546c:	0800e9d4 	.word	0x0800e9d4

08005470 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005474:	f000 fea4 	bl	80061c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005478:	4b07      	ldr	r3, [pc, #28]	@ (8005498 <tcp_tmr+0x28>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	b2da      	uxtb	r2, r3
 8005480:	4b05      	ldr	r3, [pc, #20]	@ (8005498 <tcp_tmr+0x28>)
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	4b04      	ldr	r3, [pc, #16]	@ (8005498 <tcp_tmr+0x28>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005490:	f000 fb54 	bl	8005b3c <tcp_slowtmr>
  }
}
 8005494:	bf00      	nop
 8005496:	bd80      	pop	{r7, pc}
 8005498:	200081c9 	.word	0x200081c9

0800549c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d105      	bne.n	80054b8 <tcp_remove_listener+0x1c>
 80054ac:	4b0d      	ldr	r3, [pc, #52]	@ (80054e4 <tcp_remove_listener+0x48>)
 80054ae:	22ff      	movs	r2, #255	@ 0xff
 80054b0:	490d      	ldr	r1, [pc, #52]	@ (80054e8 <tcp_remove_listener+0x4c>)
 80054b2:	480e      	ldr	r0, [pc, #56]	@ (80054ec <tcp_remove_listener+0x50>)
 80054b4:	f007 fdf0 	bl	800d098 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e00a      	b.n	80054d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d102      	bne.n	80054ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f1      	bne.n	80054be <tcp_remove_listener+0x22>
    }
  }
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	0800e990 	.word	0x0800e990
 80054e8:	0800ea18 	.word	0x0800ea18
 80054ec:	0800e9d4 	.word	0x0800e9d4

080054f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <tcp_listen_closed+0x1c>
 80054fe:	4b14      	ldr	r3, [pc, #80]	@ (8005550 <tcp_listen_closed+0x60>)
 8005500:	f240 1211 	movw	r2, #273	@ 0x111
 8005504:	4913      	ldr	r1, [pc, #76]	@ (8005554 <tcp_listen_closed+0x64>)
 8005506:	4814      	ldr	r0, [pc, #80]	@ (8005558 <tcp_listen_closed+0x68>)
 8005508:	f007 fdc6 	bl	800d098 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	7d1b      	ldrb	r3, [r3, #20]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d006      	beq.n	8005522 <tcp_listen_closed+0x32>
 8005514:	4b0e      	ldr	r3, [pc, #56]	@ (8005550 <tcp_listen_closed+0x60>)
 8005516:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800551a:	4910      	ldr	r1, [pc, #64]	@ (800555c <tcp_listen_closed+0x6c>)
 800551c:	480e      	ldr	r0, [pc, #56]	@ (8005558 <tcp_listen_closed+0x68>)
 800551e:	f007 fdbb 	bl	800d098 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005522:	2301      	movs	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	e00b      	b.n	8005540 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005528:	4a0d      	ldr	r2, [pc, #52]	@ (8005560 <tcp_listen_closed+0x70>)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff ffb1 	bl	800549c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b03      	cmp	r3, #3
 8005544:	d9f0      	bls.n	8005528 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	0800e990 	.word	0x0800e990
 8005554:	0800ea40 	.word	0x0800ea40
 8005558:	0800e9d4 	.word	0x0800e9d4
 800555c:	0800ea4c 	.word	0x0800ea4c
 8005560:	080105f4 	.word	0x080105f4

08005564 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005564:	b5b0      	push	{r4, r5, r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af04      	add	r7, sp, #16
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <tcp_close_shutdown+0x20>
 8005576:	4b63      	ldr	r3, [pc, #396]	@ (8005704 <tcp_close_shutdown+0x1a0>)
 8005578:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800557c:	4962      	ldr	r1, [pc, #392]	@ (8005708 <tcp_close_shutdown+0x1a4>)
 800557e:	4863      	ldr	r0, [pc, #396]	@ (800570c <tcp_close_shutdown+0x1a8>)
 8005580:	f007 fd8a 	bl	800d098 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d066      	beq.n	8005658 <tcp_close_shutdown+0xf4>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	7d1b      	ldrb	r3, [r3, #20]
 800558e:	2b04      	cmp	r3, #4
 8005590:	d003      	beq.n	800559a <tcp_close_shutdown+0x36>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	7d1b      	ldrb	r3, [r3, #20]
 8005596:	2b07      	cmp	r3, #7
 8005598:	d15e      	bne.n	8005658 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d104      	bne.n	80055ac <tcp_close_shutdown+0x48>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80055aa:	d055      	beq.n	8005658 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	8b5b      	ldrh	r3, [r3, #26]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d106      	bne.n	80055c6 <tcp_close_shutdown+0x62>
 80055b8:	4b52      	ldr	r3, [pc, #328]	@ (8005704 <tcp_close_shutdown+0x1a0>)
 80055ba:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80055be:	4954      	ldr	r1, [pc, #336]	@ (8005710 <tcp_close_shutdown+0x1ac>)
 80055c0:	4852      	ldr	r0, [pc, #328]	@ (800570c <tcp_close_shutdown+0x1a8>)
 80055c2:	f007 fd69 	bl	800d098 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80055ce:	687d      	ldr	r5, [r7, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3304      	adds	r3, #4
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	8ad2      	ldrh	r2, [r2, #22]
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	8b09      	ldrh	r1, [r1, #24]
 80055dc:	9102      	str	r1, [sp, #8]
 80055de:	9201      	str	r2, [sp, #4]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	462b      	mov	r3, r5
 80055e4:	4622      	mov	r2, r4
 80055e6:	4601      	mov	r1, r0
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f004 fe8d 	bl	800a308 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f001 f8c8 	bl	8006784 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80055f4:	4b47      	ldr	r3, [pc, #284]	@ (8005714 <tcp_close_shutdown+0x1b0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d105      	bne.n	800560a <tcp_close_shutdown+0xa6>
 80055fe:	4b45      	ldr	r3, [pc, #276]	@ (8005714 <tcp_close_shutdown+0x1b0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	4a43      	ldr	r2, [pc, #268]	@ (8005714 <tcp_close_shutdown+0x1b0>)
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	e013      	b.n	8005632 <tcp_close_shutdown+0xce>
 800560a:	4b42      	ldr	r3, [pc, #264]	@ (8005714 <tcp_close_shutdown+0x1b0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	e00c      	b.n	800562c <tcp_close_shutdown+0xc8>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	429a      	cmp	r2, r3
 800561a:	d104      	bne.n	8005626 <tcp_close_shutdown+0xc2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	60da      	str	r2, [r3, #12]
 8005624:	e005      	b.n	8005632 <tcp_close_shutdown+0xce>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1ef      	bne.n	8005612 <tcp_close_shutdown+0xae>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	60da      	str	r2, [r3, #12]
 8005638:	4b37      	ldr	r3, [pc, #220]	@ (8005718 <tcp_close_shutdown+0x1b4>)
 800563a:	2201      	movs	r2, #1
 800563c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800563e:	4b37      	ldr	r3, [pc, #220]	@ (800571c <tcp_close_shutdown+0x1b8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	429a      	cmp	r2, r3
 8005646:	d102      	bne.n	800564e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005648:	f003 fd5c 	bl	8009104 <tcp_trigger_input_pcb_close>
 800564c:	e002      	b.n	8005654 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fed6 	bl	8005400 <tcp_free>
      }
      return ERR_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	e050      	b.n	80056fa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	7d1b      	ldrb	r3, [r3, #20]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d03b      	beq.n	80056d8 <tcp_close_shutdown+0x174>
 8005660:	2b02      	cmp	r3, #2
 8005662:	dc44      	bgt.n	80056ee <tcp_close_shutdown+0x18a>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <tcp_close_shutdown+0x10a>
 8005668:	2b01      	cmp	r3, #1
 800566a:	d02a      	beq.n	80056c2 <tcp_close_shutdown+0x15e>
 800566c:	e03f      	b.n	80056ee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	8adb      	ldrh	r3, [r3, #22]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d021      	beq.n	80056ba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005676:	4b2a      	ldr	r3, [pc, #168]	@ (8005720 <tcp_close_shutdown+0x1bc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	d105      	bne.n	800568c <tcp_close_shutdown+0x128>
 8005680:	4b27      	ldr	r3, [pc, #156]	@ (8005720 <tcp_close_shutdown+0x1bc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	4a26      	ldr	r2, [pc, #152]	@ (8005720 <tcp_close_shutdown+0x1bc>)
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	e013      	b.n	80056b4 <tcp_close_shutdown+0x150>
 800568c:	4b24      	ldr	r3, [pc, #144]	@ (8005720 <tcp_close_shutdown+0x1bc>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	e00c      	b.n	80056ae <tcp_close_shutdown+0x14a>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d104      	bne.n	80056a8 <tcp_close_shutdown+0x144>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	60da      	str	r2, [r3, #12]
 80056a6:	e005      	b.n	80056b4 <tcp_close_shutdown+0x150>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	60bb      	str	r3, [r7, #8]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1ef      	bne.n	8005694 <tcp_close_shutdown+0x130>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff fea0 	bl	8005400 <tcp_free>
      break;
 80056c0:	e01a      	b.n	80056f8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff ff14 	bl	80054f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4816      	ldr	r0, [pc, #88]	@ (8005724 <tcp_close_shutdown+0x1c0>)
 80056cc:	f001 f8aa 	bl	8006824 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff feb1 	bl	8005438 <tcp_free_listen>
      break;
 80056d6:	e00f      	b.n	80056f8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	480e      	ldr	r0, [pc, #56]	@ (8005714 <tcp_close_shutdown+0x1b0>)
 80056dc:	f001 f8a2 	bl	8006824 <tcp_pcb_remove>
 80056e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005718 <tcp_close_shutdown+0x1b4>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff fe8a 	bl	8005400 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80056ec:	e004      	b.n	80056f8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f81a 	bl	8005728 <tcp_close_shutdown_fin>
 80056f4:	4603      	mov	r3, r0
 80056f6:	e000      	b.n	80056fa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bdb0      	pop	{r4, r5, r7, pc}
 8005702:	bf00      	nop
 8005704:	0800e990 	.word	0x0800e990
 8005708:	0800ea64 	.word	0x0800ea64
 800570c:	0800e9d4 	.word	0x0800e9d4
 8005710:	0800ea84 	.word	0x0800ea84
 8005714:	200081c0 	.word	0x200081c0
 8005718:	200081c8 	.word	0x200081c8
 800571c:	20008200 	.word	0x20008200
 8005720:	200081b8 	.word	0x200081b8
 8005724:	200081bc 	.word	0x200081bc

08005728 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <tcp_close_shutdown_fin+0x1c>
 8005736:	4b2e      	ldr	r3, [pc, #184]	@ (80057f0 <tcp_close_shutdown_fin+0xc8>)
 8005738:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800573c:	492d      	ldr	r1, [pc, #180]	@ (80057f4 <tcp_close_shutdown_fin+0xcc>)
 800573e:	482e      	ldr	r0, [pc, #184]	@ (80057f8 <tcp_close_shutdown_fin+0xd0>)
 8005740:	f007 fcaa 	bl	800d098 <iprintf>

  switch (pcb->state) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	7d1b      	ldrb	r3, [r3, #20]
 8005748:	2b07      	cmp	r3, #7
 800574a:	d020      	beq.n	800578e <tcp_close_shutdown_fin+0x66>
 800574c:	2b07      	cmp	r3, #7
 800574e:	dc2b      	bgt.n	80057a8 <tcp_close_shutdown_fin+0x80>
 8005750:	2b03      	cmp	r3, #3
 8005752:	d002      	beq.n	800575a <tcp_close_shutdown_fin+0x32>
 8005754:	2b04      	cmp	r3, #4
 8005756:	d00d      	beq.n	8005774 <tcp_close_shutdown_fin+0x4c>
 8005758:	e026      	b.n	80057a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f003 fee2 	bl	8009524 <tcp_send_fin>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d11f      	bne.n	80057ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2205      	movs	r2, #5
 8005770:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005772:	e01b      	b.n	80057ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f003 fed5 	bl	8009524 <tcp_send_fin>
 800577a:	4603      	mov	r3, r0
 800577c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800577e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d114      	bne.n	80057b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2205      	movs	r2, #5
 800578a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800578c:	e010      	b.n	80057b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f003 fec8 	bl	8009524 <tcp_send_fin>
 8005794:	4603      	mov	r3, r0
 8005796:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d109      	bne.n	80057b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2209      	movs	r2, #9
 80057a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80057a6:	e005      	b.n	80057b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e01c      	b.n	80057e6 <tcp_close_shutdown_fin+0xbe>
      break;
 80057ac:	bf00      	nop
 80057ae:	e002      	b.n	80057b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80057b0:	bf00      	nop
 80057b2:	e000      	b.n	80057b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80057b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80057b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f003 ffee 	bl	80097a0 <tcp_output>
 80057c4:	e00d      	b.n	80057e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80057c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d108      	bne.n	80057e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8b5b      	ldrh	r3, [r3, #26]
 80057d4:	f043 0308 	orr.w	r3, r3, #8
 80057d8:	b29a      	uxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	e001      	b.n	80057e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80057e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	0800e990 	.word	0x0800e990
 80057f4:	0800ea40 	.word	0x0800ea40
 80057f8:	0800e9d4 	.word	0x0800e9d4

080057fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d109      	bne.n	800581e <tcp_close+0x22>
 800580a:	4b0f      	ldr	r3, [pc, #60]	@ (8005848 <tcp_close+0x4c>)
 800580c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8005810:	490e      	ldr	r1, [pc, #56]	@ (800584c <tcp_close+0x50>)
 8005812:	480f      	ldr	r0, [pc, #60]	@ (8005850 <tcp_close+0x54>)
 8005814:	f007 fc40 	bl	800d098 <iprintf>
 8005818:	f06f 030f 	mvn.w	r3, #15
 800581c:	e00f      	b.n	800583e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	7d1b      	ldrb	r3, [r3, #20]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d006      	beq.n	8005834 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	8b5b      	ldrh	r3, [r3, #26]
 800582a:	f043 0310 	orr.w	r3, r3, #16
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005834:	2101      	movs	r1, #1
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff fe94 	bl	8005564 <tcp_close_shutdown>
 800583c:	4603      	mov	r3, r0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	0800e990 	.word	0x0800e990
 800584c:	0800eaa0 	.word	0x0800eaa0
 8005850:	0800e9d4 	.word	0x0800e9d4

08005854 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08e      	sub	sp, #56	@ 0x38
 8005858:	af04      	add	r7, sp, #16
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d107      	bne.n	8005874 <tcp_abandon+0x20>
 8005864:	4b52      	ldr	r3, [pc, #328]	@ (80059b0 <tcp_abandon+0x15c>)
 8005866:	f240 223d 	movw	r2, #573	@ 0x23d
 800586a:	4952      	ldr	r1, [pc, #328]	@ (80059b4 <tcp_abandon+0x160>)
 800586c:	4852      	ldr	r0, [pc, #328]	@ (80059b8 <tcp_abandon+0x164>)
 800586e:	f007 fc13 	bl	800d098 <iprintf>
 8005872:	e099      	b.n	80059a8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	7d1b      	ldrb	r3, [r3, #20]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d106      	bne.n	800588a <tcp_abandon+0x36>
 800587c:	4b4c      	ldr	r3, [pc, #304]	@ (80059b0 <tcp_abandon+0x15c>)
 800587e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8005882:	494e      	ldr	r1, [pc, #312]	@ (80059bc <tcp_abandon+0x168>)
 8005884:	484c      	ldr	r0, [pc, #304]	@ (80059b8 <tcp_abandon+0x164>)
 8005886:	f007 fc07 	bl	800d098 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	7d1b      	ldrb	r3, [r3, #20]
 800588e:	2b0a      	cmp	r3, #10
 8005890:	d107      	bne.n	80058a2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	484a      	ldr	r0, [pc, #296]	@ (80059c0 <tcp_abandon+0x16c>)
 8005896:	f000 ffc5 	bl	8006824 <tcp_pcb_remove>
    tcp_free(pcb);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff fdb0 	bl	8005400 <tcp_free>
 80058a0:	e082      	b.n	80059a8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058bc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	7d1b      	ldrb	r3, [r3, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d126      	bne.n	800591a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8adb      	ldrh	r3, [r3, #22]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d02e      	beq.n	8005932 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80058d4:	4b3b      	ldr	r3, [pc, #236]	@ (80059c4 <tcp_abandon+0x170>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d105      	bne.n	80058ea <tcp_abandon+0x96>
 80058de:	4b39      	ldr	r3, [pc, #228]	@ (80059c4 <tcp_abandon+0x170>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4a37      	ldr	r2, [pc, #220]	@ (80059c4 <tcp_abandon+0x170>)
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	e013      	b.n	8005912 <tcp_abandon+0xbe>
 80058ea:	4b36      	ldr	r3, [pc, #216]	@ (80059c4 <tcp_abandon+0x170>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e00c      	b.n	800590c <tcp_abandon+0xb8>
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d104      	bne.n	8005906 <tcp_abandon+0xb2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	60da      	str	r2, [r3, #12]
 8005904:	e005      	b.n	8005912 <tcp_abandon+0xbe>
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1ef      	bne.n	80058f2 <tcp_abandon+0x9e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	60da      	str	r2, [r3, #12]
 8005918:	e00b      	b.n	8005932 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	8adb      	ldrh	r3, [r3, #22]
 8005922:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4828      	ldr	r0, [pc, #160]	@ (80059c8 <tcp_abandon+0x174>)
 8005928:	f000 ff7c 	bl	8006824 <tcp_pcb_remove>
 800592c:	4b27      	ldr	r3, [pc, #156]	@ (80059cc <tcp_abandon+0x178>)
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fd1e 	bl	8006380 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fd15 	bl	8006380 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595a:	2b00      	cmp	r3, #0
 800595c:	d004      	beq.n	8005968 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fd0c 	bl	8006380 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00e      	beq.n	800598c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3304      	adds	r3, #4
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	8b12      	ldrh	r2, [r2, #24]
 8005978:	9202      	str	r2, [sp, #8]
 800597a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800597c:	9201      	str	r2, [sp, #4]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	460b      	mov	r3, r1
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	69b9      	ldr	r1, [r7, #24]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f004 fcbe 	bl	800a308 <tcp_rst>
    }
    last_state = pcb->state;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	7d1b      	ldrb	r3, [r3, #20]
 8005990:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fd34 	bl	8005400 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d004      	beq.n	80059a8 <tcp_abandon+0x154>
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f06f 010c 	mvn.w	r1, #12
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	4798      	blx	r3
  }
}
 80059a8:	3728      	adds	r7, #40	@ 0x28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	0800e990 	.word	0x0800e990
 80059b4:	0800ead4 	.word	0x0800ead4
 80059b8:	0800e9d4 	.word	0x0800e9d4
 80059bc:	0800eaf0 	.word	0x0800eaf0
 80059c0:	200081c4 	.word	0x200081c4
 80059c4:	200081b8 	.word	0x200081b8
 80059c8:	200081c0 	.word	0x200081c0
 80059cc:	200081c8 	.word	0x200081c8

080059d0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80059d8:	2101      	movs	r1, #1
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff ff3a 	bl	8005854 <tcp_abandon>
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <tcp_update_rcv_ann_wnd+0x1c>
 80059f6:	4b25      	ldr	r3, [pc, #148]	@ (8005a8c <tcp_update_rcv_ann_wnd+0xa4>)
 80059f8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80059fc:	4924      	ldr	r1, [pc, #144]	@ (8005a90 <tcp_update_rcv_ann_wnd+0xa8>)
 80059fe:	4825      	ldr	r0, [pc, #148]	@ (8005a94 <tcp_update_rcv_ann_wnd+0xac>)
 8005a00:	f007 fb4a 	bl	800d098 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005a0c:	4413      	add	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8005a18:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8005a1c:	bf28      	it	cs
 8005a1e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8005a22:	b292      	uxth	r2, r2
 8005a24:	4413      	add	r3, r2
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	db08      	blt.n	8005a40 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	e020      	b.n	8005a82 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	dd03      	ble.n	8005a56 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a54:	e014      	b.n	8005a80 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a68:	d306      	bcc.n	8005a78 <tcp_update_rcv_ann_wnd+0x90>
 8005a6a:	4b08      	ldr	r3, [pc, #32]	@ (8005a8c <tcp_update_rcv_ann_wnd+0xa4>)
 8005a6c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8005a70:	4909      	ldr	r1, [pc, #36]	@ (8005a98 <tcp_update_rcv_ann_wnd+0xb0>)
 8005a72:	4808      	ldr	r0, [pc, #32]	@ (8005a94 <tcp_update_rcv_ann_wnd+0xac>)
 8005a74:	f007 fb10 	bl	800d098 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8005a80:	2300      	movs	r3, #0
  }
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	0800e990 	.word	0x0800e990
 8005a90:	0800ebec 	.word	0x0800ebec
 8005a94:	0800e9d4 	.word	0x0800e9d4
 8005a98:	0800ec10 	.word	0x0800ec10

08005a9c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d107      	bne.n	8005abe <tcp_recved+0x22>
 8005aae:	4b1f      	ldr	r3, [pc, #124]	@ (8005b2c <tcp_recved+0x90>)
 8005ab0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8005ab4:	491e      	ldr	r1, [pc, #120]	@ (8005b30 <tcp_recved+0x94>)
 8005ab6:	481f      	ldr	r0, [pc, #124]	@ (8005b34 <tcp_recved+0x98>)
 8005ab8:	f007 faee 	bl	800d098 <iprintf>
 8005abc:	e032      	b.n	8005b24 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	7d1b      	ldrb	r3, [r3, #20]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d106      	bne.n	8005ad4 <tcp_recved+0x38>
 8005ac6:	4b19      	ldr	r3, [pc, #100]	@ (8005b2c <tcp_recved+0x90>)
 8005ac8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8005acc:	491a      	ldr	r1, [pc, #104]	@ (8005b38 <tcp_recved+0x9c>)
 8005ace:	4819      	ldr	r0, [pc, #100]	@ (8005b34 <tcp_recved+0x98>)
 8005ad0:	f007 fae2 	bl	800d098 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005ad8:	887b      	ldrh	r3, [r7, #2]
 8005ada:	4413      	add	r3, r2
 8005adc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005ade:	89fb      	ldrh	r3, [r7, #14]
 8005ae0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005ae4:	d804      	bhi.n	8005af0 <tcp_recved+0x54>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aea:	89fa      	ldrh	r2, [r7, #14]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d204      	bcs.n	8005afa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8005af6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005af8:	e002      	b.n	8005b00 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	89fa      	ldrh	r2, [r7, #14]
 8005afe:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff ff71 	bl	80059e8 <tcp_update_rcv_ann_wnd>
 8005b06:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8005b0e:	d309      	bcc.n	8005b24 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	8b5b      	ldrh	r3, [r3, #26]
 8005b14:	f043 0302 	orr.w	r3, r3, #2
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f003 fe3e 	bl	80097a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	0800e990 	.word	0x0800e990
 8005b30:	0800ec2c 	.word	0x0800ec2c
 8005b34:	0800e9d4 	.word	0x0800e9d4
 8005b38:	0800ec44 	.word	0x0800ec44

08005b3c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005b3c:	b5b0      	push	{r4, r5, r7, lr}
 8005b3e:	b090      	sub	sp, #64	@ 0x40
 8005b40:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8005b48:	4b95      	ldr	r3, [pc, #596]	@ (8005da0 <tcp_slowtmr+0x264>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	4a94      	ldr	r2, [pc, #592]	@ (8005da0 <tcp_slowtmr+0x264>)
 8005b50:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005b52:	4b94      	ldr	r3, [pc, #592]	@ (8005da4 <tcp_slowtmr+0x268>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	3301      	adds	r3, #1
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	4b92      	ldr	r3, [pc, #584]	@ (8005da4 <tcp_slowtmr+0x268>)
 8005b5c:	701a      	strb	r2, [r3, #0]
 8005b5e:	e000      	b.n	8005b62 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8005b60:	bf00      	nop
  prev = NULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8005b66:	4b90      	ldr	r3, [pc, #576]	@ (8005da8 <tcp_slowtmr+0x26c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8005b6c:	e29f      	b.n	80060ae <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b70:	7d1b      	ldrb	r3, [r3, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <tcp_slowtmr+0x48>
 8005b76:	4b8d      	ldr	r3, [pc, #564]	@ (8005dac <tcp_slowtmr+0x270>)
 8005b78:	f240 42be 	movw	r2, #1214	@ 0x4be
 8005b7c:	498c      	ldr	r1, [pc, #560]	@ (8005db0 <tcp_slowtmr+0x274>)
 8005b7e:	488d      	ldr	r0, [pc, #564]	@ (8005db4 <tcp_slowtmr+0x278>)
 8005b80:	f007 fa8a 	bl	800d098 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b86:	7d1b      	ldrb	r3, [r3, #20]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d106      	bne.n	8005b9a <tcp_slowtmr+0x5e>
 8005b8c:	4b87      	ldr	r3, [pc, #540]	@ (8005dac <tcp_slowtmr+0x270>)
 8005b8e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8005b92:	4989      	ldr	r1, [pc, #548]	@ (8005db8 <tcp_slowtmr+0x27c>)
 8005b94:	4887      	ldr	r0, [pc, #540]	@ (8005db4 <tcp_slowtmr+0x278>)
 8005b96:	f007 fa7f 	bl	800d098 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9c:	7d1b      	ldrb	r3, [r3, #20]
 8005b9e:	2b0a      	cmp	r3, #10
 8005ba0:	d106      	bne.n	8005bb0 <tcp_slowtmr+0x74>
 8005ba2:	4b82      	ldr	r3, [pc, #520]	@ (8005dac <tcp_slowtmr+0x270>)
 8005ba4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8005ba8:	4984      	ldr	r1, [pc, #528]	@ (8005dbc <tcp_slowtmr+0x280>)
 8005baa:	4882      	ldr	r0, [pc, #520]	@ (8005db4 <tcp_slowtmr+0x278>)
 8005bac:	f007 fa74 	bl	800d098 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb2:	7f9a      	ldrb	r2, [r3, #30]
 8005bb4:	4b7b      	ldr	r3, [pc, #492]	@ (8005da4 <tcp_slowtmr+0x268>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d105      	bne.n	8005bc8 <tcp_slowtmr+0x8c>
      prev = pcb;
 8005bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8005bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8005bc6:	e272      	b.n	80060ae <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8005bc8:	4b76      	ldr	r3, [pc, #472]	@ (8005da4 <tcp_slowtmr+0x268>)
 8005bca:	781a      	ldrb	r2, [r3, #0]
 8005bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bce:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bde:	7d1b      	ldrb	r3, [r3, #20]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d10a      	bne.n	8005bfa <tcp_slowtmr+0xbe>
 8005be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bea:	2b05      	cmp	r3, #5
 8005bec:	d905      	bls.n	8005bfa <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8005bee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005bf8:	e11e      	b.n	8005e38 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c00:	2b0b      	cmp	r3, #11
 8005c02:	d905      	bls.n	8005c10 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8005c04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c08:	3301      	adds	r3, #1
 8005c0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005c0e:	e113      	b.n	8005e38 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8005c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c12:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d075      	beq.n	8005d06 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d006      	beq.n	8005c30 <tcp_slowtmr+0xf4>
 8005c22:	4b62      	ldr	r3, [pc, #392]	@ (8005dac <tcp_slowtmr+0x270>)
 8005c24:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8005c28:	4965      	ldr	r1, [pc, #404]	@ (8005dc0 <tcp_slowtmr+0x284>)
 8005c2a:	4862      	ldr	r0, [pc, #392]	@ (8005db4 <tcp_slowtmr+0x278>)
 8005c2c:	f007 fa34 	bl	800d098 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <tcp_slowtmr+0x10a>
 8005c38:	4b5c      	ldr	r3, [pc, #368]	@ (8005dac <tcp_slowtmr+0x270>)
 8005c3a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8005c3e:	4961      	ldr	r1, [pc, #388]	@ (8005dc4 <tcp_slowtmr+0x288>)
 8005c40:	485c      	ldr	r0, [pc, #368]	@ (8005db4 <tcp_slowtmr+0x278>)
 8005c42:	f007 fa29 	bl	800d098 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c48:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8005c4c:	2b0b      	cmp	r3, #11
 8005c4e:	d905      	bls.n	8005c5c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8005c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c54:	3301      	adds	r3, #1
 8005c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005c5a:	e0ed      	b.n	8005e38 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005c62:	3b01      	subs	r3, #1
 8005c64:	4a58      	ldr	r2, [pc, #352]	@ (8005dc8 <tcp_slowtmr+0x28c>)
 8005c66:	5cd3      	ldrb	r3, [r2, r3]
 8005c68:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005c70:	7c7a      	ldrb	r2, [r7, #17]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d907      	bls.n	8005c86 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8005c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c78:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c82:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8005c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c88:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005c8c:	7c7a      	ldrb	r2, [r7, #17]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	f200 80d2 	bhi.w	8005e38 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8005c94:	2301      	movs	r3, #1
 8005c96:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8005c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d108      	bne.n	8005cb4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005ca2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ca4:	f004 fc24 	bl	800a4f0 <tcp_zero_window_probe>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d014      	beq.n	8005cd8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8005cae:	2300      	movs	r3, #0
 8005cb0:	623b      	str	r3, [r7, #32]
 8005cb2:	e011      	b.n	8005cd8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cbe:	f003 fae9 	bl	8009294 <tcp_split_unsent_seg>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d107      	bne.n	8005cd8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8005cc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cca:	f003 fd69 	bl	80097a0 <tcp_output>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 80ac 	beq.w	8005e38 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8005ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	f200 80a2 	bhi.w	8005e38 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8005cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cf6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d00:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8005d04:	e098      	b.n	8005e38 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	db0f      	blt.n	8005d30 <tcp_slowtmr+0x1f4>
 8005d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d12:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005d16:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d008      	beq.n	8005d30 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8005d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3301      	adds	r3, #1
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	b21a      	sxth	r2, r3
 8005d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8005d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d32:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8005d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d38:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	db7b      	blt.n	8005e38 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005d40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d42:	f004 f821 	bl	8009d88 <tcp_rexmit_rto_prepare>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d007      	beq.n	8005d5c <tcp_slowtmr+0x220>
 8005d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d171      	bne.n	8005e38 <tcp_slowtmr+0x2fc>
 8005d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d06d      	beq.n	8005e38 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8005d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5e:	7d1b      	ldrb	r3, [r3, #20]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d03a      	beq.n	8005dda <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d6a:	2b0c      	cmp	r3, #12
 8005d6c:	bf28      	it	cs
 8005d6e:	230c      	movcs	r3, #12
 8005d70:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8005d78:	10db      	asrs	r3, r3, #3
 8005d7a:	b21b      	sxth	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8005d84:	4413      	add	r3, r2
 8005d86:	7efa      	ldrb	r2, [r7, #27]
 8005d88:	4910      	ldr	r1, [pc, #64]	@ (8005dcc <tcp_slowtmr+0x290>)
 8005d8a:	5c8a      	ldrb	r2, [r1, r2]
 8005d8c:	4093      	lsls	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8005d96:	4293      	cmp	r3, r2
 8005d98:	dc1a      	bgt.n	8005dd0 <tcp_slowtmr+0x294>
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	b21a      	sxth	r2, r3
 8005d9e:	e019      	b.n	8005dd4 <tcp_slowtmr+0x298>
 8005da0:	200081b4 	.word	0x200081b4
 8005da4:	200081ca 	.word	0x200081ca
 8005da8:	200081c0 	.word	0x200081c0
 8005dac:	0800e990 	.word	0x0800e990
 8005db0:	0800ecd4 	.word	0x0800ecd4
 8005db4:	0800e9d4 	.word	0x0800e9d4
 8005db8:	0800ed00 	.word	0x0800ed00
 8005dbc:	0800ed2c 	.word	0x0800ed2c
 8005dc0:	0800ed5c 	.word	0x0800ed5c
 8005dc4:	0800ed90 	.word	0x0800ed90
 8005dc8:	080105ec 	.word	0x080105ec
 8005dcc:	080105dc 	.word	0x080105dc
 8005dd0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8005dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8005dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ddc:	2200      	movs	r2, #0
 8005dde:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8005de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005dec:	4293      	cmp	r3, r2
 8005dee:	bf28      	it	cs
 8005df0:	4613      	movcs	r3, r2
 8005df2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005df4:	8a7b      	ldrh	r3, [r7, #18]
 8005df6:	085b      	lsrs	r3, r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8005e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d206      	bcs.n	8005e20 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8005e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e22:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8005e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e26:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8005e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8005e32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e34:	f004 f818 	bl	8009e68 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8005e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3a:	7d1b      	ldrb	r3, [r3, #20]
 8005e3c:	2b06      	cmp	r3, #6
 8005e3e:	d111      	bne.n	8005e64 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8005e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e42:	8b5b      	ldrh	r3, [r3, #26]
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00b      	beq.n	8005e64 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e4c:	4b9d      	ldr	r3, [pc, #628]	@ (80060c4 <tcp_slowtmr+0x588>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b28      	cmp	r3, #40	@ 0x28
 8005e58:	d904      	bls.n	8005e64 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8005e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e5e:	3301      	adds	r3, #1
 8005e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e66:	7a5b      	ldrb	r3, [r3, #9]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d04c      	beq.n	8005f0a <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8005e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e72:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d003      	beq.n	8005e80 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8005e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005e7c:	2b07      	cmp	r3, #7
 8005e7e:	d144      	bne.n	8005f0a <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005e80:	4b90      	ldr	r3, [pc, #576]	@ (80060c4 <tcp_slowtmr+0x588>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e90:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8005e94:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8005e98:	498b      	ldr	r1, [pc, #556]	@ (80060c8 <tcp_slowtmr+0x58c>)
 8005e9a:	fba1 1303 	umull	r1, r3, r1, r3
 8005e9e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d90a      	bls.n	8005eba <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8005ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8005eae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005eb8:	e027      	b.n	8005f0a <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005eba:	4b82      	ldr	r3, [pc, #520]	@ (80060c4 <tcp_slowtmr+0x588>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8005eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ecc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	4b7e      	ldr	r3, [pc, #504]	@ (80060cc <tcp_slowtmr+0x590>)
 8005ed4:	fb00 f303 	mul.w	r3, r0, r3
 8005ed8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005eda:	497b      	ldr	r1, [pc, #492]	@ (80060c8 <tcp_slowtmr+0x58c>)
 8005edc:	fba1 1303 	umull	r1, r3, r1, r3
 8005ee0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d911      	bls.n	8005f0a <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8005ee6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ee8:	f004 fac2 	bl	800a470 <tcp_keepalive>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8005ef2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d107      	bne.n	8005f0a <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8005efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8005f00:	3301      	adds	r3, #1
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f06:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8005f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d011      	beq.n	8005f36 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8005f12:	4b6c      	ldr	r3, [pc, #432]	@ (80060c4 <tcp_slowtmr+0x588>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	1ad2      	subs	r2, r2, r3
 8005f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8005f22:	4619      	mov	r1, r3
 8005f24:	460b      	mov	r3, r1
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	440b      	add	r3, r1
 8005f2a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d302      	bcc.n	8005f36 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8005f30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f32:	f000 fddb 	bl	8006aec <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8005f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f38:	7d1b      	ldrb	r3, [r3, #20]
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d10b      	bne.n	8005f56 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f3e:	4b61      	ldr	r3, [pc, #388]	@ (80060c4 <tcp_slowtmr+0x588>)
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b28      	cmp	r3, #40	@ 0x28
 8005f4a:	d904      	bls.n	8005f56 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8005f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f50:	3301      	adds	r3, #1
 8005f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8005f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f58:	7d1b      	ldrb	r3, [r3, #20]
 8005f5a:	2b09      	cmp	r3, #9
 8005f5c:	d10b      	bne.n	8005f76 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005f5e:	4b59      	ldr	r3, [pc, #356]	@ (80060c4 <tcp_slowtmr+0x588>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2bf0      	cmp	r3, #240	@ 0xf0
 8005f6a:	d904      	bls.n	8005f76 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8005f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f70:	3301      	adds	r3, #1
 8005f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8005f76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d060      	beq.n	8006040 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8005f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f84:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8005f86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f88:	f000 fbfc 	bl	8006784 <tcp_pcb_purge>
      if (prev != NULL) {
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d010      	beq.n	8005fb4 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005f92:	4b4f      	ldr	r3, [pc, #316]	@ (80060d0 <tcp_slowtmr+0x594>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d106      	bne.n	8005faa <tcp_slowtmr+0x46e>
 8005f9c:	4b4d      	ldr	r3, [pc, #308]	@ (80060d4 <tcp_slowtmr+0x598>)
 8005f9e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8005fa2:	494d      	ldr	r1, [pc, #308]	@ (80060d8 <tcp_slowtmr+0x59c>)
 8005fa4:	484d      	ldr	r0, [pc, #308]	@ (80060dc <tcp_slowtmr+0x5a0>)
 8005fa6:	f007 f877 	bl	800d098 <iprintf>
        prev->next = pcb->next;
 8005faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb0:	60da      	str	r2, [r3, #12]
 8005fb2:	e00f      	b.n	8005fd4 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005fb4:	4b46      	ldr	r3, [pc, #280]	@ (80060d0 <tcp_slowtmr+0x594>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d006      	beq.n	8005fcc <tcp_slowtmr+0x490>
 8005fbe:	4b45      	ldr	r3, [pc, #276]	@ (80060d4 <tcp_slowtmr+0x598>)
 8005fc0:	f240 5271 	movw	r2, #1393	@ 0x571
 8005fc4:	4946      	ldr	r1, [pc, #280]	@ (80060e0 <tcp_slowtmr+0x5a4>)
 8005fc6:	4845      	ldr	r0, [pc, #276]	@ (80060dc <tcp_slowtmr+0x5a0>)
 8005fc8:	f007 f866 	bl	800d098 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4a3f      	ldr	r2, [pc, #252]	@ (80060d0 <tcp_slowtmr+0x594>)
 8005fd2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8005fd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d013      	beq.n	8006004 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fde:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005fe4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8005fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe8:	3304      	adds	r3, #4
 8005fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fec:	8ad2      	ldrh	r2, [r2, #22]
 8005fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ff0:	8b09      	ldrh	r1, [r1, #24]
 8005ff2:	9102      	str	r1, [sp, #8]
 8005ff4:	9201      	str	r2, [sp, #4]
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	462b      	mov	r3, r5
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	4601      	mov	r1, r0
 8005ffe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006000:	f004 f982 	bl	800a308 <tcp_rst>
      err_arg = pcb->callback_arg;
 8006004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800600a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600c:	7d1b      	ldrb	r3, [r3, #20]
 800600e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006012:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800601a:	6838      	ldr	r0, [r7, #0]
 800601c:	f7ff f9f0 	bl	8005400 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8006020:	4b30      	ldr	r3, [pc, #192]	@ (80060e4 <tcp_slowtmr+0x5a8>)
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <tcp_slowtmr+0x4fa>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f06f 010c 	mvn.w	r1, #12
 8006032:	68b8      	ldr	r0, [r7, #8]
 8006034:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006036:	4b2b      	ldr	r3, [pc, #172]	@ (80060e4 <tcp_slowtmr+0x5a8>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d037      	beq.n	80060ae <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800603e:	e590      	b.n	8005b62 <tcp_slowtmr+0x26>
      prev = pcb;
 8006040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006042:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800604a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604c:	7f1b      	ldrb	r3, [r3, #28]
 800604e:	3301      	adds	r3, #1
 8006050:	b2da      	uxtb	r2, r3
 8006052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006054:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006058:	7f1a      	ldrb	r2, [r3, #28]
 800605a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605c:	7f5b      	ldrb	r3, [r3, #29]
 800605e:	429a      	cmp	r2, r3
 8006060:	d325      	bcc.n	80060ae <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8006062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8006068:	4b1e      	ldr	r3, [pc, #120]	@ (80060e4 <tcp_slowtmr+0x5a8>)
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <tcp_slowtmr+0x554>
 8006078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800607e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006080:	6912      	ldr	r2, [r2, #16]
 8006082:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006084:	4610      	mov	r0, r2
 8006086:	4798      	blx	r3
 8006088:	4603      	mov	r3, r0
 800608a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800608e:	e002      	b.n	8006096 <tcp_slowtmr+0x55a>
 8006090:	2300      	movs	r3, #0
 8006092:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8006096:	4b13      	ldr	r3, [pc, #76]	@ (80060e4 <tcp_slowtmr+0x5a8>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f47f ad60 	bne.w	8005b60 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80060a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d102      	bne.n	80060ae <tcp_slowtmr+0x572>
          tcp_output(prev);
 80060a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060aa:	f003 fb79 	bl	80097a0 <tcp_output>
  while (pcb != NULL) {
 80060ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f47f ad5c 	bne.w	8005b6e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80060ba:	4b0b      	ldr	r3, [pc, #44]	@ (80060e8 <tcp_slowtmr+0x5ac>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80060c0:	e067      	b.n	8006192 <tcp_slowtmr+0x656>
 80060c2:	bf00      	nop
 80060c4:	200081b4 	.word	0x200081b4
 80060c8:	10624dd3 	.word	0x10624dd3
 80060cc:	000124f8 	.word	0x000124f8
 80060d0:	200081c0 	.word	0x200081c0
 80060d4:	0800e990 	.word	0x0800e990
 80060d8:	0800edc8 	.word	0x0800edc8
 80060dc:	0800e9d4 	.word	0x0800e9d4
 80060e0:	0800edf4 	.word	0x0800edf4
 80060e4:	200081c8 	.word	0x200081c8
 80060e8:	200081c4 	.word	0x200081c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80060ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ee:	7d1b      	ldrb	r3, [r3, #20]
 80060f0:	2b0a      	cmp	r3, #10
 80060f2:	d006      	beq.n	8006102 <tcp_slowtmr+0x5c6>
 80060f4:	4b2b      	ldr	r3, [pc, #172]	@ (80061a4 <tcp_slowtmr+0x668>)
 80060f6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80060fa:	492b      	ldr	r1, [pc, #172]	@ (80061a8 <tcp_slowtmr+0x66c>)
 80060fc:	482b      	ldr	r0, [pc, #172]	@ (80061ac <tcp_slowtmr+0x670>)
 80060fe:	f006 ffcb 	bl	800d098 <iprintf>
    pcb_remove = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006108:	4b29      	ldr	r3, [pc, #164]	@ (80061b0 <tcp_slowtmr+0x674>)
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2bf0      	cmp	r3, #240	@ 0xf0
 8006114:	d904      	bls.n	8006120 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8006116:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800611a:	3301      	adds	r3, #1
 800611c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006124:	2b00      	cmp	r3, #0
 8006126:	d02f      	beq.n	8006188 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006128:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800612a:	f000 fb2b 	bl	8006784 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800612e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006130:	2b00      	cmp	r3, #0
 8006132:	d010      	beq.n	8006156 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006134:	4b1f      	ldr	r3, [pc, #124]	@ (80061b4 <tcp_slowtmr+0x678>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800613a:	429a      	cmp	r2, r3
 800613c:	d106      	bne.n	800614c <tcp_slowtmr+0x610>
 800613e:	4b19      	ldr	r3, [pc, #100]	@ (80061a4 <tcp_slowtmr+0x668>)
 8006140:	f240 52af 	movw	r2, #1455	@ 0x5af
 8006144:	491c      	ldr	r1, [pc, #112]	@ (80061b8 <tcp_slowtmr+0x67c>)
 8006146:	4819      	ldr	r0, [pc, #100]	@ (80061ac <tcp_slowtmr+0x670>)
 8006148:	f006 ffa6 	bl	800d098 <iprintf>
        prev->next = pcb->next;
 800614c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006152:	60da      	str	r2, [r3, #12]
 8006154:	e00f      	b.n	8006176 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006156:	4b17      	ldr	r3, [pc, #92]	@ (80061b4 <tcp_slowtmr+0x678>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800615c:	429a      	cmp	r2, r3
 800615e:	d006      	beq.n	800616e <tcp_slowtmr+0x632>
 8006160:	4b10      	ldr	r3, [pc, #64]	@ (80061a4 <tcp_slowtmr+0x668>)
 8006162:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8006166:	4915      	ldr	r1, [pc, #84]	@ (80061bc <tcp_slowtmr+0x680>)
 8006168:	4810      	ldr	r0, [pc, #64]	@ (80061ac <tcp_slowtmr+0x670>)
 800616a:	f006 ff95 	bl	800d098 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	4a10      	ldr	r2, [pc, #64]	@ (80061b4 <tcp_slowtmr+0x678>)
 8006174:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006178:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800617a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006180:	69f8      	ldr	r0, [r7, #28]
 8006182:	f7ff f93d 	bl	8005400 <tcp_free>
 8006186:	e004      	b.n	8006192 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8006188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800618c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1a9      	bne.n	80060ec <tcp_slowtmr+0x5b0>
    }
  }
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	3730      	adds	r7, #48	@ 0x30
 800619e:	46bd      	mov	sp, r7
 80061a0:	bdb0      	pop	{r4, r5, r7, pc}
 80061a2:	bf00      	nop
 80061a4:	0800e990 	.word	0x0800e990
 80061a8:	0800ee20 	.word	0x0800ee20
 80061ac:	0800e9d4 	.word	0x0800e9d4
 80061b0:	200081b4 	.word	0x200081b4
 80061b4:	200081c4 	.word	0x200081c4
 80061b8:	0800ee50 	.word	0x0800ee50
 80061bc:	0800ee78 	.word	0x0800ee78

080061c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80061c6:	4b2d      	ldr	r3, [pc, #180]	@ (800627c <tcp_fasttmr+0xbc>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	3301      	adds	r3, #1
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	4b2b      	ldr	r3, [pc, #172]	@ (800627c <tcp_fasttmr+0xbc>)
 80061d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80061d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006280 <tcp_fasttmr+0xc0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80061d8:	e048      	b.n	800626c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	7f9a      	ldrb	r2, [r3, #30]
 80061de:	4b27      	ldr	r3, [pc, #156]	@ (800627c <tcp_fasttmr+0xbc>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d03f      	beq.n	8006266 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80061e6:	4b25      	ldr	r3, [pc, #148]	@ (800627c <tcp_fasttmr+0xbc>)
 80061e8:	781a      	ldrb	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	8b5b      	ldrh	r3, [r3, #26]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d010      	beq.n	800621c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8b5b      	ldrh	r3, [r3, #26]
 80061fe:	f043 0302 	orr.w	r3, r3, #2
 8006202:	b29a      	uxth	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f003 fac9 	bl	80097a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8b5b      	ldrh	r3, [r3, #26]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8b5b      	ldrh	r3, [r3, #26]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8b5b      	ldrh	r3, [r3, #26]
 800622c:	f023 0308 	bic.w	r3, r3, #8
 8006230:	b29a      	uxth	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff fa76 	bl	8005728 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800624a:	4b0e      	ldr	r3, [pc, #56]	@ (8006284 <tcp_fasttmr+0xc4>)
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f819 	bl	8006288 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006256:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <tcp_fasttmr+0xc4>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d000      	beq.n	8006260 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800625e:	e7b8      	b.n	80061d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	607b      	str	r3, [r7, #4]
 8006264:	e002      	b.n	800626c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1b3      	bne.n	80061da <tcp_fasttmr+0x1a>
    }
  }
}
 8006272:	bf00      	nop
 8006274:	bf00      	nop
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	200081ca 	.word	0x200081ca
 8006280:	200081c0 	.word	0x200081c0
 8006284:	200081c8 	.word	0x200081c8

08006288 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006288:	b590      	push	{r4, r7, lr}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <tcp_process_refused_data+0x22>
 8006296:	4b37      	ldr	r3, [pc, #220]	@ (8006374 <tcp_process_refused_data+0xec>)
 8006298:	f240 6209 	movw	r2, #1545	@ 0x609
 800629c:	4936      	ldr	r1, [pc, #216]	@ (8006378 <tcp_process_refused_data+0xf0>)
 800629e:	4837      	ldr	r0, [pc, #220]	@ (800637c <tcp_process_refused_data+0xf4>)
 80062a0:	f006 fefa 	bl	800d098 <iprintf>
 80062a4:	f06f 030f 	mvn.w	r3, #15
 80062a8:	e060      	b.n	800636c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062ae:	7b5b      	ldrb	r3, [r3, #13]
 80062b0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062b6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00b      	beq.n	80062e0 <tcp_process_refused_data+0x58>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6918      	ldr	r0, [r3, #16]
 80062d2:	2300      	movs	r3, #0
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	47a0      	blx	r4
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
 80062de:	e007      	b.n	80062f0 <tcp_process_refused_data+0x68>
 80062e0:	2300      	movs	r3, #0
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	2000      	movs	r0, #0
 80062e8:	f000 f8a4 	bl	8006434 <tcp_recv_null>
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80062f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d12a      	bne.n	800634e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80062f8:	7bbb      	ldrb	r3, [r7, #14]
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d033      	beq.n	800636a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006306:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800630a:	d005      	beq.n	8006318 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006310:	3301      	adds	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <tcp_process_refused_data+0xb2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6918      	ldr	r0, [r3, #16]
 800632c:	2300      	movs	r3, #0
 800632e:	2200      	movs	r2, #0
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	47a0      	blx	r4
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]
 8006338:	e001      	b.n	800633e <tcp_process_refused_data+0xb6>
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800633e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006342:	f113 0f0d 	cmn.w	r3, #13
 8006346:	d110      	bne.n	800636a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006348:	f06f 030c 	mvn.w	r3, #12
 800634c:	e00e      	b.n	800636c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800634e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006352:	f113 0f0d 	cmn.w	r3, #13
 8006356:	d102      	bne.n	800635e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006358:	f06f 030c 	mvn.w	r3, #12
 800635c:	e006      	b.n	800636c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8006364:	f06f 0304 	mvn.w	r3, #4
 8006368:	e000      	b.n	800636c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	bd90      	pop	{r4, r7, pc}
 8006374:	0800e990 	.word	0x0800e990
 8006378:	0800eea0 	.word	0x0800eea0
 800637c:	0800e9d4 	.word	0x0800e9d4

08006380 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006388:	e007      	b.n	800639a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f80a 	bl	80063aa <tcp_seg_free>
    seg = next;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f4      	bne.n	800638a <tcp_segs_free+0xa>
  }
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00c      	beq.n	80063d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fe fd7b 	bl	8004ec0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	2002      	movs	r0, #2
 80063ce:	f7fd ff05 	bl	80041dc <memp_free>
  }
}
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <tcp_seg_copy+0x1c>
 80063ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006428 <tcp_seg_copy+0x4c>)
 80063ec:	f240 6282 	movw	r2, #1666	@ 0x682
 80063f0:	490e      	ldr	r1, [pc, #56]	@ (800642c <tcp_seg_copy+0x50>)
 80063f2:	480f      	ldr	r0, [pc, #60]	@ (8006430 <tcp_seg_copy+0x54>)
 80063f4:	f006 fe50 	bl	800d098 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80063f8:	2002      	movs	r0, #2
 80063fa:	f7fd fe7f 	bl	80040fc <memp_malloc>
 80063fe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <tcp_seg_copy+0x2e>
    return NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	e00a      	b.n	8006420 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800640a:	2210      	movs	r2, #16
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f006 ff1d 	bl	800d24e <memcpy>
  pbuf_ref(cseg->p);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe fdf1 	bl	8005000 <pbuf_ref>
  return cseg;
 800641e:	68fb      	ldr	r3, [r7, #12]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	0800e990 	.word	0x0800e990
 800642c:	0800eee4 	.word	0x0800eee4
 8006430:	0800e9d4 	.word	0x0800e9d4

08006434 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <tcp_recv_null+0x28>
 8006448:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <tcp_recv_null+0x60>)
 800644a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800644e:	4912      	ldr	r1, [pc, #72]	@ (8006498 <tcp_recv_null+0x64>)
 8006450:	4812      	ldr	r0, [pc, #72]	@ (800649c <tcp_recv_null+0x68>)
 8006452:	f006 fe21 	bl	800d098 <iprintf>
 8006456:	f06f 030f 	mvn.w	r3, #15
 800645a:	e016      	b.n	800648a <tcp_recv_null+0x56>

  if (p != NULL) {
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	891b      	ldrh	r3, [r3, #8]
 8006466:	4619      	mov	r1, r3
 8006468:	68b8      	ldr	r0, [r7, #8]
 800646a:	f7ff fb17 	bl	8005a9c <tcp_recved>
    pbuf_free(p);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fe fd26 	bl	8004ec0 <pbuf_free>
 8006474:	e008      	b.n	8006488 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d104      	bne.n	8006488 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800647e:	68b8      	ldr	r0, [r7, #8]
 8006480:	f7ff f9bc 	bl	80057fc <tcp_close>
 8006484:	4603      	mov	r3, r0
 8006486:	e000      	b.n	800648a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	0800e990 	.word	0x0800e990
 8006498:	0800ef00 	.word	0x0800ef00
 800649c:	0800e9d4 	.word	0x0800e9d4

080064a0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80064aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	db01      	blt.n	80064b6 <tcp_kill_prio+0x16>
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	e000      	b.n	80064b8 <tcp_kill_prio+0x18>
 80064b6:	237f      	movs	r3, #127	@ 0x7f
 80064b8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80064ba:	7afb      	ldrb	r3, [r7, #11]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d034      	beq.n	800652a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80064c0:	7afb      	ldrb	r3, [r7, #11]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80064ce:	4b19      	ldr	r3, [pc, #100]	@ (8006534 <tcp_kill_prio+0x94>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e01f      	b.n	8006516 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	7d5b      	ldrb	r3, [r3, #21]
 80064da:	7afa      	ldrb	r2, [r7, #11]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d80c      	bhi.n	80064fa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80064e4:	7afa      	ldrb	r2, [r7, #11]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d112      	bne.n	8006510 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80064ea:	4b13      	ldr	r3, [pc, #76]	@ (8006538 <tcp_kill_prio+0x98>)
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d80a      	bhi.n	8006510 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80064fa:	4b0f      	ldr	r3, [pc, #60]	@ (8006538 <tcp_kill_prio+0x98>)
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	7d5b      	ldrb	r3, [r3, #21]
 800650e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1dc      	bne.n	80064d6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006522:	6938      	ldr	r0, [r7, #16]
 8006524:	f7ff fa54 	bl	80059d0 <tcp_abort>
 8006528:	e000      	b.n	800652c <tcp_kill_prio+0x8c>
    return;
 800652a:	bf00      	nop
  }
}
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	200081c0 	.word	0x200081c0
 8006538:	200081b4 	.word	0x200081b4

0800653c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d009      	beq.n	8006560 <tcp_kill_state+0x24>
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	2b09      	cmp	r3, #9
 8006550:	d006      	beq.n	8006560 <tcp_kill_state+0x24>
 8006552:	4b1a      	ldr	r3, [pc, #104]	@ (80065bc <tcp_kill_state+0x80>)
 8006554:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8006558:	4919      	ldr	r1, [pc, #100]	@ (80065c0 <tcp_kill_state+0x84>)
 800655a:	481a      	ldr	r0, [pc, #104]	@ (80065c4 <tcp_kill_state+0x88>)
 800655c:	f006 fd9c 	bl	800d098 <iprintf>

  inactivity = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006564:	2300      	movs	r3, #0
 8006566:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006568:	4b17      	ldr	r3, [pc, #92]	@ (80065c8 <tcp_kill_state+0x8c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	e017      	b.n	80065a0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	7d1b      	ldrb	r3, [r3, #20]
 8006574:	79fa      	ldrb	r2, [r7, #7]
 8006576:	429a      	cmp	r2, r3
 8006578:	d10f      	bne.n	800659a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800657a:	4b14      	ldr	r3, [pc, #80]	@ (80065cc <tcp_kill_state+0x90>)
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	429a      	cmp	r2, r3
 8006588:	d807      	bhi.n	800659a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800658a:	4b10      	ldr	r3, [pc, #64]	@ (80065cc <tcp_kill_state+0x90>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e4      	bne.n	8006570 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80065ac:	2100      	movs	r1, #0
 80065ae:	6938      	ldr	r0, [r7, #16]
 80065b0:	f7ff f950 	bl	8005854 <tcp_abandon>
  }
}
 80065b4:	bf00      	nop
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	0800e990 	.word	0x0800e990
 80065c0:	0800ef1c 	.word	0x0800ef1c
 80065c4:	0800e9d4 	.word	0x0800e9d4
 80065c8:	200081c0 	.word	0x200081c0
 80065cc:	200081b4 	.word	0x200081b4

080065d0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80065de:	4b12      	ldr	r3, [pc, #72]	@ (8006628 <tcp_kill_timewait+0x58>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	e012      	b.n	800660c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80065e6:	4b11      	ldr	r3, [pc, #68]	@ (800662c <tcp_kill_timewait+0x5c>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d807      	bhi.n	8006606 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80065f6:	4b0d      	ldr	r3, [pc, #52]	@ (800662c <tcp_kill_timewait+0x5c>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e9      	bne.n	80065e6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006618:	68b8      	ldr	r0, [r7, #8]
 800661a:	f7ff f9d9 	bl	80059d0 <tcp_abort>
  }
}
 800661e:	bf00      	nop
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200081c4 	.word	0x200081c4
 800662c:	200081b4 	.word	0x200081b4

08006630 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006636:	4b10      	ldr	r3, [pc, #64]	@ (8006678 <tcp_handle_closepend+0x48>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800663c:	e014      	b.n	8006668 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	8b5b      	ldrh	r3, [r3, #26]
 8006648:	f003 0308 	and.w	r3, r3, #8
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8b5b      	ldrh	r3, [r3, #26]
 8006654:	f023 0308 	bic.w	r3, r3, #8
 8006658:	b29a      	uxth	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff f862 	bl	8005728 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e7      	bne.n	800663e <tcp_handle_closepend+0xe>
  }
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	200081c0 	.word	0x200081c0

0800667c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006686:	2000      	movs	r0, #0
 8006688:	f7fd fd38 	bl	80040fc <memp_malloc>
 800668c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d126      	bne.n	80066e2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006694:	f7ff ffcc 	bl	8006630 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006698:	f7ff ff9a 	bl	80065d0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800669c:	2000      	movs	r0, #0
 800669e:	f7fd fd2d 	bl	80040fc <memp_malloc>
 80066a2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d11b      	bne.n	80066e2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80066aa:	2009      	movs	r0, #9
 80066ac:	f7ff ff46 	bl	800653c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80066b0:	2000      	movs	r0, #0
 80066b2:	f7fd fd23 	bl	80040fc <memp_malloc>
 80066b6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d111      	bne.n	80066e2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80066be:	2008      	movs	r0, #8
 80066c0:	f7ff ff3c 	bl	800653c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80066c4:	2000      	movs	r0, #0
 80066c6:	f7fd fd19 	bl	80040fc <memp_malloc>
 80066ca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d107      	bne.n	80066e2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff fee3 	bl	80064a0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80066da:	2000      	movs	r0, #0
 80066dc:	f7fd fd0e 	bl	80040fc <memp_malloc>
 80066e0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d03f      	beq.n	8006768 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80066e8:	229c      	movs	r2, #156	@ 0x9c
 80066ea:	2100      	movs	r1, #0
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f006 fd38 	bl	800d162 <memset>
    pcb->prio = prio;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	79fa      	ldrb	r2, [r7, #7]
 80066f6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80066fe:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006708:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	22ff      	movs	r2, #255	@ 0xff
 8006716:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800671e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2206      	movs	r2, #6
 8006724:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2206      	movs	r2, #6
 800672c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006734:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2201      	movs	r2, #1
 800673a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800673e:	4b0d      	ldr	r3, [pc, #52]	@ (8006774 <tcp_alloc+0xf8>)
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006746:	4b0c      	ldr	r3, [pc, #48]	@ (8006778 <tcp_alloc+0xfc>)
 8006748:	781a      	ldrb	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006754:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4a08      	ldr	r2, [pc, #32]	@ (800677c <tcp_alloc+0x100>)
 800675c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4a07      	ldr	r2, [pc, #28]	@ (8006780 <tcp_alloc+0x104>)
 8006764:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006768:	68fb      	ldr	r3, [r7, #12]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200081b4 	.word	0x200081b4
 8006778:	200081ca 	.word	0x200081ca
 800677c:	08006435 	.word	0x08006435
 8006780:	006ddd00 	.word	0x006ddd00

08006784 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d107      	bne.n	80067a2 <tcp_pcb_purge+0x1e>
 8006792:	4b21      	ldr	r3, [pc, #132]	@ (8006818 <tcp_pcb_purge+0x94>)
 8006794:	f640 0251 	movw	r2, #2129	@ 0x851
 8006798:	4920      	ldr	r1, [pc, #128]	@ (800681c <tcp_pcb_purge+0x98>)
 800679a:	4821      	ldr	r0, [pc, #132]	@ (8006820 <tcp_pcb_purge+0x9c>)
 800679c:	f006 fc7c 	bl	800d098 <iprintf>
 80067a0:	e037      	b.n	8006812 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	7d1b      	ldrb	r3, [r3, #20]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d033      	beq.n	8006812 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80067ae:	2b0a      	cmp	r3, #10
 80067b0:	d02f      	beq.n	8006812 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d02b      	beq.n	8006812 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe fb7a 	bl	8004ec0 <pbuf_free>
      pcb->refused_data = NULL;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f986 	bl	8006aec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80067e6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff fdc7 	bl	8006380 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff fdc2 	bl	8006380 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	0800e990 	.word	0x0800e990
 800681c:	0800efdc 	.word	0x0800efdc
 8006820:	0800e9d4 	.word	0x0800e9d4

08006824 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <tcp_pcb_remove+0x1e>
 8006834:	4b3e      	ldr	r3, [pc, #248]	@ (8006930 <tcp_pcb_remove+0x10c>)
 8006836:	f640 0283 	movw	r2, #2179	@ 0x883
 800683a:	493e      	ldr	r1, [pc, #248]	@ (8006934 <tcp_pcb_remove+0x110>)
 800683c:	483e      	ldr	r0, [pc, #248]	@ (8006938 <tcp_pcb_remove+0x114>)
 800683e:	f006 fc2b 	bl	800d098 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <tcp_pcb_remove+0x32>
 8006848:	4b39      	ldr	r3, [pc, #228]	@ (8006930 <tcp_pcb_remove+0x10c>)
 800684a:	f640 0284 	movw	r2, #2180	@ 0x884
 800684e:	493b      	ldr	r1, [pc, #236]	@ (800693c <tcp_pcb_remove+0x118>)
 8006850:	4839      	ldr	r0, [pc, #228]	@ (8006938 <tcp_pcb_remove+0x114>)
 8006852:	f006 fc21 	bl	800d098 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	429a      	cmp	r2, r3
 800685e:	d105      	bne.n	800686c <tcp_pcb_remove+0x48>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	e013      	b.n	8006894 <tcp_pcb_remove+0x70>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	e00c      	b.n	800688e <tcp_pcb_remove+0x6a>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d104      	bne.n	8006888 <tcp_pcb_remove+0x64>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	60da      	str	r2, [r3, #12]
 8006886:	e005      	b.n	8006894 <tcp_pcb_remove+0x70>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1ef      	bne.n	8006874 <tcp_pcb_remove+0x50>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2200      	movs	r2, #0
 8006898:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800689a:	6838      	ldr	r0, [r7, #0]
 800689c:	f7ff ff72 	bl	8006784 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	7d1b      	ldrb	r3, [r3, #20]
 80068a4:	2b0a      	cmp	r3, #10
 80068a6:	d013      	beq.n	80068d0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d00f      	beq.n	80068d0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	8b5b      	ldrh	r3, [r3, #26]
 80068b4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d009      	beq.n	80068d0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	8b5b      	ldrh	r3, [r3, #26]
 80068c0:	f043 0302 	orr.w	r3, r3, #2
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80068ca:	6838      	ldr	r0, [r7, #0]
 80068cc:	f002 ff68 	bl	80097a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	7d1b      	ldrb	r3, [r3, #20]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d020      	beq.n	800691a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <tcp_pcb_remove+0xca>
 80068e0:	4b13      	ldr	r3, [pc, #76]	@ (8006930 <tcp_pcb_remove+0x10c>)
 80068e2:	f640 0293 	movw	r2, #2195	@ 0x893
 80068e6:	4916      	ldr	r1, [pc, #88]	@ (8006940 <tcp_pcb_remove+0x11c>)
 80068e8:	4813      	ldr	r0, [pc, #76]	@ (8006938 <tcp_pcb_remove+0x114>)
 80068ea:	f006 fbd5 	bl	800d098 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d006      	beq.n	8006904 <tcp_pcb_remove+0xe0>
 80068f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006930 <tcp_pcb_remove+0x10c>)
 80068f8:	f640 0294 	movw	r2, #2196	@ 0x894
 80068fc:	4911      	ldr	r1, [pc, #68]	@ (8006944 <tcp_pcb_remove+0x120>)
 80068fe:	480e      	ldr	r0, [pc, #56]	@ (8006938 <tcp_pcb_remove+0x114>)
 8006900:	f006 fbca 	bl	800d098 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006908:	2b00      	cmp	r3, #0
 800690a:	d006      	beq.n	800691a <tcp_pcb_remove+0xf6>
 800690c:	4b08      	ldr	r3, [pc, #32]	@ (8006930 <tcp_pcb_remove+0x10c>)
 800690e:	f640 0296 	movw	r2, #2198	@ 0x896
 8006912:	490d      	ldr	r1, [pc, #52]	@ (8006948 <tcp_pcb_remove+0x124>)
 8006914:	4808      	ldr	r0, [pc, #32]	@ (8006938 <tcp_pcb_remove+0x114>)
 8006916:	f006 fbbf 	bl	800d098 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2200      	movs	r2, #0
 800691e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2200      	movs	r2, #0
 8006924:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006926:	bf00      	nop
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	0800e990 	.word	0x0800e990
 8006934:	0800eff8 	.word	0x0800eff8
 8006938:	0800e9d4 	.word	0x0800e9d4
 800693c:	0800f014 	.word	0x0800f014
 8006940:	0800f034 	.word	0x0800f034
 8006944:	0800f04c 	.word	0x0800f04c
 8006948:	0800f068 	.word	0x0800f068

0800694c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <tcp_next_iss+0x1c>
 800695a:	4b0a      	ldr	r3, [pc, #40]	@ (8006984 <tcp_next_iss+0x38>)
 800695c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8006960:	4909      	ldr	r1, [pc, #36]	@ (8006988 <tcp_next_iss+0x3c>)
 8006962:	480a      	ldr	r0, [pc, #40]	@ (800698c <tcp_next_iss+0x40>)
 8006964:	f006 fb98 	bl	800d098 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006968:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <tcp_next_iss+0x44>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	4b09      	ldr	r3, [pc, #36]	@ (8006994 <tcp_next_iss+0x48>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4413      	add	r3, r2
 8006972:	4a07      	ldr	r2, [pc, #28]	@ (8006990 <tcp_next_iss+0x44>)
 8006974:	6013      	str	r3, [r2, #0]
  return iss;
 8006976:	4b06      	ldr	r3, [pc, #24]	@ (8006990 <tcp_next_iss+0x44>)
 8006978:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	0800e990 	.word	0x0800e990
 8006988:	0800f080 	.word	0x0800f080
 800698c:	0800e9d4 	.word	0x0800e9d4
 8006990:	20000024 	.word	0x20000024
 8006994:	200081b4 	.word	0x200081b4

08006998 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d106      	bne.n	80069ba <tcp_eff_send_mss_netif+0x22>
 80069ac:	4b14      	ldr	r3, [pc, #80]	@ (8006a00 <tcp_eff_send_mss_netif+0x68>)
 80069ae:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80069b2:	4914      	ldr	r1, [pc, #80]	@ (8006a04 <tcp_eff_send_mss_netif+0x6c>)
 80069b4:	4814      	ldr	r0, [pc, #80]	@ (8006a08 <tcp_eff_send_mss_netif+0x70>)
 80069b6:	f006 fb6f 	bl	800d098 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80069c0:	89fb      	ldrh	r3, [r7, #14]
 80069c2:	e019      	b.n	80069f8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80069c8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80069ca:	8afb      	ldrh	r3, [r7, #22]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d012      	beq.n	80069f6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80069d0:	2328      	movs	r3, #40	@ 0x28
 80069d2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80069d4:	8afa      	ldrh	r2, [r7, #22]
 80069d6:	8abb      	ldrh	r3, [r7, #20]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d904      	bls.n	80069e6 <tcp_eff_send_mss_netif+0x4e>
 80069dc:	8afa      	ldrh	r2, [r7, #22]
 80069de:	8abb      	ldrh	r3, [r7, #20]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	e000      	b.n	80069e8 <tcp_eff_send_mss_netif+0x50>
 80069e6:	2300      	movs	r3, #0
 80069e8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80069ea:	8a7a      	ldrh	r2, [r7, #18]
 80069ec:	89fb      	ldrh	r3, [r7, #14]
 80069ee:	4293      	cmp	r3, r2
 80069f0:	bf28      	it	cs
 80069f2:	4613      	movcs	r3, r2
 80069f4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80069f6:	89fb      	ldrh	r3, [r7, #14]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	0800e990 	.word	0x0800e990
 8006a04:	0800f09c 	.word	0x0800f09c
 8006a08:	0800e9d4 	.word	0x0800e9d4

08006a0c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d119      	bne.n	8006a54 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006a20:	4b10      	ldr	r3, [pc, #64]	@ (8006a64 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006a22:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8006a26:	4910      	ldr	r1, [pc, #64]	@ (8006a68 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006a28:	4810      	ldr	r0, [pc, #64]	@ (8006a6c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006a2a:	f006 fb35 	bl	800d098 <iprintf>

  while (pcb != NULL) {
 8006a2e:	e011      	b.n	8006a54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d108      	bne.n	8006a4e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7fe ffc4 	bl	80059d0 <tcp_abort>
      pcb = next;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	e002      	b.n	8006a54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1ea      	bne.n	8006a30 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	0800e990 	.word	0x0800e990
 8006a68:	0800f0c4 	.word	0x0800f0c4
 8006a6c:	0800e9d4 	.word	0x0800e9d4

08006a70 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d02a      	beq.n	8006ad6 <tcp_netif_ip_addr_changed+0x66>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d026      	beq.n	8006ad6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006a88:	4b15      	ldr	r3, [pc, #84]	@ (8006ae0 <tcp_netif_ip_addr_changed+0x70>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff ffbc 	bl	8006a0c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006a94:	4b13      	ldr	r3, [pc, #76]	@ (8006ae4 <tcp_netif_ip_addr_changed+0x74>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff ffb6 	bl	8006a0c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d017      	beq.n	8006ad6 <tcp_netif_ip_addr_changed+0x66>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d013      	beq.n	8006ad6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006aae:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae8 <tcp_netif_ip_addr_changed+0x78>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	e00c      	b.n	8006ad0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d103      	bne.n	8006aca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1ef      	bne.n	8006ab6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006ad6:	bf00      	nop
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	200081c0 	.word	0x200081c0
 8006ae4:	200081b8 	.word	0x200081b8
 8006ae8:	200081bc 	.word	0x200081bc

08006aec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fc3d 	bl	8006380 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006b14:	b590      	push	{r4, r7, lr}
 8006b16:	b08d      	sub	sp, #52	@ 0x34
 8006b18:	af04      	add	r7, sp, #16
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d105      	bne.n	8006b30 <tcp_input+0x1c>
 8006b24:	4b9b      	ldr	r3, [pc, #620]	@ (8006d94 <tcp_input+0x280>)
 8006b26:	2283      	movs	r2, #131	@ 0x83
 8006b28:	499b      	ldr	r1, [pc, #620]	@ (8006d98 <tcp_input+0x284>)
 8006b2a:	489c      	ldr	r0, [pc, #624]	@ (8006d9c <tcp_input+0x288>)
 8006b2c:	f006 fab4 	bl	800d098 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	4a9a      	ldr	r2, [pc, #616]	@ (8006da0 <tcp_input+0x28c>)
 8006b36:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	895b      	ldrh	r3, [r3, #10]
 8006b3c:	2b13      	cmp	r3, #19
 8006b3e:	f240 83d1 	bls.w	80072e4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006b42:	4b98      	ldr	r3, [pc, #608]	@ (8006da4 <tcp_input+0x290>)
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	4a97      	ldr	r2, [pc, #604]	@ (8006da4 <tcp_input+0x290>)
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f005 fa4d 	bl	800bfec <ip4_addr_isbroadcast_u32>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f040 83c7 	bne.w	80072e8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006b5a:	4b92      	ldr	r3, [pc, #584]	@ (8006da4 <tcp_input+0x290>)
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006b62:	2be0      	cmp	r3, #224	@ 0xe0
 8006b64:	f000 83c0 	beq.w	80072e8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006b68:	4b8d      	ldr	r3, [pc, #564]	@ (8006da0 <tcp_input+0x28c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	899b      	ldrh	r3, [r3, #12]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fc fe4d 	bl	8003810 <lwip_htons>
 8006b76:	4603      	mov	r3, r0
 8006b78:	0b1b      	lsrs	r3, r3, #12
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006b82:	7cbb      	ldrb	r3, [r7, #18]
 8006b84:	2b13      	cmp	r3, #19
 8006b86:	f240 83b1 	bls.w	80072ec <tcp_input+0x7d8>
 8006b8a:	7cbb      	ldrb	r3, [r7, #18]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	891b      	ldrh	r3, [r3, #8]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	f200 83aa 	bhi.w	80072ec <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006b98:	7cbb      	ldrb	r3, [r7, #18]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	3b14      	subs	r3, #20
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	4b81      	ldr	r3, [pc, #516]	@ (8006da8 <tcp_input+0x294>)
 8006ba2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006ba4:	4b81      	ldr	r3, [pc, #516]	@ (8006dac <tcp_input+0x298>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	895a      	ldrh	r2, [r3, #10]
 8006bae:	7cbb      	ldrb	r3, [r7, #18]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d309      	bcc.n	8006bca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006bb6:	4b7c      	ldr	r3, [pc, #496]	@ (8006da8 <tcp_input+0x294>)
 8006bb8:	881a      	ldrh	r2, [r3, #0]
 8006bba:	4b7d      	ldr	r3, [pc, #500]	@ (8006db0 <tcp_input+0x29c>)
 8006bbc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006bbe:	7cbb      	ldrb	r3, [r7, #18]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fe f8f6 	bl	8004db4 <pbuf_remove_header>
 8006bc8:	e04e      	b.n	8006c68 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d105      	bne.n	8006bde <tcp_input+0xca>
 8006bd2:	4b70      	ldr	r3, [pc, #448]	@ (8006d94 <tcp_input+0x280>)
 8006bd4:	22c2      	movs	r2, #194	@ 0xc2
 8006bd6:	4977      	ldr	r1, [pc, #476]	@ (8006db4 <tcp_input+0x2a0>)
 8006bd8:	4870      	ldr	r0, [pc, #448]	@ (8006d9c <tcp_input+0x288>)
 8006bda:	f006 fa5d 	bl	800d098 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006bde:	2114      	movs	r1, #20
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7fe f8e7 	bl	8004db4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	895a      	ldrh	r2, [r3, #10]
 8006bea:	4b71      	ldr	r3, [pc, #452]	@ (8006db0 <tcp_input+0x29c>)
 8006bec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006bee:	4b6e      	ldr	r3, [pc, #440]	@ (8006da8 <tcp_input+0x294>)
 8006bf0:	881a      	ldrh	r2, [r3, #0]
 8006bf2:	4b6f      	ldr	r3, [pc, #444]	@ (8006db0 <tcp_input+0x29c>)
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8006db0 <tcp_input+0x29c>)
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fe f8d7 	bl	8004db4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	895b      	ldrh	r3, [r3, #10]
 8006c0c:	8a3a      	ldrh	r2, [r7, #16]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	f200 836e 	bhi.w	80072f0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	4a64      	ldr	r2, [pc, #400]	@ (8006dac <tcp_input+0x298>)
 8006c1c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	8a3a      	ldrh	r2, [r7, #16]
 8006c24:	4611      	mov	r1, r2
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe f8c4 	bl	8004db4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	891a      	ldrh	r2, [r3, #8]
 8006c30:	8a3b      	ldrh	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	895b      	ldrh	r3, [r3, #10]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <tcp_input+0x13a>
 8006c42:	4b54      	ldr	r3, [pc, #336]	@ (8006d94 <tcp_input+0x280>)
 8006c44:	22df      	movs	r2, #223	@ 0xdf
 8006c46:	495c      	ldr	r1, [pc, #368]	@ (8006db8 <tcp_input+0x2a4>)
 8006c48:	4854      	ldr	r0, [pc, #336]	@ (8006d9c <tcp_input+0x288>)
 8006c4a:	f006 fa25 	bl	800d098 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	891a      	ldrh	r2, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	891b      	ldrh	r3, [r3, #8]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d005      	beq.n	8006c68 <tcp_input+0x154>
 8006c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8006d94 <tcp_input+0x280>)
 8006c5e:	22e0      	movs	r2, #224	@ 0xe0
 8006c60:	4956      	ldr	r1, [pc, #344]	@ (8006dbc <tcp_input+0x2a8>)
 8006c62:	484e      	ldr	r0, [pc, #312]	@ (8006d9c <tcp_input+0x288>)
 8006c64:	f006 fa18 	bl	800d098 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006c68:	4b4d      	ldr	r3, [pc, #308]	@ (8006da0 <tcp_input+0x28c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	4a4b      	ldr	r2, [pc, #300]	@ (8006da0 <tcp_input+0x28c>)
 8006c72:	6814      	ldr	r4, [r2, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fc fdcb 	bl	8003810 <lwip_htons>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006c7e:	4b48      	ldr	r3, [pc, #288]	@ (8006da0 <tcp_input+0x28c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	885b      	ldrh	r3, [r3, #2]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	4a46      	ldr	r2, [pc, #280]	@ (8006da0 <tcp_input+0x28c>)
 8006c88:	6814      	ldr	r4, [r2, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fc fdc0 	bl	8003810 <lwip_htons>
 8006c90:	4603      	mov	r3, r0
 8006c92:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006c94:	4b42      	ldr	r3, [pc, #264]	@ (8006da0 <tcp_input+0x28c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	4a41      	ldr	r2, [pc, #260]	@ (8006da0 <tcp_input+0x28c>)
 8006c9c:	6814      	ldr	r4, [r2, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fc fdcb 	bl	800383a <lwip_htonl>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	6063      	str	r3, [r4, #4]
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	4a45      	ldr	r2, [pc, #276]	@ (8006dc0 <tcp_input+0x2ac>)
 8006cac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006cae:	4b3c      	ldr	r3, [pc, #240]	@ (8006da0 <tcp_input+0x28c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	4a3a      	ldr	r2, [pc, #232]	@ (8006da0 <tcp_input+0x28c>)
 8006cb6:	6814      	ldr	r4, [r2, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fc fdbe 	bl	800383a <lwip_htonl>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	60a3      	str	r3, [r4, #8]
 8006cc2:	68a3      	ldr	r3, [r4, #8]
 8006cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8006dc4 <tcp_input+0x2b0>)
 8006cc6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006cc8:	4b35      	ldr	r3, [pc, #212]	@ (8006da0 <tcp_input+0x28c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	89db      	ldrh	r3, [r3, #14]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	4a33      	ldr	r2, [pc, #204]	@ (8006da0 <tcp_input+0x28c>)
 8006cd2:	6814      	ldr	r4, [r2, #0]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fc fd9b 	bl	8003810 <lwip_htons>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006cde:	4b30      	ldr	r3, [pc, #192]	@ (8006da0 <tcp_input+0x28c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	899b      	ldrh	r3, [r3, #12]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fc fd92 	bl	8003810 <lwip_htons>
 8006cec:	4603      	mov	r3, r0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	4b34      	ldr	r3, [pc, #208]	@ (8006dc8 <tcp_input+0x2b4>)
 8006cf8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	891a      	ldrh	r2, [r3, #8]
 8006cfe:	4b33      	ldr	r3, [pc, #204]	@ (8006dcc <tcp_input+0x2b8>)
 8006d00:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006d02:	4b31      	ldr	r3, [pc, #196]	@ (8006dc8 <tcp_input+0x2b4>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00c      	beq.n	8006d28 <tcp_input+0x214>
    tcplen++;
 8006d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8006dcc <tcp_input+0x2b8>)
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	3301      	adds	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	4b2d      	ldr	r3, [pc, #180]	@ (8006dcc <tcp_input+0x2b8>)
 8006d18:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	891a      	ldrh	r2, [r3, #8]
 8006d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8006dcc <tcp_input+0x2b8>)
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	f200 82e6 	bhi.w	80072f4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d2c:	4b28      	ldr	r3, [pc, #160]	@ (8006dd0 <tcp_input+0x2bc>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	61fb      	str	r3, [r7, #28]
 8006d32:	e09d      	b.n	8006e70 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	7d1b      	ldrb	r3, [r3, #20]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d105      	bne.n	8006d48 <tcp_input+0x234>
 8006d3c:	4b15      	ldr	r3, [pc, #84]	@ (8006d94 <tcp_input+0x280>)
 8006d3e:	22fb      	movs	r2, #251	@ 0xfb
 8006d40:	4924      	ldr	r1, [pc, #144]	@ (8006dd4 <tcp_input+0x2c0>)
 8006d42:	4816      	ldr	r0, [pc, #88]	@ (8006d9c <tcp_input+0x288>)
 8006d44:	f006 f9a8 	bl	800d098 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	7d1b      	ldrb	r3, [r3, #20]
 8006d4c:	2b0a      	cmp	r3, #10
 8006d4e:	d105      	bne.n	8006d5c <tcp_input+0x248>
 8006d50:	4b10      	ldr	r3, [pc, #64]	@ (8006d94 <tcp_input+0x280>)
 8006d52:	22fc      	movs	r2, #252	@ 0xfc
 8006d54:	4920      	ldr	r1, [pc, #128]	@ (8006dd8 <tcp_input+0x2c4>)
 8006d56:	4811      	ldr	r0, [pc, #68]	@ (8006d9c <tcp_input+0x288>)
 8006d58:	f006 f99e 	bl	800d098 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	7d1b      	ldrb	r3, [r3, #20]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d105      	bne.n	8006d70 <tcp_input+0x25c>
 8006d64:	4b0b      	ldr	r3, [pc, #44]	@ (8006d94 <tcp_input+0x280>)
 8006d66:	22fd      	movs	r2, #253	@ 0xfd
 8006d68:	491c      	ldr	r1, [pc, #112]	@ (8006ddc <tcp_input+0x2c8>)
 8006d6a:	480c      	ldr	r0, [pc, #48]	@ (8006d9c <tcp_input+0x288>)
 8006d6c:	f006 f994 	bl	800d098 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	7a1b      	ldrb	r3, [r3, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d033      	beq.n	8006de0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	7a1a      	ldrb	r2, [r3, #8]
 8006d7c:	4b09      	ldr	r3, [pc, #36]	@ (8006da4 <tcp_input+0x290>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006d84:	3301      	adds	r3, #1
 8006d86:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d029      	beq.n	8006de0 <tcp_input+0x2cc>
      prev = pcb;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	61bb      	str	r3, [r7, #24]
      continue;
 8006d90:	e06b      	b.n	8006e6a <tcp_input+0x356>
 8006d92:	bf00      	nop
 8006d94:	0800f0f8 	.word	0x0800f0f8
 8006d98:	0800f12c 	.word	0x0800f12c
 8006d9c:	0800f144 	.word	0x0800f144
 8006da0:	200081dc 	.word	0x200081dc
 8006da4:	20004ccc 	.word	0x20004ccc
 8006da8:	200081e0 	.word	0x200081e0
 8006dac:	200081e4 	.word	0x200081e4
 8006db0:	200081e2 	.word	0x200081e2
 8006db4:	0800f16c 	.word	0x0800f16c
 8006db8:	0800f17c 	.word	0x0800f17c
 8006dbc:	0800f188 	.word	0x0800f188
 8006dc0:	200081ec 	.word	0x200081ec
 8006dc4:	200081f0 	.word	0x200081f0
 8006dc8:	200081f8 	.word	0x200081f8
 8006dcc:	200081f6 	.word	0x200081f6
 8006dd0:	200081c0 	.word	0x200081c0
 8006dd4:	0800f1a8 	.word	0x0800f1a8
 8006dd8:	0800f1d0 	.word	0x0800f1d0
 8006ddc:	0800f1fc 	.word	0x0800f1fc
    }

    if (pcb->remote_port == tcphdr->src &&
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	8b1a      	ldrh	r2, [r3, #24]
 8006de4:	4b72      	ldr	r3, [pc, #456]	@ (8006fb0 <tcp_input+0x49c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d13a      	bne.n	8006e66 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	8ada      	ldrh	r2, [r3, #22]
 8006df4:	4b6e      	ldr	r3, [pc, #440]	@ (8006fb0 <tcp_input+0x49c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	885b      	ldrh	r3, [r3, #2]
 8006dfa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d132      	bne.n	8006e66 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	4b6b      	ldr	r3, [pc, #428]	@ (8006fb4 <tcp_input+0x4a0>)
 8006e06:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d12c      	bne.n	8006e66 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	4b68      	ldr	r3, [pc, #416]	@ (8006fb4 <tcp_input+0x4a0>)
 8006e12:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d126      	bne.n	8006e66 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d106      	bne.n	8006e30 <tcp_input+0x31c>
 8006e22:	4b65      	ldr	r3, [pc, #404]	@ (8006fb8 <tcp_input+0x4a4>)
 8006e24:	f240 120d 	movw	r2, #269	@ 0x10d
 8006e28:	4964      	ldr	r1, [pc, #400]	@ (8006fbc <tcp_input+0x4a8>)
 8006e2a:	4865      	ldr	r0, [pc, #404]	@ (8006fc0 <tcp_input+0x4ac>)
 8006e2c:	f006 f934 	bl	800d098 <iprintf>
      if (prev != NULL) {
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <tcp_input+0x338>
        prev->next = pcb->next;
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006e3e:	4b61      	ldr	r3, [pc, #388]	@ (8006fc4 <tcp_input+0x4b0>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006e46:	4a5f      	ldr	r2, [pc, #380]	@ (8006fc4 <tcp_input+0x4b0>)
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d111      	bne.n	8006e7a <tcp_input+0x366>
 8006e56:	4b58      	ldr	r3, [pc, #352]	@ (8006fb8 <tcp_input+0x4a4>)
 8006e58:	f240 1215 	movw	r2, #277	@ 0x115
 8006e5c:	495a      	ldr	r1, [pc, #360]	@ (8006fc8 <tcp_input+0x4b4>)
 8006e5e:	4858      	ldr	r0, [pc, #352]	@ (8006fc0 <tcp_input+0x4ac>)
 8006e60:	f006 f91a 	bl	800d098 <iprintf>
      break;
 8006e64:	e009      	b.n	8006e7a <tcp_input+0x366>
    }
    prev = pcb;
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	61fb      	str	r3, [r7, #28]
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f47f af5e 	bne.w	8006d34 <tcp_input+0x220>
 8006e78:	e000      	b.n	8006e7c <tcp_input+0x368>
      break;
 8006e7a:	bf00      	nop
  }

  if (pcb == NULL) {
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f040 80aa 	bne.w	8006fd8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e84:	4b51      	ldr	r3, [pc, #324]	@ (8006fcc <tcp_input+0x4b8>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	e03f      	b.n	8006f0c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	7d1b      	ldrb	r3, [r3, #20]
 8006e90:	2b0a      	cmp	r3, #10
 8006e92:	d006      	beq.n	8006ea2 <tcp_input+0x38e>
 8006e94:	4b48      	ldr	r3, [pc, #288]	@ (8006fb8 <tcp_input+0x4a4>)
 8006e96:	f240 121f 	movw	r2, #287	@ 0x11f
 8006e9a:	494d      	ldr	r1, [pc, #308]	@ (8006fd0 <tcp_input+0x4bc>)
 8006e9c:	4848      	ldr	r0, [pc, #288]	@ (8006fc0 <tcp_input+0x4ac>)
 8006e9e:	f006 f8fb 	bl	800d098 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	7a1b      	ldrb	r3, [r3, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d009      	beq.n	8006ebe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	7a1a      	ldrb	r2, [r3, #8]
 8006eae:	4b41      	ldr	r3, [pc, #260]	@ (8006fb4 <tcp_input+0x4a0>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d122      	bne.n	8006f04 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	8b1a      	ldrh	r2, [r3, #24]
 8006ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8006fb0 <tcp_input+0x49c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d11b      	bne.n	8006f06 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	8ada      	ldrh	r2, [r3, #22]
 8006ed2:	4b37      	ldr	r3, [pc, #220]	@ (8006fb0 <tcp_input+0x49c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	885b      	ldrh	r3, [r3, #2]
 8006ed8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d113      	bne.n	8006f06 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	4b34      	ldr	r3, [pc, #208]	@ (8006fb4 <tcp_input+0x4a0>)
 8006ee4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d10d      	bne.n	8006f06 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b31      	ldr	r3, [pc, #196]	@ (8006fb4 <tcp_input+0x4a0>)
 8006ef0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d107      	bne.n	8006f06 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006ef6:	69f8      	ldr	r0, [r7, #28]
 8006ef8:	f000 fb56 	bl	80075a8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7fd ffdf 	bl	8004ec0 <pbuf_free>
        return;
 8006f02:	e1fd      	b.n	8007300 <tcp_input+0x7ec>
        continue;
 8006f04:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1bc      	bne.n	8006e8c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f16:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd4 <tcp_input+0x4c0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	e02a      	b.n	8006f74 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	7a1b      	ldrb	r3, [r3, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00c      	beq.n	8006f40 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	7a1a      	ldrb	r2, [r3, #8]
 8006f2a:	4b22      	ldr	r3, [pc, #136]	@ (8006fb4 <tcp_input+0x4a0>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f32:	3301      	adds	r3, #1
 8006f34:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d002      	beq.n	8006f40 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	61bb      	str	r3, [r7, #24]
        continue;
 8006f3e:	e016      	b.n	8006f6e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	8ada      	ldrh	r2, [r3, #22]
 8006f44:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb0 <tcp_input+0x49c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	885b      	ldrh	r3, [r3, #2]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d10c      	bne.n	8006f6a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	4b17      	ldr	r3, [pc, #92]	@ (8006fb4 <tcp_input+0x4a0>)
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d00f      	beq.n	8006f7c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00d      	beq.n	8006f7e <tcp_input+0x46a>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d009      	beq.n	8006f7e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1d1      	bne.n	8006f1e <tcp_input+0x40a>
 8006f7a:	e000      	b.n	8006f7e <tcp_input+0x46a>
            break;
 8006f7c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d029      	beq.n	8006fd8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006f92:	4b10      	ldr	r3, [pc, #64]	@ (8006fd4 <tcp_input+0x4c0>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8006fd4 <tcp_input+0x4c0>)
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8006fa0:	6978      	ldr	r0, [r7, #20]
 8006fa2:	f000 fa03 	bl	80073ac <tcp_listen_input>
      }
      pbuf_free(p);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fd ff8a 	bl	8004ec0 <pbuf_free>
      return;
 8006fac:	e1a8      	b.n	8007300 <tcp_input+0x7ec>
 8006fae:	bf00      	nop
 8006fb0:	200081dc 	.word	0x200081dc
 8006fb4:	20004ccc 	.word	0x20004ccc
 8006fb8:	0800f0f8 	.word	0x0800f0f8
 8006fbc:	0800f224 	.word	0x0800f224
 8006fc0:	0800f144 	.word	0x0800f144
 8006fc4:	200081c0 	.word	0x200081c0
 8006fc8:	0800f250 	.word	0x0800f250
 8006fcc:	200081c4 	.word	0x200081c4
 8006fd0:	0800f27c 	.word	0x0800f27c
 8006fd4:	200081bc 	.word	0x200081bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8158 	beq.w	8007290 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006fe0:	4b95      	ldr	r3, [pc, #596]	@ (8007238 <tcp_input+0x724>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	891a      	ldrh	r2, [r3, #8]
 8006fea:	4b93      	ldr	r3, [pc, #588]	@ (8007238 <tcp_input+0x724>)
 8006fec:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006fee:	4a92      	ldr	r2, [pc, #584]	@ (8007238 <tcp_input+0x724>)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006ff4:	4b91      	ldr	r3, [pc, #580]	@ (800723c <tcp_input+0x728>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a8f      	ldr	r2, [pc, #572]	@ (8007238 <tcp_input+0x724>)
 8006ffa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006ffc:	4b90      	ldr	r3, [pc, #576]	@ (8007240 <tcp_input+0x72c>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007002:	4b90      	ldr	r3, [pc, #576]	@ (8007244 <tcp_input+0x730>)
 8007004:	2200      	movs	r2, #0
 8007006:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007008:	4b8f      	ldr	r3, [pc, #572]	@ (8007248 <tcp_input+0x734>)
 800700a:	2200      	movs	r2, #0
 800700c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800700e:	4b8f      	ldr	r3, [pc, #572]	@ (800724c <tcp_input+0x738>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f003 0308 	and.w	r3, r3, #8
 8007016:	2b00      	cmp	r3, #0
 8007018:	d006      	beq.n	8007028 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	7b5b      	ldrb	r3, [r3, #13]
 800701e:	f043 0301 	orr.w	r3, r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800702c:	2b00      	cmp	r3, #0
 800702e:	d017      	beq.n	8007060 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007030:	69f8      	ldr	r0, [r7, #28]
 8007032:	f7ff f929 	bl	8006288 <tcp_process_refused_data>
 8007036:	4603      	mov	r3, r0
 8007038:	f113 0f0d 	cmn.w	r3, #13
 800703c:	d007      	beq.n	800704e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00c      	beq.n	8007060 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007046:	4b82      	ldr	r3, [pc, #520]	@ (8007250 <tcp_input+0x73c>)
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d008      	beq.n	8007060 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 80e3 	bne.w	800721e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007058:	69f8      	ldr	r0, [r7, #28]
 800705a:	f003 f9a7 	bl	800a3ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800705e:	e0de      	b.n	800721e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007060:	4a7c      	ldr	r2, [pc, #496]	@ (8007254 <tcp_input+0x740>)
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007066:	69f8      	ldr	r0, [r7, #28]
 8007068:	f000 fb18 	bl	800769c <tcp_process>
 800706c:	4603      	mov	r3, r0
 800706e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007070:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007074:	f113 0f0d 	cmn.w	r3, #13
 8007078:	f000 80d3 	beq.w	8007222 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800707c:	4b71      	ldr	r3, [pc, #452]	@ (8007244 <tcp_input+0x730>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	2b00      	cmp	r3, #0
 8007086:	d015      	beq.n	80070b4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800708e:	2b00      	cmp	r3, #0
 8007090:	d008      	beq.n	80070a4 <tcp_input+0x590>
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	6912      	ldr	r2, [r2, #16]
 800709c:	f06f 010d 	mvn.w	r1, #13
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80070a4:	69f9      	ldr	r1, [r7, #28]
 80070a6:	486c      	ldr	r0, [pc, #432]	@ (8007258 <tcp_input+0x744>)
 80070a8:	f7ff fbbc 	bl	8006824 <tcp_pcb_remove>
        tcp_free(pcb);
 80070ac:	69f8      	ldr	r0, [r7, #28]
 80070ae:	f7fe f9a7 	bl	8005400 <tcp_free>
 80070b2:	e0da      	b.n	800726a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80070b8:	4b63      	ldr	r3, [pc, #396]	@ (8007248 <tcp_input+0x734>)
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01d      	beq.n	80070fc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80070c0:	4b61      	ldr	r3, [pc, #388]	@ (8007248 <tcp_input+0x734>)
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00a      	beq.n	80070e6 <tcp_input+0x5d2>
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070d6:	69fa      	ldr	r2, [r7, #28]
 80070d8:	6910      	ldr	r0, [r2, #16]
 80070da:	89fa      	ldrh	r2, [r7, #14]
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	4798      	blx	r3
 80070e0:	4603      	mov	r3, r0
 80070e2:	74fb      	strb	r3, [r7, #19]
 80070e4:	e001      	b.n	80070ea <tcp_input+0x5d6>
 80070e6:	2300      	movs	r3, #0
 80070e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80070ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80070ee:	f113 0f0d 	cmn.w	r3, #13
 80070f2:	f000 8098 	beq.w	8007226 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80070f6:	4b54      	ldr	r3, [pc, #336]	@ (8007248 <tcp_input+0x734>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80070fc:	69f8      	ldr	r0, [r7, #28]
 80070fe:	f000 f915 	bl	800732c <tcp_input_delayed_close>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	f040 8090 	bne.w	800722a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800710a:	4b4d      	ldr	r3, [pc, #308]	@ (8007240 <tcp_input+0x72c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d041      	beq.n	8007196 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007116:	2b00      	cmp	r3, #0
 8007118:	d006      	beq.n	8007128 <tcp_input+0x614>
 800711a:	4b50      	ldr	r3, [pc, #320]	@ (800725c <tcp_input+0x748>)
 800711c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8007120:	494f      	ldr	r1, [pc, #316]	@ (8007260 <tcp_input+0x74c>)
 8007122:	4850      	ldr	r0, [pc, #320]	@ (8007264 <tcp_input+0x750>)
 8007124:	f005 ffb8 	bl	800d098 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	8b5b      	ldrh	r3, [r3, #26]
 800712c:	f003 0310 	and.w	r3, r3, #16
 8007130:	2b00      	cmp	r3, #0
 8007132:	d008      	beq.n	8007146 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007134:	4b42      	ldr	r3, [pc, #264]	@ (8007240 <tcp_input+0x72c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4618      	mov	r0, r3
 800713a:	f7fd fec1 	bl	8004ec0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800713e:	69f8      	ldr	r0, [r7, #28]
 8007140:	f7fe fc46 	bl	80059d0 <tcp_abort>
            goto aborted;
 8007144:	e091      	b.n	800726a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00c      	beq.n	800716a <tcp_input+0x656>
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	6918      	ldr	r0, [r3, #16]
 800715a:	4b39      	ldr	r3, [pc, #228]	@ (8007240 <tcp_input+0x72c>)
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	2300      	movs	r3, #0
 8007160:	69f9      	ldr	r1, [r7, #28]
 8007162:	47a0      	blx	r4
 8007164:	4603      	mov	r3, r0
 8007166:	74fb      	strb	r3, [r7, #19]
 8007168:	e008      	b.n	800717c <tcp_input+0x668>
 800716a:	4b35      	ldr	r3, [pc, #212]	@ (8007240 <tcp_input+0x72c>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	2300      	movs	r3, #0
 8007170:	69f9      	ldr	r1, [r7, #28]
 8007172:	2000      	movs	r0, #0
 8007174:	f7ff f95e 	bl	8006434 <tcp_recv_null>
 8007178:	4603      	mov	r3, r0
 800717a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800717c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007180:	f113 0f0d 	cmn.w	r3, #13
 8007184:	d053      	beq.n	800722e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007186:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800718e:	4b2c      	ldr	r3, [pc, #176]	@ (8007240 <tcp_input+0x72c>)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007196:	4b2b      	ldr	r3, [pc, #172]	@ (8007244 <tcp_input+0x730>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d030      	beq.n	8007204 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d009      	beq.n	80071be <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071ae:	7b5a      	ldrb	r2, [r3, #13]
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071b4:	f042 0220 	orr.w	r2, r2, #32
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	735a      	strb	r2, [r3, #13]
 80071bc:	e022      	b.n	8007204 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071c2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80071c6:	d005      	beq.n	80071d4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071cc:	3301      	adds	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00b      	beq.n	80071f6 <tcp_input+0x6e2>
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	6918      	ldr	r0, [r3, #16]
 80071e8:	2300      	movs	r3, #0
 80071ea:	2200      	movs	r2, #0
 80071ec:	69f9      	ldr	r1, [r7, #28]
 80071ee:	47a0      	blx	r4
 80071f0:	4603      	mov	r3, r0
 80071f2:	74fb      	strb	r3, [r7, #19]
 80071f4:	e001      	b.n	80071fa <tcp_input+0x6e6>
 80071f6:	2300      	movs	r3, #0
 80071f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80071fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80071fe:	f113 0f0d 	cmn.w	r3, #13
 8007202:	d016      	beq.n	8007232 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007204:	4b13      	ldr	r3, [pc, #76]	@ (8007254 <tcp_input+0x740>)
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800720a:	69f8      	ldr	r0, [r7, #28]
 800720c:	f000 f88e 	bl	800732c <tcp_input_delayed_close>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d128      	bne.n	8007268 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007216:	69f8      	ldr	r0, [r7, #28]
 8007218:	f002 fac2 	bl	80097a0 <tcp_output>
 800721c:	e025      	b.n	800726a <tcp_input+0x756>
        goto aborted;
 800721e:	bf00      	nop
 8007220:	e023      	b.n	800726a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007222:	bf00      	nop
 8007224:	e021      	b.n	800726a <tcp_input+0x756>
              goto aborted;
 8007226:	bf00      	nop
 8007228:	e01f      	b.n	800726a <tcp_input+0x756>
          goto aborted;
 800722a:	bf00      	nop
 800722c:	e01d      	b.n	800726a <tcp_input+0x756>
            goto aborted;
 800722e:	bf00      	nop
 8007230:	e01b      	b.n	800726a <tcp_input+0x756>
              goto aborted;
 8007232:	bf00      	nop
 8007234:	e019      	b.n	800726a <tcp_input+0x756>
 8007236:	bf00      	nop
 8007238:	200081cc 	.word	0x200081cc
 800723c:	200081dc 	.word	0x200081dc
 8007240:	200081fc 	.word	0x200081fc
 8007244:	200081f9 	.word	0x200081f9
 8007248:	200081f4 	.word	0x200081f4
 800724c:	200081f8 	.word	0x200081f8
 8007250:	200081f6 	.word	0x200081f6
 8007254:	20008200 	.word	0x20008200
 8007258:	200081c0 	.word	0x200081c0
 800725c:	0800f0f8 	.word	0x0800f0f8
 8007260:	0800f2ac 	.word	0x0800f2ac
 8007264:	0800f144 	.word	0x0800f144
          goto aborted;
 8007268:	bf00      	nop
    tcp_input_pcb = NULL;
 800726a:	4b27      	ldr	r3, [pc, #156]	@ (8007308 <tcp_input+0x7f4>)
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007270:	4b26      	ldr	r3, [pc, #152]	@ (800730c <tcp_input+0x7f8>)
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007276:	4b26      	ldr	r3, [pc, #152]	@ (8007310 <tcp_input+0x7fc>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d03f      	beq.n	80072fe <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800727e:	4b24      	ldr	r3, [pc, #144]	@ (8007310 <tcp_input+0x7fc>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	4618      	mov	r0, r3
 8007284:	f7fd fe1c 	bl	8004ec0 <pbuf_free>
      inseg.p = NULL;
 8007288:	4b21      	ldr	r3, [pc, #132]	@ (8007310 <tcp_input+0x7fc>)
 800728a:	2200      	movs	r2, #0
 800728c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800728e:	e036      	b.n	80072fe <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007290:	4b20      	ldr	r3, [pc, #128]	@ (8007314 <tcp_input+0x800>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	899b      	ldrh	r3, [r3, #12]
 8007296:	b29b      	uxth	r3, r3
 8007298:	4618      	mov	r0, r3
 800729a:	f7fc fab9 	bl	8003810 <lwip_htons>
 800729e:	4603      	mov	r3, r0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d118      	bne.n	80072dc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80072aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007318 <tcp_input+0x804>)
 80072ac:	6819      	ldr	r1, [r3, #0]
 80072ae:	4b1b      	ldr	r3, [pc, #108]	@ (800731c <tcp_input+0x808>)
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007320 <tcp_input+0x80c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80072ba:	4b16      	ldr	r3, [pc, #88]	@ (8007314 <tcp_input+0x800>)
 80072bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80072be:	885b      	ldrh	r3, [r3, #2]
 80072c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80072c2:	4a14      	ldr	r2, [pc, #80]	@ (8007314 <tcp_input+0x800>)
 80072c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80072c6:	8812      	ldrh	r2, [r2, #0]
 80072c8:	b292      	uxth	r2, r2
 80072ca:	9202      	str	r2, [sp, #8]
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	4b15      	ldr	r3, [pc, #84]	@ (8007324 <tcp_input+0x810>)
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	4b15      	ldr	r3, [pc, #84]	@ (8007328 <tcp_input+0x814>)
 80072d4:	4602      	mov	r2, r0
 80072d6:	2000      	movs	r0, #0
 80072d8:	f003 f816 	bl	800a308 <tcp_rst>
    pbuf_free(p);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7fd fdef 	bl	8004ec0 <pbuf_free>
  return;
 80072e2:	e00c      	b.n	80072fe <tcp_input+0x7ea>
    goto dropped;
 80072e4:	bf00      	nop
 80072e6:	e006      	b.n	80072f6 <tcp_input+0x7e2>
    goto dropped;
 80072e8:	bf00      	nop
 80072ea:	e004      	b.n	80072f6 <tcp_input+0x7e2>
    goto dropped;
 80072ec:	bf00      	nop
 80072ee:	e002      	b.n	80072f6 <tcp_input+0x7e2>
      goto dropped;
 80072f0:	bf00      	nop
 80072f2:	e000      	b.n	80072f6 <tcp_input+0x7e2>
      goto dropped;
 80072f4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fd fde2 	bl	8004ec0 <pbuf_free>
 80072fc:	e000      	b.n	8007300 <tcp_input+0x7ec>
  return;
 80072fe:	bf00      	nop
}
 8007300:	3724      	adds	r7, #36	@ 0x24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd90      	pop	{r4, r7, pc}
 8007306:	bf00      	nop
 8007308:	20008200 	.word	0x20008200
 800730c:	200081fc 	.word	0x200081fc
 8007310:	200081cc 	.word	0x200081cc
 8007314:	200081dc 	.word	0x200081dc
 8007318:	200081f0 	.word	0x200081f0
 800731c:	200081f6 	.word	0x200081f6
 8007320:	200081ec 	.word	0x200081ec
 8007324:	20004cdc 	.word	0x20004cdc
 8007328:	20004ce0 	.word	0x20004ce0

0800732c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <tcp_input_delayed_close+0x1c>
 800733a:	4b17      	ldr	r3, [pc, #92]	@ (8007398 <tcp_input_delayed_close+0x6c>)
 800733c:	f240 225a 	movw	r2, #602	@ 0x25a
 8007340:	4916      	ldr	r1, [pc, #88]	@ (800739c <tcp_input_delayed_close+0x70>)
 8007342:	4817      	ldr	r0, [pc, #92]	@ (80073a0 <tcp_input_delayed_close+0x74>)
 8007344:	f005 fea8 	bl	800d098 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007348:	4b16      	ldr	r3, [pc, #88]	@ (80073a4 <tcp_input_delayed_close+0x78>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b00      	cmp	r3, #0
 8007352:	d01c      	beq.n	800738e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	8b5b      	ldrh	r3, [r3, #26]
 8007358:	f003 0310 	and.w	r3, r3, #16
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10d      	bne.n	800737c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007366:	2b00      	cmp	r3, #0
 8007368:	d008      	beq.n	800737c <tcp_input_delayed_close+0x50>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6912      	ldr	r2, [r2, #16]
 8007374:	f06f 010e 	mvn.w	r1, #14
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	480a      	ldr	r0, [pc, #40]	@ (80073a8 <tcp_input_delayed_close+0x7c>)
 8007380:	f7ff fa50 	bl	8006824 <tcp_pcb_remove>
    tcp_free(pcb);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7fe f83b 	bl	8005400 <tcp_free>
    return 1;
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	0800f0f8 	.word	0x0800f0f8
 800739c:	0800f2c8 	.word	0x0800f2c8
 80073a0:	0800f144 	.word	0x0800f144
 80073a4:	200081f9 	.word	0x200081f9
 80073a8:	200081c0 	.word	0x200081c0

080073ac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80073ac:	b590      	push	{r4, r7, lr}
 80073ae:	b08b      	sub	sp, #44	@ 0x2c
 80073b0:	af04      	add	r7, sp, #16
 80073b2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80073b4:	4b6f      	ldr	r3, [pc, #444]	@ (8007574 <tcp_listen_input+0x1c8>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f040 80d2 	bne.w	8007566 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <tcp_listen_input+0x2a>
 80073c8:	4b6b      	ldr	r3, [pc, #428]	@ (8007578 <tcp_listen_input+0x1cc>)
 80073ca:	f240 2281 	movw	r2, #641	@ 0x281
 80073ce:	496b      	ldr	r1, [pc, #428]	@ (800757c <tcp_listen_input+0x1d0>)
 80073d0:	486b      	ldr	r0, [pc, #428]	@ (8007580 <tcp_listen_input+0x1d4>)
 80073d2:	f005 fe61 	bl	800d098 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80073d6:	4b67      	ldr	r3, [pc, #412]	@ (8007574 <tcp_listen_input+0x1c8>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	f003 0310 	and.w	r3, r3, #16
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d019      	beq.n	8007416 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80073e2:	4b68      	ldr	r3, [pc, #416]	@ (8007584 <tcp_listen_input+0x1d8>)
 80073e4:	6819      	ldr	r1, [r3, #0]
 80073e6:	4b68      	ldr	r3, [pc, #416]	@ (8007588 <tcp_listen_input+0x1dc>)
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	4b67      	ldr	r3, [pc, #412]	@ (800758c <tcp_listen_input+0x1e0>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80073f2:	4b67      	ldr	r3, [pc, #412]	@ (8007590 <tcp_listen_input+0x1e4>)
 80073f4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80073f6:	885b      	ldrh	r3, [r3, #2]
 80073f8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80073fa:	4a65      	ldr	r2, [pc, #404]	@ (8007590 <tcp_listen_input+0x1e4>)
 80073fc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80073fe:	8812      	ldrh	r2, [r2, #0]
 8007400:	b292      	uxth	r2, r2
 8007402:	9202      	str	r2, [sp, #8]
 8007404:	9301      	str	r3, [sp, #4]
 8007406:	4b63      	ldr	r3, [pc, #396]	@ (8007594 <tcp_listen_input+0x1e8>)
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	4b63      	ldr	r3, [pc, #396]	@ (8007598 <tcp_listen_input+0x1ec>)
 800740c:	4602      	mov	r2, r0
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f002 ff7a 	bl	800a308 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007414:	e0a9      	b.n	800756a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007416:	4b57      	ldr	r3, [pc, #348]	@ (8007574 <tcp_listen_input+0x1c8>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 80a3 	beq.w	800756a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	7d5b      	ldrb	r3, [r3, #21]
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff f927 	bl	800667c <tcp_alloc>
 800742e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d111      	bne.n	800745a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <tcp_listen_input+0xa8>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6910      	ldr	r0, [r2, #16]
 8007446:	f04f 32ff 	mov.w	r2, #4294967295
 800744a:	2100      	movs	r1, #0
 800744c:	4798      	blx	r3
 800744e:	4603      	mov	r3, r0
 8007450:	73bb      	strb	r3, [r7, #14]
      return;
 8007452:	e08b      	b.n	800756c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007454:	23f0      	movs	r3, #240	@ 0xf0
 8007456:	73bb      	strb	r3, [r7, #14]
      return;
 8007458:	e088      	b.n	800756c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800745a:	4b50      	ldr	r3, [pc, #320]	@ (800759c <tcp_listen_input+0x1f0>)
 800745c:	695a      	ldr	r2, [r3, #20]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007462:	4b4e      	ldr	r3, [pc, #312]	@ (800759c <tcp_listen_input+0x1f0>)
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	8ada      	ldrh	r2, [r3, #22]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007472:	4b47      	ldr	r3, [pc, #284]	@ (8007590 <tcp_listen_input+0x1e4>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29a      	uxth	r2, r3
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2203      	movs	r2, #3
 8007482:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007484:	4b41      	ldr	r3, [pc, #260]	@ (800758c <tcp_listen_input+0x1e0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8007496:	6978      	ldr	r0, [r7, #20]
 8007498:	f7ff fa58 	bl	800694c <tcp_next_iss>
 800749c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80074b6:	4b35      	ldr	r3, [pc, #212]	@ (800758c <tcp_listen_input+0x1e0>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	1e5a      	subs	r2, r3, #1
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	7a5b      	ldrb	r3, [r3, #9]
 80074d2:	f003 030c 	and.w	r3, r3, #12
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	7a1a      	ldrb	r2, [r3, #8]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80074e4:	4b2e      	ldr	r3, [pc, #184]	@ (80075a0 <tcp_listen_input+0x1f4>)
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	60da      	str	r2, [r3, #12]
 80074ec:	4a2c      	ldr	r2, [pc, #176]	@ (80075a0 <tcp_listen_input+0x1f4>)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	f003 f8cb 	bl	800a68c <tcp_timer_needed>
 80074f6:	4b2b      	ldr	r3, [pc, #172]	@ (80075a4 <tcp_listen_input+0x1f8>)
 80074f8:	2201      	movs	r2, #1
 80074fa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80074fc:	6978      	ldr	r0, [r7, #20]
 80074fe:	f001 fd8b 	bl	8009018 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007502:	4b23      	ldr	r3, [pc, #140]	@ (8007590 <tcp_listen_input+0x1e4>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	89db      	ldrh	r3, [r3, #14]
 8007508:	b29a      	uxth	r2, r3
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	3304      	adds	r3, #4
 8007524:	4618      	mov	r0, r3
 8007526:	f004 fad5 	bl	800bad4 <ip4_route>
 800752a:	4601      	mov	r1, r0
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	3304      	adds	r3, #4
 8007530:	461a      	mov	r2, r3
 8007532:	4620      	mov	r0, r4
 8007534:	f7ff fa30 	bl	8006998 <tcp_eff_send_mss_netif>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007540:	2112      	movs	r1, #18
 8007542:	6978      	ldr	r0, [r7, #20]
 8007544:	f002 f83e 	bl	80095c4 <tcp_enqueue_flags>
 8007548:	4603      	mov	r3, r0
 800754a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800754c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d004      	beq.n	800755e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007554:	2100      	movs	r1, #0
 8007556:	6978      	ldr	r0, [r7, #20]
 8007558:	f7fe f97c 	bl	8005854 <tcp_abandon>
      return;
 800755c:	e006      	b.n	800756c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800755e:	6978      	ldr	r0, [r7, #20]
 8007560:	f002 f91e 	bl	80097a0 <tcp_output>
  return;
 8007564:	e001      	b.n	800756a <tcp_listen_input+0x1be>
    return;
 8007566:	bf00      	nop
 8007568:	e000      	b.n	800756c <tcp_listen_input+0x1c0>
  return;
 800756a:	bf00      	nop
}
 800756c:	371c      	adds	r7, #28
 800756e:	46bd      	mov	sp, r7
 8007570:	bd90      	pop	{r4, r7, pc}
 8007572:	bf00      	nop
 8007574:	200081f8 	.word	0x200081f8
 8007578:	0800f0f8 	.word	0x0800f0f8
 800757c:	0800f2f0 	.word	0x0800f2f0
 8007580:	0800f144 	.word	0x0800f144
 8007584:	200081f0 	.word	0x200081f0
 8007588:	200081f6 	.word	0x200081f6
 800758c:	200081ec 	.word	0x200081ec
 8007590:	200081dc 	.word	0x200081dc
 8007594:	20004cdc 	.word	0x20004cdc
 8007598:	20004ce0 	.word	0x20004ce0
 800759c:	20004ccc 	.word	0x20004ccc
 80075a0:	200081c0 	.word	0x200081c0
 80075a4:	200081c8 	.word	0x200081c8

080075a8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af04      	add	r7, sp, #16
 80075ae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80075b0:	4b2f      	ldr	r3, [pc, #188]	@ (8007670 <tcp_timewait_input+0xc8>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d153      	bne.n	8007664 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <tcp_timewait_input+0x28>
 80075c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007674 <tcp_timewait_input+0xcc>)
 80075c4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80075c8:	492b      	ldr	r1, [pc, #172]	@ (8007678 <tcp_timewait_input+0xd0>)
 80075ca:	482c      	ldr	r0, [pc, #176]	@ (800767c <tcp_timewait_input+0xd4>)
 80075cc:	f005 fd64 	bl	800d098 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80075d0:	4b27      	ldr	r3, [pc, #156]	@ (8007670 <tcp_timewait_input+0xc8>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d02a      	beq.n	8007632 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80075dc:	4b28      	ldr	r3, [pc, #160]	@ (8007680 <tcp_timewait_input+0xd8>)
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	db2d      	blt.n	8007646 <tcp_timewait_input+0x9e>
 80075ea:	4b25      	ldr	r3, [pc, #148]	@ (8007680 <tcp_timewait_input+0xd8>)
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80075f6:	440b      	add	r3, r1
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	dc23      	bgt.n	8007646 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075fe:	4b21      	ldr	r3, [pc, #132]	@ (8007684 <tcp_timewait_input+0xdc>)
 8007600:	6819      	ldr	r1, [r3, #0]
 8007602:	4b21      	ldr	r3, [pc, #132]	@ (8007688 <tcp_timewait_input+0xe0>)
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	4b1d      	ldr	r3, [pc, #116]	@ (8007680 <tcp_timewait_input+0xd8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800760e:	4b1f      	ldr	r3, [pc, #124]	@ (800768c <tcp_timewait_input+0xe4>)
 8007610:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007612:	885b      	ldrh	r3, [r3, #2]
 8007614:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007616:	4a1d      	ldr	r2, [pc, #116]	@ (800768c <tcp_timewait_input+0xe4>)
 8007618:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800761a:	8812      	ldrh	r2, [r2, #0]
 800761c:	b292      	uxth	r2, r2
 800761e:	9202      	str	r2, [sp, #8]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	4b1b      	ldr	r3, [pc, #108]	@ (8007690 <tcp_timewait_input+0xe8>)
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	4b1b      	ldr	r3, [pc, #108]	@ (8007694 <tcp_timewait_input+0xec>)
 8007628:	4602      	mov	r2, r0
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f002 fe6c 	bl	800a308 <tcp_rst>
      return;
 8007630:	e01b      	b.n	800766a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007632:	4b0f      	ldr	r3, [pc, #60]	@ (8007670 <tcp_timewait_input+0xc8>)
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800763e:	4b16      	ldr	r3, [pc, #88]	@ (8007698 <tcp_timewait_input+0xf0>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007646:	4b10      	ldr	r3, [pc, #64]	@ (8007688 <tcp_timewait_input+0xe0>)
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00c      	beq.n	8007668 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	8b5b      	ldrh	r3, [r3, #26]
 8007652:	f043 0302 	orr.w	r3, r3, #2
 8007656:	b29a      	uxth	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f002 f89f 	bl	80097a0 <tcp_output>
  }
  return;
 8007662:	e001      	b.n	8007668 <tcp_timewait_input+0xc0>
    return;
 8007664:	bf00      	nop
 8007666:	e000      	b.n	800766a <tcp_timewait_input+0xc2>
  return;
 8007668:	bf00      	nop
}
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	200081f8 	.word	0x200081f8
 8007674:	0800f0f8 	.word	0x0800f0f8
 8007678:	0800f310 	.word	0x0800f310
 800767c:	0800f144 	.word	0x0800f144
 8007680:	200081ec 	.word	0x200081ec
 8007684:	200081f0 	.word	0x200081f0
 8007688:	200081f6 	.word	0x200081f6
 800768c:	200081dc 	.word	0x200081dc
 8007690:	20004cdc 	.word	0x20004cdc
 8007694:	20004ce0 	.word	0x20004ce0
 8007698:	200081b4 	.word	0x200081b4

0800769c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800769c:	b590      	push	{r4, r7, lr}
 800769e:	b08d      	sub	sp, #52	@ 0x34
 80076a0:	af04      	add	r7, sp, #16
 80076a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <tcp_process+0x24>
 80076b2:	4b9d      	ldr	r3, [pc, #628]	@ (8007928 <tcp_process+0x28c>)
 80076b4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80076b8:	499c      	ldr	r1, [pc, #624]	@ (800792c <tcp_process+0x290>)
 80076ba:	489d      	ldr	r0, [pc, #628]	@ (8007930 <tcp_process+0x294>)
 80076bc:	f005 fcec 	bl	800d098 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80076c0:	4b9c      	ldr	r3, [pc, #624]	@ (8007934 <tcp_process+0x298>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d04e      	beq.n	800776a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	7d1b      	ldrb	r3, [r3, #20]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d108      	bne.n	80076e6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076d8:	4b97      	ldr	r3, [pc, #604]	@ (8007938 <tcp_process+0x29c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d123      	bne.n	8007728 <tcp_process+0x8c>
        acceptable = 1;
 80076e0:	2301      	movs	r3, #1
 80076e2:	76fb      	strb	r3, [r7, #27]
 80076e4:	e020      	b.n	8007728 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076ea:	4b94      	ldr	r3, [pc, #592]	@ (800793c <tcp_process+0x2a0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d102      	bne.n	80076f8 <tcp_process+0x5c>
        acceptable = 1;
 80076f2:	2301      	movs	r3, #1
 80076f4:	76fb      	strb	r3, [r7, #27]
 80076f6:	e017      	b.n	8007728 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80076f8:	4b90      	ldr	r3, [pc, #576]	@ (800793c <tcp_process+0x2a0>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	db10      	blt.n	8007728 <tcp_process+0x8c>
 8007706:	4b8d      	ldr	r3, [pc, #564]	@ (800793c <tcp_process+0x2a0>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007712:	440b      	add	r3, r1
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	dc06      	bgt.n	8007728 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8b5b      	ldrh	r3, [r3, #26]
 800771e:	f043 0302 	orr.w	r3, r3, #2
 8007722:	b29a      	uxth	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007728:	7efb      	ldrb	r3, [r7, #27]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d01b      	beq.n	8007766 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7d1b      	ldrb	r3, [r3, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <tcp_process+0xa8>
 8007736:	4b7c      	ldr	r3, [pc, #496]	@ (8007928 <tcp_process+0x28c>)
 8007738:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800773c:	4980      	ldr	r1, [pc, #512]	@ (8007940 <tcp_process+0x2a4>)
 800773e:	487c      	ldr	r0, [pc, #496]	@ (8007930 <tcp_process+0x294>)
 8007740:	f005 fcaa 	bl	800d098 <iprintf>
      recv_flags |= TF_RESET;
 8007744:	4b7f      	ldr	r3, [pc, #508]	@ (8007944 <tcp_process+0x2a8>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f043 0308 	orr.w	r3, r3, #8
 800774c:	b2da      	uxtb	r2, r3
 800774e:	4b7d      	ldr	r3, [pc, #500]	@ (8007944 <tcp_process+0x2a8>)
 8007750:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	8b5b      	ldrh	r3, [r3, #26]
 8007756:	f023 0301 	bic.w	r3, r3, #1
 800775a:	b29a      	uxth	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007760:	f06f 030d 	mvn.w	r3, #13
 8007764:	e37a      	b.n	8007e5c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	e378      	b.n	8007e5c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800776a:	4b72      	ldr	r3, [pc, #456]	@ (8007934 <tcp_process+0x298>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d010      	beq.n	8007798 <tcp_process+0xfc>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	7d1b      	ldrb	r3, [r3, #20]
 800777a:	2b02      	cmp	r3, #2
 800777c:	d00c      	beq.n	8007798 <tcp_process+0xfc>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	7d1b      	ldrb	r3, [r3, #20]
 8007782:	2b03      	cmp	r3, #3
 8007784:	d008      	beq.n	8007798 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	8b5b      	ldrh	r3, [r3, #26]
 800778a:	f043 0302 	orr.w	r3, r3, #2
 800778e:	b29a      	uxth	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	e361      	b.n	8007e5c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	8b5b      	ldrh	r3, [r3, #26]
 800779c:	f003 0310 	and.w	r3, r3, #16
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d103      	bne.n	80077ac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80077a4:	4b68      	ldr	r3, [pc, #416]	@ (8007948 <tcp_process+0x2ac>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 fc2b 	bl	8009018 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	7d1b      	ldrb	r3, [r3, #20]
 80077c6:	3b02      	subs	r3, #2
 80077c8:	2b07      	cmp	r3, #7
 80077ca:	f200 8337 	bhi.w	8007e3c <tcp_process+0x7a0>
 80077ce:	a201      	add	r2, pc, #4	@ (adr r2, 80077d4 <tcp_process+0x138>)
 80077d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d4:	080077f5 	.word	0x080077f5
 80077d8:	08007a25 	.word	0x08007a25
 80077dc:	08007b9d 	.word	0x08007b9d
 80077e0:	08007bc7 	.word	0x08007bc7
 80077e4:	08007ceb 	.word	0x08007ceb
 80077e8:	08007b9d 	.word	0x08007b9d
 80077ec:	08007d77 	.word	0x08007d77
 80077f0:	08007e07 	.word	0x08007e07
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80077f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007934 <tcp_process+0x298>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	f003 0310 	and.w	r3, r3, #16
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80e4 	beq.w	80079ca <tcp_process+0x32e>
 8007802:	4b4c      	ldr	r3, [pc, #304]	@ (8007934 <tcp_process+0x298>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 80dd 	beq.w	80079ca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	4b48      	ldr	r3, [pc, #288]	@ (8007938 <tcp_process+0x29c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	f040 80d5 	bne.w	80079ca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007820:	4b46      	ldr	r3, [pc, #280]	@ (800793c <tcp_process+0x2a0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8007832:	4b41      	ldr	r3, [pc, #260]	@ (8007938 <tcp_process+0x29c>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800783a:	4b44      	ldr	r3, [pc, #272]	@ (800794c <tcp_process+0x2b0>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	89db      	ldrh	r3, [r3, #14]
 8007840:	b29a      	uxth	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007854:	4b39      	ldr	r3, [pc, #228]	@ (800793c <tcp_process+0x2a0>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	1e5a      	subs	r2, r3, #1
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2204      	movs	r2, #4
 8007862:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3304      	adds	r3, #4
 800786c:	4618      	mov	r0, r3
 800786e:	f004 f931 	bl	800bad4 <ip4_route>
 8007872:	4601      	mov	r1, r0
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3304      	adds	r3, #4
 8007878:	461a      	mov	r2, r3
 800787a:	4620      	mov	r0, r4
 800787c:	f7ff f88c 	bl	8006998 <tcp_eff_send_mss_netif>
 8007880:	4603      	mov	r3, r0
 8007882:	461a      	mov	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800788c:	009a      	lsls	r2, r3, #2
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	f241 111c 	movw	r1, #4380	@ 0x111c
 8007898:	428b      	cmp	r3, r1
 800789a:	bf38      	it	cc
 800789c:	460b      	movcc	r3, r1
 800789e:	429a      	cmp	r2, r3
 80078a0:	d204      	bcs.n	80078ac <tcp_process+0x210>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	e00d      	b.n	80078c8 <tcp_process+0x22c>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d904      	bls.n	80078c4 <tcp_process+0x228>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	e001      	b.n	80078c8 <tcp_process+0x22c>
 80078c4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d106      	bne.n	80078e6 <tcp_process+0x24a>
 80078d8:	4b13      	ldr	r3, [pc, #76]	@ (8007928 <tcp_process+0x28c>)
 80078da:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80078de:	491c      	ldr	r1, [pc, #112]	@ (8007950 <tcp_process+0x2b4>)
 80078e0:	4813      	ldr	r0, [pc, #76]	@ (8007930 <tcp_process+0x294>)
 80078e2:	f005 fbd9 	bl	800d098 <iprintf>
        --pcb->snd_queuelen;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80078ec:	3b01      	subs	r3, #1
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078fa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d12a      	bne.n	8007958 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007906:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d106      	bne.n	800791c <tcp_process+0x280>
 800790e:	4b06      	ldr	r3, [pc, #24]	@ (8007928 <tcp_process+0x28c>)
 8007910:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8007914:	490f      	ldr	r1, [pc, #60]	@ (8007954 <tcp_process+0x2b8>)
 8007916:	4806      	ldr	r0, [pc, #24]	@ (8007930 <tcp_process+0x294>)
 8007918:	f005 fbbe 	bl	800d098 <iprintf>
          pcb->unsent = rseg->next;
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007924:	e01c      	b.n	8007960 <tcp_process+0x2c4>
 8007926:	bf00      	nop
 8007928:	0800f0f8 	.word	0x0800f0f8
 800792c:	0800f330 	.word	0x0800f330
 8007930:	0800f144 	.word	0x0800f144
 8007934:	200081f8 	.word	0x200081f8
 8007938:	200081f0 	.word	0x200081f0
 800793c:	200081ec 	.word	0x200081ec
 8007940:	0800f34c 	.word	0x0800f34c
 8007944:	200081f9 	.word	0x200081f9
 8007948:	200081b4 	.word	0x200081b4
 800794c:	200081dc 	.word	0x200081dc
 8007950:	0800f36c 	.word	0x0800f36c
 8007954:	0800f384 	.word	0x0800f384
        } else {
          pcb->unacked = rseg->next;
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8007960:	69f8      	ldr	r0, [r7, #28]
 8007962:	f7fe fd22 	bl	80063aa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796a:	2b00      	cmp	r3, #0
 800796c:	d104      	bne.n	8007978 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007974:	861a      	strh	r2, [r3, #48]	@ 0x30
 8007976:	e006      	b.n	8007986 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00a      	beq.n	80079a6 <tcp_process+0x30a>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6910      	ldr	r0, [r2, #16]
 800799a:	2200      	movs	r2, #0
 800799c:	6879      	ldr	r1, [r7, #4]
 800799e:	4798      	blx	r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	76bb      	strb	r3, [r7, #26]
 80079a4:	e001      	b.n	80079aa <tcp_process+0x30e>
 80079a6:	2300      	movs	r3, #0
 80079a8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80079aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80079ae:	f113 0f0d 	cmn.w	r3, #13
 80079b2:	d102      	bne.n	80079ba <tcp_process+0x31e>
          return ERR_ABRT;
 80079b4:	f06f 030c 	mvn.w	r3, #12
 80079b8:	e250      	b.n	8007e5c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	8b5b      	ldrh	r3, [r3, #26]
 80079be:	f043 0302 	orr.w	r3, r3, #2
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80079c8:	e23a      	b.n	8007e40 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80079ca:	4b98      	ldr	r3, [pc, #608]	@ (8007c2c <tcp_process+0x590>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8234 	beq.w	8007e40 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079d8:	4b95      	ldr	r3, [pc, #596]	@ (8007c30 <tcp_process+0x594>)
 80079da:	6819      	ldr	r1, [r3, #0]
 80079dc:	4b95      	ldr	r3, [pc, #596]	@ (8007c34 <tcp_process+0x598>)
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	461a      	mov	r2, r3
 80079e2:	4b95      	ldr	r3, [pc, #596]	@ (8007c38 <tcp_process+0x59c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079e8:	4b94      	ldr	r3, [pc, #592]	@ (8007c3c <tcp_process+0x5a0>)
 80079ea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079ec:	885b      	ldrh	r3, [r3, #2]
 80079ee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079f0:	4a92      	ldr	r2, [pc, #584]	@ (8007c3c <tcp_process+0x5a0>)
 80079f2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079f4:	8812      	ldrh	r2, [r2, #0]
 80079f6:	b292      	uxth	r2, r2
 80079f8:	9202      	str	r2, [sp, #8]
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	4b90      	ldr	r3, [pc, #576]	@ (8007c40 <tcp_process+0x5a4>)
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	4b90      	ldr	r3, [pc, #576]	@ (8007c44 <tcp_process+0x5a8>)
 8007a02:	4602      	mov	r2, r0
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f002 fc7f 	bl	800a308 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a10:	2b05      	cmp	r3, #5
 8007a12:	f200 8215 	bhi.w	8007e40 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f002 fa4b 	bl	8009eb8 <tcp_rexmit_rto>
      break;
 8007a22:	e20d      	b.n	8007e40 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007a24:	4b81      	ldr	r3, [pc, #516]	@ (8007c2c <tcp_process+0x590>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	f003 0310 	and.w	r3, r3, #16
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80a1 	beq.w	8007b74 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007a32:	4b7f      	ldr	r3, [pc, #508]	@ (8007c30 <tcp_process+0x594>)
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	db7e      	blt.n	8007b40 <tcp_process+0x4a4>
 8007a42:	4b7b      	ldr	r3, [pc, #492]	@ (8007c30 <tcp_process+0x594>)
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	dc77      	bgt.n	8007b40 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2204      	movs	r2, #4
 8007a54:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d102      	bne.n	8007a64 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007a5e:	23fa      	movs	r3, #250	@ 0xfa
 8007a60:	76bb      	strb	r3, [r7, #26]
 8007a62:	e01d      	b.n	8007aa0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d106      	bne.n	8007a7c <tcp_process+0x3e0>
 8007a6e:	4b76      	ldr	r3, [pc, #472]	@ (8007c48 <tcp_process+0x5ac>)
 8007a70:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8007a74:	4975      	ldr	r1, [pc, #468]	@ (8007c4c <tcp_process+0x5b0>)
 8007a76:	4876      	ldr	r0, [pc, #472]	@ (8007c50 <tcp_process+0x5b4>)
 8007a78:	f005 fb0e 	bl	800d098 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <tcp_process+0x400>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6910      	ldr	r0, [r2, #16]
 8007a90:	2200      	movs	r2, #0
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	4798      	blx	r3
 8007a96:	4603      	mov	r3, r0
 8007a98:	76bb      	strb	r3, [r7, #26]
 8007a9a:	e001      	b.n	8007aa0 <tcp_process+0x404>
 8007a9c:	23f0      	movs	r3, #240	@ 0xf0
 8007a9e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007aa0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007aa8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007aac:	f113 0f0d 	cmn.w	r3, #13
 8007ab0:	d002      	beq.n	8007ab8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fd ff8c 	bl	80059d0 <tcp_abort>
            }
            return ERR_ABRT;
 8007ab8:	f06f 030c 	mvn.w	r3, #12
 8007abc:	e1ce      	b.n	8007e5c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fae0 	bl	8008084 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007ac4:	4b63      	ldr	r3, [pc, #396]	@ (8007c54 <tcp_process+0x5b8>)
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <tcp_process+0x43c>
            recv_acked--;
 8007acc:	4b61      	ldr	r3, [pc, #388]	@ (8007c54 <tcp_process+0x5b8>)
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	4b5f      	ldr	r3, [pc, #380]	@ (8007c54 <tcp_process+0x5b8>)
 8007ad6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007adc:	009a      	lsls	r2, r3, #2
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8007ae8:	428b      	cmp	r3, r1
 8007aea:	bf38      	it	cc
 8007aec:	460b      	movcc	r3, r1
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d204      	bcs.n	8007afc <tcp_process+0x460>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	e00d      	b.n	8007b18 <tcp_process+0x47c>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	f241 121c 	movw	r2, #4380	@ 0x111c
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d904      	bls.n	8007b14 <tcp_process+0x478>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	e001      	b.n	8007b18 <tcp_process+0x47c>
 8007b14:	f241 131c 	movw	r3, #4380	@ 0x111c
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007b1e:	4b4e      	ldr	r3, [pc, #312]	@ (8007c58 <tcp_process+0x5bc>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d037      	beq.n	8007b9a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	8b5b      	ldrh	r3, [r3, #26]
 8007b2e:	f043 0302 	orr.w	r3, r3, #2
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2207      	movs	r2, #7
 8007b3c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007b3e:	e02c      	b.n	8007b9a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b40:	4b3b      	ldr	r3, [pc, #236]	@ (8007c30 <tcp_process+0x594>)
 8007b42:	6819      	ldr	r1, [r3, #0]
 8007b44:	4b3b      	ldr	r3, [pc, #236]	@ (8007c34 <tcp_process+0x598>)
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8007c38 <tcp_process+0x59c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b50:	4b3a      	ldr	r3, [pc, #232]	@ (8007c3c <tcp_process+0x5a0>)
 8007b52:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b54:	885b      	ldrh	r3, [r3, #2]
 8007b56:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b58:	4a38      	ldr	r2, [pc, #224]	@ (8007c3c <tcp_process+0x5a0>)
 8007b5a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b5c:	8812      	ldrh	r2, [r2, #0]
 8007b5e:	b292      	uxth	r2, r2
 8007b60:	9202      	str	r2, [sp, #8]
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	4b36      	ldr	r3, [pc, #216]	@ (8007c40 <tcp_process+0x5a4>)
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	4b36      	ldr	r3, [pc, #216]	@ (8007c44 <tcp_process+0x5a8>)
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f002 fbcb 	bl	800a308 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007b72:	e167      	b.n	8007e44 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007b74:	4b2d      	ldr	r3, [pc, #180]	@ (8007c2c <tcp_process+0x590>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	f003 0302 	and.w	r3, r3, #2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 8161 	beq.w	8007e44 <tcp_process+0x7a8>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b86:	1e5a      	subs	r2, r3, #1
 8007b88:	4b2b      	ldr	r3, [pc, #172]	@ (8007c38 <tcp_process+0x59c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	f040 8159 	bne.w	8007e44 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f002 f9b2 	bl	8009efc <tcp_rexmit>
      break;
 8007b98:	e154      	b.n	8007e44 <tcp_process+0x7a8>
 8007b9a:	e153      	b.n	8007e44 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fa71 	bl	8008084 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8007c58 <tcp_process+0x5bc>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 814c 	beq.w	8007e48 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	8b5b      	ldrh	r3, [r3, #26]
 8007bb4:	f043 0302 	orr.w	r3, r3, #2
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007bc4:	e140      	b.n	8007e48 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa5c 	bl	8008084 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007bcc:	4b22      	ldr	r3, [pc, #136]	@ (8007c58 <tcp_process+0x5bc>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	f003 0320 	and.w	r3, r3, #32
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d071      	beq.n	8007cbc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007bd8:	4b14      	ldr	r3, [pc, #80]	@ (8007c2c <tcp_process+0x590>)
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d060      	beq.n	8007ca6 <tcp_process+0x60a>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007be8:	4b11      	ldr	r3, [pc, #68]	@ (8007c30 <tcp_process+0x594>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d15a      	bne.n	8007ca6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d156      	bne.n	8007ca6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	8b5b      	ldrh	r3, [r3, #26]
 8007bfc:	f043 0302 	orr.w	r3, r3, #2
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fe fdbc 	bl	8006784 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007c0c:	4b13      	ldr	r3, [pc, #76]	@ (8007c5c <tcp_process+0x5c0>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d105      	bne.n	8007c22 <tcp_process+0x586>
 8007c16:	4b11      	ldr	r3, [pc, #68]	@ (8007c5c <tcp_process+0x5c0>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8007c5c <tcp_process+0x5c0>)
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	e02e      	b.n	8007c80 <tcp_process+0x5e4>
 8007c22:	4b0e      	ldr	r3, [pc, #56]	@ (8007c5c <tcp_process+0x5c0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	e027      	b.n	8007c7a <tcp_process+0x5de>
 8007c2a:	bf00      	nop
 8007c2c:	200081f8 	.word	0x200081f8
 8007c30:	200081f0 	.word	0x200081f0
 8007c34:	200081f6 	.word	0x200081f6
 8007c38:	200081ec 	.word	0x200081ec
 8007c3c:	200081dc 	.word	0x200081dc
 8007c40:	20004cdc 	.word	0x20004cdc
 8007c44:	20004ce0 	.word	0x20004ce0
 8007c48:	0800f0f8 	.word	0x0800f0f8
 8007c4c:	0800f398 	.word	0x0800f398
 8007c50:	0800f144 	.word	0x0800f144
 8007c54:	200081f4 	.word	0x200081f4
 8007c58:	200081f9 	.word	0x200081f9
 8007c5c:	200081c0 	.word	0x200081c0
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d104      	bne.n	8007c74 <tcp_process+0x5d8>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	60da      	str	r2, [r3, #12]
 8007c72:	e005      	b.n	8007c80 <tcp_process+0x5e4>
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1ef      	bne.n	8007c60 <tcp_process+0x5c4>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	60da      	str	r2, [r3, #12]
 8007c86:	4b77      	ldr	r3, [pc, #476]	@ (8007e64 <tcp_process+0x7c8>)
 8007c88:	2201      	movs	r2, #1
 8007c8a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	220a      	movs	r2, #10
 8007c90:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007c92:	4b75      	ldr	r3, [pc, #468]	@ (8007e68 <tcp_process+0x7cc>)
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60da      	str	r2, [r3, #12]
 8007c9a:	4a73      	ldr	r2, [pc, #460]	@ (8007e68 <tcp_process+0x7cc>)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	f002 fcf4 	bl	800a68c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007ca4:	e0d2      	b.n	8007e4c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	8b5b      	ldrh	r3, [r3, #26]
 8007caa:	f043 0302 	orr.w	r3, r3, #2
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	751a      	strb	r2, [r3, #20]
      break;
 8007cba:	e0c7      	b.n	8007e4c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007cbc:	4b6b      	ldr	r3, [pc, #428]	@ (8007e6c <tcp_process+0x7d0>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 80c1 	beq.w	8007e4c <tcp_process+0x7b0>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cce:	4b68      	ldr	r3, [pc, #416]	@ (8007e70 <tcp_process+0x7d4>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	f040 80ba 	bne.w	8007e4c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f040 80b5 	bne.w	8007e4c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2206      	movs	r2, #6
 8007ce6:	751a      	strb	r2, [r3, #20]
      break;
 8007ce8:	e0b0      	b.n	8007e4c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f9ca 	bl	8008084 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007cf0:	4b60      	ldr	r3, [pc, #384]	@ (8007e74 <tcp_process+0x7d8>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 80a9 	beq.w	8007e50 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	8b5b      	ldrh	r3, [r3, #26]
 8007d02:	f043 0302 	orr.w	r3, r3, #2
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7fe fd39 	bl	8006784 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007d12:	4b59      	ldr	r3, [pc, #356]	@ (8007e78 <tcp_process+0x7dc>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d105      	bne.n	8007d28 <tcp_process+0x68c>
 8007d1c:	4b56      	ldr	r3, [pc, #344]	@ (8007e78 <tcp_process+0x7dc>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	4a55      	ldr	r2, [pc, #340]	@ (8007e78 <tcp_process+0x7dc>)
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	e013      	b.n	8007d50 <tcp_process+0x6b4>
 8007d28:	4b53      	ldr	r3, [pc, #332]	@ (8007e78 <tcp_process+0x7dc>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	613b      	str	r3, [r7, #16]
 8007d2e:	e00c      	b.n	8007d4a <tcp_process+0x6ae>
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d104      	bne.n	8007d44 <tcp_process+0x6a8>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	e005      	b.n	8007d50 <tcp_process+0x6b4>
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1ef      	bne.n	8007d30 <tcp_process+0x694>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	60da      	str	r2, [r3, #12]
 8007d56:	4b43      	ldr	r3, [pc, #268]	@ (8007e64 <tcp_process+0x7c8>)
 8007d58:	2201      	movs	r2, #1
 8007d5a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	220a      	movs	r2, #10
 8007d60:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007d62:	4b41      	ldr	r3, [pc, #260]	@ (8007e68 <tcp_process+0x7cc>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	60da      	str	r2, [r3, #12]
 8007d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8007e68 <tcp_process+0x7cc>)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	f002 fc8c 	bl	800a68c <tcp_timer_needed>
      }
      break;
 8007d74:	e06c      	b.n	8007e50 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f984 	bl	8008084 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8007e6c <tcp_process+0x7d0>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f003 0310 	and.w	r3, r3, #16
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d065      	beq.n	8007e54 <tcp_process+0x7b8>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d8c:	4b38      	ldr	r3, [pc, #224]	@ (8007e70 <tcp_process+0x7d4>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d15f      	bne.n	8007e54 <tcp_process+0x7b8>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d15b      	bne.n	8007e54 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7fe fcf1 	bl	8006784 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007da2:	4b35      	ldr	r3, [pc, #212]	@ (8007e78 <tcp_process+0x7dc>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d105      	bne.n	8007db8 <tcp_process+0x71c>
 8007dac:	4b32      	ldr	r3, [pc, #200]	@ (8007e78 <tcp_process+0x7dc>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	4a31      	ldr	r2, [pc, #196]	@ (8007e78 <tcp_process+0x7dc>)
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	e013      	b.n	8007de0 <tcp_process+0x744>
 8007db8:	4b2f      	ldr	r3, [pc, #188]	@ (8007e78 <tcp_process+0x7dc>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	60fb      	str	r3, [r7, #12]
 8007dbe:	e00c      	b.n	8007dda <tcp_process+0x73e>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d104      	bne.n	8007dd4 <tcp_process+0x738>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	60da      	str	r2, [r3, #12]
 8007dd2:	e005      	b.n	8007de0 <tcp_process+0x744>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1ef      	bne.n	8007dc0 <tcp_process+0x724>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	60da      	str	r2, [r3, #12]
 8007de6:	4b1f      	ldr	r3, [pc, #124]	@ (8007e64 <tcp_process+0x7c8>)
 8007de8:	2201      	movs	r2, #1
 8007dea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	220a      	movs	r2, #10
 8007df0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007df2:	4b1d      	ldr	r3, [pc, #116]	@ (8007e68 <tcp_process+0x7cc>)
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60da      	str	r2, [r3, #12]
 8007dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8007e68 <tcp_process+0x7cc>)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	f002 fc44 	bl	800a68c <tcp_timer_needed>
      }
      break;
 8007e04:	e026      	b.n	8007e54 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f93c 	bl	8008084 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007e0c:	4b17      	ldr	r3, [pc, #92]	@ (8007e6c <tcp_process+0x7d0>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	f003 0310 	and.w	r3, r3, #16
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d01f      	beq.n	8007e58 <tcp_process+0x7bc>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e1c:	4b14      	ldr	r3, [pc, #80]	@ (8007e70 <tcp_process+0x7d4>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d119      	bne.n	8007e58 <tcp_process+0x7bc>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d115      	bne.n	8007e58 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007e2c:	4b11      	ldr	r3, [pc, #68]	@ (8007e74 <tcp_process+0x7d8>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	f043 0310 	orr.w	r3, r3, #16
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	4b0f      	ldr	r3, [pc, #60]	@ (8007e74 <tcp_process+0x7d8>)
 8007e38:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007e3a:	e00d      	b.n	8007e58 <tcp_process+0x7bc>
    default:
      break;
 8007e3c:	bf00      	nop
 8007e3e:	e00c      	b.n	8007e5a <tcp_process+0x7be>
      break;
 8007e40:	bf00      	nop
 8007e42:	e00a      	b.n	8007e5a <tcp_process+0x7be>
      break;
 8007e44:	bf00      	nop
 8007e46:	e008      	b.n	8007e5a <tcp_process+0x7be>
      break;
 8007e48:	bf00      	nop
 8007e4a:	e006      	b.n	8007e5a <tcp_process+0x7be>
      break;
 8007e4c:	bf00      	nop
 8007e4e:	e004      	b.n	8007e5a <tcp_process+0x7be>
      break;
 8007e50:	bf00      	nop
 8007e52:	e002      	b.n	8007e5a <tcp_process+0x7be>
      break;
 8007e54:	bf00      	nop
 8007e56:	e000      	b.n	8007e5a <tcp_process+0x7be>
      break;
 8007e58:	bf00      	nop
  }
  return ERR_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3724      	adds	r7, #36	@ 0x24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd90      	pop	{r4, r7, pc}
 8007e64:	200081c8 	.word	0x200081c8
 8007e68:	200081c4 	.word	0x200081c4
 8007e6c:	200081f8 	.word	0x200081f8
 8007e70:	200081f0 	.word	0x200081f0
 8007e74:	200081f9 	.word	0x200081f9
 8007e78:	200081c0 	.word	0x200081c0

08007e7c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007e7c:	b590      	push	{r4, r7, lr}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <tcp_oos_insert_segment+0x1e>
 8007e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8007f7c <tcp_oos_insert_segment+0x100>)
 8007e8e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8007e92:	493b      	ldr	r1, [pc, #236]	@ (8007f80 <tcp_oos_insert_segment+0x104>)
 8007e94:	483b      	ldr	r0, [pc, #236]	@ (8007f84 <tcp_oos_insert_segment+0x108>)
 8007e96:	f005 f8ff 	bl	800d098 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	899b      	ldrh	r3, [r3, #12]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fb fcb4 	bl	8003810 <lwip_htons>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d028      	beq.n	8007f06 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007eb4:	6838      	ldr	r0, [r7, #0]
 8007eb6:	f7fe fa63 	bl	8006380 <tcp_segs_free>
    next = NULL;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	e056      	b.n	8007f6e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	899b      	ldrh	r3, [r3, #12]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fb fca1 	bl	8003810 <lwip_htons>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00d      	beq.n	8007ef6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	899b      	ldrh	r3, [r3, #12]
 8007ee0:	b29c      	uxth	r4, r3
 8007ee2:	2001      	movs	r0, #1
 8007ee4:	f7fb fc94 	bl	8003810 <lwip_htons>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	461a      	mov	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	4322      	orrs	r2, r4
 8007ef2:	b292      	uxth	r2, r2
 8007ef4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7fe fa52 	bl	80063aa <tcp_seg_free>
    while (next &&
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00e      	beq.n	8007f2a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	891b      	ldrh	r3, [r3, #8]
 8007f10:	461a      	mov	r2, r3
 8007f12:	4b1d      	ldr	r3, [pc, #116]	@ (8007f88 <tcp_oos_insert_segment+0x10c>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	441a      	add	r2, r3
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	8909      	ldrh	r1, [r1, #8]
 8007f22:	440b      	add	r3, r1
 8007f24:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	daca      	bge.n	8007ec0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d01e      	beq.n	8007f6e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	891b      	ldrh	r3, [r3, #8]
 8007f34:	461a      	mov	r2, r3
 8007f36:	4b14      	ldr	r3, [pc, #80]	@ (8007f88 <tcp_oos_insert_segment+0x10c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	441a      	add	r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dd12      	ble.n	8007f6e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	4b0d      	ldr	r3, [pc, #52]	@ (8007f88 <tcp_oos_insert_segment+0x10c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	891b      	ldrh	r3, [r3, #8]
 8007f66:	4619      	mov	r1, r3
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f7fc fe23 	bl	8004bb4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	601a      	str	r2, [r3, #0]
}
 8007f74:	bf00      	nop
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd90      	pop	{r4, r7, pc}
 8007f7c:	0800f0f8 	.word	0x0800f0f8
 8007f80:	0800f3b8 	.word	0x0800f3b8
 8007f84:	0800f144 	.word	0x0800f144
 8007f88:	200081ec 	.word	0x200081ec

08007f8c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007f8c:	b5b0      	push	{r4, r5, r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8007f9a:	e03e      	b.n	800801a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fd f810 	bl	8004fd0 <pbuf_clen>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8007fba:	8a7a      	ldrh	r2, [r7, #18]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d906      	bls.n	8007fce <tcp_free_acked_segments+0x42>
 8007fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800806c <tcp_free_acked_segments+0xe0>)
 8007fc2:	f240 4257 	movw	r2, #1111	@ 0x457
 8007fc6:	492a      	ldr	r1, [pc, #168]	@ (8008070 <tcp_free_acked_segments+0xe4>)
 8007fc8:	482a      	ldr	r0, [pc, #168]	@ (8008074 <tcp_free_acked_segments+0xe8>)
 8007fca:	f005 f865 	bl	800d098 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8007fd4:	8a7b      	ldrh	r3, [r7, #18]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	891a      	ldrh	r2, [r3, #8]
 8007fe4:	4b24      	ldr	r3, [pc, #144]	@ (8008078 <tcp_free_acked_segments+0xec>)
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	4413      	add	r3, r2
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	4b22      	ldr	r3, [pc, #136]	@ (8008078 <tcp_free_acked_segments+0xec>)
 8007fee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8007ff0:	6978      	ldr	r0, [r7, #20]
 8007ff2:	f7fe f9da 	bl	80063aa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00c      	beq.n	800801a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d109      	bne.n	800801a <tcp_free_acked_segments+0x8e>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d106      	bne.n	800801a <tcp_free_acked_segments+0x8e>
 800800c:	4b17      	ldr	r3, [pc, #92]	@ (800806c <tcp_free_acked_segments+0xe0>)
 800800e:	f240 4261 	movw	r2, #1121	@ 0x461
 8008012:	491a      	ldr	r1, [pc, #104]	@ (800807c <tcp_free_acked_segments+0xf0>)
 8008014:	4817      	ldr	r0, [pc, #92]	@ (8008074 <tcp_free_acked_segments+0xe8>)
 8008016:	f005 f83f 	bl	800d098 <iprintf>
  while (seg_list != NULL &&
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d020      	beq.n	8008062 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	4618      	mov	r0, r3
 8008028:	f7fb fc07 	bl	800383a <lwip_htonl>
 800802c:	4604      	mov	r4, r0
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	891b      	ldrh	r3, [r3, #8]
 8008032:	461d      	mov	r5, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	899b      	ldrh	r3, [r3, #12]
 800803a:	b29b      	uxth	r3, r3
 800803c:	4618      	mov	r0, r3
 800803e:	f7fb fbe7 	bl	8003810 <lwip_htons>
 8008042:	4603      	mov	r3, r0
 8008044:	b2db      	uxtb	r3, r3
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <tcp_free_acked_segments+0xc6>
 800804e:	2301      	movs	r3, #1
 8008050:	e000      	b.n	8008054 <tcp_free_acked_segments+0xc8>
 8008052:	2300      	movs	r3, #0
 8008054:	442b      	add	r3, r5
 8008056:	18e2      	adds	r2, r4, r3
 8008058:	4b09      	ldr	r3, [pc, #36]	@ (8008080 <tcp_free_acked_segments+0xf4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800805e:	2b00      	cmp	r3, #0
 8008060:	dd9c      	ble.n	8007f9c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008062:	68bb      	ldr	r3, [r7, #8]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bdb0      	pop	{r4, r5, r7, pc}
 800806c:	0800f0f8 	.word	0x0800f0f8
 8008070:	0800f3e0 	.word	0x0800f3e0
 8008074:	0800f144 	.word	0x0800f144
 8008078:	200081f4 	.word	0x200081f4
 800807c:	0800f408 	.word	0x0800f408
 8008080:	200081f0 	.word	0x200081f0

08008084 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008084:	b5b0      	push	{r4, r5, r7, lr}
 8008086:	b094      	sub	sp, #80	@ 0x50
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <tcp_receive+0x20>
 8008096:	4b91      	ldr	r3, [pc, #580]	@ (80082dc <tcp_receive+0x258>)
 8008098:	f240 427b 	movw	r2, #1147	@ 0x47b
 800809c:	4990      	ldr	r1, [pc, #576]	@ (80082e0 <tcp_receive+0x25c>)
 800809e:	4891      	ldr	r0, [pc, #580]	@ (80082e4 <tcp_receive+0x260>)
 80080a0:	f004 fffa 	bl	800d098 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	7d1b      	ldrb	r3, [r3, #20]
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d806      	bhi.n	80080ba <tcp_receive+0x36>
 80080ac:	4b8b      	ldr	r3, [pc, #556]	@ (80082dc <tcp_receive+0x258>)
 80080ae:	f240 427c 	movw	r2, #1148	@ 0x47c
 80080b2:	498d      	ldr	r1, [pc, #564]	@ (80082e8 <tcp_receive+0x264>)
 80080b4:	488b      	ldr	r0, [pc, #556]	@ (80082e4 <tcp_receive+0x260>)
 80080b6:	f004 ffef 	bl	800d098 <iprintf>

  if (flags & TCP_ACK) {
 80080ba:	4b8c      	ldr	r3, [pc, #560]	@ (80082ec <tcp_receive+0x268>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	f003 0310 	and.w	r3, r3, #16
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 8264 	beq.w	8008590 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80080ce:	461a      	mov	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080d4:	4413      	add	r3, r2
 80080d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080dc:	4b84      	ldr	r3, [pc, #528]	@ (80082f0 <tcp_receive+0x26c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	db1b      	blt.n	800811e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080ea:	4b81      	ldr	r3, [pc, #516]	@ (80082f0 <tcp_receive+0x26c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d106      	bne.n	8008100 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80080f6:	4b7f      	ldr	r3, [pc, #508]	@ (80082f4 <tcp_receive+0x270>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	db0e      	blt.n	800811e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008104:	4b7b      	ldr	r3, [pc, #492]	@ (80082f4 <tcp_receive+0x270>)
 8008106:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008108:	429a      	cmp	r2, r3
 800810a:	d125      	bne.n	8008158 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800810c:	4b7a      	ldr	r3, [pc, #488]	@ (80082f8 <tcp_receive+0x274>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	89db      	ldrh	r3, [r3, #14]
 8008112:	b29a      	uxth	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800811a:	429a      	cmp	r2, r3
 800811c:	d91c      	bls.n	8008158 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800811e:	4b76      	ldr	r3, [pc, #472]	@ (80082f8 <tcp_receive+0x274>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	89db      	ldrh	r3, [r3, #14]
 8008124:	b29a      	uxth	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008138:	429a      	cmp	r2, r3
 800813a:	d205      	bcs.n	8008148 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8008148:	4b69      	ldr	r3, [pc, #420]	@ (80082f0 <tcp_receive+0x26c>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8008150:	4b68      	ldr	r3, [pc, #416]	@ (80082f4 <tcp_receive+0x270>)
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008158:	4b66      	ldr	r3, [pc, #408]	@ (80082f4 <tcp_receive+0x270>)
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	dc58      	bgt.n	8008218 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008166:	4b65      	ldr	r3, [pc, #404]	@ (80082fc <tcp_receive+0x278>)
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d14b      	bne.n	8008206 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8008178:	4413      	add	r3, r2
 800817a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800817c:	429a      	cmp	r2, r3
 800817e:	d142      	bne.n	8008206 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008186:	2b00      	cmp	r3, #0
 8008188:	db3d      	blt.n	8008206 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800818e:	4b59      	ldr	r3, [pc, #356]	@ (80082f4 <tcp_receive+0x270>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	429a      	cmp	r2, r3
 8008194:	d137      	bne.n	8008206 <tcp_receive+0x182>
              found_dupack = 1;
 8008196:	2301      	movs	r3, #1
 8008198:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081a0:	2bff      	cmp	r3, #255	@ 0xff
 80081a2:	d007      	beq.n	80081b4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081aa:	3301      	adds	r3, #1
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d91b      	bls.n	80081f6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80081c8:	4413      	add	r3, r2
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d30a      	bcc.n	80081ec <tcp_receive+0x168>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80081e0:	4413      	add	r3, r2
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80081ea:	e004      	b.n	80081f6 <tcp_receive+0x172>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d902      	bls.n	8008206 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 fee7 	bl	8009fd4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008208:	2b00      	cmp	r3, #0
 800820a:	f040 8161 	bne.w	80084d0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008216:	e15b      	b.n	80084d0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008218:	4b36      	ldr	r3, [pc, #216]	@ (80082f4 <tcp_receive+0x270>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	3b01      	subs	r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	f2c0 814e 	blt.w	80084c6 <tcp_receive+0x442>
 800822a:	4b32      	ldr	r3, [pc, #200]	@ (80082f4 <tcp_receive+0x270>)
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b00      	cmp	r3, #0
 8008236:	f300 8146 	bgt.w	80084c6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	8b5b      	ldrh	r3, [r3, #26]
 800823e:	f003 0304 	and.w	r3, r3, #4
 8008242:	2b00      	cmp	r3, #0
 8008244:	d010      	beq.n	8008268 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	8b5b      	ldrh	r3, [r3, #26]
 800824a:	f023 0304 	bic.w	r3, r3, #4
 800824e:	b29a      	uxth	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008276:	10db      	asrs	r3, r3, #3
 8008278:	b21b      	sxth	r3, r3
 800827a:	b29a      	uxth	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008282:	b29b      	uxth	r3, r3
 8008284:	4413      	add	r3, r2
 8008286:	b29b      	uxth	r3, r3
 8008288:	b21a      	sxth	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008290:	4b18      	ldr	r3, [pc, #96]	@ (80082f4 <tcp_receive+0x270>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	b29a      	uxth	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800829a:	b29b      	uxth	r3, r3
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80082a8:	4b12      	ldr	r3, [pc, #72]	@ (80082f4 <tcp_receive+0x270>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	7d1b      	ldrb	r3, [r3, #20]
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	f240 8097 	bls.w	80083e8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d245      	bcs.n	8008356 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	8b5b      	ldrh	r3, [r3, #26]
 80082ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d014      	beq.n	8008300 <tcp_receive+0x27c>
 80082d6:	2301      	movs	r3, #1
 80082d8:	e013      	b.n	8008302 <tcp_receive+0x27e>
 80082da:	bf00      	nop
 80082dc:	0800f0f8 	.word	0x0800f0f8
 80082e0:	0800f428 	.word	0x0800f428
 80082e4:	0800f144 	.word	0x0800f144
 80082e8:	0800f444 	.word	0x0800f444
 80082ec:	200081f8 	.word	0x200081f8
 80082f0:	200081ec 	.word	0x200081ec
 80082f4:	200081f0 	.word	0x200081f0
 80082f8:	200081dc 	.word	0x200081dc
 80082fc:	200081f6 	.word	0x200081f6
 8008300:	2302      	movs	r3, #2
 8008302:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008306:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800830a:	b29a      	uxth	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008310:	fb12 f303 	smulbb	r3, r2, r3
 8008314:	b29b      	uxth	r3, r3
 8008316:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008318:	4293      	cmp	r3, r2
 800831a:	bf28      	it	cs
 800831c:	4613      	movcs	r3, r2
 800831e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008326:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008328:	4413      	add	r3, r2
 800832a:	b29a      	uxth	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008332:	429a      	cmp	r2, r3
 8008334:	d309      	bcc.n	800834a <tcp_receive+0x2c6>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800833c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800833e:	4413      	add	r3, r2
 8008340:	b29a      	uxth	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008348:	e04e      	b.n	80083e8 <tcp_receive+0x364>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008350:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008354:	e048      	b.n	80083e8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800835c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800835e:	4413      	add	r3, r2
 8008360:	b29a      	uxth	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008368:	429a      	cmp	r2, r3
 800836a:	d309      	bcc.n	8008380 <tcp_receive+0x2fc>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008372:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008374:	4413      	add	r3, r2
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800837e:	e004      	b.n	800838a <tcp_receive+0x306>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008386:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008396:	429a      	cmp	r2, r3
 8008398:	d326      	bcc.n	80083e8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80083ba:	4413      	add	r3, r2
 80083bc:	b29a      	uxth	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d30a      	bcc.n	80083de <tcp_receive+0x35a>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80083d2:	4413      	add	r3, r2
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80083dc:	e004      	b.n	80083e8 <tcp_receive+0x364>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80083e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083f0:	4a98      	ldr	r2, [pc, #608]	@ (8008654 <tcp_receive+0x5d0>)
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff fdca 	bl	8007f8c <tcp_free_acked_segments>
 80083f8:	4602      	mov	r2, r0
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008406:	4a94      	ldr	r2, [pc, #592]	@ (8008658 <tcp_receive+0x5d4>)
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff fdbf 	bl	8007f8c <tcp_free_acked_segments>
 800840e:	4602      	mov	r2, r0
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008418:	2b00      	cmp	r3, #0
 800841a:	d104      	bne.n	8008426 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008422:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008424:	e002      	b.n	800842c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d103      	bne.n	8008442 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8008448:	4b84      	ldr	r3, [pc, #528]	@ (800865c <tcp_receive+0x5d8>)
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	4413      	add	r3, r2
 800844e:	b29a      	uxth	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	8b5b      	ldrh	r3, [r3, #26]
 800845a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800845e:	2b00      	cmp	r3, #0
 8008460:	d035      	beq.n	80084ce <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008466:	2b00      	cmp	r3, #0
 8008468:	d118      	bne.n	800849c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00c      	beq.n	800848c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	4618      	mov	r0, r3
 8008480:	f7fb f9db 	bl	800383a <lwip_htonl>
 8008484:	4603      	mov	r3, r0
 8008486:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008488:	2b00      	cmp	r3, #0
 800848a:	dc20      	bgt.n	80084ce <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	8b5b      	ldrh	r3, [r3, #26]
 8008490:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008494:	b29a      	uxth	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800849a:	e018      	b.n	80084ce <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fb f9c6 	bl	800383a <lwip_htonl>
 80084ae:	4603      	mov	r3, r0
 80084b0:	1ae3      	subs	r3, r4, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	dc0b      	bgt.n	80084ce <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	8b5b      	ldrh	r3, [r3, #26]
 80084ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084be:	b29a      	uxth	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80084c4:	e003      	b.n	80084ce <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 ff70 	bl	800a3ac <tcp_send_empty_ack>
 80084cc:	e000      	b.n	80084d0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80084ce:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d05b      	beq.n	8008590 <tcp_receive+0x50c>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084dc:	4b60      	ldr	r3, [pc, #384]	@ (8008660 <tcp_receive+0x5dc>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	da54      	bge.n	8008590 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80084e6:	4b5f      	ldr	r3, [pc, #380]	@ (8008664 <tcp_receive+0x5e0>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80084fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008504:	10db      	asrs	r3, r3, #3
 8008506:	b21b      	sxth	r3, r3
 8008508:	b29b      	uxth	r3, r3
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	b29b      	uxth	r3, r3
 800850e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008518:	b29a      	uxth	r2, r3
 800851a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800851e:	4413      	add	r3, r2
 8008520:	b29b      	uxth	r3, r3
 8008522:	b21a      	sxth	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8008528:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800852c:	2b00      	cmp	r3, #0
 800852e:	da05      	bge.n	800853c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008530:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008534:	425b      	negs	r3, r3
 8008536:	b29b      	uxth	r3, r3
 8008538:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800853c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008546:	109b      	asrs	r3, r3, #2
 8008548:	b21b      	sxth	r3, r3
 800854a:	b29b      	uxth	r3, r3
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	b29b      	uxth	r3, r3
 8008550:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800855a:	b29a      	uxth	r2, r3
 800855c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008560:	4413      	add	r3, r2
 8008562:	b29b      	uxth	r3, r3
 8008564:	b21a      	sxth	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008570:	10db      	asrs	r3, r3, #3
 8008572:	b21b      	sxth	r3, r3
 8008574:	b29a      	uxth	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800857c:	b29b      	uxth	r3, r3
 800857e:	4413      	add	r3, r2
 8008580:	b29b      	uxth	r3, r3
 8008582:	b21a      	sxth	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008590:	4b35      	ldr	r3, [pc, #212]	@ (8008668 <tcp_receive+0x5e4>)
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 84df 	beq.w	8008f58 <tcp_receive+0xed4>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	7d1b      	ldrb	r3, [r3, #20]
 800859e:	2b06      	cmp	r3, #6
 80085a0:	f200 84da 	bhi.w	8008f58 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085a8:	4b30      	ldr	r3, [pc, #192]	@ (800866c <tcp_receive+0x5e8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	3b01      	subs	r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f2c0 808f 	blt.w	80086d4 <tcp_receive+0x650>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085ba:	4b2b      	ldr	r3, [pc, #172]	@ (8008668 <tcp_receive+0x5e4>)
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	4619      	mov	r1, r3
 80085c0:	4b2a      	ldr	r3, [pc, #168]	@ (800866c <tcp_receive+0x5e8>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	440b      	add	r3, r1
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	3301      	adds	r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f300 8082 	bgt.w	80086d4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80085d0:	4b27      	ldr	r3, [pc, #156]	@ (8008670 <tcp_receive+0x5ec>)
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085da:	4b24      	ldr	r3, [pc, #144]	@ (800866c <tcp_receive+0x5e8>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80085e2:	4b23      	ldr	r3, [pc, #140]	@ (8008670 <tcp_receive+0x5ec>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d106      	bne.n	80085f8 <tcp_receive+0x574>
 80085ea:	4b22      	ldr	r3, [pc, #136]	@ (8008674 <tcp_receive+0x5f0>)
 80085ec:	f240 5294 	movw	r2, #1428	@ 0x594
 80085f0:	4921      	ldr	r1, [pc, #132]	@ (8008678 <tcp_receive+0x5f4>)
 80085f2:	4822      	ldr	r0, [pc, #136]	@ (800867c <tcp_receive+0x5f8>)
 80085f4:	f004 fd50 	bl	800d098 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80085f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80085fe:	4293      	cmp	r3, r2
 8008600:	d906      	bls.n	8008610 <tcp_receive+0x58c>
 8008602:	4b1c      	ldr	r3, [pc, #112]	@ (8008674 <tcp_receive+0x5f0>)
 8008604:	f240 5295 	movw	r2, #1429	@ 0x595
 8008608:	491d      	ldr	r1, [pc, #116]	@ (8008680 <tcp_receive+0x5fc>)
 800860a:	481c      	ldr	r0, [pc, #112]	@ (800867c <tcp_receive+0x5f8>)
 800860c:	f004 fd44 	bl	800d098 <iprintf>
      off = (u16_t)off32;
 8008610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008612:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008616:	4b16      	ldr	r3, [pc, #88]	@ (8008670 <tcp_receive+0x5ec>)
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	891b      	ldrh	r3, [r3, #8]
 800861c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008620:	429a      	cmp	r2, r3
 8008622:	d906      	bls.n	8008632 <tcp_receive+0x5ae>
 8008624:	4b13      	ldr	r3, [pc, #76]	@ (8008674 <tcp_receive+0x5f0>)
 8008626:	f240 5297 	movw	r2, #1431	@ 0x597
 800862a:	4916      	ldr	r1, [pc, #88]	@ (8008684 <tcp_receive+0x600>)
 800862c:	4813      	ldr	r0, [pc, #76]	@ (800867c <tcp_receive+0x5f8>)
 800862e:	f004 fd33 	bl	800d098 <iprintf>
      inseg.len -= off;
 8008632:	4b0f      	ldr	r3, [pc, #60]	@ (8008670 <tcp_receive+0x5ec>)
 8008634:	891a      	ldrh	r2, [r3, #8]
 8008636:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	b29a      	uxth	r2, r3
 800863e:	4b0c      	ldr	r3, [pc, #48]	@ (8008670 <tcp_receive+0x5ec>)
 8008640:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008642:	4b0b      	ldr	r3, [pc, #44]	@ (8008670 <tcp_receive+0x5ec>)
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	891a      	ldrh	r2, [r3, #8]
 8008648:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8008650:	e02a      	b.n	80086a8 <tcp_receive+0x624>
 8008652:	bf00      	nop
 8008654:	0800f460 	.word	0x0800f460
 8008658:	0800f468 	.word	0x0800f468
 800865c:	200081f4 	.word	0x200081f4
 8008660:	200081f0 	.word	0x200081f0
 8008664:	200081b4 	.word	0x200081b4
 8008668:	200081f6 	.word	0x200081f6
 800866c:	200081ec 	.word	0x200081ec
 8008670:	200081cc 	.word	0x200081cc
 8008674:	0800f0f8 	.word	0x0800f0f8
 8008678:	0800f470 	.word	0x0800f470
 800867c:	0800f144 	.word	0x0800f144
 8008680:	0800f480 	.word	0x0800f480
 8008684:	0800f490 	.word	0x0800f490
        off -= p->len;
 8008688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800868a:	895b      	ldrh	r3, [r3, #10]
 800868c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008698:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800869a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800869c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800869e:	2200      	movs	r2, #0
 80086a0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80086a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80086a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086aa:	895b      	ldrh	r3, [r3, #10]
 80086ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d8e9      	bhi.n	8008688 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80086b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80086b8:	4619      	mov	r1, r3
 80086ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80086bc:	f7fc fb7a 	bl	8004db4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c4:	4a90      	ldr	r2, [pc, #576]	@ (8008908 <tcp_receive+0x884>)
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	4b90      	ldr	r3, [pc, #576]	@ (800890c <tcp_receive+0x888>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	4a8e      	ldr	r2, [pc, #568]	@ (8008908 <tcp_receive+0x884>)
 80086ce:	6812      	ldr	r2, [r2, #0]
 80086d0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80086d2:	e00d      	b.n	80086f0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80086d4:	4b8c      	ldr	r3, [pc, #560]	@ (8008908 <tcp_receive+0x884>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	da06      	bge.n	80086f0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	8b5b      	ldrh	r3, [r3, #26]
 80086e6:	f043 0302 	orr.w	r3, r3, #2
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80086f0:	4b85      	ldr	r3, [pc, #532]	@ (8008908 <tcp_receive+0x884>)
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f2c0 8427 	blt.w	8008f4e <tcp_receive+0xeca>
 8008700:	4b81      	ldr	r3, [pc, #516]	@ (8008908 <tcp_receive+0x884>)
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800870c:	440b      	add	r3, r1
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	3301      	adds	r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	f300 841b 	bgt.w	8008f4e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800871c:	4b7a      	ldr	r3, [pc, #488]	@ (8008908 <tcp_receive+0x884>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	429a      	cmp	r2, r3
 8008722:	f040 8298 	bne.w	8008c56 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008726:	4b79      	ldr	r3, [pc, #484]	@ (800890c <tcp_receive+0x888>)
 8008728:	891c      	ldrh	r4, [r3, #8]
 800872a:	4b78      	ldr	r3, [pc, #480]	@ (800890c <tcp_receive+0x888>)
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	899b      	ldrh	r3, [r3, #12]
 8008730:	b29b      	uxth	r3, r3
 8008732:	4618      	mov	r0, r3
 8008734:	f7fb f86c 	bl	8003810 <lwip_htons>
 8008738:	4603      	mov	r3, r0
 800873a:	b2db      	uxtb	r3, r3
 800873c:	f003 0303 	and.w	r3, r3, #3
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <tcp_receive+0x6c4>
 8008744:	2301      	movs	r3, #1
 8008746:	e000      	b.n	800874a <tcp_receive+0x6c6>
 8008748:	2300      	movs	r3, #0
 800874a:	4423      	add	r3, r4
 800874c:	b29a      	uxth	r2, r3
 800874e:	4b70      	ldr	r3, [pc, #448]	@ (8008910 <tcp_receive+0x88c>)
 8008750:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008756:	4b6e      	ldr	r3, [pc, #440]	@ (8008910 <tcp_receive+0x88c>)
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d274      	bcs.n	8008848 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800875e:	4b6b      	ldr	r3, [pc, #428]	@ (800890c <tcp_receive+0x888>)
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	899b      	ldrh	r3, [r3, #12]
 8008764:	b29b      	uxth	r3, r3
 8008766:	4618      	mov	r0, r3
 8008768:	f7fb f852 	bl	8003810 <lwip_htons>
 800876c:	4603      	mov	r3, r0
 800876e:	b2db      	uxtb	r3, r3
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01e      	beq.n	80087b6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008778:	4b64      	ldr	r3, [pc, #400]	@ (800890c <tcp_receive+0x888>)
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	899b      	ldrh	r3, [r3, #12]
 800877e:	b29b      	uxth	r3, r3
 8008780:	b21b      	sxth	r3, r3
 8008782:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008786:	b21c      	sxth	r4, r3
 8008788:	4b60      	ldr	r3, [pc, #384]	@ (800890c <tcp_receive+0x888>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	899b      	ldrh	r3, [r3, #12]
 800878e:	b29b      	uxth	r3, r3
 8008790:	4618      	mov	r0, r3
 8008792:	f7fb f83d 	bl	8003810 <lwip_htons>
 8008796:	4603      	mov	r3, r0
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800879e:	b29b      	uxth	r3, r3
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fb f835 	bl	8003810 <lwip_htons>
 80087a6:	4603      	mov	r3, r0
 80087a8:	b21b      	sxth	r3, r3
 80087aa:	4323      	orrs	r3, r4
 80087ac:	b21a      	sxth	r2, r3
 80087ae:	4b57      	ldr	r3, [pc, #348]	@ (800890c <tcp_receive+0x888>)
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	b292      	uxth	r2, r2
 80087b4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80087ba:	4b54      	ldr	r3, [pc, #336]	@ (800890c <tcp_receive+0x888>)
 80087bc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80087be:	4b53      	ldr	r3, [pc, #332]	@ (800890c <tcp_receive+0x888>)
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	899b      	ldrh	r3, [r3, #12]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fb f822 	bl	8003810 <lwip_htons>
 80087cc:	4603      	mov	r3, r0
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <tcp_receive+0x760>
            inseg.len -= 1;
 80087d8:	4b4c      	ldr	r3, [pc, #304]	@ (800890c <tcp_receive+0x888>)
 80087da:	891b      	ldrh	r3, [r3, #8]
 80087dc:	3b01      	subs	r3, #1
 80087de:	b29a      	uxth	r2, r3
 80087e0:	4b4a      	ldr	r3, [pc, #296]	@ (800890c <tcp_receive+0x888>)
 80087e2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80087e4:	4b49      	ldr	r3, [pc, #292]	@ (800890c <tcp_receive+0x888>)
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	4a48      	ldr	r2, [pc, #288]	@ (800890c <tcp_receive+0x888>)
 80087ea:	8912      	ldrh	r2, [r2, #8]
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fc f9e0 	bl	8004bb4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80087f4:	4b45      	ldr	r3, [pc, #276]	@ (800890c <tcp_receive+0x888>)
 80087f6:	891c      	ldrh	r4, [r3, #8]
 80087f8:	4b44      	ldr	r3, [pc, #272]	@ (800890c <tcp_receive+0x888>)
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	899b      	ldrh	r3, [r3, #12]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	4618      	mov	r0, r3
 8008802:	f7fb f805 	bl	8003810 <lwip_htons>
 8008806:	4603      	mov	r3, r0
 8008808:	b2db      	uxtb	r3, r3
 800880a:	f003 0303 	and.w	r3, r3, #3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <tcp_receive+0x792>
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <tcp_receive+0x794>
 8008816:	2300      	movs	r3, #0
 8008818:	4423      	add	r3, r4
 800881a:	b29a      	uxth	r2, r3
 800881c:	4b3c      	ldr	r3, [pc, #240]	@ (8008910 <tcp_receive+0x88c>)
 800881e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008820:	4b3b      	ldr	r3, [pc, #236]	@ (8008910 <tcp_receive+0x88c>)
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	4b38      	ldr	r3, [pc, #224]	@ (8008908 <tcp_receive+0x884>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	441a      	add	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008830:	6879      	ldr	r1, [r7, #4]
 8008832:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008834:	440b      	add	r3, r1
 8008836:	429a      	cmp	r2, r3
 8008838:	d006      	beq.n	8008848 <tcp_receive+0x7c4>
 800883a:	4b36      	ldr	r3, [pc, #216]	@ (8008914 <tcp_receive+0x890>)
 800883c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8008840:	4935      	ldr	r1, [pc, #212]	@ (8008918 <tcp_receive+0x894>)
 8008842:	4836      	ldr	r0, [pc, #216]	@ (800891c <tcp_receive+0x898>)
 8008844:	f004 fc28 	bl	800d098 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 80e6 	beq.w	8008a1e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008852:	4b2e      	ldr	r3, [pc, #184]	@ (800890c <tcp_receive+0x888>)
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	899b      	ldrh	r3, [r3, #12]
 8008858:	b29b      	uxth	r3, r3
 800885a:	4618      	mov	r0, r3
 800885c:	f7fa ffd8 	bl	8003810 <lwip_htons>
 8008860:	4603      	mov	r3, r0
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d010      	beq.n	800888e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800886c:	e00a      	b.n	8008884 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008872:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f7fd fd93 	bl	80063aa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1f0      	bne.n	800886e <tcp_receive+0x7ea>
 800888c:	e0c7      	b.n	8008a1e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008892:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008894:	e051      	b.n	800893a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	899b      	ldrh	r3, [r3, #12]
 800889c:	b29b      	uxth	r3, r3
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fa ffb6 	bl	8003810 <lwip_htons>
 80088a4:	4603      	mov	r3, r0
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d03c      	beq.n	800892a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80088b0:	4b16      	ldr	r3, [pc, #88]	@ (800890c <tcp_receive+0x888>)
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	899b      	ldrh	r3, [r3, #12]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fa ffa9 	bl	8003810 <lwip_htons>
 80088be:	4603      	mov	r3, r0
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d12f      	bne.n	800892a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80088ca:	4b10      	ldr	r3, [pc, #64]	@ (800890c <tcp_receive+0x888>)
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	899b      	ldrh	r3, [r3, #12]
 80088d0:	b29c      	uxth	r4, r3
 80088d2:	2001      	movs	r0, #1
 80088d4:	f7fa ff9c 	bl	8003810 <lwip_htons>
 80088d8:	4603      	mov	r3, r0
 80088da:	461a      	mov	r2, r3
 80088dc:	4b0b      	ldr	r3, [pc, #44]	@ (800890c <tcp_receive+0x888>)
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	4322      	orrs	r2, r4
 80088e2:	b292      	uxth	r2, r2
 80088e4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80088e6:	4b09      	ldr	r3, [pc, #36]	@ (800890c <tcp_receive+0x888>)
 80088e8:	891c      	ldrh	r4, [r3, #8]
 80088ea:	4b08      	ldr	r3, [pc, #32]	@ (800890c <tcp_receive+0x888>)
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	899b      	ldrh	r3, [r3, #12]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fa ff8c 	bl	8003810 <lwip_htons>
 80088f8:	4603      	mov	r3, r0
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00d      	beq.n	8008920 <tcp_receive+0x89c>
 8008904:	2301      	movs	r3, #1
 8008906:	e00c      	b.n	8008922 <tcp_receive+0x89e>
 8008908:	200081ec 	.word	0x200081ec
 800890c:	200081cc 	.word	0x200081cc
 8008910:	200081f6 	.word	0x200081f6
 8008914:	0800f0f8 	.word	0x0800f0f8
 8008918:	0800f4a0 	.word	0x0800f4a0
 800891c:	0800f144 	.word	0x0800f144
 8008920:	2300      	movs	r3, #0
 8008922:	4423      	add	r3, r4
 8008924:	b29a      	uxth	r2, r3
 8008926:	4b98      	ldr	r3, [pc, #608]	@ (8008b88 <tcp_receive+0xb04>)
 8008928:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800892a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800892c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800892e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8008934:	6938      	ldr	r0, [r7, #16]
 8008936:	f7fd fd38 	bl	80063aa <tcp_seg_free>
            while (next &&
 800893a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00e      	beq.n	800895e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008940:	4b91      	ldr	r3, [pc, #580]	@ (8008b88 <tcp_receive+0xb04>)
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	461a      	mov	r2, r3
 8008946:	4b91      	ldr	r3, [pc, #580]	@ (8008b8c <tcp_receive+0xb08>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	441a      	add	r2, r3
 800894c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008954:	8909      	ldrh	r1, [r1, #8]
 8008956:	440b      	add	r3, r1
 8008958:	1ad3      	subs	r3, r2, r3
            while (next &&
 800895a:	2b00      	cmp	r3, #0
 800895c:	da9b      	bge.n	8008896 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800895e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008960:	2b00      	cmp	r3, #0
 8008962:	d059      	beq.n	8008a18 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8008964:	4b88      	ldr	r3, [pc, #544]	@ (8008b88 <tcp_receive+0xb04>)
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	4b88      	ldr	r3, [pc, #544]	@ (8008b8c <tcp_receive+0xb08>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	441a      	add	r2, r3
 8008970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008978:	2b00      	cmp	r3, #0
 800897a:	dd4d      	ble.n	8008a18 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800897c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	b29a      	uxth	r2, r3
 8008984:	4b81      	ldr	r3, [pc, #516]	@ (8008b8c <tcp_receive+0xb08>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	b29b      	uxth	r3, r3
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	b29a      	uxth	r2, r3
 800898e:	4b80      	ldr	r3, [pc, #512]	@ (8008b90 <tcp_receive+0xb0c>)
 8008990:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008992:	4b7f      	ldr	r3, [pc, #508]	@ (8008b90 <tcp_receive+0xb0c>)
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	899b      	ldrh	r3, [r3, #12]
 8008998:	b29b      	uxth	r3, r3
 800899a:	4618      	mov	r0, r3
 800899c:	f7fa ff38 	bl	8003810 <lwip_htons>
 80089a0:	4603      	mov	r3, r0
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <tcp_receive+0x934>
                inseg.len -= 1;
 80089ac:	4b78      	ldr	r3, [pc, #480]	@ (8008b90 <tcp_receive+0xb0c>)
 80089ae:	891b      	ldrh	r3, [r3, #8]
 80089b0:	3b01      	subs	r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	4b76      	ldr	r3, [pc, #472]	@ (8008b90 <tcp_receive+0xb0c>)
 80089b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80089b8:	4b75      	ldr	r3, [pc, #468]	@ (8008b90 <tcp_receive+0xb0c>)
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	4a74      	ldr	r2, [pc, #464]	@ (8008b90 <tcp_receive+0xb0c>)
 80089be:	8912      	ldrh	r2, [r2, #8]
 80089c0:	4611      	mov	r1, r2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fc f8f6 	bl	8004bb4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80089c8:	4b71      	ldr	r3, [pc, #452]	@ (8008b90 <tcp_receive+0xb0c>)
 80089ca:	891c      	ldrh	r4, [r3, #8]
 80089cc:	4b70      	ldr	r3, [pc, #448]	@ (8008b90 <tcp_receive+0xb0c>)
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	899b      	ldrh	r3, [r3, #12]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fa ff1b 	bl	8003810 <lwip_htons>
 80089da:	4603      	mov	r3, r0
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <tcp_receive+0x966>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <tcp_receive+0x968>
 80089ea:	2300      	movs	r3, #0
 80089ec:	4423      	add	r3, r4
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	4b65      	ldr	r3, [pc, #404]	@ (8008b88 <tcp_receive+0xb04>)
 80089f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80089f4:	4b64      	ldr	r3, [pc, #400]	@ (8008b88 <tcp_receive+0xb04>)
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	461a      	mov	r2, r3
 80089fa:	4b64      	ldr	r3, [pc, #400]	@ (8008b8c <tcp_receive+0xb08>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	441a      	add	r2, r3
 8008a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d006      	beq.n	8008a18 <tcp_receive+0x994>
 8008a0a:	4b62      	ldr	r3, [pc, #392]	@ (8008b94 <tcp_receive+0xb10>)
 8008a0c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8008a10:	4961      	ldr	r1, [pc, #388]	@ (8008b98 <tcp_receive+0xb14>)
 8008a12:	4862      	ldr	r0, [pc, #392]	@ (8008b9c <tcp_receive+0xb18>)
 8008a14:	f004 fb40 	bl	800d098 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008a1c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008a1e:	4b5a      	ldr	r3, [pc, #360]	@ (8008b88 <tcp_receive+0xb04>)
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	4b59      	ldr	r3, [pc, #356]	@ (8008b8c <tcp_receive+0xb08>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	441a      	add	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008a32:	4b55      	ldr	r3, [pc, #340]	@ (8008b88 <tcp_receive+0xb04>)
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d206      	bcs.n	8008a48 <tcp_receive+0x9c4>
 8008a3a:	4b56      	ldr	r3, [pc, #344]	@ (8008b94 <tcp_receive+0xb10>)
 8008a3c:	f240 6207 	movw	r2, #1543	@ 0x607
 8008a40:	4957      	ldr	r1, [pc, #348]	@ (8008ba0 <tcp_receive+0xb1c>)
 8008a42:	4856      	ldr	r0, [pc, #344]	@ (8008b9c <tcp_receive+0xb18>)
 8008a44:	f004 fb28 	bl	800d098 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008a4c:	4b4e      	ldr	r3, [pc, #312]	@ (8008b88 <tcp_receive+0xb04>)
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7fc ffc5 	bl	80059e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008a5e:	4b4c      	ldr	r3, [pc, #304]	@ (8008b90 <tcp_receive+0xb0c>)
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	891b      	ldrh	r3, [r3, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d006      	beq.n	8008a76 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8008a68:	4b49      	ldr	r3, [pc, #292]	@ (8008b90 <tcp_receive+0xb0c>)
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	4a4d      	ldr	r2, [pc, #308]	@ (8008ba4 <tcp_receive+0xb20>)
 8008a6e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008a70:	4b47      	ldr	r3, [pc, #284]	@ (8008b90 <tcp_receive+0xb0c>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008a76:	4b46      	ldr	r3, [pc, #280]	@ (8008b90 <tcp_receive+0xb0c>)
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	899b      	ldrh	r3, [r3, #12]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fa fec6 	bl	8003810 <lwip_htons>
 8008a84:	4603      	mov	r3, r0
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 80b8 	beq.w	8008c02 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008a92:	4b45      	ldr	r3, [pc, #276]	@ (8008ba8 <tcp_receive+0xb24>)
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	f043 0320 	orr.w	r3, r3, #32
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	4b42      	ldr	r3, [pc, #264]	@ (8008ba8 <tcp_receive+0xb24>)
 8008a9e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008aa0:	e0af      	b.n	8008c02 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aa6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	4a36      	ldr	r2, [pc, #216]	@ (8008b8c <tcp_receive+0xb08>)
 8008ab2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	891b      	ldrh	r3, [r3, #8]
 8008ab8:	461c      	mov	r4, r3
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	899b      	ldrh	r3, [r3, #12]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fa fea4 	bl	8003810 <lwip_htons>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f003 0303 	and.w	r3, r3, #3
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <tcp_receive+0xa54>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <tcp_receive+0xa56>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	191a      	adds	r2, r3, r4
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae0:	441a      	add	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aea:	461c      	mov	r4, r3
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	891b      	ldrh	r3, [r3, #8]
 8008af0:	461d      	mov	r5, r3
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	899b      	ldrh	r3, [r3, #12]
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fa fe88 	bl	8003810 <lwip_htons>
 8008b00:	4603      	mov	r3, r0
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 0303 	and.w	r3, r3, #3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <tcp_receive+0xa8c>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e000      	b.n	8008b12 <tcp_receive+0xa8e>
 8008b10:	2300      	movs	r3, #0
 8008b12:	442b      	add	r3, r5
 8008b14:	429c      	cmp	r4, r3
 8008b16:	d206      	bcs.n	8008b26 <tcp_receive+0xaa2>
 8008b18:	4b1e      	ldr	r3, [pc, #120]	@ (8008b94 <tcp_receive+0xb10>)
 8008b1a:	f240 622b 	movw	r2, #1579	@ 0x62b
 8008b1e:	4923      	ldr	r1, [pc, #140]	@ (8008bac <tcp_receive+0xb28>)
 8008b20:	481e      	ldr	r0, [pc, #120]	@ (8008b9c <tcp_receive+0xb18>)
 8008b22:	f004 fab9 	bl	800d098 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	891b      	ldrh	r3, [r3, #8]
 8008b2a:	461c      	mov	r4, r3
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	899b      	ldrh	r3, [r3, #12]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fa fe6b 	bl	8003810 <lwip_htons>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	f003 0303 	and.w	r3, r3, #3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <tcp_receive+0xac6>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e000      	b.n	8008b4c <tcp_receive+0xac8>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	1919      	adds	r1, r3, r4
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008b52:	b28b      	uxth	r3, r1
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7fc ff43 	bl	80059e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	891b      	ldrh	r3, [r3, #8]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d028      	beq.n	8008bbe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba4 <tcp_receive+0xb20>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d01d      	beq.n	8008bb0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8008b74:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba4 <tcp_receive+0xb20>)
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	4610      	mov	r0, r2
 8008b80:	f7fc fa60 	bl	8005044 <pbuf_cat>
 8008b84:	e018      	b.n	8008bb8 <tcp_receive+0xb34>
 8008b86:	bf00      	nop
 8008b88:	200081f6 	.word	0x200081f6
 8008b8c:	200081ec 	.word	0x200081ec
 8008b90:	200081cc 	.word	0x200081cc
 8008b94:	0800f0f8 	.word	0x0800f0f8
 8008b98:	0800f4d8 	.word	0x0800f4d8
 8008b9c:	0800f144 	.word	0x0800f144
 8008ba0:	0800f514 	.word	0x0800f514
 8008ba4:	200081fc 	.word	0x200081fc
 8008ba8:	200081f9 	.word	0x200081f9
 8008bac:	0800f534 	.word	0x0800f534
            } else {
              recv_data = cseg->p;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	4a70      	ldr	r2, [pc, #448]	@ (8008d78 <tcp_receive+0xcf4>)
 8008bb6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	899b      	ldrh	r3, [r3, #12]
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fa fe22 	bl	8003810 <lwip_htons>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00d      	beq.n	8008bf4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008bd8:	4b68      	ldr	r3, [pc, #416]	@ (8008d7c <tcp_receive+0xcf8>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	f043 0320 	orr.w	r3, r3, #32
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	4b66      	ldr	r3, [pc, #408]	@ (8008d7c <tcp_receive+0xcf8>)
 8008be4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	7d1b      	ldrb	r3, [r3, #20]
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	d102      	bne.n	8008bf4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2207      	movs	r2, #7
 8008bf2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8008bfc:	68b8      	ldr	r0, [r7, #8]
 8008bfe:	f7fd fbd4 	bl	80063aa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d008      	beq.n	8008c1c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8008c16:	429a      	cmp	r2, r3
 8008c18:	f43f af43 	beq.w	8008aa2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8b5b      	ldrh	r3, [r3, #26]
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00e      	beq.n	8008c46 <tcp_receive+0xbc2>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	8b5b      	ldrh	r3, [r3, #26]
 8008c2c:	f023 0301 	bic.w	r3, r3, #1
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	835a      	strh	r2, [r3, #26]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	8b5b      	ldrh	r3, [r3, #26]
 8008c3a:	f043 0302 	orr.w	r3, r3, #2
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008c44:	e187      	b.n	8008f56 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	8b5b      	ldrh	r3, [r3, #26]
 8008c4a:	f043 0301 	orr.w	r3, r3, #1
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008c54:	e17f      	b.n	8008f56 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d106      	bne.n	8008c6c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008c5e:	4848      	ldr	r0, [pc, #288]	@ (8008d80 <tcp_receive+0xcfc>)
 8008c60:	f7fd fbbc 	bl	80063dc <tcp_seg_copy>
 8008c64:	4602      	mov	r2, r0
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	675a      	str	r2, [r3, #116]	@ 0x74
 8008c6a:	e16c      	b.n	8008f46 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c76:	e156      	b.n	8008f26 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8008c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	4b41      	ldr	r3, [pc, #260]	@ (8008d84 <tcp_receive+0xd00>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d11d      	bne.n	8008cc2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008c86:	4b3e      	ldr	r3, [pc, #248]	@ (8008d80 <tcp_receive+0xcfc>)
 8008c88:	891a      	ldrh	r2, [r3, #8]
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8c:	891b      	ldrh	r3, [r3, #8]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	f240 814e 	bls.w	8008f30 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008c94:	483a      	ldr	r0, [pc, #232]	@ (8008d80 <tcp_receive+0xcfc>)
 8008c96:	f7fd fba1 	bl	80063dc <tcp_seg_copy>
 8008c9a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 8148 	beq.w	8008f34 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8008ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8008caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	e002      	b.n	8008cb8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008cb8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008cba:	6978      	ldr	r0, [r7, #20]
 8008cbc:	f7ff f8de 	bl	8007e7c <tcp_oos_insert_segment>
                }
                break;
 8008cc0:	e138      	b.n	8008f34 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d117      	bne.n	8008cf8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8008d84 <tcp_receive+0xd00>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	da57      	bge.n	8008d88 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008cd8:	4829      	ldr	r0, [pc, #164]	@ (8008d80 <tcp_receive+0xcfc>)
 8008cda:	f7fd fb7f 	bl	80063dc <tcp_seg_copy>
 8008cde:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f000 8128 	beq.w	8008f38 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008cee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008cf0:	69b8      	ldr	r0, [r7, #24]
 8008cf2:	f7ff f8c3 	bl	8007e7c <tcp_oos_insert_segment>
                  }
                  break;
 8008cf6:	e11f      	b.n	8008f38 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008cf8:	4b22      	ldr	r3, [pc, #136]	@ (8008d84 <tcp_receive+0xd00>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	3b01      	subs	r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	db3e      	blt.n	8008d88 <tcp_receive+0xd04>
 8008d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8008d84 <tcp_receive+0xd00>)
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	3301      	adds	r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	dc35      	bgt.n	8008d88 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008d1c:	4818      	ldr	r0, [pc, #96]	@ (8008d80 <tcp_receive+0xcfc>)
 8008d1e:	f7fd fb5d 	bl	80063dc <tcp_seg_copy>
 8008d22:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 8108 	beq.w	8008f3c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d34:	8912      	ldrh	r2, [r2, #8]
 8008d36:	441a      	add	r2, r3
 8008d38:	4b12      	ldr	r3, [pc, #72]	@ (8008d84 <tcp_receive+0xd00>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dd12      	ble.n	8008d68 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008d42:	4b10      	ldr	r3, [pc, #64]	@ (8008d84 <tcp_receive+0xd00>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d56:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5e:	891b      	ldrh	r3, [r3, #8]
 8008d60:	4619      	mov	r1, r3
 8008d62:	4610      	mov	r0, r2
 8008d64:	f7fb ff26 	bl	8004bb4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6a:	69fa      	ldr	r2, [r7, #28]
 8008d6c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008d6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008d70:	69f8      	ldr	r0, [r7, #28]
 8008d72:	f7ff f883 	bl	8007e7c <tcp_oos_insert_segment>
                  }
                  break;
 8008d76:	e0e1      	b.n	8008f3c <tcp_receive+0xeb8>
 8008d78:	200081fc 	.word	0x200081fc
 8008d7c:	200081f9 	.word	0x200081f9
 8008d80:	200081cc 	.word	0x200081cc
 8008d84:	200081ec 	.word	0x200081ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f040 80c5 	bne.w	8008f20 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008d96:	4b7f      	ldr	r3, [pc, #508]	@ (8008f94 <tcp_receive+0xf10>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f340 80bc 	ble.w	8008f20 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	899b      	ldrh	r3, [r3, #12]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fa fd2d 	bl	8003810 <lwip_htons>
 8008db6:	4603      	mov	r3, r0
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f040 80be 	bne.w	8008f40 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008dc4:	4874      	ldr	r0, [pc, #464]	@ (8008f98 <tcp_receive+0xf14>)
 8008dc6:	f7fd fb09 	bl	80063dc <tcp_seg_copy>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 80b5 	beq.w	8008f44 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008de2:	8912      	ldrh	r2, [r2, #8]
 8008de4:	441a      	add	r2, r3
 8008de6:	4b6b      	ldr	r3, [pc, #428]	@ (8008f94 <tcp_receive+0xf10>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	dd12      	ble.n	8008e16 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008df0:	4b68      	ldr	r3, [pc, #416]	@ (8008f94 <tcp_receive+0xf10>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e04:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0c:	891b      	ldrh	r3, [r3, #8]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4610      	mov	r0, r2
 8008e12:	f7fb fecf 	bl	8004bb4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008e16:	4b61      	ldr	r3, [pc, #388]	@ (8008f9c <tcp_receive+0xf18>)
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	4b5d      	ldr	r3, [pc, #372]	@ (8008f94 <tcp_receive+0xf10>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	441a      	add	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008e2a:	440b      	add	r3, r1
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f340 8088 	ble.w	8008f44 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	899b      	ldrh	r3, [r3, #12]
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fa fce6 	bl	8003810 <lwip_htons>
 8008e44:	4603      	mov	r3, r0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d021      	beq.n	8008e94 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	899b      	ldrh	r3, [r3, #12]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	b21b      	sxth	r3, r3
 8008e5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008e60:	b21c      	sxth	r4, r3
 8008e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	899b      	ldrh	r3, [r3, #12]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fa fccf 	bl	8003810 <lwip_htons>
 8008e72:	4603      	mov	r3, r0
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fa fcc7 	bl	8003810 <lwip_htons>
 8008e82:	4603      	mov	r3, r0
 8008e84:	b21b      	sxth	r3, r3
 8008e86:	4323      	orrs	r3, r4
 8008e88:	b21a      	sxth	r2, r3
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	b292      	uxth	r2, r2
 8008e92:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e9e:	4413      	add	r3, r2
 8008ea0:	b299      	uxth	r1, r3
 8008ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8008f94 <tcp_receive+0xf10>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	1a8a      	subs	r2, r1, r2
 8008eae:	b292      	uxth	r2, r2
 8008eb0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	891b      	ldrh	r3, [r3, #8]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	f7fb fe77 	bl	8004bb4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	891c      	ldrh	r4, [r3, #8]
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	899b      	ldrh	r3, [r3, #12]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fa fc9a 	bl	8003810 <lwip_htons>
 8008edc:	4603      	mov	r3, r0
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	f003 0303 	and.w	r3, r3, #3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <tcp_receive+0xe68>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e000      	b.n	8008eee <tcp_receive+0xe6a>
 8008eec:	2300      	movs	r3, #0
 8008eee:	4423      	add	r3, r4
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8008f9c <tcp_receive+0xf18>)
 8008ef4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008ef6:	4b29      	ldr	r3, [pc, #164]	@ (8008f9c <tcp_receive+0xf18>)
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	4b25      	ldr	r3, [pc, #148]	@ (8008f94 <tcp_receive+0xf10>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	441a      	add	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f06:	6879      	ldr	r1, [r7, #4]
 8008f08:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008f0a:	440b      	add	r3, r1
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d019      	beq.n	8008f44 <tcp_receive+0xec0>
 8008f10:	4b23      	ldr	r3, [pc, #140]	@ (8008fa0 <tcp_receive+0xf1c>)
 8008f12:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8008f16:	4923      	ldr	r1, [pc, #140]	@ (8008fa4 <tcp_receive+0xf20>)
 8008f18:	4823      	ldr	r0, [pc, #140]	@ (8008fa8 <tcp_receive+0xf24>)
 8008f1a:	f004 f8bd 	bl	800d098 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008f1e:	e011      	b.n	8008f44 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f47f aea5 	bne.w	8008c78 <tcp_receive+0xbf4>
 8008f2e:	e00a      	b.n	8008f46 <tcp_receive+0xec2>
                break;
 8008f30:	bf00      	nop
 8008f32:	e008      	b.n	8008f46 <tcp_receive+0xec2>
                break;
 8008f34:	bf00      	nop
 8008f36:	e006      	b.n	8008f46 <tcp_receive+0xec2>
                  break;
 8008f38:	bf00      	nop
 8008f3a:	e004      	b.n	8008f46 <tcp_receive+0xec2>
                  break;
 8008f3c:	bf00      	nop
 8008f3e:	e002      	b.n	8008f46 <tcp_receive+0xec2>
                  break;
 8008f40:	bf00      	nop
 8008f42:	e000      	b.n	8008f46 <tcp_receive+0xec2>
                break;
 8008f44:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 fa30 	bl	800a3ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008f4c:	e003      	b.n	8008f56 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f001 fa2c 	bl	800a3ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f54:	e01a      	b.n	8008f8c <tcp_receive+0xf08>
 8008f56:	e019      	b.n	8008f8c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008f58:	4b0e      	ldr	r3, [pc, #56]	@ (8008f94 <tcp_receive+0xf10>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	db0a      	blt.n	8008f7c <tcp_receive+0xef8>
 8008f66:	4b0b      	ldr	r3, [pc, #44]	@ (8008f94 <tcp_receive+0xf10>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008f72:	440b      	add	r3, r1
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	3301      	adds	r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	dd07      	ble.n	8008f8c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	8b5b      	ldrh	r3, [r3, #26]
 8008f80:	f043 0302 	orr.w	r3, r3, #2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008f8a:	e7ff      	b.n	8008f8c <tcp_receive+0xf08>
 8008f8c:	bf00      	nop
 8008f8e:	3750      	adds	r7, #80	@ 0x50
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bdb0      	pop	{r4, r5, r7, pc}
 8008f94:	200081ec 	.word	0x200081ec
 8008f98:	200081cc 	.word	0x200081cc
 8008f9c:	200081f6 	.word	0x200081f6
 8008fa0:	0800f0f8 	.word	0x0800f0f8
 8008fa4:	0800f4a0 	.word	0x0800f4a0
 8008fa8:	0800f144 	.word	0x0800f144

08008fac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8008fb2:	4b15      	ldr	r3, [pc, #84]	@ (8009008 <tcp_get_next_optbyte+0x5c>)
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	b291      	uxth	r1, r2
 8008fba:	4a13      	ldr	r2, [pc, #76]	@ (8009008 <tcp_get_next_optbyte+0x5c>)
 8008fbc:	8011      	strh	r1, [r2, #0]
 8008fbe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008fc0:	4b12      	ldr	r3, [pc, #72]	@ (800900c <tcp_get_next_optbyte+0x60>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d004      	beq.n	8008fd2 <tcp_get_next_optbyte+0x26>
 8008fc8:	4b11      	ldr	r3, [pc, #68]	@ (8009010 <tcp_get_next_optbyte+0x64>)
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	88fa      	ldrh	r2, [r7, #6]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d208      	bcs.n	8008fe4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8008fd2:	4b10      	ldr	r3, [pc, #64]	@ (8009014 <tcp_get_next_optbyte+0x68>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3314      	adds	r3, #20
 8008fd8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8008fda:	88fb      	ldrh	r3, [r7, #6]
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	4413      	add	r3, r2
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	e00b      	b.n	8008ffc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008fe4:	88fb      	ldrh	r3, [r7, #6]
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	4b09      	ldr	r3, [pc, #36]	@ (8009010 <tcp_get_next_optbyte+0x64>)
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8008ff2:	4b06      	ldr	r3, [pc, #24]	@ (800900c <tcp_get_next_optbyte+0x60>)
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	797b      	ldrb	r3, [r7, #5]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	200081e8 	.word	0x200081e8
 800900c:	200081e4 	.word	0x200081e4
 8009010:	200081e2 	.word	0x200081e2
 8009014:	200081dc 	.word	0x200081dc

08009018 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d106      	bne.n	8009034 <tcp_parseopt+0x1c>
 8009026:	4b32      	ldr	r3, [pc, #200]	@ (80090f0 <tcp_parseopt+0xd8>)
 8009028:	f240 727d 	movw	r2, #1917	@ 0x77d
 800902c:	4931      	ldr	r1, [pc, #196]	@ (80090f4 <tcp_parseopt+0xdc>)
 800902e:	4832      	ldr	r0, [pc, #200]	@ (80090f8 <tcp_parseopt+0xe0>)
 8009030:	f004 f832 	bl	800d098 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009034:	4b31      	ldr	r3, [pc, #196]	@ (80090fc <tcp_parseopt+0xe4>)
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d056      	beq.n	80090ea <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800903c:	4b30      	ldr	r3, [pc, #192]	@ (8009100 <tcp_parseopt+0xe8>)
 800903e:	2200      	movs	r2, #0
 8009040:	801a      	strh	r2, [r3, #0]
 8009042:	e046      	b.n	80090d2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8009044:	f7ff ffb2 	bl	8008fac <tcp_get_next_optbyte>
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	2b02      	cmp	r3, #2
 8009050:	d006      	beq.n	8009060 <tcp_parseopt+0x48>
 8009052:	2b02      	cmp	r3, #2
 8009054:	dc2a      	bgt.n	80090ac <tcp_parseopt+0x94>
 8009056:	2b00      	cmp	r3, #0
 8009058:	d042      	beq.n	80090e0 <tcp_parseopt+0xc8>
 800905a:	2b01      	cmp	r3, #1
 800905c:	d038      	beq.n	80090d0 <tcp_parseopt+0xb8>
 800905e:	e025      	b.n	80090ac <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009060:	f7ff ffa4 	bl	8008fac <tcp_get_next_optbyte>
 8009064:	4603      	mov	r3, r0
 8009066:	2b04      	cmp	r3, #4
 8009068:	d13c      	bne.n	80090e4 <tcp_parseopt+0xcc>
 800906a:	4b25      	ldr	r3, [pc, #148]	@ (8009100 <tcp_parseopt+0xe8>)
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	3301      	adds	r3, #1
 8009070:	4a22      	ldr	r2, [pc, #136]	@ (80090fc <tcp_parseopt+0xe4>)
 8009072:	8812      	ldrh	r2, [r2, #0]
 8009074:	4293      	cmp	r3, r2
 8009076:	da35      	bge.n	80090e4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009078:	f7ff ff98 	bl	8008fac <tcp_get_next_optbyte>
 800907c:	4603      	mov	r3, r0
 800907e:	021b      	lsls	r3, r3, #8
 8009080:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009082:	f7ff ff93 	bl	8008fac <tcp_get_next_optbyte>
 8009086:	4603      	mov	r3, r0
 8009088:	461a      	mov	r2, r3
 800908a:	89bb      	ldrh	r3, [r7, #12]
 800908c:	4313      	orrs	r3, r2
 800908e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009090:	89bb      	ldrh	r3, [r7, #12]
 8009092:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009096:	d804      	bhi.n	80090a2 <tcp_parseopt+0x8a>
 8009098:	89bb      	ldrh	r3, [r7, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <tcp_parseopt+0x8a>
 800909e:	89ba      	ldrh	r2, [r7, #12]
 80090a0:	e001      	b.n	80090a6 <tcp_parseopt+0x8e>
 80090a2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80090aa:	e012      	b.n	80090d2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80090ac:	f7ff ff7e 	bl	8008fac <tcp_get_next_optbyte>
 80090b0:	4603      	mov	r3, r0
 80090b2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d916      	bls.n	80090e8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80090ba:	7afb      	ldrb	r3, [r7, #11]
 80090bc:	b29a      	uxth	r2, r3
 80090be:	4b10      	ldr	r3, [pc, #64]	@ (8009100 <tcp_parseopt+0xe8>)
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	4413      	add	r3, r2
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	3b02      	subs	r3, #2
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009100 <tcp_parseopt+0xe8>)
 80090cc:	801a      	strh	r2, [r3, #0]
 80090ce:	e000      	b.n	80090d2 <tcp_parseopt+0xba>
          break;
 80090d0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80090d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009100 <tcp_parseopt+0xe8>)
 80090d4:	881a      	ldrh	r2, [r3, #0]
 80090d6:	4b09      	ldr	r3, [pc, #36]	@ (80090fc <tcp_parseopt+0xe4>)
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d3b2      	bcc.n	8009044 <tcp_parseopt+0x2c>
 80090de:	e004      	b.n	80090ea <tcp_parseopt+0xd2>
          return;
 80090e0:	bf00      	nop
 80090e2:	e002      	b.n	80090ea <tcp_parseopt+0xd2>
            return;
 80090e4:	bf00      	nop
 80090e6:	e000      	b.n	80090ea <tcp_parseopt+0xd2>
            return;
 80090e8:	bf00      	nop
      }
    }
  }
}
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	0800f0f8 	.word	0x0800f0f8
 80090f4:	0800f55c 	.word	0x0800f55c
 80090f8:	0800f144 	.word	0x0800f144
 80090fc:	200081e0 	.word	0x200081e0
 8009100:	200081e8 	.word	0x200081e8

08009104 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009104:	b480      	push	{r7}
 8009106:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009108:	4b05      	ldr	r3, [pc, #20]	@ (8009120 <tcp_trigger_input_pcb_close+0x1c>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	f043 0310 	orr.w	r3, r3, #16
 8009110:	b2da      	uxtb	r2, r3
 8009112:	4b03      	ldr	r3, [pc, #12]	@ (8009120 <tcp_trigger_input_pcb_close+0x1c>)
 8009114:	701a      	strb	r2, [r3, #0]
}
 8009116:	bf00      	nop
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	200081f9 	.word	0x200081f9

08009124 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00a      	beq.n	800914c <tcp_route+0x28>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	7a1b      	ldrb	r3, [r3, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d006      	beq.n	800914c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	7a1b      	ldrb	r3, [r3, #8]
 8009142:	4618      	mov	r0, r3
 8009144:	f7fb fb5c 	bl	8004800 <netif_get_by_index>
 8009148:	4603      	mov	r3, r0
 800914a:	e003      	b.n	8009154 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f002 fcc1 	bl	800bad4 <ip4_route>
 8009152:	4603      	mov	r3, r0
  }
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800915c:	b590      	push	{r4, r7, lr}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	4613      	mov	r3, r2
 800916a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d105      	bne.n	800917e <tcp_create_segment+0x22>
 8009172:	4b43      	ldr	r3, [pc, #268]	@ (8009280 <tcp_create_segment+0x124>)
 8009174:	22a3      	movs	r2, #163	@ 0xa3
 8009176:	4943      	ldr	r1, [pc, #268]	@ (8009284 <tcp_create_segment+0x128>)
 8009178:	4843      	ldr	r0, [pc, #268]	@ (8009288 <tcp_create_segment+0x12c>)
 800917a:	f003 ff8d 	bl	800d098 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d105      	bne.n	8009190 <tcp_create_segment+0x34>
 8009184:	4b3e      	ldr	r3, [pc, #248]	@ (8009280 <tcp_create_segment+0x124>)
 8009186:	22a4      	movs	r2, #164	@ 0xa4
 8009188:	4940      	ldr	r1, [pc, #256]	@ (800928c <tcp_create_segment+0x130>)
 800918a:	483f      	ldr	r0, [pc, #252]	@ (8009288 <tcp_create_segment+0x12c>)
 800918c:	f003 ff84 	bl	800d098 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009190:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800919e:	2002      	movs	r0, #2
 80091a0:	f7fa ffac 	bl	80040fc <memp_malloc>
 80091a4:	6138      	str	r0, [r7, #16]
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d104      	bne.n	80091b6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80091ac:	68b8      	ldr	r0, [r7, #8]
 80091ae:	f7fb fe87 	bl	8004ec0 <pbuf_free>
    return NULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	e060      	b.n	8009278 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80091bc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	891a      	ldrh	r2, [r3, #8]
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d205      	bcs.n	80091e2 <tcp_create_segment+0x86>
 80091d6:	4b2a      	ldr	r3, [pc, #168]	@ (8009280 <tcp_create_segment+0x124>)
 80091d8:	22b0      	movs	r2, #176	@ 0xb0
 80091da:	492d      	ldr	r1, [pc, #180]	@ (8009290 <tcp_create_segment+0x134>)
 80091dc:	482a      	ldr	r0, [pc, #168]	@ (8009288 <tcp_create_segment+0x12c>)
 80091de:	f003 ff5b 	bl	800d098 <iprintf>
  seg->len = p->tot_len - optlen;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	891a      	ldrh	r2, [r3, #8]
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80091f2:	2114      	movs	r1, #20
 80091f4:	68b8      	ldr	r0, [r7, #8]
 80091f6:	f7fb fdcd 	bl	8004d94 <pbuf_add_header>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d004      	beq.n	800920a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009200:	6938      	ldr	r0, [r7, #16]
 8009202:	f7fd f8d2 	bl	80063aa <tcp_seg_free>
    return NULL;
 8009206:	2300      	movs	r3, #0
 8009208:	e036      	b.n	8009278 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	8ada      	ldrh	r2, [r3, #22]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	68dc      	ldr	r4, [r3, #12]
 800921c:	4610      	mov	r0, r2
 800921e:	f7fa faf7 	bl	8003810 <lwip_htons>
 8009222:	4603      	mov	r3, r0
 8009224:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8b1a      	ldrh	r2, [r3, #24]
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	68dc      	ldr	r4, [r3, #12]
 800922e:	4610      	mov	r0, r2
 8009230:	f7fa faee 	bl	8003810 <lwip_htons>
 8009234:	4603      	mov	r3, r0
 8009236:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	68dc      	ldr	r4, [r3, #12]
 800923c:	6838      	ldr	r0, [r7, #0]
 800923e:	f7fa fafc 	bl	800383a <lwip_htonl>
 8009242:	4603      	mov	r3, r0
 8009244:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	089b      	lsrs	r3, r3, #2
 800924a:	b2db      	uxtb	r3, r3
 800924c:	3305      	adds	r3, #5
 800924e:	b29b      	uxth	r3, r3
 8009250:	031b      	lsls	r3, r3, #12
 8009252:	b29a      	uxth	r2, r3
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	b29b      	uxth	r3, r3
 8009258:	4313      	orrs	r3, r2
 800925a:	b29a      	uxth	r2, r3
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	68dc      	ldr	r4, [r3, #12]
 8009260:	4610      	mov	r0, r2
 8009262:	f7fa fad5 	bl	8003810 <lwip_htons>
 8009266:	4603      	mov	r3, r0
 8009268:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	749a      	strb	r2, [r3, #18]
 8009272:	2200      	movs	r2, #0
 8009274:	74da      	strb	r2, [r3, #19]
  return seg;
 8009276:	693b      	ldr	r3, [r7, #16]
}
 8009278:	4618      	mov	r0, r3
 800927a:	371c      	adds	r7, #28
 800927c:	46bd      	mov	sp, r7
 800927e:	bd90      	pop	{r4, r7, pc}
 8009280:	0800f578 	.word	0x0800f578
 8009284:	0800f5ac 	.word	0x0800f5ac
 8009288:	0800f5cc 	.word	0x0800f5cc
 800928c:	0800f5f4 	.word	0x0800f5f4
 8009290:	0800f618 	.word	0x0800f618

08009294 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009294:	b590      	push	{r4, r7, lr}
 8009296:	b08b      	sub	sp, #44	@ 0x2c
 8009298:	af02      	add	r7, sp, #8
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80092a0:	2300      	movs	r3, #0
 80092a2:	61fb      	str	r3, [r7, #28]
 80092a4:	2300      	movs	r3, #0
 80092a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80092a8:	2300      	movs	r3, #0
 80092aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d106      	bne.n	80092c0 <tcp_split_unsent_seg+0x2c>
 80092b2:	4b95      	ldr	r3, [pc, #596]	@ (8009508 <tcp_split_unsent_seg+0x274>)
 80092b4:	f240 324b 	movw	r2, #843	@ 0x34b
 80092b8:	4994      	ldr	r1, [pc, #592]	@ (800950c <tcp_split_unsent_seg+0x278>)
 80092ba:	4895      	ldr	r0, [pc, #596]	@ (8009510 <tcp_split_unsent_seg+0x27c>)
 80092bc:	f003 feec 	bl	800d098 <iprintf>

  useg = pcb->unsent;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d102      	bne.n	80092d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80092cc:	f04f 33ff 	mov.w	r3, #4294967295
 80092d0:	e116      	b.n	8009500 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80092d2:	887b      	ldrh	r3, [r7, #2]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d109      	bne.n	80092ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80092d8:	4b8b      	ldr	r3, [pc, #556]	@ (8009508 <tcp_split_unsent_seg+0x274>)
 80092da:	f240 3253 	movw	r2, #851	@ 0x353
 80092de:	498d      	ldr	r1, [pc, #564]	@ (8009514 <tcp_split_unsent_seg+0x280>)
 80092e0:	488b      	ldr	r0, [pc, #556]	@ (8009510 <tcp_split_unsent_seg+0x27c>)
 80092e2:	f003 fed9 	bl	800d098 <iprintf>
    return ERR_VAL;
 80092e6:	f06f 0305 	mvn.w	r3, #5
 80092ea:	e109      	b.n	8009500 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	891b      	ldrh	r3, [r3, #8]
 80092f0:	887a      	ldrh	r2, [r7, #2]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d301      	bcc.n	80092fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	e102      	b.n	8009500 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092fe:	887a      	ldrh	r2, [r7, #2]
 8009300:	429a      	cmp	r2, r3
 8009302:	d906      	bls.n	8009312 <tcp_split_unsent_seg+0x7e>
 8009304:	4b80      	ldr	r3, [pc, #512]	@ (8009508 <tcp_split_unsent_seg+0x274>)
 8009306:	f240 325b 	movw	r2, #859	@ 0x35b
 800930a:	4983      	ldr	r1, [pc, #524]	@ (8009518 <tcp_split_unsent_seg+0x284>)
 800930c:	4880      	ldr	r0, [pc, #512]	@ (8009510 <tcp_split_unsent_seg+0x27c>)
 800930e:	f003 fec3 	bl	800d098 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	891b      	ldrh	r3, [r3, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <tcp_split_unsent_seg+0x94>
 800931a:	4b7b      	ldr	r3, [pc, #492]	@ (8009508 <tcp_split_unsent_seg+0x274>)
 800931c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8009320:	497e      	ldr	r1, [pc, #504]	@ (800951c <tcp_split_unsent_seg+0x288>)
 8009322:	487b      	ldr	r0, [pc, #492]	@ (8009510 <tcp_split_unsent_seg+0x27c>)
 8009324:	f003 feb8 	bl	800d098 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	7a9b      	ldrb	r3, [r3, #10]
 800932c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800932e:	7bfb      	ldrb	r3, [r7, #15]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	891a      	ldrh	r2, [r3, #8]
 800933e:	887b      	ldrh	r3, [r7, #2]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	b29a      	uxth	r2, r3
 8009348:	89bb      	ldrh	r3, [r7, #12]
 800934a:	4413      	add	r3, r2
 800934c:	b29b      	uxth	r3, r3
 800934e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009352:	4619      	mov	r1, r3
 8009354:	2036      	movs	r0, #54	@ 0x36
 8009356:	f7fb facf 	bl	80048f8 <pbuf_alloc>
 800935a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 80b7 	beq.w	80094d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	891a      	ldrh	r2, [r3, #8]
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	891b      	ldrh	r3, [r3, #8]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	b29a      	uxth	r2, r3
 8009372:	887b      	ldrh	r3, [r7, #2]
 8009374:	4413      	add	r3, r2
 8009376:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	6858      	ldr	r0, [r3, #4]
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	18d1      	adds	r1, r2, r3
 8009384:	897b      	ldrh	r3, [r7, #10]
 8009386:	89ba      	ldrh	r2, [r7, #12]
 8009388:	f7fb ff84 	bl	8005294 <pbuf_copy_partial>
 800938c:	4603      	mov	r3, r0
 800938e:	461a      	mov	r2, r3
 8009390:	89bb      	ldrh	r3, [r7, #12]
 8009392:	4293      	cmp	r3, r2
 8009394:	f040 809f 	bne.w	80094d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	899b      	ldrh	r3, [r3, #12]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fa fa35 	bl	8003810 <lwip_htons>
 80093a6:	4603      	mov	r3, r0
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80093b0:	2300      	movs	r3, #0
 80093b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80093b4:	7efb      	ldrb	r3, [r7, #27]
 80093b6:	f003 0308 	and.w	r3, r3, #8
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d007      	beq.n	80093ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80093be:	7efb      	ldrb	r3, [r7, #27]
 80093c0:	f023 0308 	bic.w	r3, r3, #8
 80093c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80093c6:	7ebb      	ldrb	r3, [r7, #26]
 80093c8:	f043 0308 	orr.w	r3, r3, #8
 80093cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80093ce:	7efb      	ldrb	r3, [r7, #27]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d007      	beq.n	80093e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80093d8:	7efb      	ldrb	r3, [r7, #27]
 80093da:	f023 0301 	bic.w	r3, r3, #1
 80093de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80093e0:	7ebb      	ldrb	r3, [r7, #26]
 80093e2:	f043 0301 	orr.w	r3, r3, #1
 80093e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fa fa23 	bl	800383a <lwip_htonl>
 80093f4:	4602      	mov	r2, r0
 80093f6:	887b      	ldrh	r3, [r7, #2]
 80093f8:	18d1      	adds	r1, r2, r3
 80093fa:	7eba      	ldrb	r2, [r7, #26]
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	460b      	mov	r3, r1
 8009402:	6939      	ldr	r1, [r7, #16]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7ff fea9 	bl	800915c <tcp_create_segment>
 800940a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d063      	beq.n	80094da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	4618      	mov	r0, r3
 8009418:	f7fb fdda 	bl	8004fd0 <pbuf_clen>
 800941c:	4603      	mov	r3, r0
 800941e:	461a      	mov	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	b29a      	uxth	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	6858      	ldr	r0, [r3, #4]
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	891a      	ldrh	r2, [r3, #8]
 800943a:	89bb      	ldrh	r3, [r7, #12]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	b29b      	uxth	r3, r3
 8009440:	4619      	mov	r1, r3
 8009442:	f7fb fbb7 	bl	8004bb4 <pbuf_realloc>
  useg->len -= remainder;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	891a      	ldrh	r2, [r3, #8]
 800944a:	89bb      	ldrh	r3, [r7, #12]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	b29a      	uxth	r2, r3
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	899b      	ldrh	r3, [r3, #12]
 800945a:	b29c      	uxth	r4, r3
 800945c:	7efb      	ldrb	r3, [r7, #27]
 800945e:	b29b      	uxth	r3, r3
 8009460:	4618      	mov	r0, r3
 8009462:	f7fa f9d5 	bl	8003810 <lwip_htons>
 8009466:	4603      	mov	r3, r0
 8009468:	461a      	mov	r2, r3
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	4322      	orrs	r2, r4
 8009470:	b292      	uxth	r2, r2
 8009472:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	4618      	mov	r0, r3
 800947a:	f7fb fda9 	bl	8004fd0 <pbuf_clen>
 800947e:	4603      	mov	r3, r0
 8009480:	461a      	mov	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009488:	4413      	add	r3, r2
 800948a:	b29a      	uxth	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	4618      	mov	r0, r3
 8009498:	f7fb fd9a 	bl	8004fd0 <pbuf_clen>
 800949c:	4603      	mov	r3, r0
 800949e:	461a      	mov	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80094a6:	4413      	add	r3, r2
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	69fa      	ldr	r2, [r7, #28]
 80094bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d103      	bne.n	80094ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	e016      	b.n	8009500 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80094d2:	bf00      	nop
 80094d4:	e002      	b.n	80094dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80094d6:	bf00      	nop
 80094d8:	e000      	b.n	80094dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80094da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d006      	beq.n	80094f0 <tcp_split_unsent_seg+0x25c>
 80094e2:	4b09      	ldr	r3, [pc, #36]	@ (8009508 <tcp_split_unsent_seg+0x274>)
 80094e4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80094e8:	490d      	ldr	r1, [pc, #52]	@ (8009520 <tcp_split_unsent_seg+0x28c>)
 80094ea:	4809      	ldr	r0, [pc, #36]	@ (8009510 <tcp_split_unsent_seg+0x27c>)
 80094ec:	f003 fdd4 	bl	800d098 <iprintf>
  if (p != NULL) {
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80094f6:	6938      	ldr	r0, [r7, #16]
 80094f8:	f7fb fce2 	bl	8004ec0 <pbuf_free>
  }

  return ERR_MEM;
 80094fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009500:	4618      	mov	r0, r3
 8009502:	3724      	adds	r7, #36	@ 0x24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd90      	pop	{r4, r7, pc}
 8009508:	0800f578 	.word	0x0800f578
 800950c:	0800f90c 	.word	0x0800f90c
 8009510:	0800f5cc 	.word	0x0800f5cc
 8009514:	0800f930 	.word	0x0800f930
 8009518:	0800f954 	.word	0x0800f954
 800951c:	0800f964 	.word	0x0800f964
 8009520:	0800f974 	.word	0x0800f974

08009524 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009524:	b590      	push	{r4, r7, lr}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d106      	bne.n	8009540 <tcp_send_fin+0x1c>
 8009532:	4b21      	ldr	r3, [pc, #132]	@ (80095b8 <tcp_send_fin+0x94>)
 8009534:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8009538:	4920      	ldr	r1, [pc, #128]	@ (80095bc <tcp_send_fin+0x98>)
 800953a:	4821      	ldr	r0, [pc, #132]	@ (80095c0 <tcp_send_fin+0x9c>)
 800953c:	f003 fdac 	bl	800d098 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009544:	2b00      	cmp	r3, #0
 8009546:	d02e      	beq.n	80095a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800954c:	60fb      	str	r3, [r7, #12]
 800954e:	e002      	b.n	8009556 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1f8      	bne.n	8009550 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	899b      	ldrh	r3, [r3, #12]
 8009564:	b29b      	uxth	r3, r3
 8009566:	4618      	mov	r0, r3
 8009568:	f7fa f952 	bl	8003810 <lwip_htons>
 800956c:	4603      	mov	r3, r0
 800956e:	b2db      	uxtb	r3, r3
 8009570:	f003 0307 	and.w	r3, r3, #7
 8009574:	2b00      	cmp	r3, #0
 8009576:	d116      	bne.n	80095a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	899b      	ldrh	r3, [r3, #12]
 800957e:	b29c      	uxth	r4, r3
 8009580:	2001      	movs	r0, #1
 8009582:	f7fa f945 	bl	8003810 <lwip_htons>
 8009586:	4603      	mov	r3, r0
 8009588:	461a      	mov	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	4322      	orrs	r2, r4
 8009590:	b292      	uxth	r2, r2
 8009592:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	8b5b      	ldrh	r3, [r3, #26]
 8009598:	f043 0320 	orr.w	r3, r3, #32
 800959c:	b29a      	uxth	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e004      	b.n	80095b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80095a6:	2101      	movs	r1, #1
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f80b 	bl	80095c4 <tcp_enqueue_flags>
 80095ae:	4603      	mov	r3, r0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd90      	pop	{r4, r7, pc}
 80095b8:	0800f578 	.word	0x0800f578
 80095bc:	0800f980 	.word	0x0800f980
 80095c0:	0800f5cc 	.word	0x0800f5cc

080095c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08a      	sub	sp, #40	@ 0x28
 80095c8:	af02      	add	r7, sp, #8
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80095d0:	2300      	movs	r3, #0
 80095d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	f003 0303 	and.w	r3, r3, #3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d106      	bne.n	80095f0 <tcp_enqueue_flags+0x2c>
 80095e2:	4b67      	ldr	r3, [pc, #412]	@ (8009780 <tcp_enqueue_flags+0x1bc>)
 80095e4:	f240 4211 	movw	r2, #1041	@ 0x411
 80095e8:	4966      	ldr	r1, [pc, #408]	@ (8009784 <tcp_enqueue_flags+0x1c0>)
 80095ea:	4867      	ldr	r0, [pc, #412]	@ (8009788 <tcp_enqueue_flags+0x1c4>)
 80095ec:	f003 fd54 	bl	800d098 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d106      	bne.n	8009604 <tcp_enqueue_flags+0x40>
 80095f6:	4b62      	ldr	r3, [pc, #392]	@ (8009780 <tcp_enqueue_flags+0x1bc>)
 80095f8:	f240 4213 	movw	r2, #1043	@ 0x413
 80095fc:	4963      	ldr	r1, [pc, #396]	@ (800978c <tcp_enqueue_flags+0x1c8>)
 80095fe:	4862      	ldr	r0, [pc, #392]	@ (8009788 <tcp_enqueue_flags+0x1c4>)
 8009600:	f003 fd4a 	bl	800d098 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800960e:	2301      	movs	r3, #1
 8009610:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009612:	7ffb      	ldrb	r3, [r7, #31]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	b2db      	uxtb	r3, r3
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	b29b      	uxth	r3, r3
 8009622:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009626:	4619      	mov	r1, r3
 8009628:	2036      	movs	r0, #54	@ 0x36
 800962a:	f7fb f965 	bl	80048f8 <pbuf_alloc>
 800962e:	6138      	str	r0, [r7, #16]
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d109      	bne.n	800964a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	8b5b      	ldrh	r3, [r3, #26]
 800963a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009644:	f04f 33ff 	mov.w	r3, #4294967295
 8009648:	e095      	b.n	8009776 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	895a      	ldrh	r2, [r3, #10]
 800964e:	7dfb      	ldrb	r3, [r7, #23]
 8009650:	b29b      	uxth	r3, r3
 8009652:	429a      	cmp	r2, r3
 8009654:	d206      	bcs.n	8009664 <tcp_enqueue_flags+0xa0>
 8009656:	4b4a      	ldr	r3, [pc, #296]	@ (8009780 <tcp_enqueue_flags+0x1bc>)
 8009658:	f240 4239 	movw	r2, #1081	@ 0x439
 800965c:	494c      	ldr	r1, [pc, #304]	@ (8009790 <tcp_enqueue_flags+0x1cc>)
 800965e:	484a      	ldr	r0, [pc, #296]	@ (8009788 <tcp_enqueue_flags+0x1c4>)
 8009660:	f003 fd1a 	bl	800d098 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	7ffb      	ldrb	r3, [r7, #31]
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	460b      	mov	r3, r1
 8009670:	6939      	ldr	r1, [r7, #16]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7ff fd72 	bl	800915c <tcp_create_segment>
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d109      	bne.n	8009694 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	8b5b      	ldrh	r3, [r3, #26]
 8009684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009688:	b29a      	uxth	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800968e:	f04f 33ff 	mov.w	r3, #4294967295
 8009692:	e070      	b.n	8009776 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f003 0303 	and.w	r3, r3, #3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d006      	beq.n	80096ae <tcp_enqueue_flags+0xea>
 80096a0:	4b37      	ldr	r3, [pc, #220]	@ (8009780 <tcp_enqueue_flags+0x1bc>)
 80096a2:	f240 4242 	movw	r2, #1090	@ 0x442
 80096a6:	493b      	ldr	r1, [pc, #236]	@ (8009794 <tcp_enqueue_flags+0x1d0>)
 80096a8:	4837      	ldr	r0, [pc, #220]	@ (8009788 <tcp_enqueue_flags+0x1c4>)
 80096aa:	f003 fcf5 	bl	800d098 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	891b      	ldrh	r3, [r3, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d006      	beq.n	80096c4 <tcp_enqueue_flags+0x100>
 80096b6:	4b32      	ldr	r3, [pc, #200]	@ (8009780 <tcp_enqueue_flags+0x1bc>)
 80096b8:	f240 4243 	movw	r2, #1091	@ 0x443
 80096bc:	4936      	ldr	r1, [pc, #216]	@ (8009798 <tcp_enqueue_flags+0x1d4>)
 80096be:	4832      	ldr	r0, [pc, #200]	@ (8009788 <tcp_enqueue_flags+0x1c4>)
 80096c0:	f003 fcea 	bl	800d098 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d103      	bne.n	80096d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80096d2:	e00d      	b.n	80096f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096d8:	61bb      	str	r3, [r7, #24]
 80096da:	e002      	b.n	80096e2 <tcp_enqueue_flags+0x11e>
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	61bb      	str	r3, [r7, #24]
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1f8      	bne.n	80096dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80096f8:	78fb      	ldrb	r3, [r7, #3]
 80096fa:	f003 0302 	and.w	r3, r3, #2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d104      	bne.n	800970c <tcp_enqueue_flags+0x148>
 8009702:	78fb      	ldrb	r3, [r7, #3]
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009710:	1c5a      	adds	r2, r3, #1
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009716:	78fb      	ldrb	r3, [r7, #3]
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	2b00      	cmp	r3, #0
 800971e:	d006      	beq.n	800972e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	8b5b      	ldrh	r3, [r3, #26]
 8009724:	f043 0320 	orr.w	r3, r3, #32
 8009728:	b29a      	uxth	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	4618      	mov	r0, r3
 8009734:	f7fb fc4c 	bl	8004fd0 <pbuf_clen>
 8009738:	4603      	mov	r3, r0
 800973a:	461a      	mov	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009742:	4413      	add	r3, r2
 8009744:	b29a      	uxth	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00e      	beq.n	8009774 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10a      	bne.n	8009774 <tcp_enqueue_flags+0x1b0>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <tcp_enqueue_flags+0x1b0>
 8009766:	4b06      	ldr	r3, [pc, #24]	@ (8009780 <tcp_enqueue_flags+0x1bc>)
 8009768:	f240 4265 	movw	r2, #1125	@ 0x465
 800976c:	490b      	ldr	r1, [pc, #44]	@ (800979c <tcp_enqueue_flags+0x1d8>)
 800976e:	4806      	ldr	r0, [pc, #24]	@ (8009788 <tcp_enqueue_flags+0x1c4>)
 8009770:	f003 fc92 	bl	800d098 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3720      	adds	r7, #32
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	0800f578 	.word	0x0800f578
 8009784:	0800f99c 	.word	0x0800f99c
 8009788:	0800f5cc 	.word	0x0800f5cc
 800978c:	0800f9f4 	.word	0x0800f9f4
 8009790:	0800fa14 	.word	0x0800fa14
 8009794:	0800fa50 	.word	0x0800fa50
 8009798:	0800fa68 	.word	0x0800fa68
 800979c:	0800fa94 	.word	0x0800fa94

080097a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80097a0:	b5b0      	push	{r4, r5, r7, lr}
 80097a2:	b08a      	sub	sp, #40	@ 0x28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d106      	bne.n	80097bc <tcp_output+0x1c>
 80097ae:	4b8a      	ldr	r3, [pc, #552]	@ (80099d8 <tcp_output+0x238>)
 80097b0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80097b4:	4989      	ldr	r1, [pc, #548]	@ (80099dc <tcp_output+0x23c>)
 80097b6:	488a      	ldr	r0, [pc, #552]	@ (80099e0 <tcp_output+0x240>)
 80097b8:	f003 fc6e 	bl	800d098 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	7d1b      	ldrb	r3, [r3, #20]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d106      	bne.n	80097d2 <tcp_output+0x32>
 80097c4:	4b84      	ldr	r3, [pc, #528]	@ (80099d8 <tcp_output+0x238>)
 80097c6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80097ca:	4986      	ldr	r1, [pc, #536]	@ (80099e4 <tcp_output+0x244>)
 80097cc:	4884      	ldr	r0, [pc, #528]	@ (80099e0 <tcp_output+0x240>)
 80097ce:	f003 fc63 	bl	800d098 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80097d2:	4b85      	ldr	r3, [pc, #532]	@ (80099e8 <tcp_output+0x248>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d101      	bne.n	80097e0 <tcp_output+0x40>
    return ERR_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	e1ce      	b.n	8009b7e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097ec:	4293      	cmp	r3, r2
 80097ee:	bf28      	it	cs
 80097f0:	4613      	movcs	r3, r2
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80097fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10b      	bne.n	800981a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	8b5b      	ldrh	r3, [r3, #26]
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 81aa 	beq.w	8009b64 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fdcb 	bl	800a3ac <tcp_send_empty_ack>
 8009816:	4603      	mov	r3, r0
 8009818:	e1b1      	b.n	8009b7e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800981a:	6879      	ldr	r1, [r7, #4]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3304      	adds	r3, #4
 8009820:	461a      	mov	r2, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7ff fc7e 	bl	8009124 <tcp_route>
 8009828:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d102      	bne.n	8009836 <tcp_output+0x96>
    return ERR_RTE;
 8009830:	f06f 0303 	mvn.w	r3, #3
 8009834:	e1a3      	b.n	8009b7e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <tcp_output+0xa4>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d111      	bne.n	8009868 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d002      	beq.n	8009850 <tcp_output+0xb0>
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	3304      	adds	r3, #4
 800984e:	e000      	b.n	8009852 <tcp_output+0xb2>
 8009850:	2300      	movs	r3, #0
 8009852:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d102      	bne.n	8009860 <tcp_output+0xc0>
      return ERR_RTE;
 800985a:	f06f 0303 	mvn.w	r3, #3
 800985e:	e18e      	b.n	8009b7e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	4618      	mov	r0, r3
 8009870:	f7f9 ffe3 	bl	800383a <lwip_htonl>
 8009874:	4602      	mov	r2, r0
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800987e:	8912      	ldrh	r2, [r2, #8]
 8009880:	4413      	add	r3, r2
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	429a      	cmp	r2, r3
 8009886:	d227      	bcs.n	80098d8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800988e:	461a      	mov	r2, r3
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	4293      	cmp	r3, r2
 8009894:	d114      	bne.n	80098c0 <tcp_output+0x120>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800989a:	2b00      	cmp	r3, #0
 800989c:	d110      	bne.n	80098c0 <tcp_output+0x120>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10b      	bne.n	80098c0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	8b5b      	ldrh	r3, [r3, #26]
 80098c4:	f003 0302 	and.w	r3, r3, #2
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 814d 	beq.w	8009b68 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fd6c 	bl	800a3ac <tcp_send_empty_ack>
 80098d4:	4603      	mov	r3, r0
 80098d6:	e152      	b.n	8009b7e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098e4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 811c 	beq.w	8009b26 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80098ee:	e002      	b.n	80098f6 <tcp_output+0x156>
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	623b      	str	r3, [r7, #32]
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1f8      	bne.n	80098f0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80098fe:	e112      	b.n	8009b26 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	899b      	ldrh	r3, [r3, #12]
 8009906:	b29b      	uxth	r3, r3
 8009908:	4618      	mov	r0, r3
 800990a:	f7f9 ff81 	bl	8003810 <lwip_htons>
 800990e:	4603      	mov	r3, r0
 8009910:	b2db      	uxtb	r3, r3
 8009912:	f003 0304 	and.w	r3, r3, #4
 8009916:	2b00      	cmp	r3, #0
 8009918:	d006      	beq.n	8009928 <tcp_output+0x188>
 800991a:	4b2f      	ldr	r3, [pc, #188]	@ (80099d8 <tcp_output+0x238>)
 800991c:	f240 5236 	movw	r2, #1334	@ 0x536
 8009920:	4932      	ldr	r1, [pc, #200]	@ (80099ec <tcp_output+0x24c>)
 8009922:	482f      	ldr	r0, [pc, #188]	@ (80099e0 <tcp_output+0x240>)
 8009924:	f003 fbb8 	bl	800d098 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800992c:	2b00      	cmp	r3, #0
 800992e:	d01f      	beq.n	8009970 <tcp_output+0x1d0>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	8b5b      	ldrh	r3, [r3, #26]
 8009934:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8009938:	2b00      	cmp	r3, #0
 800993a:	d119      	bne.n	8009970 <tcp_output+0x1d0>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00b      	beq.n	800995c <tcp_output+0x1bc>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d110      	bne.n	8009970 <tcp_output+0x1d0>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009952:	891a      	ldrh	r2, [r3, #8]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009958:	429a      	cmp	r2, r3
 800995a:	d209      	bcs.n	8009970 <tcp_output+0x1d0>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009962:	2b00      	cmp	r3, #0
 8009964:	d004      	beq.n	8009970 <tcp_output+0x1d0>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800996c:	2b08      	cmp	r3, #8
 800996e:	d901      	bls.n	8009974 <tcp_output+0x1d4>
 8009970:	2301      	movs	r3, #1
 8009972:	e000      	b.n	8009976 <tcp_output+0x1d6>
 8009974:	2300      	movs	r3, #0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d106      	bne.n	8009988 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	8b5b      	ldrh	r3, [r3, #26]
 800997e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 80e4 	beq.w	8009b50 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	7d1b      	ldrb	r3, [r3, #20]
 800998c:	2b02      	cmp	r3, #2
 800998e:	d00d      	beq.n	80099ac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	899b      	ldrh	r3, [r3, #12]
 8009996:	b29c      	uxth	r4, r3
 8009998:	2010      	movs	r0, #16
 800999a:	f7f9 ff39 	bl	8003810 <lwip_htons>
 800999e:	4603      	mov	r3, r0
 80099a0:	461a      	mov	r2, r3
 80099a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	4322      	orrs	r2, r4
 80099a8:	b292      	uxth	r2, r2
 80099aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099b2:	f000 f909 	bl	8009bc8 <tcp_output_segment>
 80099b6:	4603      	mov	r3, r0
 80099b8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80099ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d016      	beq.n	80099f0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	8b5b      	ldrh	r3, [r3, #26]
 80099c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	835a      	strh	r2, [r3, #26]
      return err;
 80099d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099d4:	e0d3      	b.n	8009b7e <tcp_output+0x3de>
 80099d6:	bf00      	nop
 80099d8:	0800f578 	.word	0x0800f578
 80099dc:	0800fabc 	.word	0x0800fabc
 80099e0:	0800f5cc 	.word	0x0800f5cc
 80099e4:	0800fad4 	.word	0x0800fad4
 80099e8:	20008200 	.word	0x20008200
 80099ec:	0800fafc 	.word	0x0800fafc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80099f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	7d1b      	ldrb	r3, [r3, #20]
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d006      	beq.n	8009a0e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	8b5b      	ldrh	r3, [r3, #26]
 8009a04:	f023 0303 	bic.w	r3, r3, #3
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7f9 ff10 	bl	800383a <lwip_htonl>
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1e:	891b      	ldrh	r3, [r3, #8]
 8009a20:	461d      	mov	r5, r3
 8009a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	899b      	ldrh	r3, [r3, #12]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7f9 fef0 	bl	8003810 <lwip_htons>
 8009a30:	4603      	mov	r3, r0
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	f003 0303 	and.w	r3, r3, #3
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <tcp_output+0x2a0>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e000      	b.n	8009a42 <tcp_output+0x2a2>
 8009a40:	2300      	movs	r3, #0
 8009a42:	442b      	add	r3, r5
 8009a44:	4423      	add	r3, r4
 8009a46:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	da02      	bge.n	8009a5a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5c:	891b      	ldrh	r3, [r3, #8]
 8009a5e:	461c      	mov	r4, r3
 8009a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	899b      	ldrh	r3, [r3, #12]
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7f9 fed1 	bl	8003810 <lwip_htons>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	f003 0303 	and.w	r3, r3, #3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <tcp_output+0x2de>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e000      	b.n	8009a80 <tcp_output+0x2e0>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	4423      	add	r3, r4
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d049      	beq.n	8009b1a <tcp_output+0x37a>
      seg->next = NULL;
 8009a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d105      	bne.n	8009aa0 <tcp_output+0x300>
        pcb->unacked = seg;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a98:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9c:	623b      	str	r3, [r7, #32]
 8009a9e:	e03f      	b.n	8009b20 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7f9 fec7 	bl	800383a <lwip_htonl>
 8009aac:	4604      	mov	r4, r0
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7f9 fec0 	bl	800383a <lwip_htonl>
 8009aba:	4603      	mov	r3, r0
 8009abc:	1ae3      	subs	r3, r4, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	da24      	bge.n	8009b0c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3370      	adds	r3, #112	@ 0x70
 8009ac6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009ac8:	e002      	b.n	8009ad0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d011      	beq.n	8009afc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7f9 feaa 	bl	800383a <lwip_htonl>
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7f9 fea3 	bl	800383a <lwip_htonl>
 8009af4:	4603      	mov	r3, r0
 8009af6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	dbe6      	blt.n	8009aca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	e009      	b.n	8009b20 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b10:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	623b      	str	r3, [r7, #32]
 8009b18:	e002      	b.n	8009b20 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009b1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b1c:	f7fc fc45 	bl	80063aa <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b24:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8009b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d012      	beq.n	8009b52 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7f9 fe81 	bl	800383a <lwip_htonl>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b42:	8912      	ldrh	r2, [r2, #8]
 8009b44:	4413      	add	r3, r2
  while (seg != NULL &&
 8009b46:	69ba      	ldr	r2, [r7, #24]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	f4bf aed9 	bcs.w	8009900 <tcp_output+0x160>
 8009b4e:	e000      	b.n	8009b52 <tcp_output+0x3b2>
      break;
 8009b50:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d108      	bne.n	8009b6c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8009b62:	e004      	b.n	8009b6e <tcp_output+0x3ce>
    goto output_done;
 8009b64:	bf00      	nop
 8009b66:	e002      	b.n	8009b6e <tcp_output+0x3ce>
    goto output_done;
 8009b68:	bf00      	nop
 8009b6a:	e000      	b.n	8009b6e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009b6c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	8b5b      	ldrh	r3, [r3, #26]
 8009b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3728      	adds	r7, #40	@ 0x28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bdb0      	pop	{r4, r5, r7, pc}
 8009b86:	bf00      	nop

08009b88 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d106      	bne.n	8009ba4 <tcp_output_segment_busy+0x1c>
 8009b96:	4b09      	ldr	r3, [pc, #36]	@ (8009bbc <tcp_output_segment_busy+0x34>)
 8009b98:	f240 529a 	movw	r2, #1434	@ 0x59a
 8009b9c:	4908      	ldr	r1, [pc, #32]	@ (8009bc0 <tcp_output_segment_busy+0x38>)
 8009b9e:	4809      	ldr	r0, [pc, #36]	@ (8009bc4 <tcp_output_segment_busy+0x3c>)
 8009ba0:	f003 fa7a 	bl	800d098 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	7b9b      	ldrb	r3, [r3, #14]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d001      	beq.n	8009bb2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e000      	b.n	8009bb4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	0800f578 	.word	0x0800f578
 8009bc0:	0800fb14 	.word	0x0800fb14
 8009bc4:	0800f5cc 	.word	0x0800f5cc

08009bc8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009bc8:	b5b0      	push	{r4, r5, r7, lr}
 8009bca:	b08c      	sub	sp, #48	@ 0x30
 8009bcc:	af04      	add	r7, sp, #16
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d106      	bne.n	8009be8 <tcp_output_segment+0x20>
 8009bda:	4b64      	ldr	r3, [pc, #400]	@ (8009d6c <tcp_output_segment+0x1a4>)
 8009bdc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8009be0:	4963      	ldr	r1, [pc, #396]	@ (8009d70 <tcp_output_segment+0x1a8>)
 8009be2:	4864      	ldr	r0, [pc, #400]	@ (8009d74 <tcp_output_segment+0x1ac>)
 8009be4:	f003 fa58 	bl	800d098 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d106      	bne.n	8009bfc <tcp_output_segment+0x34>
 8009bee:	4b5f      	ldr	r3, [pc, #380]	@ (8009d6c <tcp_output_segment+0x1a4>)
 8009bf0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8009bf4:	4960      	ldr	r1, [pc, #384]	@ (8009d78 <tcp_output_segment+0x1b0>)
 8009bf6:	485f      	ldr	r0, [pc, #380]	@ (8009d74 <tcp_output_segment+0x1ac>)
 8009bf8:	f003 fa4e 	bl	800d098 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <tcp_output_segment+0x48>
 8009c02:	4b5a      	ldr	r3, [pc, #360]	@ (8009d6c <tcp_output_segment+0x1a4>)
 8009c04:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8009c08:	495c      	ldr	r1, [pc, #368]	@ (8009d7c <tcp_output_segment+0x1b4>)
 8009c0a:	485a      	ldr	r0, [pc, #360]	@ (8009d74 <tcp_output_segment+0x1ac>)
 8009c0c:	f003 fa44 	bl	800d098 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f7ff ffb9 	bl	8009b88 <tcp_output_segment_busy>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d001      	beq.n	8009c20 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	e0a1      	b.n	8009d64 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	68dc      	ldr	r4, [r3, #12]
 8009c28:	4610      	mov	r0, r2
 8009c2a:	f7f9 fe06 	bl	800383a <lwip_htonl>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	68dc      	ldr	r4, [r3, #12]
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	f7f9 fde8 	bl	8003810 <lwip_htons>
 8009c40:	4603      	mov	r3, r0
 8009c42:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8009c4c:	441a      	add	r2, r3
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	3314      	adds	r3, #20
 8009c58:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	7a9b      	ldrb	r3, [r3, #10]
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d015      	beq.n	8009c92 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8009c72:	f7fc fe91 	bl	8006998 <tcp_eff_send_mss_netif>
 8009c76:	4603      	mov	r3, r0
 8009c78:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009c7a:	8b7b      	ldrh	r3, [r7, #26]
 8009c7c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7f9 fdda 	bl	800383a <lwip_htonl>
 8009c86:	4602      	mov	r2, r0
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	3304      	adds	r3, #4
 8009c90:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	da02      	bge.n	8009ca2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10c      	bne.n	8009cc4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8009caa:	4b35      	ldr	r3, [pc, #212]	@ (8009d80 <tcp_output_segment+0x1b8>)
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7f9 fdbe 	bl	800383a <lwip_htonl>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	8959      	ldrh	r1, [r3, #10]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	8b3a      	ldrh	r2, [r7, #24]
 8009cde:	1a8a      	subs	r2, r1, r2
 8009ce0:	b292      	uxth	r2, r2
 8009ce2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	8919      	ldrh	r1, [r3, #8]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	8b3a      	ldrh	r2, [r7, #24]
 8009cf0:	1a8a      	subs	r2, r1, r2
 8009cf2:	b292      	uxth	r2, r2
 8009cf4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	68d2      	ldr	r2, [r2, #12]
 8009cfe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	741a      	strb	r2, [r3, #16]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	68da      	ldr	r2, [r3, #12]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	7a9b      	ldrb	r3, [r3, #10]
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <tcp_output_segment+0x158>
 8009d1c:	2318      	movs	r3, #24
 8009d1e:	e000      	b.n	8009d22 <tcp_output_segment+0x15a>
 8009d20:	2314      	movs	r3, #20
 8009d22:	4413      	add	r3, r2
 8009d24:	69fa      	ldr	r2, [r7, #28]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d006      	beq.n	8009d38 <tcp_output_segment+0x170>
 8009d2a:	4b10      	ldr	r3, [pc, #64]	@ (8009d6c <tcp_output_segment+0x1a4>)
 8009d2c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8009d30:	4914      	ldr	r1, [pc, #80]	@ (8009d84 <tcp_output_segment+0x1bc>)
 8009d32:	4810      	ldr	r0, [pc, #64]	@ (8009d74 <tcp_output_segment+0x1ac>)
 8009d34:	f003 f9b0 	bl	800d098 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6858      	ldr	r0, [r3, #4]
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	1d1c      	adds	r4, r3, #4
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	7add      	ldrb	r5, [r3, #11]
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	7a9b      	ldrb	r3, [r3, #10]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	9202      	str	r2, [sp, #8]
 8009d4e:	2206      	movs	r2, #6
 8009d50:	9201      	str	r2, [sp, #4]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	462b      	mov	r3, r5
 8009d56:	4622      	mov	r2, r4
 8009d58:	f002 f870 	bl	800be3c <ip4_output_if>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3720      	adds	r7, #32
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8009d6c:	0800f578 	.word	0x0800f578
 8009d70:	0800fb3c 	.word	0x0800fb3c
 8009d74:	0800f5cc 	.word	0x0800f5cc
 8009d78:	0800fb5c 	.word	0x0800fb5c
 8009d7c:	0800fb7c 	.word	0x0800fb7c
 8009d80:	200081b4 	.word	0x200081b4
 8009d84:	0800fba0 	.word	0x0800fba0

08009d88 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8009d88:	b5b0      	push	{r4, r5, r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d106      	bne.n	8009da4 <tcp_rexmit_rto_prepare+0x1c>
 8009d96:	4b31      	ldr	r3, [pc, #196]	@ (8009e5c <tcp_rexmit_rto_prepare+0xd4>)
 8009d98:	f240 6263 	movw	r2, #1635	@ 0x663
 8009d9c:	4930      	ldr	r1, [pc, #192]	@ (8009e60 <tcp_rexmit_rto_prepare+0xd8>)
 8009d9e:	4831      	ldr	r0, [pc, #196]	@ (8009e64 <tcp_rexmit_rto_prepare+0xdc>)
 8009da0:	f003 f97a 	bl	800d098 <iprintf>

  if (pcb->unacked == NULL) {
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d102      	bne.n	8009db2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8009dac:	f06f 0305 	mvn.w	r3, #5
 8009db0:	e050      	b.n	8009e54 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	e00b      	b.n	8009dd2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f7ff fee4 	bl	8009b88 <tcp_output_segment_busy>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8009dc6:	f06f 0305 	mvn.w	r3, #5
 8009dca:	e043      	b.n	8009e54 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	60fb      	str	r3, [r7, #12]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1ef      	bne.n	8009dba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f7ff fed4 	bl	8009b88 <tcp_output_segment_busy>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8009de6:	f06f 0305 	mvn.w	r3, #5
 8009dea:	e033      	b.n	8009e54 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	8b5b      	ldrh	r3, [r3, #26]
 8009e06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7f9 fd0f 	bl	800383a <lwip_htonl>
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	891b      	ldrh	r3, [r3, #8]
 8009e22:	461d      	mov	r5, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	899b      	ldrh	r3, [r3, #12]
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7f9 fcef 	bl	8003810 <lwip_htons>
 8009e32:	4603      	mov	r3, r0
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	f003 0303 	and.w	r3, r3, #3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <tcp_rexmit_rto_prepare+0xba>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e000      	b.n	8009e44 <tcp_rexmit_rto_prepare+0xbc>
 8009e42:	2300      	movs	r3, #0
 8009e44:	442b      	add	r3, r5
 8009e46:	18e2      	adds	r2, r4, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8009e5c:	0800f578 	.word	0x0800f578
 8009e60:	0800fbb4 	.word	0x0800fbb4
 8009e64:	0800f5cc 	.word	0x0800f5cc

08009e68 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d106      	bne.n	8009e84 <tcp_rexmit_rto_commit+0x1c>
 8009e76:	4b0d      	ldr	r3, [pc, #52]	@ (8009eac <tcp_rexmit_rto_commit+0x44>)
 8009e78:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009e7c:	490c      	ldr	r1, [pc, #48]	@ (8009eb0 <tcp_rexmit_rto_commit+0x48>)
 8009e7e:	480d      	ldr	r0, [pc, #52]	@ (8009eb4 <tcp_rexmit_rto_commit+0x4c>)
 8009e80:	f003 f90a 	bl	800d098 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e8a:	2bff      	cmp	r3, #255	@ 0xff
 8009e8c:	d007      	beq.n	8009e9e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e94:	3301      	adds	r3, #1
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7ff fc7e 	bl	80097a0 <tcp_output>
}
 8009ea4:	bf00      	nop
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	0800f578 	.word	0x0800f578
 8009eb0:	0800fbd8 	.word	0x0800fbd8
 8009eb4:	0800f5cc 	.word	0x0800f5cc

08009eb8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <tcp_rexmit_rto+0x1c>
 8009ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ef0 <tcp_rexmit_rto+0x38>)
 8009ec8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8009ecc:	4909      	ldr	r1, [pc, #36]	@ (8009ef4 <tcp_rexmit_rto+0x3c>)
 8009ece:	480a      	ldr	r0, [pc, #40]	@ (8009ef8 <tcp_rexmit_rto+0x40>)
 8009ed0:	f003 f8e2 	bl	800d098 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f7ff ff57 	bl	8009d88 <tcp_rexmit_rto_prepare>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d102      	bne.n	8009ee6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7ff ffc1 	bl	8009e68 <tcp_rexmit_rto_commit>
  }
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	0800f578 	.word	0x0800f578
 8009ef4:	0800fbfc 	.word	0x0800fbfc
 8009ef8:	0800f5cc 	.word	0x0800f5cc

08009efc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009efc:	b590      	push	{r4, r7, lr}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d106      	bne.n	8009f18 <tcp_rexmit+0x1c>
 8009f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8009fc8 <tcp_rexmit+0xcc>)
 8009f0c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8009f10:	492e      	ldr	r1, [pc, #184]	@ (8009fcc <tcp_rexmit+0xd0>)
 8009f12:	482f      	ldr	r0, [pc, #188]	@ (8009fd0 <tcp_rexmit+0xd4>)
 8009f14:	f003 f8c0 	bl	800d098 <iprintf>

  if (pcb->unacked == NULL) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d102      	bne.n	8009f26 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8009f20:	f06f 0305 	mvn.w	r3, #5
 8009f24:	e04c      	b.n	8009fc0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f2a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8009f2c:	68b8      	ldr	r0, [r7, #8]
 8009f2e:	f7ff fe2b 	bl	8009b88 <tcp_output_segment_busy>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8009f38:	f06f 0305 	mvn.w	r3, #5
 8009f3c:	e040      	b.n	8009fc0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	336c      	adds	r3, #108	@ 0x6c
 8009f4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009f4c:	e002      	b.n	8009f54 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d011      	beq.n	8009f80 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7f9 fc68 	bl	800383a <lwip_htonl>
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7f9 fc61 	bl	800383a <lwip_htonl>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	dbe6      	blt.n	8009f4e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d103      	bne.n	8009f9e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009fa4:	2bff      	cmp	r3, #255	@ 0xff
 8009fa6:	d007      	beq.n	8009fb8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009fae:	3301      	adds	r3, #1
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd90      	pop	{r4, r7, pc}
 8009fc8:	0800f578 	.word	0x0800f578
 8009fcc:	0800fc18 	.word	0x0800fc18
 8009fd0:	0800f5cc 	.word	0x0800f5cc

08009fd4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <tcp_rexmit_fast+0x1c>
 8009fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800a08c <tcp_rexmit_fast+0xb8>)
 8009fe4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8009fe8:	4929      	ldr	r1, [pc, #164]	@ (800a090 <tcp_rexmit_fast+0xbc>)
 8009fea:	482a      	ldr	r0, [pc, #168]	@ (800a094 <tcp_rexmit_fast+0xc0>)
 8009fec:	f003 f854 	bl	800d098 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d044      	beq.n	800a082 <tcp_rexmit_fast+0xae>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	8b5b      	ldrh	r3, [r3, #26]
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	2b00      	cmp	r3, #0
 800a002:	d13e      	bne.n	800a082 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff ff79 	bl	8009efc <tcp_rexmit>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d138      	bne.n	800a082 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a01c:	4293      	cmp	r3, r2
 800a01e:	bf28      	it	cs
 800a020:	4613      	movcs	r3, r2
 800a022:	b29b      	uxth	r3, r3
 800a024:	0fda      	lsrs	r2, r3, #31
 800a026:	4413      	add	r3, r2
 800a028:	105b      	asrs	r3, r3, #1
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a038:	461a      	mov	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a03e:	005b      	lsls	r3, r3, #1
 800a040:	429a      	cmp	r2, r3
 800a042:	d206      	bcs.n	800a052 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a05c:	4619      	mov	r1, r3
 800a05e:	0049      	lsls	r1, r1, #1
 800a060:	440b      	add	r3, r1
 800a062:	b29b      	uxth	r3, r3
 800a064:	4413      	add	r3, r2
 800a066:	b29a      	uxth	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	8b5b      	ldrh	r3, [r3, #26]
 800a072:	f043 0304 	orr.w	r3, r3, #4
 800a076:	b29a      	uxth	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800a082:	bf00      	nop
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	0800f578 	.word	0x0800f578
 800a090:	0800fc30 	.word	0x0800fc30
 800a094:	0800f5cc 	.word	0x0800f5cc

0800a098 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	607b      	str	r3, [r7, #4]
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	817b      	strh	r3, [r7, #10]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a0aa:	897a      	ldrh	r2, [r7, #10]
 800a0ac:	893b      	ldrh	r3, [r7, #8]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	3314      	adds	r3, #20
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	2022      	movs	r0, #34	@ 0x22
 800a0be:	f7fa fc1b 	bl	80048f8 <pbuf_alloc>
 800a0c2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d04d      	beq.n	800a166 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a0ca:	897b      	ldrh	r3, [r7, #10]
 800a0cc:	3313      	adds	r3, #19
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	8952      	ldrh	r2, [r2, #10]
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	db06      	blt.n	800a0e4 <tcp_output_alloc_header_common+0x4c>
 800a0d6:	4b26      	ldr	r3, [pc, #152]	@ (800a170 <tcp_output_alloc_header_common+0xd8>)
 800a0d8:	f240 7223 	movw	r2, #1827	@ 0x723
 800a0dc:	4925      	ldr	r1, [pc, #148]	@ (800a174 <tcp_output_alloc_header_common+0xdc>)
 800a0de:	4826      	ldr	r0, [pc, #152]	@ (800a178 <tcp_output_alloc_header_common+0xe0>)
 800a0e0:	f002 ffda 	bl	800d098 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a0ea:	8c3b      	ldrh	r3, [r7, #32]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7f9 fb8f 	bl	8003810 <lwip_htons>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a0fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7f9 fb87 	bl	8003810 <lwip_htons>
 800a102:	4603      	mov	r3, r0
 800a104:	461a      	mov	r2, r3
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7f9 fb92 	bl	800383a <lwip_htonl>
 800a116:	4602      	mov	r2, r0
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a11c:	897b      	ldrh	r3, [r7, #10]
 800a11e:	089b      	lsrs	r3, r3, #2
 800a120:	b29b      	uxth	r3, r3
 800a122:	3305      	adds	r3, #5
 800a124:	b29b      	uxth	r3, r3
 800a126:	031b      	lsls	r3, r3, #12
 800a128:	b29a      	uxth	r2, r3
 800a12a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a12e:	b29b      	uxth	r3, r3
 800a130:	4313      	orrs	r3, r2
 800a132:	b29b      	uxth	r3, r3
 800a134:	4618      	mov	r0, r3
 800a136:	f7f9 fb6b 	bl	8003810 <lwip_htons>
 800a13a:	4603      	mov	r3, r0
 800a13c:	461a      	mov	r2, r3
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a142:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a144:	4618      	mov	r0, r3
 800a146:	f7f9 fb63 	bl	8003810 <lwip_htons>
 800a14a:	4603      	mov	r3, r0
 800a14c:	461a      	mov	r2, r3
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	2200      	movs	r2, #0
 800a156:	741a      	strb	r2, [r3, #16]
 800a158:	2200      	movs	r2, #0
 800a15a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2200      	movs	r2, #0
 800a160:	749a      	strb	r2, [r3, #18]
 800a162:	2200      	movs	r2, #0
 800a164:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a166:	697b      	ldr	r3, [r7, #20]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	0800f578 	.word	0x0800f578
 800a174:	0800fc50 	.word	0x0800fc50
 800a178:	0800f5cc 	.word	0x0800f5cc

0800a17c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a17c:	b5b0      	push	{r4, r5, r7, lr}
 800a17e:	b08a      	sub	sp, #40	@ 0x28
 800a180:	af04      	add	r7, sp, #16
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	607b      	str	r3, [r7, #4]
 800a186:	460b      	mov	r3, r1
 800a188:	817b      	strh	r3, [r7, #10]
 800a18a:	4613      	mov	r3, r2
 800a18c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d106      	bne.n	800a1a2 <tcp_output_alloc_header+0x26>
 800a194:	4b15      	ldr	r3, [pc, #84]	@ (800a1ec <tcp_output_alloc_header+0x70>)
 800a196:	f240 7242 	movw	r2, #1858	@ 0x742
 800a19a:	4915      	ldr	r1, [pc, #84]	@ (800a1f0 <tcp_output_alloc_header+0x74>)
 800a19c:	4815      	ldr	r0, [pc, #84]	@ (800a1f4 <tcp_output_alloc_header+0x78>)
 800a19e:	f002 ff7b 	bl	800d098 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	8adb      	ldrh	r3, [r3, #22]
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	8b12      	ldrh	r2, [r2, #24]
 800a1ae:	68f9      	ldr	r1, [r7, #12]
 800a1b0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800a1b2:	893d      	ldrh	r5, [r7, #8]
 800a1b4:	897c      	ldrh	r4, [r7, #10]
 800a1b6:	9103      	str	r1, [sp, #12]
 800a1b8:	2110      	movs	r1, #16
 800a1ba:	9102      	str	r1, [sp, #8]
 800a1bc:	9201      	str	r2, [sp, #4]
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	462a      	mov	r2, r5
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	f7ff ff67 	bl	800a098 <tcp_output_alloc_header_common>
 800a1ca:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d006      	beq.n	800a1e0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800a1da:	441a      	add	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800a1e0:	697b      	ldr	r3, [r7, #20]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3718      	adds	r7, #24
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bdb0      	pop	{r4, r5, r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	0800f578 	.word	0x0800f578
 800a1f0:	0800fc80 	.word	0x0800fc80
 800a1f4:	0800f5cc 	.word	0x0800f5cc

0800a1f8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	4611      	mov	r1, r2
 800a204:	461a      	mov	r2, r3
 800a206:	460b      	mov	r3, r1
 800a208:	71fb      	strb	r3, [r7, #7]
 800a20a:	4613      	mov	r3, r2
 800a20c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d106      	bne.n	800a226 <tcp_output_fill_options+0x2e>
 800a218:	4b12      	ldr	r3, [pc, #72]	@ (800a264 <tcp_output_fill_options+0x6c>)
 800a21a:	f240 7256 	movw	r2, #1878	@ 0x756
 800a21e:	4912      	ldr	r1, [pc, #72]	@ (800a268 <tcp_output_fill_options+0x70>)
 800a220:	4812      	ldr	r0, [pc, #72]	@ (800a26c <tcp_output_fill_options+0x74>)
 800a222:	f002 ff39 	bl	800d098 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	3314      	adds	r3, #20
 800a230:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a232:	8bfb      	ldrh	r3, [r7, #30]
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	461a      	mov	r2, r3
 800a238:	79fb      	ldrb	r3, [r7, #7]
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	4413      	add	r3, r2
 800a242:	3314      	adds	r3, #20
 800a244:	69ba      	ldr	r2, [r7, #24]
 800a246:	4413      	add	r3, r2
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d006      	beq.n	800a25c <tcp_output_fill_options+0x64>
 800a24e:	4b05      	ldr	r3, [pc, #20]	@ (800a264 <tcp_output_fill_options+0x6c>)
 800a250:	f240 7275 	movw	r2, #1909	@ 0x775
 800a254:	4906      	ldr	r1, [pc, #24]	@ (800a270 <tcp_output_fill_options+0x78>)
 800a256:	4805      	ldr	r0, [pc, #20]	@ (800a26c <tcp_output_fill_options+0x74>)
 800a258:	f002 ff1e 	bl	800d098 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a25c:	bf00      	nop
 800a25e:	3720      	adds	r7, #32
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	0800f578 	.word	0x0800f578
 800a268:	0800fca8 	.word	0x0800fca8
 800a26c:	0800f5cc 	.word	0x0800f5cc
 800a270:	0800fba0 	.word	0x0800fba0

0800a274 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08a      	sub	sp, #40	@ 0x28
 800a278:	af04      	add	r7, sp, #16
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d106      	bne.n	800a296 <tcp_output_control_segment+0x22>
 800a288:	4b1c      	ldr	r3, [pc, #112]	@ (800a2fc <tcp_output_control_segment+0x88>)
 800a28a:	f240 7287 	movw	r2, #1927	@ 0x787
 800a28e:	491c      	ldr	r1, [pc, #112]	@ (800a300 <tcp_output_control_segment+0x8c>)
 800a290:	481c      	ldr	r0, [pc, #112]	@ (800a304 <tcp_output_control_segment+0x90>)
 800a292:	f002 ff01 	bl	800d098 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	6879      	ldr	r1, [r7, #4]
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7fe ff42 	bl	8009124 <tcp_route>
 800a2a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d102      	bne.n	800a2ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a2a8:	23fc      	movs	r3, #252	@ 0xfc
 800a2aa:	75fb      	strb	r3, [r7, #23]
 800a2ac:	e01c      	b.n	800a2e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d006      	beq.n	800a2c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	7adb      	ldrb	r3, [r3, #11]
 800a2b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	7a9b      	ldrb	r3, [r3, #10]
 800a2be:	757b      	strb	r3, [r7, #21]
 800a2c0:	e003      	b.n	800a2ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a2c2:	23ff      	movs	r3, #255	@ 0xff
 800a2c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a2ca:	7dba      	ldrb	r2, [r7, #22]
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	9302      	str	r3, [sp, #8]
 800a2d0:	2306      	movs	r3, #6
 800a2d2:	9301      	str	r3, [sp, #4]
 800a2d4:	7d7b      	ldrb	r3, [r7, #21]
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	6879      	ldr	r1, [r7, #4]
 800a2de:	68b8      	ldr	r0, [r7, #8]
 800a2e0:	f001 fdac 	bl	800be3c <ip4_output_if>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a2e8:	68b8      	ldr	r0, [r7, #8]
 800a2ea:	f7fa fde9 	bl	8004ec0 <pbuf_free>
  return err;
 800a2ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3718      	adds	r7, #24
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	0800f578 	.word	0x0800f578
 800a300:	0800fcd0 	.word	0x0800fcd0
 800a304:	0800f5cc 	.word	0x0800f5cc

0800a308 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a308:	b590      	push	{r4, r7, lr}
 800a30a:	b08b      	sub	sp, #44	@ 0x2c
 800a30c:	af04      	add	r7, sp, #16
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d106      	bne.n	800a32a <tcp_rst+0x22>
 800a31c:	4b1f      	ldr	r3, [pc, #124]	@ (800a39c <tcp_rst+0x94>)
 800a31e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800a322:	491f      	ldr	r1, [pc, #124]	@ (800a3a0 <tcp_rst+0x98>)
 800a324:	481f      	ldr	r0, [pc, #124]	@ (800a3a4 <tcp_rst+0x9c>)
 800a326:	f002 feb7 	bl	800d098 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d106      	bne.n	800a33e <tcp_rst+0x36>
 800a330:	4b1a      	ldr	r3, [pc, #104]	@ (800a39c <tcp_rst+0x94>)
 800a332:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800a336:	491c      	ldr	r1, [pc, #112]	@ (800a3a8 <tcp_rst+0xa0>)
 800a338:	481a      	ldr	r0, [pc, #104]	@ (800a3a4 <tcp_rst+0x9c>)
 800a33a:	f002 fead 	bl	800d098 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a33e:	2300      	movs	r3, #0
 800a340:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a342:	f246 0308 	movw	r3, #24584	@ 0x6008
 800a346:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a348:	7dfb      	ldrb	r3, [r7, #23]
 800a34a:	b29c      	uxth	r4, r3
 800a34c:	68b8      	ldr	r0, [r7, #8]
 800a34e:	f7f9 fa74 	bl	800383a <lwip_htonl>
 800a352:	4602      	mov	r2, r0
 800a354:	8abb      	ldrh	r3, [r7, #20]
 800a356:	9303      	str	r3, [sp, #12]
 800a358:	2314      	movs	r3, #20
 800a35a:	9302      	str	r3, [sp, #8]
 800a35c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a35e:	9301      	str	r3, [sp, #4]
 800a360:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	4613      	mov	r3, r2
 800a366:	2200      	movs	r2, #0
 800a368:	4621      	mov	r1, r4
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7ff fe94 	bl	800a098 <tcp_output_alloc_header_common>
 800a370:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00c      	beq.n	800a392 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a378:	7dfb      	ldrb	r3, [r7, #23]
 800a37a:	2200      	movs	r2, #0
 800a37c:	6939      	ldr	r1, [r7, #16]
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f7ff ff3a 	bl	800a1f8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	6939      	ldr	r1, [r7, #16]
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f7ff ff72 	bl	800a274 <tcp_output_control_segment>
 800a390:	e000      	b.n	800a394 <tcp_rst+0x8c>
    return;
 800a392:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a394:	371c      	adds	r7, #28
 800a396:	46bd      	mov	sp, r7
 800a398:	bd90      	pop	{r4, r7, pc}
 800a39a:	bf00      	nop
 800a39c:	0800f578 	.word	0x0800f578
 800a3a0:	0800fcfc 	.word	0x0800fcfc
 800a3a4:	0800f5cc 	.word	0x0800f5cc
 800a3a8:	0800fd18 	.word	0x0800fd18

0800a3ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a3ac:	b590      	push	{r4, r7, lr}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d106      	bne.n	800a3d0 <tcp_send_empty_ack+0x24>
 800a3c2:	4b28      	ldr	r3, [pc, #160]	@ (800a464 <tcp_send_empty_ack+0xb8>)
 800a3c4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800a3c8:	4927      	ldr	r1, [pc, #156]	@ (800a468 <tcp_send_empty_ack+0xbc>)
 800a3ca:	4828      	ldr	r0, [pc, #160]	@ (800a46c <tcp_send_empty_ack+0xc0>)
 800a3cc:	f002 fe64 	bl	800d098 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a3d0:	7dfb      	ldrb	r3, [r7, #23]
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	f003 0304 	and.w	r3, r3, #4
 800a3da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a3dc:	7d7b      	ldrb	r3, [r7, #21]
 800a3de:	b29c      	uxth	r4, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7f9 fa28 	bl	800383a <lwip_htonl>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7ff fec3 	bl	800a17c <tcp_output_alloc_header>
 800a3f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d109      	bne.n	800a412 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	8b5b      	ldrh	r3, [r3, #26]
 800a402:	f043 0303 	orr.w	r3, r3, #3
 800a406:	b29a      	uxth	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a40c:	f06f 0301 	mvn.w	r3, #1
 800a410:	e023      	b.n	800a45a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a412:	7dbb      	ldrb	r3, [r7, #22]
 800a414:	7dfa      	ldrb	r2, [r7, #23]
 800a416:	6939      	ldr	r1, [r7, #16]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff feed 	bl	800a1f8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	3304      	adds	r3, #4
 800a424:	6939      	ldr	r1, [r7, #16]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7ff ff24 	bl	800a274 <tcp_output_control_segment>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d007      	beq.n	800a448 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	8b5b      	ldrh	r3, [r3, #26]
 800a43c:	f043 0303 	orr.w	r3, r3, #3
 800a440:	b29a      	uxth	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	835a      	strh	r2, [r3, #26]
 800a446:	e006      	b.n	800a456 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	8b5b      	ldrh	r3, [r3, #26]
 800a44c:	f023 0303 	bic.w	r3, r3, #3
 800a450:	b29a      	uxth	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a456:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd90      	pop	{r4, r7, pc}
 800a462:	bf00      	nop
 800a464:	0800f578 	.word	0x0800f578
 800a468:	0800fd34 	.word	0x0800fd34
 800a46c:	0800f5cc 	.word	0x0800f5cc

0800a470 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a470:	b590      	push	{r4, r7, lr}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a478:	2300      	movs	r3, #0
 800a47a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d106      	bne.n	800a490 <tcp_keepalive+0x20>
 800a482:	4b18      	ldr	r3, [pc, #96]	@ (800a4e4 <tcp_keepalive+0x74>)
 800a484:	f640 0224 	movw	r2, #2084	@ 0x824
 800a488:	4917      	ldr	r1, [pc, #92]	@ (800a4e8 <tcp_keepalive+0x78>)
 800a48a:	4818      	ldr	r0, [pc, #96]	@ (800a4ec <tcp_keepalive+0x7c>)
 800a48c:	f002 fe04 	bl	800d098 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a490:	7dfb      	ldrb	r3, [r7, #23]
 800a492:	b29c      	uxth	r4, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a498:	3b01      	subs	r3, #1
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7f9 f9cd 	bl	800383a <lwip_htonl>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff fe68 	bl	800a17c <tcp_output_alloc_header>
 800a4ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d102      	bne.n	800a4ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b8:	e010      	b.n	800a4dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	6939      	ldr	r1, [r7, #16]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7ff fe99 	bl	800a1f8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	6939      	ldr	r1, [r7, #16]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7ff fed0 	bl	800a274 <tcp_output_control_segment>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a4d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	371c      	adds	r7, #28
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd90      	pop	{r4, r7, pc}
 800a4e4:	0800f578 	.word	0x0800f578
 800a4e8:	0800fd54 	.word	0x0800fd54
 800a4ec:	0800f5cc 	.word	0x0800f5cc

0800a4f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a4f0:	b590      	push	{r4, r7, lr}
 800a4f2:	b08b      	sub	sp, #44	@ 0x2c
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d106      	bne.n	800a512 <tcp_zero_window_probe+0x22>
 800a504:	4b4c      	ldr	r3, [pc, #304]	@ (800a638 <tcp_zero_window_probe+0x148>)
 800a506:	f640 024f 	movw	r2, #2127	@ 0x84f
 800a50a:	494c      	ldr	r1, [pc, #304]	@ (800a63c <tcp_zero_window_probe+0x14c>)
 800a50c:	484c      	ldr	r0, [pc, #304]	@ (800a640 <tcp_zero_window_probe+0x150>)
 800a50e:	f002 fdc3 	bl	800d098 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a516:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a518:	6a3b      	ldr	r3, [r7, #32]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	e086      	b.n	800a630 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800a528:	2bff      	cmp	r3, #255	@ 0xff
 800a52a:	d007      	beq.n	800a53c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800a532:	3301      	adds	r3, #1
 800a534:	b2da      	uxtb	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	899b      	ldrh	r3, [r3, #12]
 800a542:	b29b      	uxth	r3, r3
 800a544:	4618      	mov	r0, r3
 800a546:	f7f9 f963 	bl	8003810 <lwip_htons>
 800a54a:	4603      	mov	r3, r0
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	f003 0301 	and.w	r3, r3, #1
 800a552:	2b00      	cmp	r3, #0
 800a554:	d005      	beq.n	800a562 <tcp_zero_window_probe+0x72>
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	891b      	ldrh	r3, [r3, #8]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <tcp_zero_window_probe+0x72>
 800a55e:	2301      	movs	r3, #1
 800a560:	e000      	b.n	800a564 <tcp_zero_window_probe+0x74>
 800a562:	2300      	movs	r3, #0
 800a564:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a566:	7ffb      	ldrb	r3, [r7, #31]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bf0c      	ite	eq
 800a56c:	2301      	moveq	r3, #1
 800a56e:	2300      	movne	r3, #0
 800a570:	b2db      	uxtb	r3, r3
 800a572:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a578:	b299      	uxth	r1, r3
 800a57a:	6a3b      	ldr	r3, [r7, #32]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	8bba      	ldrh	r2, [r7, #28]
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff fdfa 	bl	800a17c <tcp_output_alloc_header>
 800a588:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d102      	bne.n	800a596 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a590:	f04f 33ff 	mov.w	r3, #4294967295
 800a594:	e04c      	b.n	800a630 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a59c:	7ffb      	ldrb	r3, [r7, #31]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d011      	beq.n	800a5c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	899b      	ldrh	r3, [r3, #12]
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	b21b      	sxth	r3, r3
 800a5aa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a5ae:	b21c      	sxth	r4, r3
 800a5b0:	2011      	movs	r0, #17
 800a5b2:	f7f9 f92d 	bl	8003810 <lwip_htons>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	b21b      	sxth	r3, r3
 800a5ba:	4323      	orrs	r3, r4
 800a5bc:	b21b      	sxth	r3, r3
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	819a      	strh	r2, [r3, #12]
 800a5c4:	e010      	b.n	800a5e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	3314      	adds	r3, #20
 800a5cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	6858      	ldr	r0, [r3, #4]
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	891a      	ldrh	r2, [r3, #8]
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	891b      	ldrh	r3, [r3, #8]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	6939      	ldr	r1, [r7, #16]
 800a5e4:	f7fa fe56 	bl	8005294 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7f9 f923 	bl	800383a <lwip_htonl>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	da02      	bge.n	800a60c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a60c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a610:	2200      	movs	r2, #0
 800a612:	69b9      	ldr	r1, [r7, #24]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f7ff fdef 	bl	800a1f8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3304      	adds	r3, #4
 800a620:	69b9      	ldr	r1, [r7, #24]
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7ff fe26 	bl	800a274 <tcp_output_control_segment>
 800a628:	4603      	mov	r3, r0
 800a62a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a62c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a630:	4618      	mov	r0, r3
 800a632:	372c      	adds	r7, #44	@ 0x2c
 800a634:	46bd      	mov	sp, r7
 800a636:	bd90      	pop	{r4, r7, pc}
 800a638:	0800f578 	.word	0x0800f578
 800a63c:	0800fd70 	.word	0x0800fd70
 800a640:	0800f5cc 	.word	0x0800f5cc

0800a644 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a64c:	f7fa ff10 	bl	8005470 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a650:	4b0a      	ldr	r3, [pc, #40]	@ (800a67c <tcpip_tcp_timer+0x38>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d103      	bne.n	800a660 <tcpip_tcp_timer+0x1c>
 800a658:	4b09      	ldr	r3, [pc, #36]	@ (800a680 <tcpip_tcp_timer+0x3c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d005      	beq.n	800a66c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a660:	2200      	movs	r2, #0
 800a662:	4908      	ldr	r1, [pc, #32]	@ (800a684 <tcpip_tcp_timer+0x40>)
 800a664:	20fa      	movs	r0, #250	@ 0xfa
 800a666:	f000 f8f3 	bl	800a850 <sys_timeout>
 800a66a:	e003      	b.n	800a674 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a66c:	4b06      	ldr	r3, [pc, #24]	@ (800a688 <tcpip_tcp_timer+0x44>)
 800a66e:	2200      	movs	r2, #0
 800a670:	601a      	str	r2, [r3, #0]
  }
}
 800a672:	bf00      	nop
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	200081c0 	.word	0x200081c0
 800a680:	200081c4 	.word	0x200081c4
 800a684:	0800a645 	.word	0x0800a645
 800a688:	2000820c 	.word	0x2000820c

0800a68c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a690:	4b0a      	ldr	r3, [pc, #40]	@ (800a6bc <tcp_timer_needed+0x30>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10f      	bne.n	800a6b8 <tcp_timer_needed+0x2c>
 800a698:	4b09      	ldr	r3, [pc, #36]	@ (800a6c0 <tcp_timer_needed+0x34>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d103      	bne.n	800a6a8 <tcp_timer_needed+0x1c>
 800a6a0:	4b08      	ldr	r3, [pc, #32]	@ (800a6c4 <tcp_timer_needed+0x38>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d007      	beq.n	800a6b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a6a8:	4b04      	ldr	r3, [pc, #16]	@ (800a6bc <tcp_timer_needed+0x30>)
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	4905      	ldr	r1, [pc, #20]	@ (800a6c8 <tcp_timer_needed+0x3c>)
 800a6b2:	20fa      	movs	r0, #250	@ 0xfa
 800a6b4:	f000 f8cc 	bl	800a850 <sys_timeout>
  }
}
 800a6b8:	bf00      	nop
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	2000820c 	.word	0x2000820c
 800a6c0:	200081c0 	.word	0x200081c0
 800a6c4:	200081c4 	.word	0x200081c4
 800a6c8:	0800a645 	.word	0x0800a645

0800a6cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a6d8:	2005      	movs	r0, #5
 800a6da:	f7f9 fd0f 	bl	80040fc <memp_malloc>
 800a6de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d109      	bne.n	800a6fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d151      	bne.n	800a790 <sys_timeout_abs+0xc4>
 800a6ec:	4b2a      	ldr	r3, [pc, #168]	@ (800a798 <sys_timeout_abs+0xcc>)
 800a6ee:	22be      	movs	r2, #190	@ 0xbe
 800a6f0:	492a      	ldr	r1, [pc, #168]	@ (800a79c <sys_timeout_abs+0xd0>)
 800a6f2:	482b      	ldr	r0, [pc, #172]	@ (800a7a0 <sys_timeout_abs+0xd4>)
 800a6f4:	f002 fcd0 	bl	800d098 <iprintf>
    return;
 800a6f8:	e04a      	b.n	800a790 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a712:	4b24      	ldr	r3, [pc, #144]	@ (800a7a4 <sys_timeout_abs+0xd8>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d103      	bne.n	800a722 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800a71a:	4a22      	ldr	r2, [pc, #136]	@ (800a7a4 <sys_timeout_abs+0xd8>)
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	6013      	str	r3, [r2, #0]
    return;
 800a720:	e037      	b.n	800a792 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	685a      	ldr	r2, [r3, #4]
 800a726:	4b1f      	ldr	r3, [pc, #124]	@ (800a7a4 <sys_timeout_abs+0xd8>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	0fdb      	lsrs	r3, r3, #31
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d007      	beq.n	800a74a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800a73a:	4b1a      	ldr	r3, [pc, #104]	@ (800a7a4 <sys_timeout_abs+0xd8>)
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a742:	4a18      	ldr	r2, [pc, #96]	@ (800a7a4 <sys_timeout_abs+0xd8>)
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	e023      	b.n	800a792 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a74a:	4b16      	ldr	r3, [pc, #88]	@ (800a7a4 <sys_timeout_abs+0xd8>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	617b      	str	r3, [r7, #20]
 800a750:	e01a      	b.n	800a788 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00b      	beq.n	800a772 <sys_timeout_abs+0xa6>
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	685a      	ldr	r2, [r3, #4]
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	0fdb      	lsrs	r3, r3, #31
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d007      	beq.n	800a782 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	601a      	str	r2, [r3, #0]
        break;
 800a780:	e007      	b.n	800a792 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1e1      	bne.n	800a752 <sys_timeout_abs+0x86>
 800a78e:	e000      	b.n	800a792 <sys_timeout_abs+0xc6>
    return;
 800a790:	bf00      	nop
      }
    }
  }
}
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	0800fd94 	.word	0x0800fd94
 800a79c:	0800fdc8 	.word	0x0800fdc8
 800a7a0:	0800fe08 	.word	0x0800fe08
 800a7a4:	20008204 	.word	0x20008204

0800a7a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	4798      	blx	r3

  now = sys_now();
 800a7ba:	f7f8 fe31 	bl	8003420 <sys_now>
 800a7be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	4b0f      	ldr	r3, [pc, #60]	@ (800a804 <lwip_cyclic_timer+0x5c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	0fdb      	lsrs	r3, r3, #31
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d009      	beq.n	800a7f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	4907      	ldr	r1, [pc, #28]	@ (800a808 <lwip_cyclic_timer+0x60>)
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7ff ff6e 	bl	800a6cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800a7f0:	e004      	b.n	800a7fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	4904      	ldr	r1, [pc, #16]	@ (800a808 <lwip_cyclic_timer+0x60>)
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f7ff ff68 	bl	800a6cc <sys_timeout_abs>
}
 800a7fc:	bf00      	nop
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	20008208 	.word	0x20008208
 800a808:	0800a7a9 	.word	0x0800a7a9

0800a80c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a812:	2301      	movs	r3, #1
 800a814:	607b      	str	r3, [r7, #4]
 800a816:	e00e      	b.n	800a836 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a818:	4a0b      	ldr	r2, [pc, #44]	@ (800a848 <sys_timeouts_init+0x3c>)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	00db      	lsls	r3, r3, #3
 800a824:	4a08      	ldr	r2, [pc, #32]	@ (800a848 <sys_timeouts_init+0x3c>)
 800a826:	4413      	add	r3, r2
 800a828:	461a      	mov	r2, r3
 800a82a:	4908      	ldr	r1, [pc, #32]	@ (800a84c <sys_timeouts_init+0x40>)
 800a82c:	f000 f810 	bl	800a850 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3301      	adds	r3, #1
 800a834:	607b      	str	r3, [r7, #4]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b02      	cmp	r3, #2
 800a83a:	d9ed      	bls.n	800a818 <sys_timeouts_init+0xc>
  }
}
 800a83c:	bf00      	nop
 800a83e:	bf00      	nop
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	08010604 	.word	0x08010604
 800a84c:	0800a7a9 	.word	0x0800a7a9

0800a850 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a862:	d306      	bcc.n	800a872 <sys_timeout+0x22>
 800a864:	4b0a      	ldr	r3, [pc, #40]	@ (800a890 <sys_timeout+0x40>)
 800a866:	f240 1229 	movw	r2, #297	@ 0x129
 800a86a:	490a      	ldr	r1, [pc, #40]	@ (800a894 <sys_timeout+0x44>)
 800a86c:	480a      	ldr	r0, [pc, #40]	@ (800a898 <sys_timeout+0x48>)
 800a86e:	f002 fc13 	bl	800d098 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a872:	f7f8 fdd5 	bl	8003420 <sys_now>
 800a876:	4602      	mov	r2, r0
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4413      	add	r3, r2
 800a87c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	68b9      	ldr	r1, [r7, #8]
 800a882:	6978      	ldr	r0, [r7, #20]
 800a884:	f7ff ff22 	bl	800a6cc <sys_timeout_abs>
#endif
}
 800a888:	bf00      	nop
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	0800fd94 	.word	0x0800fd94
 800a894:	0800fe30 	.word	0x0800fe30
 800a898:	0800fe08 	.word	0x0800fe08

0800a89c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800a8a2:	f7f8 fdbd 	bl	8003420 <sys_now>
 800a8a6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800a8a8:	4b1a      	ldr	r3, [pc, #104]	@ (800a914 <sys_check_timeouts+0x78>)
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <sys_check_timeouts+0x1a>
 800a8b2:	f7f9 ffcb 	bl	800484c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800a8b6:	4b18      	ldr	r3, [pc, #96]	@ (800a918 <sys_check_timeouts+0x7c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d022      	beq.n	800a908 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	0fdb      	lsrs	r3, r3, #31
 800a8cc:	f003 0301 	and.w	r3, r3, #1
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d11a      	bne.n	800a90c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a0f      	ldr	r2, [pc, #60]	@ (800a918 <sys_check_timeouts+0x7c>)
 800a8dc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	4a0b      	ldr	r2, [pc, #44]	@ (800a91c <sys_check_timeouts+0x80>)
 800a8f0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a8f2:	68b9      	ldr	r1, [r7, #8]
 800a8f4:	2005      	movs	r0, #5
 800a8f6:	f7f9 fc71 	bl	80041dc <memp_free>
    if (handler != NULL) {
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d0d3      	beq.n	800a8a8 <sys_check_timeouts+0xc>
      handler(arg);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6838      	ldr	r0, [r7, #0]
 800a904:	4798      	blx	r3
  do {
 800a906:	e7cf      	b.n	800a8a8 <sys_check_timeouts+0xc>
      return;
 800a908:	bf00      	nop
 800a90a:	e000      	b.n	800a90e <sys_check_timeouts+0x72>
      return;
 800a90c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	200081b1 	.word	0x200081b1
 800a918:	20008204 	.word	0x20008204
 800a91c:	20008208 	.word	0x20008208

0800a920 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a928:	4915      	ldr	r1, [pc, #84]	@ (800a980 <etharp_free_entry+0x60>)
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	4613      	mov	r3, r2
 800a92e:	005b      	lsls	r3, r3, #1
 800a930:	4413      	add	r3, r2
 800a932:	00db      	lsls	r3, r3, #3
 800a934:	440b      	add	r3, r1
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d013      	beq.n	800a964 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a93c:	4910      	ldr	r1, [pc, #64]	@ (800a980 <etharp_free_entry+0x60>)
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	4613      	mov	r3, r2
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	4413      	add	r3, r2
 800a946:	00db      	lsls	r3, r3, #3
 800a948:	440b      	add	r3, r1
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7fa fab7 	bl	8004ec0 <pbuf_free>
    arp_table[i].q = NULL;
 800a952:	490b      	ldr	r1, [pc, #44]	@ (800a980 <etharp_free_entry+0x60>)
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	4613      	mov	r3, r2
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	4413      	add	r3, r2
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	440b      	add	r3, r1
 800a960:	2200      	movs	r2, #0
 800a962:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a964:	4906      	ldr	r1, [pc, #24]	@ (800a980 <etharp_free_entry+0x60>)
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	4613      	mov	r3, r2
 800a96a:	005b      	lsls	r3, r3, #1
 800a96c:	4413      	add	r3, r2
 800a96e:	00db      	lsls	r3, r3, #3
 800a970:	440b      	add	r3, r1
 800a972:	3314      	adds	r3, #20
 800a974:	2200      	movs	r2, #0
 800a976:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a978:	bf00      	nop
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	20008210 	.word	0x20008210

0800a984 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a98a:	2300      	movs	r3, #0
 800a98c:	607b      	str	r3, [r7, #4]
 800a98e:	e096      	b.n	800aabe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a990:	494f      	ldr	r1, [pc, #316]	@ (800aad0 <etharp_tmr+0x14c>)
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	4613      	mov	r3, r2
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	4413      	add	r3, r2
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	440b      	add	r3, r1
 800a99e:	3314      	adds	r3, #20
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800a9a4:	78fb      	ldrb	r3, [r7, #3]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 8086 	beq.w	800aab8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800a9ac:	4948      	ldr	r1, [pc, #288]	@ (800aad0 <etharp_tmr+0x14c>)
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	005b      	lsls	r3, r3, #1
 800a9b4:	4413      	add	r3, r2
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	440b      	add	r3, r1
 800a9ba:	3312      	adds	r3, #18
 800a9bc:	881b      	ldrh	r3, [r3, #0]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	b298      	uxth	r0, r3
 800a9c2:	4943      	ldr	r1, [pc, #268]	@ (800aad0 <etharp_tmr+0x14c>)
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	4413      	add	r3, r2
 800a9cc:	00db      	lsls	r3, r3, #3
 800a9ce:	440b      	add	r3, r1
 800a9d0:	3312      	adds	r3, #18
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a9d6:	493e      	ldr	r1, [pc, #248]	@ (800aad0 <etharp_tmr+0x14c>)
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	005b      	lsls	r3, r3, #1
 800a9de:	4413      	add	r3, r2
 800a9e0:	00db      	lsls	r3, r3, #3
 800a9e2:	440b      	add	r3, r1
 800a9e4:	3312      	adds	r3, #18
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800a9ec:	d215      	bcs.n	800aa1a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a9ee:	4938      	ldr	r1, [pc, #224]	@ (800aad0 <etharp_tmr+0x14c>)
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	005b      	lsls	r3, r3, #1
 800a9f6:	4413      	add	r3, r2
 800a9f8:	00db      	lsls	r3, r3, #3
 800a9fa:	440b      	add	r3, r1
 800a9fc:	3314      	adds	r3, #20
 800a9fe:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d10e      	bne.n	800aa22 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800aa04:	4932      	ldr	r1, [pc, #200]	@ (800aad0 <etharp_tmr+0x14c>)
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	005b      	lsls	r3, r3, #1
 800aa0c:	4413      	add	r3, r2
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	440b      	add	r3, r1
 800aa12:	3312      	adds	r3, #18
 800aa14:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	d903      	bls.n	800aa22 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff ff80 	bl	800a920 <etharp_free_entry>
 800aa20:	e04a      	b.n	800aab8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800aa22:	492b      	ldr	r1, [pc, #172]	@ (800aad0 <etharp_tmr+0x14c>)
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	4613      	mov	r3, r2
 800aa28:	005b      	lsls	r3, r3, #1
 800aa2a:	4413      	add	r3, r2
 800aa2c:	00db      	lsls	r3, r3, #3
 800aa2e:	440b      	add	r3, r1
 800aa30:	3314      	adds	r3, #20
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d10a      	bne.n	800aa4e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800aa38:	4925      	ldr	r1, [pc, #148]	@ (800aad0 <etharp_tmr+0x14c>)
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	005b      	lsls	r3, r3, #1
 800aa40:	4413      	add	r3, r2
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	440b      	add	r3, r1
 800aa46:	3314      	adds	r3, #20
 800aa48:	2204      	movs	r2, #4
 800aa4a:	701a      	strb	r2, [r3, #0]
 800aa4c:	e034      	b.n	800aab8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800aa4e:	4920      	ldr	r1, [pc, #128]	@ (800aad0 <etharp_tmr+0x14c>)
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	4613      	mov	r3, r2
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	4413      	add	r3, r2
 800aa58:	00db      	lsls	r3, r3, #3
 800aa5a:	440b      	add	r3, r1
 800aa5c:	3314      	adds	r3, #20
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2b04      	cmp	r3, #4
 800aa62:	d10a      	bne.n	800aa7a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800aa64:	491a      	ldr	r1, [pc, #104]	@ (800aad0 <etharp_tmr+0x14c>)
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	4413      	add	r3, r2
 800aa6e:	00db      	lsls	r3, r3, #3
 800aa70:	440b      	add	r3, r1
 800aa72:	3314      	adds	r3, #20
 800aa74:	2202      	movs	r2, #2
 800aa76:	701a      	strb	r2, [r3, #0]
 800aa78:	e01e      	b.n	800aab8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800aa7a:	4915      	ldr	r1, [pc, #84]	@ (800aad0 <etharp_tmr+0x14c>)
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	005b      	lsls	r3, r3, #1
 800aa82:	4413      	add	r3, r2
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	440b      	add	r3, r1
 800aa88:	3314      	adds	r3, #20
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d113      	bne.n	800aab8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800aa90:	490f      	ldr	r1, [pc, #60]	@ (800aad0 <etharp_tmr+0x14c>)
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	4613      	mov	r3, r2
 800aa96:	005b      	lsls	r3, r3, #1
 800aa98:	4413      	add	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	440b      	add	r3, r1
 800aa9e:	3308      	adds	r3, #8
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	005b      	lsls	r3, r3, #1
 800aaa8:	4413      	add	r3, r2
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	4a08      	ldr	r2, [pc, #32]	@ (800aad0 <etharp_tmr+0x14c>)
 800aaae:	4413      	add	r3, r2
 800aab0:	3304      	adds	r3, #4
 800aab2:	4619      	mov	r1, r3
 800aab4:	f000 fe6e 	bl	800b794 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	3301      	adds	r3, #1
 800aabc:	607b      	str	r3, [r7, #4]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2b09      	cmp	r3, #9
 800aac2:	f77f af65 	ble.w	800a990 <etharp_tmr+0xc>
      }
    }
  }
}
 800aac6:	bf00      	nop
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	20008210 	.word	0x20008210

0800aad4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b08a      	sub	sp, #40	@ 0x28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	460b      	mov	r3, r1
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800aae2:	230a      	movs	r3, #10
 800aae4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800aae6:	230a      	movs	r3, #10
 800aae8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800aaea:	230a      	movs	r3, #10
 800aaec:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800aaf2:	230a      	movs	r3, #10
 800aaf4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	83bb      	strh	r3, [r7, #28]
 800aafa:	2300      	movs	r3, #0
 800aafc:	837b      	strh	r3, [r7, #26]
 800aafe:	2300      	movs	r3, #0
 800ab00:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ab02:	2300      	movs	r3, #0
 800ab04:	843b      	strh	r3, [r7, #32]
 800ab06:	e0ae      	b.n	800ac66 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ab08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ab0c:	49a6      	ldr	r1, [pc, #664]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800ab0e:	4613      	mov	r3, r2
 800ab10:	005b      	lsls	r3, r3, #1
 800ab12:	4413      	add	r3, r2
 800ab14:	00db      	lsls	r3, r3, #3
 800ab16:	440b      	add	r3, r1
 800ab18:	3314      	adds	r3, #20
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ab1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ab22:	2b0a      	cmp	r3, #10
 800ab24:	d105      	bne.n	800ab32 <etharp_find_entry+0x5e>
 800ab26:	7dfb      	ldrb	r3, [r7, #23]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d102      	bne.n	800ab32 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ab2c:	8c3b      	ldrh	r3, [r7, #32]
 800ab2e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ab30:	e095      	b.n	800ac5e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f000 8092 	beq.w	800ac5e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d009      	beq.n	800ab54 <etharp_find_entry+0x80>
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d806      	bhi.n	800ab54 <etharp_find_entry+0x80>
 800ab46:	4b99      	ldr	r3, [pc, #612]	@ (800adac <etharp_find_entry+0x2d8>)
 800ab48:	f240 1223 	movw	r2, #291	@ 0x123
 800ab4c:	4998      	ldr	r1, [pc, #608]	@ (800adb0 <etharp_find_entry+0x2dc>)
 800ab4e:	4899      	ldr	r0, [pc, #612]	@ (800adb4 <etharp_find_entry+0x2e0>)
 800ab50:	f002 faa2 	bl	800d098 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d020      	beq.n	800ab9c <etharp_find_entry+0xc8>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6819      	ldr	r1, [r3, #0]
 800ab5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ab62:	4891      	ldr	r0, [pc, #580]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800ab64:	4613      	mov	r3, r2
 800ab66:	005b      	lsls	r3, r3, #1
 800ab68:	4413      	add	r3, r2
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	4403      	add	r3, r0
 800ab6e:	3304      	adds	r3, #4
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4299      	cmp	r1, r3
 800ab74:	d112      	bne.n	800ab9c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00c      	beq.n	800ab96 <etharp_find_entry+0xc2>
 800ab7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ab80:	4989      	ldr	r1, [pc, #548]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800ab82:	4613      	mov	r3, r2
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	4413      	add	r3, r2
 800ab88:	00db      	lsls	r3, r3, #3
 800ab8a:	440b      	add	r3, r1
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d102      	bne.n	800ab9c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ab96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ab9a:	e100      	b.n	800ad9e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ab9c:	7dfb      	ldrb	r3, [r7, #23]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d140      	bne.n	800ac24 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800aba2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aba6:	4980      	ldr	r1, [pc, #512]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800aba8:	4613      	mov	r3, r2
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	4413      	add	r3, r2
 800abae:	00db      	lsls	r3, r3, #3
 800abb0:	440b      	add	r3, r1
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d01a      	beq.n	800abee <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800abb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800abbc:	497a      	ldr	r1, [pc, #488]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800abbe:	4613      	mov	r3, r2
 800abc0:	005b      	lsls	r3, r3, #1
 800abc2:	4413      	add	r3, r2
 800abc4:	00db      	lsls	r3, r3, #3
 800abc6:	440b      	add	r3, r1
 800abc8:	3312      	adds	r3, #18
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	8bba      	ldrh	r2, [r7, #28]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d845      	bhi.n	800ac5e <etharp_find_entry+0x18a>
            old_queue = i;
 800abd2:	8c3b      	ldrh	r3, [r7, #32]
 800abd4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800abd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800abda:	4973      	ldr	r1, [pc, #460]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800abdc:	4613      	mov	r3, r2
 800abde:	005b      	lsls	r3, r3, #1
 800abe0:	4413      	add	r3, r2
 800abe2:	00db      	lsls	r3, r3, #3
 800abe4:	440b      	add	r3, r1
 800abe6:	3312      	adds	r3, #18
 800abe8:	881b      	ldrh	r3, [r3, #0]
 800abea:	83bb      	strh	r3, [r7, #28]
 800abec:	e037      	b.n	800ac5e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800abee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800abf2:	496d      	ldr	r1, [pc, #436]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800abf4:	4613      	mov	r3, r2
 800abf6:	005b      	lsls	r3, r3, #1
 800abf8:	4413      	add	r3, r2
 800abfa:	00db      	lsls	r3, r3, #3
 800abfc:	440b      	add	r3, r1
 800abfe:	3312      	adds	r3, #18
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	8b7a      	ldrh	r2, [r7, #26]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d82a      	bhi.n	800ac5e <etharp_find_entry+0x18a>
            old_pending = i;
 800ac08:	8c3b      	ldrh	r3, [r7, #32]
 800ac0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800ac0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ac10:	4965      	ldr	r1, [pc, #404]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800ac12:	4613      	mov	r3, r2
 800ac14:	005b      	lsls	r3, r3, #1
 800ac16:	4413      	add	r3, r2
 800ac18:	00db      	lsls	r3, r3, #3
 800ac1a:	440b      	add	r3, r1
 800ac1c:	3312      	adds	r3, #18
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	837b      	strh	r3, [r7, #26]
 800ac22:	e01c      	b.n	800ac5e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ac24:	7dfb      	ldrb	r3, [r7, #23]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d919      	bls.n	800ac5e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ac2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ac2e:	495e      	ldr	r1, [pc, #376]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800ac30:	4613      	mov	r3, r2
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	4413      	add	r3, r2
 800ac36:	00db      	lsls	r3, r3, #3
 800ac38:	440b      	add	r3, r1
 800ac3a:	3312      	adds	r3, #18
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	8b3a      	ldrh	r2, [r7, #24]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d80c      	bhi.n	800ac5e <etharp_find_entry+0x18a>
            old_stable = i;
 800ac44:	8c3b      	ldrh	r3, [r7, #32]
 800ac46:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800ac48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ac4c:	4956      	ldr	r1, [pc, #344]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800ac4e:	4613      	mov	r3, r2
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	4413      	add	r3, r2
 800ac54:	00db      	lsls	r3, r3, #3
 800ac56:	440b      	add	r3, r1
 800ac58:	3312      	adds	r3, #18
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ac5e:	8c3b      	ldrh	r3, [r7, #32]
 800ac60:	3301      	adds	r3, #1
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	843b      	strh	r3, [r7, #32]
 800ac66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ac6a:	2b09      	cmp	r3, #9
 800ac6c:	f77f af4c 	ble.w	800ab08 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ac70:	7afb      	ldrb	r3, [r7, #11]
 800ac72:	f003 0302 	and.w	r3, r3, #2
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d108      	bne.n	800ac8c <etharp_find_entry+0x1b8>
 800ac7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ac7e:	2b0a      	cmp	r3, #10
 800ac80:	d107      	bne.n	800ac92 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ac82:	7afb      	ldrb	r3, [r7, #11]
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d102      	bne.n	800ac92 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ac8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac90:	e085      	b.n	800ad9e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ac92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ac96:	2b09      	cmp	r3, #9
 800ac98:	dc02      	bgt.n	800aca0 <etharp_find_entry+0x1cc>
    i = empty;
 800ac9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ac9c:	843b      	strh	r3, [r7, #32]
 800ac9e:	e039      	b.n	800ad14 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800aca0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800aca4:	2b09      	cmp	r3, #9
 800aca6:	dc14      	bgt.n	800acd2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800aca8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acaa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800acac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800acb0:	493d      	ldr	r1, [pc, #244]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800acb2:	4613      	mov	r3, r2
 800acb4:	005b      	lsls	r3, r3, #1
 800acb6:	4413      	add	r3, r2
 800acb8:	00db      	lsls	r3, r3, #3
 800acba:	440b      	add	r3, r1
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d018      	beq.n	800acf4 <etharp_find_entry+0x220>
 800acc2:	4b3a      	ldr	r3, [pc, #232]	@ (800adac <etharp_find_entry+0x2d8>)
 800acc4:	f240 126d 	movw	r2, #365	@ 0x16d
 800acc8:	493b      	ldr	r1, [pc, #236]	@ (800adb8 <etharp_find_entry+0x2e4>)
 800acca:	483a      	ldr	r0, [pc, #232]	@ (800adb4 <etharp_find_entry+0x2e0>)
 800accc:	f002 f9e4 	bl	800d098 <iprintf>
 800acd0:	e010      	b.n	800acf4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800acd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800acd6:	2b09      	cmp	r3, #9
 800acd8:	dc02      	bgt.n	800ace0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800acda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800acdc:	843b      	strh	r3, [r7, #32]
 800acde:	e009      	b.n	800acf4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ace0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ace4:	2b09      	cmp	r3, #9
 800ace6:	dc02      	bgt.n	800acee <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ace8:	8bfb      	ldrh	r3, [r7, #30]
 800acea:	843b      	strh	r3, [r7, #32]
 800acec:	e002      	b.n	800acf4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800acee:	f04f 33ff 	mov.w	r3, #4294967295
 800acf2:	e054      	b.n	800ad9e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800acf4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800acf8:	2b09      	cmp	r3, #9
 800acfa:	dd06      	ble.n	800ad0a <etharp_find_entry+0x236>
 800acfc:	4b2b      	ldr	r3, [pc, #172]	@ (800adac <etharp_find_entry+0x2d8>)
 800acfe:	f240 127f 	movw	r2, #383	@ 0x17f
 800ad02:	492e      	ldr	r1, [pc, #184]	@ (800adbc <etharp_find_entry+0x2e8>)
 800ad04:	482b      	ldr	r0, [pc, #172]	@ (800adb4 <etharp_find_entry+0x2e0>)
 800ad06:	f002 f9c7 	bl	800d098 <iprintf>
    etharp_free_entry(i);
 800ad0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff fe06 	bl	800a920 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ad14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ad18:	2b09      	cmp	r3, #9
 800ad1a:	dd06      	ble.n	800ad2a <etharp_find_entry+0x256>
 800ad1c:	4b23      	ldr	r3, [pc, #140]	@ (800adac <etharp_find_entry+0x2d8>)
 800ad1e:	f240 1283 	movw	r2, #387	@ 0x183
 800ad22:	4926      	ldr	r1, [pc, #152]	@ (800adbc <etharp_find_entry+0x2e8>)
 800ad24:	4823      	ldr	r0, [pc, #140]	@ (800adb4 <etharp_find_entry+0x2e0>)
 800ad26:	f002 f9b7 	bl	800d098 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ad2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ad2e:	491e      	ldr	r1, [pc, #120]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800ad30:	4613      	mov	r3, r2
 800ad32:	005b      	lsls	r3, r3, #1
 800ad34:	4413      	add	r3, r2
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	440b      	add	r3, r1
 800ad3a:	3314      	adds	r3, #20
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d006      	beq.n	800ad50 <etharp_find_entry+0x27c>
 800ad42:	4b1a      	ldr	r3, [pc, #104]	@ (800adac <etharp_find_entry+0x2d8>)
 800ad44:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800ad48:	491d      	ldr	r1, [pc, #116]	@ (800adc0 <etharp_find_entry+0x2ec>)
 800ad4a:	481a      	ldr	r0, [pc, #104]	@ (800adb4 <etharp_find_entry+0x2e0>)
 800ad4c:	f002 f9a4 	bl	800d098 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00b      	beq.n	800ad6e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ad56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6819      	ldr	r1, [r3, #0]
 800ad5e:	4812      	ldr	r0, [pc, #72]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800ad60:	4613      	mov	r3, r2
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	4413      	add	r3, r2
 800ad66:	00db      	lsls	r3, r3, #3
 800ad68:	4403      	add	r3, r0
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ad6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ad72:	490d      	ldr	r1, [pc, #52]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800ad74:	4613      	mov	r3, r2
 800ad76:	005b      	lsls	r3, r3, #1
 800ad78:	4413      	add	r3, r2
 800ad7a:	00db      	lsls	r3, r3, #3
 800ad7c:	440b      	add	r3, r1
 800ad7e:	3312      	adds	r3, #18
 800ad80:	2200      	movs	r2, #0
 800ad82:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ad84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ad88:	4907      	ldr	r1, [pc, #28]	@ (800ada8 <etharp_find_entry+0x2d4>)
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	005b      	lsls	r3, r3, #1
 800ad8e:	4413      	add	r3, r2
 800ad90:	00db      	lsls	r3, r3, #3
 800ad92:	440b      	add	r3, r1
 800ad94:	3308      	adds	r3, #8
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ad9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3728      	adds	r7, #40	@ 0x28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20008210 	.word	0x20008210
 800adac:	0800fe7c 	.word	0x0800fe7c
 800adb0:	0800feb4 	.word	0x0800feb4
 800adb4:	0800fef4 	.word	0x0800fef4
 800adb8:	0800ff1c 	.word	0x0800ff1c
 800adbc:	0800ff34 	.word	0x0800ff34
 800adc0:	0800ff48 	.word	0x0800ff48

0800adc4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b088      	sub	sp, #32
 800adc8:	af02      	add	r7, sp, #8
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800add8:	2b06      	cmp	r3, #6
 800adda:	d006      	beq.n	800adea <etharp_update_arp_entry+0x26>
 800addc:	4b48      	ldr	r3, [pc, #288]	@ (800af00 <etharp_update_arp_entry+0x13c>)
 800adde:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800ade2:	4948      	ldr	r1, [pc, #288]	@ (800af04 <etharp_update_arp_entry+0x140>)
 800ade4:	4848      	ldr	r0, [pc, #288]	@ (800af08 <etharp_update_arp_entry+0x144>)
 800ade6:	f002 f957 	bl	800d098 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d012      	beq.n	800ae16 <etharp_update_arp_entry+0x52>
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00e      	beq.n	800ae16 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68f9      	ldr	r1, [r7, #12]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f001 f8f4 	bl	800bfec <ip4_addr_isbroadcast_u32>
 800ae04:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d105      	bne.n	800ae16 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ae12:	2be0      	cmp	r3, #224	@ 0xe0
 800ae14:	d102      	bne.n	800ae1c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ae16:	f06f 030f 	mvn.w	r3, #15
 800ae1a:	e06c      	b.n	800aef6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ae1c:	78fb      	ldrb	r3, [r7, #3]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	4619      	mov	r1, r3
 800ae22:	68b8      	ldr	r0, [r7, #8]
 800ae24:	f7ff fe56 	bl	800aad4 <etharp_find_entry>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ae2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	da02      	bge.n	800ae3a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ae34:	8afb      	ldrh	r3, [r7, #22]
 800ae36:	b25b      	sxtb	r3, r3
 800ae38:	e05d      	b.n	800aef6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ae3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ae3e:	4933      	ldr	r1, [pc, #204]	@ (800af0c <etharp_update_arp_entry+0x148>)
 800ae40:	4613      	mov	r3, r2
 800ae42:	005b      	lsls	r3, r3, #1
 800ae44:	4413      	add	r3, r2
 800ae46:	00db      	lsls	r3, r3, #3
 800ae48:	440b      	add	r3, r1
 800ae4a:	3314      	adds	r3, #20
 800ae4c:	2202      	movs	r2, #2
 800ae4e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ae50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ae54:	492d      	ldr	r1, [pc, #180]	@ (800af0c <etharp_update_arp_entry+0x148>)
 800ae56:	4613      	mov	r3, r2
 800ae58:	005b      	lsls	r3, r3, #1
 800ae5a:	4413      	add	r3, r2
 800ae5c:	00db      	lsls	r3, r3, #3
 800ae5e:	440b      	add	r3, r1
 800ae60:	3308      	adds	r3, #8
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ae66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	4413      	add	r3, r2
 800ae70:	00db      	lsls	r3, r3, #3
 800ae72:	3308      	adds	r3, #8
 800ae74:	4a25      	ldr	r2, [pc, #148]	@ (800af0c <etharp_update_arp_entry+0x148>)
 800ae76:	4413      	add	r3, r2
 800ae78:	3304      	adds	r3, #4
 800ae7a:	2206      	movs	r2, #6
 800ae7c:	6879      	ldr	r1, [r7, #4]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f002 f9e5 	bl	800d24e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ae84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ae88:	4920      	ldr	r1, [pc, #128]	@ (800af0c <etharp_update_arp_entry+0x148>)
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	005b      	lsls	r3, r3, #1
 800ae8e:	4413      	add	r3, r2
 800ae90:	00db      	lsls	r3, r3, #3
 800ae92:	440b      	add	r3, r1
 800ae94:	3312      	adds	r3, #18
 800ae96:	2200      	movs	r2, #0
 800ae98:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ae9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ae9e:	491b      	ldr	r1, [pc, #108]	@ (800af0c <etharp_update_arp_entry+0x148>)
 800aea0:	4613      	mov	r3, r2
 800aea2:	005b      	lsls	r3, r3, #1
 800aea4:	4413      	add	r3, r2
 800aea6:	00db      	lsls	r3, r3, #3
 800aea8:	440b      	add	r3, r1
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d021      	beq.n	800aef4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800aeb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800aeb4:	4915      	ldr	r1, [pc, #84]	@ (800af0c <etharp_update_arp_entry+0x148>)
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	005b      	lsls	r3, r3, #1
 800aeba:	4413      	add	r3, r2
 800aebc:	00db      	lsls	r3, r3, #3
 800aebe:	440b      	add	r3, r1
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800aec4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800aec8:	4910      	ldr	r1, [pc, #64]	@ (800af0c <etharp_update_arp_entry+0x148>)
 800aeca:	4613      	mov	r3, r2
 800aecc:	005b      	lsls	r3, r3, #1
 800aece:	4413      	add	r3, r2
 800aed0:	00db      	lsls	r3, r3, #3
 800aed2:	440b      	add	r3, r1
 800aed4:	2200      	movs	r2, #0
 800aed6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800aede:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6939      	ldr	r1, [r7, #16]
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f001 ff8d 	bl	800ce08 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800aeee:	6938      	ldr	r0, [r7, #16]
 800aef0:	f7f9 ffe6 	bl	8004ec0 <pbuf_free>
  }
  return ERR_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3718      	adds	r7, #24
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	0800fe7c 	.word	0x0800fe7c
 800af04:	0800ff74 	.word	0x0800ff74
 800af08:	0800fef4 	.word	0x0800fef4
 800af0c:	20008210 	.word	0x20008210

0800af10 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e01e      	b.n	800af5c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800af1e:	4913      	ldr	r1, [pc, #76]	@ (800af6c <etharp_cleanup_netif+0x5c>)
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	4613      	mov	r3, r2
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	4413      	add	r3, r2
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	440b      	add	r3, r1
 800af2c:	3314      	adds	r3, #20
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800af32:	7afb      	ldrb	r3, [r7, #11]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00e      	beq.n	800af56 <etharp_cleanup_netif+0x46>
 800af38:	490c      	ldr	r1, [pc, #48]	@ (800af6c <etharp_cleanup_netif+0x5c>)
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	4613      	mov	r3, r2
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	4413      	add	r3, r2
 800af42:	00db      	lsls	r3, r3, #3
 800af44:	440b      	add	r3, r1
 800af46:	3308      	adds	r3, #8
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d102      	bne.n	800af56 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f7ff fce5 	bl	800a920 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	3301      	adds	r3, #1
 800af5a:	60fb      	str	r3, [r7, #12]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2b09      	cmp	r3, #9
 800af60:	dddd      	ble.n	800af1e <etharp_cleanup_netif+0xe>
    }
  }
}
 800af62:	bf00      	nop
 800af64:	bf00      	nop
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	20008210 	.word	0x20008210

0800af70 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800af70:	b5b0      	push	{r4, r5, r7, lr}
 800af72:	b08a      	sub	sp, #40	@ 0x28
 800af74:	af04      	add	r7, sp, #16
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d107      	bne.n	800af90 <etharp_input+0x20>
 800af80:	4b3d      	ldr	r3, [pc, #244]	@ (800b078 <etharp_input+0x108>)
 800af82:	f240 228a 	movw	r2, #650	@ 0x28a
 800af86:	493d      	ldr	r1, [pc, #244]	@ (800b07c <etharp_input+0x10c>)
 800af88:	483d      	ldr	r0, [pc, #244]	@ (800b080 <etharp_input+0x110>)
 800af8a:	f002 f885 	bl	800d098 <iprintf>
 800af8e:	e06f      	b.n	800b070 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afa0:	d10c      	bne.n	800afbc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800afa6:	2b06      	cmp	r3, #6
 800afa8:	d108      	bne.n	800afbc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800afae:	2b04      	cmp	r3, #4
 800afb0:	d104      	bne.n	800afbc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	885b      	ldrh	r3, [r3, #2]
 800afb6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800afb8:	2b08      	cmp	r3, #8
 800afba:	d003      	beq.n	800afc4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7f9 ff7f 	bl	8004ec0 <pbuf_free>
    return;
 800afc2:	e055      	b.n	800b070 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	330e      	adds	r3, #14
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	3318      	adds	r3, #24
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	3304      	adds	r3, #4
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d102      	bne.n	800afe4 <etharp_input+0x74>
    for_us = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	75fb      	strb	r3, [r7, #23]
 800afe2:	e009      	b.n	800aff8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800afe4:	68ba      	ldr	r2, [r7, #8]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	3304      	adds	r3, #4
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	429a      	cmp	r2, r3
 800afee:	bf0c      	ite	eq
 800aff0:	2301      	moveq	r3, #1
 800aff2:	2300      	movne	r3, #0
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	f103 0208 	add.w	r2, r3, #8
 800affe:	7dfb      	ldrb	r3, [r7, #23]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <etharp_input+0x98>
 800b004:	2301      	movs	r3, #1
 800b006:	e000      	b.n	800b00a <etharp_input+0x9a>
 800b008:	2302      	movs	r3, #2
 800b00a:	f107 010c 	add.w	r1, r7, #12
 800b00e:	6838      	ldr	r0, [r7, #0]
 800b010:	f7ff fed8 	bl	800adc4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	88db      	ldrh	r3, [r3, #6]
 800b018:	b29b      	uxth	r3, r3
 800b01a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b01e:	d003      	beq.n	800b028 <etharp_input+0xb8>
 800b020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b024:	d01e      	beq.n	800b064 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b026:	e020      	b.n	800b06a <etharp_input+0xfa>
      if (for_us) {
 800b028:	7dfb      	ldrb	r3, [r7, #23]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d01c      	beq.n	800b068 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b048:	2102      	movs	r1, #2
 800b04a:	9103      	str	r1, [sp, #12]
 800b04c:	f107 010c 	add.w	r1, r7, #12
 800b050:	9102      	str	r1, [sp, #8]
 800b052:	9201      	str	r2, [sp, #4]
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	462b      	mov	r3, r5
 800b058:	4622      	mov	r2, r4
 800b05a:	4601      	mov	r1, r0
 800b05c:	6838      	ldr	r0, [r7, #0]
 800b05e:	f000 faeb 	bl	800b638 <etharp_raw>
      break;
 800b062:	e001      	b.n	800b068 <etharp_input+0xf8>
      break;
 800b064:	bf00      	nop
 800b066:	e000      	b.n	800b06a <etharp_input+0xfa>
      break;
 800b068:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7f9 ff28 	bl	8004ec0 <pbuf_free>
}
 800b070:	3718      	adds	r7, #24
 800b072:	46bd      	mov	sp, r7
 800b074:	bdb0      	pop	{r4, r5, r7, pc}
 800b076:	bf00      	nop
 800b078:	0800fe7c 	.word	0x0800fe7c
 800b07c:	0800ffcc 	.word	0x0800ffcc
 800b080:	0800fef4 	.word	0x0800fef4

0800b084 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af02      	add	r7, sp, #8
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	4613      	mov	r3, r2
 800b090:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b092:	79fa      	ldrb	r2, [r7, #7]
 800b094:	4944      	ldr	r1, [pc, #272]	@ (800b1a8 <etharp_output_to_arp_index+0x124>)
 800b096:	4613      	mov	r3, r2
 800b098:	005b      	lsls	r3, r3, #1
 800b09a:	4413      	add	r3, r2
 800b09c:	00db      	lsls	r3, r3, #3
 800b09e:	440b      	add	r3, r1
 800b0a0:	3314      	adds	r3, #20
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d806      	bhi.n	800b0b6 <etharp_output_to_arp_index+0x32>
 800b0a8:	4b40      	ldr	r3, [pc, #256]	@ (800b1ac <etharp_output_to_arp_index+0x128>)
 800b0aa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b0ae:	4940      	ldr	r1, [pc, #256]	@ (800b1b0 <etharp_output_to_arp_index+0x12c>)
 800b0b0:	4840      	ldr	r0, [pc, #256]	@ (800b1b4 <etharp_output_to_arp_index+0x130>)
 800b0b2:	f001 fff1 	bl	800d098 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b0b6:	79fa      	ldrb	r2, [r7, #7]
 800b0b8:	493b      	ldr	r1, [pc, #236]	@ (800b1a8 <etharp_output_to_arp_index+0x124>)
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	005b      	lsls	r3, r3, #1
 800b0be:	4413      	add	r3, r2
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	440b      	add	r3, r1
 800b0c4:	3314      	adds	r3, #20
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d153      	bne.n	800b174 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b0cc:	79fa      	ldrb	r2, [r7, #7]
 800b0ce:	4936      	ldr	r1, [pc, #216]	@ (800b1a8 <etharp_output_to_arp_index+0x124>)
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	005b      	lsls	r3, r3, #1
 800b0d4:	4413      	add	r3, r2
 800b0d6:	00db      	lsls	r3, r3, #3
 800b0d8:	440b      	add	r3, r1
 800b0da:	3312      	adds	r3, #18
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800b0e2:	d919      	bls.n	800b118 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b0e4:	79fa      	ldrb	r2, [r7, #7]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	4413      	add	r3, r2
 800b0ec:	00db      	lsls	r3, r3, #3
 800b0ee:	4a2e      	ldr	r2, [pc, #184]	@ (800b1a8 <etharp_output_to_arp_index+0x124>)
 800b0f0:	4413      	add	r3, r2
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f000 fb4c 	bl	800b794 <etharp_request>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d138      	bne.n	800b174 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b102:	79fa      	ldrb	r2, [r7, #7]
 800b104:	4928      	ldr	r1, [pc, #160]	@ (800b1a8 <etharp_output_to_arp_index+0x124>)
 800b106:	4613      	mov	r3, r2
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	4413      	add	r3, r2
 800b10c:	00db      	lsls	r3, r3, #3
 800b10e:	440b      	add	r3, r1
 800b110:	3314      	adds	r3, #20
 800b112:	2203      	movs	r2, #3
 800b114:	701a      	strb	r2, [r3, #0]
 800b116:	e02d      	b.n	800b174 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b118:	79fa      	ldrb	r2, [r7, #7]
 800b11a:	4923      	ldr	r1, [pc, #140]	@ (800b1a8 <etharp_output_to_arp_index+0x124>)
 800b11c:	4613      	mov	r3, r2
 800b11e:	005b      	lsls	r3, r3, #1
 800b120:	4413      	add	r3, r2
 800b122:	00db      	lsls	r3, r3, #3
 800b124:	440b      	add	r3, r1
 800b126:	3312      	adds	r3, #18
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800b12e:	d321      	bcc.n	800b174 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b130:	79fa      	ldrb	r2, [r7, #7]
 800b132:	4613      	mov	r3, r2
 800b134:	005b      	lsls	r3, r3, #1
 800b136:	4413      	add	r3, r2
 800b138:	00db      	lsls	r3, r3, #3
 800b13a:	4a1b      	ldr	r2, [pc, #108]	@ (800b1a8 <etharp_output_to_arp_index+0x124>)
 800b13c:	4413      	add	r3, r2
 800b13e:	1d19      	adds	r1, r3, #4
 800b140:	79fa      	ldrb	r2, [r7, #7]
 800b142:	4613      	mov	r3, r2
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	4413      	add	r3, r2
 800b148:	00db      	lsls	r3, r3, #3
 800b14a:	3308      	adds	r3, #8
 800b14c:	4a16      	ldr	r2, [pc, #88]	@ (800b1a8 <etharp_output_to_arp_index+0x124>)
 800b14e:	4413      	add	r3, r2
 800b150:	3304      	adds	r3, #4
 800b152:	461a      	mov	r2, r3
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f000 fafb 	bl	800b750 <etharp_request_dst>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d109      	bne.n	800b174 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b160:	79fa      	ldrb	r2, [r7, #7]
 800b162:	4911      	ldr	r1, [pc, #68]	@ (800b1a8 <etharp_output_to_arp_index+0x124>)
 800b164:	4613      	mov	r3, r2
 800b166:	005b      	lsls	r3, r3, #1
 800b168:	4413      	add	r3, r2
 800b16a:	00db      	lsls	r3, r3, #3
 800b16c:	440b      	add	r3, r1
 800b16e:	3314      	adds	r3, #20
 800b170:	2203      	movs	r2, #3
 800b172:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800b17a:	79fa      	ldrb	r2, [r7, #7]
 800b17c:	4613      	mov	r3, r2
 800b17e:	005b      	lsls	r3, r3, #1
 800b180:	4413      	add	r3, r2
 800b182:	00db      	lsls	r3, r3, #3
 800b184:	3308      	adds	r3, #8
 800b186:	4a08      	ldr	r2, [pc, #32]	@ (800b1a8 <etharp_output_to_arp_index+0x124>)
 800b188:	4413      	add	r3, r2
 800b18a:	3304      	adds	r3, #4
 800b18c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b190:	9200      	str	r2, [sp, #0]
 800b192:	460a      	mov	r2, r1
 800b194:	68b9      	ldr	r1, [r7, #8]
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f001 fe36 	bl	800ce08 <ethernet_output>
 800b19c:	4603      	mov	r3, r0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20008210 	.word	0x20008210
 800b1ac:	0800fe7c 	.word	0x0800fe7c
 800b1b0:	0800ffec 	.word	0x0800ffec
 800b1b4:	0800fef4 	.word	0x0800fef4

0800b1b8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08a      	sub	sp, #40	@ 0x28
 800b1bc:	af02      	add	r7, sp, #8
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d106      	bne.n	800b1dc <etharp_output+0x24>
 800b1ce:	4b73      	ldr	r3, [pc, #460]	@ (800b39c <etharp_output+0x1e4>)
 800b1d0:	f240 321e 	movw	r2, #798	@ 0x31e
 800b1d4:	4972      	ldr	r1, [pc, #456]	@ (800b3a0 <etharp_output+0x1e8>)
 800b1d6:	4873      	ldr	r0, [pc, #460]	@ (800b3a4 <etharp_output+0x1ec>)
 800b1d8:	f001 ff5e 	bl	800d098 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d106      	bne.n	800b1f0 <etharp_output+0x38>
 800b1e2:	4b6e      	ldr	r3, [pc, #440]	@ (800b39c <etharp_output+0x1e4>)
 800b1e4:	f240 321f 	movw	r2, #799	@ 0x31f
 800b1e8:	496f      	ldr	r1, [pc, #444]	@ (800b3a8 <etharp_output+0x1f0>)
 800b1ea:	486e      	ldr	r0, [pc, #440]	@ (800b3a4 <etharp_output+0x1ec>)
 800b1ec:	f001 ff54 	bl	800d098 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d106      	bne.n	800b204 <etharp_output+0x4c>
 800b1f6:	4b69      	ldr	r3, [pc, #420]	@ (800b39c <etharp_output+0x1e4>)
 800b1f8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800b1fc:	496b      	ldr	r1, [pc, #428]	@ (800b3ac <etharp_output+0x1f4>)
 800b1fe:	4869      	ldr	r0, [pc, #420]	@ (800b3a4 <etharp_output+0x1ec>)
 800b200:	f001 ff4a 	bl	800d098 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68f9      	ldr	r1, [r7, #12]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f000 feee 	bl	800bfec <ip4_addr_isbroadcast_u32>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b216:	4b66      	ldr	r3, [pc, #408]	@ (800b3b0 <etharp_output+0x1f8>)
 800b218:	61fb      	str	r3, [r7, #28]
 800b21a:	e0af      	b.n	800b37c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b224:	2be0      	cmp	r3, #224	@ 0xe0
 800b226:	d118      	bne.n	800b25a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b228:	2301      	movs	r3, #1
 800b22a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b22c:	2300      	movs	r3, #0
 800b22e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b230:	235e      	movs	r3, #94	@ 0x5e
 800b232:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3301      	adds	r3, #1
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	3302      	adds	r3, #2
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	3303      	adds	r3, #3
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b252:	f107 0310 	add.w	r3, r7, #16
 800b256:	61fb      	str	r3, [r7, #28]
 800b258:	e090      	b.n	800b37c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3304      	adds	r3, #4
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	405a      	eors	r2, r3
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3308      	adds	r3, #8
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4013      	ands	r3, r2
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d012      	beq.n	800b298 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b278:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d00b      	beq.n	800b298 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	330c      	adds	r3, #12
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	330c      	adds	r3, #12
 800b28e:	61bb      	str	r3, [r7, #24]
 800b290:	e002      	b.n	800b298 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b292:	f06f 0303 	mvn.w	r3, #3
 800b296:	e07d      	b.n	800b394 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b298:	4b46      	ldr	r3, [pc, #280]	@ (800b3b4 <etharp_output+0x1fc>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	4619      	mov	r1, r3
 800b29e:	4a46      	ldr	r2, [pc, #280]	@ (800b3b8 <etharp_output+0x200>)
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	440b      	add	r3, r1
 800b2a6:	00db      	lsls	r3, r3, #3
 800b2a8:	4413      	add	r3, r2
 800b2aa:	3314      	adds	r3, #20
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d925      	bls.n	800b2fe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b2b2:	4b40      	ldr	r3, [pc, #256]	@ (800b3b4 <etharp_output+0x1fc>)
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4a3f      	ldr	r2, [pc, #252]	@ (800b3b8 <etharp_output+0x200>)
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	005b      	lsls	r3, r3, #1
 800b2be:	440b      	add	r3, r1
 800b2c0:	00db      	lsls	r3, r3, #3
 800b2c2:	4413      	add	r3, r2
 800b2c4:	3308      	adds	r3, #8
 800b2c6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d117      	bne.n	800b2fe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	4b38      	ldr	r3, [pc, #224]	@ (800b3b4 <etharp_output+0x1fc>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	4937      	ldr	r1, [pc, #220]	@ (800b3b8 <etharp_output+0x200>)
 800b2da:	4603      	mov	r3, r0
 800b2dc:	005b      	lsls	r3, r3, #1
 800b2de:	4403      	add	r3, r0
 800b2e0:	00db      	lsls	r3, r3, #3
 800b2e2:	440b      	add	r3, r1
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d108      	bne.n	800b2fe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b2ec:	4b31      	ldr	r3, [pc, #196]	@ (800b3b4 <etharp_output+0x1fc>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	68b9      	ldr	r1, [r7, #8]
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f7ff fec5 	bl	800b084 <etharp_output_to_arp_index>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	e04a      	b.n	800b394 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b2fe:	2300      	movs	r3, #0
 800b300:	75fb      	strb	r3, [r7, #23]
 800b302:	e031      	b.n	800b368 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b304:	7dfa      	ldrb	r2, [r7, #23]
 800b306:	492c      	ldr	r1, [pc, #176]	@ (800b3b8 <etharp_output+0x200>)
 800b308:	4613      	mov	r3, r2
 800b30a:	005b      	lsls	r3, r3, #1
 800b30c:	4413      	add	r3, r2
 800b30e:	00db      	lsls	r3, r3, #3
 800b310:	440b      	add	r3, r1
 800b312:	3314      	adds	r3, #20
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d923      	bls.n	800b362 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800b31a:	7dfa      	ldrb	r2, [r7, #23]
 800b31c:	4926      	ldr	r1, [pc, #152]	@ (800b3b8 <etharp_output+0x200>)
 800b31e:	4613      	mov	r3, r2
 800b320:	005b      	lsls	r3, r3, #1
 800b322:	4413      	add	r3, r2
 800b324:	00db      	lsls	r3, r3, #3
 800b326:	440b      	add	r3, r1
 800b328:	3308      	adds	r3, #8
 800b32a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d117      	bne.n	800b362 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	6819      	ldr	r1, [r3, #0]
 800b336:	7dfa      	ldrb	r2, [r7, #23]
 800b338:	481f      	ldr	r0, [pc, #124]	@ (800b3b8 <etharp_output+0x200>)
 800b33a:	4613      	mov	r3, r2
 800b33c:	005b      	lsls	r3, r3, #1
 800b33e:	4413      	add	r3, r2
 800b340:	00db      	lsls	r3, r3, #3
 800b342:	4403      	add	r3, r0
 800b344:	3304      	adds	r3, #4
 800b346:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800b348:	4299      	cmp	r1, r3
 800b34a:	d10a      	bne.n	800b362 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800b34c:	4a19      	ldr	r2, [pc, #100]	@ (800b3b4 <etharp_output+0x1fc>)
 800b34e:	7dfb      	ldrb	r3, [r7, #23]
 800b350:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	461a      	mov	r2, r3
 800b356:	68b9      	ldr	r1, [r7, #8]
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f7ff fe93 	bl	800b084 <etharp_output_to_arp_index>
 800b35e:	4603      	mov	r3, r0
 800b360:	e018      	b.n	800b394 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b362:	7dfb      	ldrb	r3, [r7, #23]
 800b364:	3301      	adds	r3, #1
 800b366:	75fb      	strb	r3, [r7, #23]
 800b368:	7dfb      	ldrb	r3, [r7, #23]
 800b36a:	2b09      	cmp	r3, #9
 800b36c:	d9ca      	bls.n	800b304 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	69b9      	ldr	r1, [r7, #24]
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f000 f822 	bl	800b3bc <etharp_query>
 800b378:	4603      	mov	r3, r0
 800b37a:	e00b      	b.n	800b394 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800b382:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	68b9      	ldr	r1, [r7, #8]
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f001 fd3b 	bl	800ce08 <ethernet_output>
 800b392:	4603      	mov	r3, r0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3720      	adds	r7, #32
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	0800fe7c 	.word	0x0800fe7c
 800b3a0:	0800ffcc 	.word	0x0800ffcc
 800b3a4:	0800fef4 	.word	0x0800fef4
 800b3a8:	0801001c 	.word	0x0801001c
 800b3ac:	0800ffbc 	.word	0x0800ffbc
 800b3b0:	08010620 	.word	0x08010620
 800b3b4:	20008300 	.word	0x20008300
 800b3b8:	20008210 	.word	0x20008210

0800b3bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b08c      	sub	sp, #48	@ 0x30
 800b3c0:	af02      	add	r7, sp, #8
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3326      	adds	r3, #38	@ 0x26
 800b3cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b3ce:	23ff      	movs	r3, #255	@ 0xff
 800b3d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68f9      	ldr	r1, [r7, #12]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 fe04 	bl	800bfec <ip4_addr_isbroadcast_u32>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10c      	bne.n	800b404 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b3f2:	2be0      	cmp	r3, #224	@ 0xe0
 800b3f4:	d006      	beq.n	800b404 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d003      	beq.n	800b404 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d102      	bne.n	800b40a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b404:	f06f 030f 	mvn.w	r3, #15
 800b408:	e101      	b.n	800b60e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	2101      	movs	r1, #1
 800b40e:	68b8      	ldr	r0, [r7, #8]
 800b410:	f7ff fb60 	bl	800aad4 <etharp_find_entry>
 800b414:	4603      	mov	r3, r0
 800b416:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800b418:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	da02      	bge.n	800b426 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800b420:	8a7b      	ldrh	r3, [r7, #18]
 800b422:	b25b      	sxtb	r3, r3
 800b424:	e0f3      	b.n	800b60e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b426:	8a7b      	ldrh	r3, [r7, #18]
 800b428:	2b7e      	cmp	r3, #126	@ 0x7e
 800b42a:	d906      	bls.n	800b43a <etharp_query+0x7e>
 800b42c:	4b7a      	ldr	r3, [pc, #488]	@ (800b618 <etharp_query+0x25c>)
 800b42e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800b432:	497a      	ldr	r1, [pc, #488]	@ (800b61c <etharp_query+0x260>)
 800b434:	487a      	ldr	r0, [pc, #488]	@ (800b620 <etharp_query+0x264>)
 800b436:	f001 fe2f 	bl	800d098 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800b43a:	8a7b      	ldrh	r3, [r7, #18]
 800b43c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b43e:	7c7a      	ldrb	r2, [r7, #17]
 800b440:	4978      	ldr	r1, [pc, #480]	@ (800b624 <etharp_query+0x268>)
 800b442:	4613      	mov	r3, r2
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	4413      	add	r3, r2
 800b448:	00db      	lsls	r3, r3, #3
 800b44a:	440b      	add	r3, r1
 800b44c:	3314      	adds	r3, #20
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d115      	bne.n	800b480 <etharp_query+0xc4>
    is_new_entry = 1;
 800b454:	2301      	movs	r3, #1
 800b456:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b458:	7c7a      	ldrb	r2, [r7, #17]
 800b45a:	4972      	ldr	r1, [pc, #456]	@ (800b624 <etharp_query+0x268>)
 800b45c:	4613      	mov	r3, r2
 800b45e:	005b      	lsls	r3, r3, #1
 800b460:	4413      	add	r3, r2
 800b462:	00db      	lsls	r3, r3, #3
 800b464:	440b      	add	r3, r1
 800b466:	3314      	adds	r3, #20
 800b468:	2201      	movs	r2, #1
 800b46a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b46c:	7c7a      	ldrb	r2, [r7, #17]
 800b46e:	496d      	ldr	r1, [pc, #436]	@ (800b624 <etharp_query+0x268>)
 800b470:	4613      	mov	r3, r2
 800b472:	005b      	lsls	r3, r3, #1
 800b474:	4413      	add	r3, r2
 800b476:	00db      	lsls	r3, r3, #3
 800b478:	440b      	add	r3, r1
 800b47a:	3308      	adds	r3, #8
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b480:	7c7a      	ldrb	r2, [r7, #17]
 800b482:	4968      	ldr	r1, [pc, #416]	@ (800b624 <etharp_query+0x268>)
 800b484:	4613      	mov	r3, r2
 800b486:	005b      	lsls	r3, r3, #1
 800b488:	4413      	add	r3, r2
 800b48a:	00db      	lsls	r3, r3, #3
 800b48c:	440b      	add	r3, r1
 800b48e:	3314      	adds	r3, #20
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	2b01      	cmp	r3, #1
 800b494:	d011      	beq.n	800b4ba <etharp_query+0xfe>
 800b496:	7c7a      	ldrb	r2, [r7, #17]
 800b498:	4962      	ldr	r1, [pc, #392]	@ (800b624 <etharp_query+0x268>)
 800b49a:	4613      	mov	r3, r2
 800b49c:	005b      	lsls	r3, r3, #1
 800b49e:	4413      	add	r3, r2
 800b4a0:	00db      	lsls	r3, r3, #3
 800b4a2:	440b      	add	r3, r1
 800b4a4:	3314      	adds	r3, #20
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d806      	bhi.n	800b4ba <etharp_query+0xfe>
 800b4ac:	4b5a      	ldr	r3, [pc, #360]	@ (800b618 <etharp_query+0x25c>)
 800b4ae:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800b4b2:	495d      	ldr	r1, [pc, #372]	@ (800b628 <etharp_query+0x26c>)
 800b4b4:	485a      	ldr	r0, [pc, #360]	@ (800b620 <etharp_query+0x264>)
 800b4b6:	f001 fdef 	bl	800d098 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d102      	bne.n	800b4c6 <etharp_query+0x10a>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10c      	bne.n	800b4e0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b4c6:	68b9      	ldr	r1, [r7, #8]
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f000 f963 	bl	800b794 <etharp_request>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d102      	bne.n	800b4e0 <etharp_query+0x124>
      return result;
 800b4da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b4de:	e096      	b.n	800b60e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d106      	bne.n	800b4f4 <etharp_query+0x138>
 800b4e6:	4b4c      	ldr	r3, [pc, #304]	@ (800b618 <etharp_query+0x25c>)
 800b4e8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800b4ec:	494f      	ldr	r1, [pc, #316]	@ (800b62c <etharp_query+0x270>)
 800b4ee:	484c      	ldr	r0, [pc, #304]	@ (800b620 <etharp_query+0x264>)
 800b4f0:	f001 fdd2 	bl	800d098 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b4f4:	7c7a      	ldrb	r2, [r7, #17]
 800b4f6:	494b      	ldr	r1, [pc, #300]	@ (800b624 <etharp_query+0x268>)
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	005b      	lsls	r3, r3, #1
 800b4fc:	4413      	add	r3, r2
 800b4fe:	00db      	lsls	r3, r3, #3
 800b500:	440b      	add	r3, r1
 800b502:	3314      	adds	r3, #20
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	2b01      	cmp	r3, #1
 800b508:	d917      	bls.n	800b53a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800b50a:	4a49      	ldr	r2, [pc, #292]	@ (800b630 <etharp_query+0x274>)
 800b50c:	7c7b      	ldrb	r3, [r7, #17]
 800b50e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b510:	7c7a      	ldrb	r2, [r7, #17]
 800b512:	4613      	mov	r3, r2
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	4413      	add	r3, r2
 800b518:	00db      	lsls	r3, r3, #3
 800b51a:	3308      	adds	r3, #8
 800b51c:	4a41      	ldr	r2, [pc, #260]	@ (800b624 <etharp_query+0x268>)
 800b51e:	4413      	add	r3, r2
 800b520:	3304      	adds	r3, #4
 800b522:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b526:	9200      	str	r2, [sp, #0]
 800b528:	697a      	ldr	r2, [r7, #20]
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f001 fc6b 	bl	800ce08 <ethernet_output>
 800b532:	4603      	mov	r3, r0
 800b534:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b538:	e067      	b.n	800b60a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b53a:	7c7a      	ldrb	r2, [r7, #17]
 800b53c:	4939      	ldr	r1, [pc, #228]	@ (800b624 <etharp_query+0x268>)
 800b53e:	4613      	mov	r3, r2
 800b540:	005b      	lsls	r3, r3, #1
 800b542:	4413      	add	r3, r2
 800b544:	00db      	lsls	r3, r3, #3
 800b546:	440b      	add	r3, r1
 800b548:	3314      	adds	r3, #20
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d15c      	bne.n	800b60a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b558:	e01c      	b.n	800b594 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	895a      	ldrh	r2, [r3, #10]
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	891b      	ldrh	r3, [r3, #8]
 800b562:	429a      	cmp	r2, r3
 800b564:	d10a      	bne.n	800b57c <etharp_query+0x1c0>
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d006      	beq.n	800b57c <etharp_query+0x1c0>
 800b56e:	4b2a      	ldr	r3, [pc, #168]	@ (800b618 <etharp_query+0x25c>)
 800b570:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800b574:	492f      	ldr	r1, [pc, #188]	@ (800b634 <etharp_query+0x278>)
 800b576:	482a      	ldr	r0, [pc, #168]	@ (800b620 <etharp_query+0x264>)
 800b578:	f001 fd8e 	bl	800d098 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	7b1b      	ldrb	r3, [r3, #12]
 800b580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b584:	2b00      	cmp	r3, #0
 800b586:	d002      	beq.n	800b58e <etharp_query+0x1d2>
        copy_needed = 1;
 800b588:	2301      	movs	r3, #1
 800b58a:	61bb      	str	r3, [r7, #24]
        break;
 800b58c:	e005      	b.n	800b59a <etharp_query+0x1de>
      }
      p = p->next;
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1df      	bne.n	800b55a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d007      	beq.n	800b5b0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800b5a6:	200e      	movs	r0, #14
 800b5a8:	f7f9 fee6 	bl	8005378 <pbuf_clone>
 800b5ac:	61f8      	str	r0, [r7, #28]
 800b5ae:	e004      	b.n	800b5ba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b5b4:	69f8      	ldr	r0, [r7, #28]
 800b5b6:	f7f9 fd23 	bl	8005000 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d021      	beq.n	800b604 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b5c0:	7c7a      	ldrb	r2, [r7, #17]
 800b5c2:	4918      	ldr	r1, [pc, #96]	@ (800b624 <etharp_query+0x268>)
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	4413      	add	r3, r2
 800b5ca:	00db      	lsls	r3, r3, #3
 800b5cc:	440b      	add	r3, r1
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00a      	beq.n	800b5ea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800b5d4:	7c7a      	ldrb	r2, [r7, #17]
 800b5d6:	4913      	ldr	r1, [pc, #76]	@ (800b624 <etharp_query+0x268>)
 800b5d8:	4613      	mov	r3, r2
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	4413      	add	r3, r2
 800b5de:	00db      	lsls	r3, r3, #3
 800b5e0:	440b      	add	r3, r1
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7f9 fc6b 	bl	8004ec0 <pbuf_free>
      }
      arp_table[i].q = p;
 800b5ea:	7c7a      	ldrb	r2, [r7, #17]
 800b5ec:	490d      	ldr	r1, [pc, #52]	@ (800b624 <etharp_query+0x268>)
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	005b      	lsls	r3, r3, #1
 800b5f2:	4413      	add	r3, r2
 800b5f4:	00db      	lsls	r3, r3, #3
 800b5f6:	440b      	add	r3, r1
 800b5f8:	69fa      	ldr	r2, [r7, #28]
 800b5fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b602:	e002      	b.n	800b60a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b604:	23ff      	movs	r3, #255	@ 0xff
 800b606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800b60a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3728      	adds	r7, #40	@ 0x28
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	0800fe7c 	.word	0x0800fe7c
 800b61c:	08010028 	.word	0x08010028
 800b620:	0800fef4 	.word	0x0800fef4
 800b624:	20008210 	.word	0x20008210
 800b628:	08010038 	.word	0x08010038
 800b62c:	0801001c 	.word	0x0801001c
 800b630:	20008300 	.word	0x20008300
 800b634:	08010060 	.word	0x08010060

0800b638 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08a      	sub	sp, #40	@ 0x28
 800b63c:	af02      	add	r7, sp, #8
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
 800b644:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d106      	bne.n	800b65e <etharp_raw+0x26>
 800b650:	4b3a      	ldr	r3, [pc, #232]	@ (800b73c <etharp_raw+0x104>)
 800b652:	f240 4257 	movw	r2, #1111	@ 0x457
 800b656:	493a      	ldr	r1, [pc, #232]	@ (800b740 <etharp_raw+0x108>)
 800b658:	483a      	ldr	r0, [pc, #232]	@ (800b744 <etharp_raw+0x10c>)
 800b65a:	f001 fd1d 	bl	800d098 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b65e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b662:	211c      	movs	r1, #28
 800b664:	200e      	movs	r0, #14
 800b666:	f7f9 f947 	bl	80048f8 <pbuf_alloc>
 800b66a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d102      	bne.n	800b678 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b672:	f04f 33ff 	mov.w	r3, #4294967295
 800b676:	e05d      	b.n	800b734 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	895b      	ldrh	r3, [r3, #10]
 800b67c:	2b1b      	cmp	r3, #27
 800b67e:	d806      	bhi.n	800b68e <etharp_raw+0x56>
 800b680:	4b2e      	ldr	r3, [pc, #184]	@ (800b73c <etharp_raw+0x104>)
 800b682:	f240 4262 	movw	r2, #1122	@ 0x462
 800b686:	4930      	ldr	r1, [pc, #192]	@ (800b748 <etharp_raw+0x110>)
 800b688:	482e      	ldr	r0, [pc, #184]	@ (800b744 <etharp_raw+0x10c>)
 800b68a:	f001 fd05 	bl	800d098 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b694:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800b696:	4618      	mov	r0, r3
 800b698:	f7f8 f8ba 	bl	8003810 <lwip_htons>
 800b69c:	4603      	mov	r3, r0
 800b69e:	461a      	mov	r2, r3
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b6aa:	2b06      	cmp	r3, #6
 800b6ac:	d006      	beq.n	800b6bc <etharp_raw+0x84>
 800b6ae:	4b23      	ldr	r3, [pc, #140]	@ (800b73c <etharp_raw+0x104>)
 800b6b0:	f240 4269 	movw	r2, #1129	@ 0x469
 800b6b4:	4925      	ldr	r1, [pc, #148]	@ (800b74c <etharp_raw+0x114>)
 800b6b6:	4823      	ldr	r0, [pc, #140]	@ (800b744 <etharp_raw+0x10c>)
 800b6b8:	f001 fcee 	bl	800d098 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	3308      	adds	r3, #8
 800b6c0:	2206      	movs	r2, #6
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f001 fdc2 	bl	800d24e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	3312      	adds	r3, #18
 800b6ce:	2206      	movs	r2, #6
 800b6d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f001 fdbb 	bl	800d24e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	330e      	adds	r3, #14
 800b6dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6de:	6812      	ldr	r2, [r2, #0]
 800b6e0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	3318      	adds	r3, #24
 800b6e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6e8:	6812      	ldr	r2, [r2, #0]
 800b6ea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	701a      	strb	r2, [r3, #0]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f042 0201 	orr.w	r2, r2, #1
 800b6f8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f042 0208 	orr.w	r2, r2, #8
 800b702:	709a      	strb	r2, [r3, #2]
 800b704:	2200      	movs	r2, #0
 800b706:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	2206      	movs	r2, #6
 800b70c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2204      	movs	r2, #4
 800b712:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b714:	f640 0306 	movw	r3, #2054	@ 0x806
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	69b9      	ldr	r1, [r7, #24]
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f001 fb71 	bl	800ce08 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b726:	69b8      	ldr	r0, [r7, #24]
 800b728:	f7f9 fbca 	bl	8004ec0 <pbuf_free>
  p = NULL;
 800b72c:	2300      	movs	r3, #0
 800b72e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b730:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3720      	adds	r7, #32
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	0800fe7c 	.word	0x0800fe7c
 800b740:	0800ffcc 	.word	0x0800ffcc
 800b744:	0800fef4 	.word	0x0800fef4
 800b748:	0801007c 	.word	0x0801007c
 800b74c:	080100b0 	.word	0x080100b0

0800b750 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b088      	sub	sp, #32
 800b754:	af04      	add	r7, sp, #16
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b76c:	2201      	movs	r2, #1
 800b76e:	9203      	str	r2, [sp, #12]
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	9202      	str	r2, [sp, #8]
 800b774:	4a06      	ldr	r2, [pc, #24]	@ (800b790 <etharp_request_dst+0x40>)
 800b776:	9201      	str	r2, [sp, #4]
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	4603      	mov	r3, r0
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7ff ff5a 	bl	800b638 <etharp_raw>
 800b784:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	08010628 	.word	0x08010628

0800b794 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b79e:	4a05      	ldr	r2, [pc, #20]	@ (800b7b4 <etharp_request+0x20>)
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7ff ffd4 	bl	800b750 <etharp_request_dst>
 800b7a8:	4603      	mov	r3, r0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	08010620 	.word	0x08010620

0800b7b8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b08e      	sub	sp, #56	@ 0x38
 800b7bc:	af04      	add	r7, sp, #16
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b7c2:	4b79      	ldr	r3, [pc, #484]	@ (800b9a8 <icmp_input+0x1f0>)
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800b7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	f003 030f 	and.w	r3, r3, #15
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800b7d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b7da:	2b13      	cmp	r3, #19
 800b7dc:	f240 80cd 	bls.w	800b97a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	895b      	ldrh	r3, [r3, #10]
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	f240 80ca 	bls.w	800b97e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b7f4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f000 80b7 	beq.w	800b96c <icmp_input+0x1b4>
 800b7fe:	2b08      	cmp	r3, #8
 800b800:	f040 80b7 	bne.w	800b972 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800b804:	4b69      	ldr	r3, [pc, #420]	@ (800b9ac <icmp_input+0x1f4>)
 800b806:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b808:	4b67      	ldr	r3, [pc, #412]	@ (800b9a8 <icmp_input+0x1f0>)
 800b80a:	695b      	ldr	r3, [r3, #20]
 800b80c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b810:	2be0      	cmp	r3, #224	@ 0xe0
 800b812:	f000 80bb 	beq.w	800b98c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b816:	4b64      	ldr	r3, [pc, #400]	@ (800b9a8 <icmp_input+0x1f0>)
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	4a63      	ldr	r2, [pc, #396]	@ (800b9a8 <icmp_input+0x1f0>)
 800b81c:	6812      	ldr	r2, [r2, #0]
 800b81e:	4611      	mov	r1, r2
 800b820:	4618      	mov	r0, r3
 800b822:	f000 fbe3 	bl	800bfec <ip4_addr_isbroadcast_u32>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f040 80b1 	bne.w	800b990 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	891b      	ldrh	r3, [r3, #8]
 800b832:	2b07      	cmp	r3, #7
 800b834:	f240 80a5 	bls.w	800b982 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b838:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b83a:	330e      	adds	r3, #14
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7f9 faa8 	bl	8004d94 <pbuf_add_header>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d04b      	beq.n	800b8e2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	891a      	ldrh	r2, [r3, #8]
 800b84e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b850:	4413      	add	r3, r2
 800b852:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	891b      	ldrh	r3, [r3, #8]
 800b858:	8b7a      	ldrh	r2, [r7, #26]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	f0c0 809a 	bcc.w	800b994 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800b860:	8b7b      	ldrh	r3, [r7, #26]
 800b862:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b866:	4619      	mov	r1, r3
 800b868:	200e      	movs	r0, #14
 800b86a:	f7f9 f845 	bl	80048f8 <pbuf_alloc>
 800b86e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	2b00      	cmp	r3, #0
 800b874:	f000 8090 	beq.w	800b998 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	895b      	ldrh	r3, [r3, #10]
 800b87c:	461a      	mov	r2, r3
 800b87e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b880:	3308      	adds	r3, #8
 800b882:	429a      	cmp	r2, r3
 800b884:	d203      	bcs.n	800b88e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800b886:	6978      	ldr	r0, [r7, #20]
 800b888:	f7f9 fb1a 	bl	8004ec0 <pbuf_free>
          goto icmperr;
 800b88c:	e085      	b.n	800b99a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b896:	4618      	mov	r0, r3
 800b898:	f001 fcd9 	bl	800d24e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800b89c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b89e:	4619      	mov	r1, r3
 800b8a0:	6978      	ldr	r0, [r7, #20]
 800b8a2:	f7f9 fa87 	bl	8004db4 <pbuf_remove_header>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d009      	beq.n	800b8c0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b8ac:	4b40      	ldr	r3, [pc, #256]	@ (800b9b0 <icmp_input+0x1f8>)
 800b8ae:	22b6      	movs	r2, #182	@ 0xb6
 800b8b0:	4940      	ldr	r1, [pc, #256]	@ (800b9b4 <icmp_input+0x1fc>)
 800b8b2:	4841      	ldr	r0, [pc, #260]	@ (800b9b8 <icmp_input+0x200>)
 800b8b4:	f001 fbf0 	bl	800d098 <iprintf>
          pbuf_free(r);
 800b8b8:	6978      	ldr	r0, [r7, #20]
 800b8ba:	f7f9 fb01 	bl	8004ec0 <pbuf_free>
          goto icmperr;
 800b8be:	e06c      	b.n	800b99a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800b8c0:	6879      	ldr	r1, [r7, #4]
 800b8c2:	6978      	ldr	r0, [r7, #20]
 800b8c4:	f7f9 fc14 	bl	80050f0 <pbuf_copy>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800b8ce:	6978      	ldr	r0, [r7, #20]
 800b8d0:	f7f9 faf6 	bl	8004ec0 <pbuf_free>
          goto icmperr;
 800b8d4:	e061      	b.n	800b99a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7f9 faf2 	bl	8004ec0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	607b      	str	r3, [r7, #4]
 800b8e0:	e00f      	b.n	800b902 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b8e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b8e4:	330e      	adds	r3, #14
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7f9 fa63 	bl	8004db4 <pbuf_remove_header>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d006      	beq.n	800b902 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b8f4:	4b2e      	ldr	r3, [pc, #184]	@ (800b9b0 <icmp_input+0x1f8>)
 800b8f6:	22c7      	movs	r2, #199	@ 0xc7
 800b8f8:	4930      	ldr	r1, [pc, #192]	@ (800b9bc <icmp_input+0x204>)
 800b8fa:	482f      	ldr	r0, [pc, #188]	@ (800b9b8 <icmp_input+0x200>)
 800b8fc:	f001 fbcc 	bl	800d098 <iprintf>
          goto icmperr;
 800b900:	e04b      	b.n	800b99a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800b908:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b90a:	4619      	mov	r1, r3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7f9 fa41 	bl	8004d94 <pbuf_add_header>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d12b      	bne.n	800b970 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b926:	4b20      	ldr	r3, [pc, #128]	@ (800b9a8 <icmp_input+0x1f0>)
 800b928:	691a      	ldr	r2, [r3, #16]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	2200      	movs	r2, #0
 800b932:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	2200      	movs	r2, #0
 800b938:	709a      	strb	r2, [r3, #2]
 800b93a:	2200      	movs	r2, #0
 800b93c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	22ff      	movs	r2, #255	@ 0xff
 800b942:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	729a      	strb	r2, [r3, #10]
 800b94a:	2200      	movs	r2, #0
 800b94c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	9302      	str	r3, [sp, #8]
 800b952:	2301      	movs	r3, #1
 800b954:	9301      	str	r3, [sp, #4]
 800b956:	2300      	movs	r3, #0
 800b958:	9300      	str	r3, [sp, #0]
 800b95a:	23ff      	movs	r3, #255	@ 0xff
 800b95c:	2200      	movs	r2, #0
 800b95e:	69f9      	ldr	r1, [r7, #28]
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fa6b 	bl	800be3c <ip4_output_if>
 800b966:	4603      	mov	r3, r0
 800b968:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800b96a:	e001      	b.n	800b970 <icmp_input+0x1b8>
      break;
 800b96c:	bf00      	nop
 800b96e:	e000      	b.n	800b972 <icmp_input+0x1ba>
      break;
 800b970:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7f9 faa4 	bl	8004ec0 <pbuf_free>
  return;
 800b978:	e013      	b.n	800b9a2 <icmp_input+0x1ea>
    goto lenerr;
 800b97a:	bf00      	nop
 800b97c:	e002      	b.n	800b984 <icmp_input+0x1cc>
    goto lenerr;
 800b97e:	bf00      	nop
 800b980:	e000      	b.n	800b984 <icmp_input+0x1cc>
        goto lenerr;
 800b982:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7f9 fa9b 	bl	8004ec0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b98a:	e00a      	b.n	800b9a2 <icmp_input+0x1ea>
        goto icmperr;
 800b98c:	bf00      	nop
 800b98e:	e004      	b.n	800b99a <icmp_input+0x1e2>
        goto icmperr;
 800b990:	bf00      	nop
 800b992:	e002      	b.n	800b99a <icmp_input+0x1e2>
          goto icmperr;
 800b994:	bf00      	nop
 800b996:	e000      	b.n	800b99a <icmp_input+0x1e2>
          goto icmperr;
 800b998:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7f9 fa90 	bl	8004ec0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b9a0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b9a2:	3728      	adds	r7, #40	@ 0x28
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	20004ccc 	.word	0x20004ccc
 800b9ac:	20004ce0 	.word	0x20004ce0
 800b9b0:	080100f4 	.word	0x080100f4
 800b9b4:	0801012c 	.word	0x0801012c
 800b9b8:	08010164 	.word	0x08010164
 800b9bc:	0801018c 	.word	0x0801018c

0800b9c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b9cc:	78fb      	ldrb	r3, [r7, #3]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	2103      	movs	r1, #3
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f814 	bl	800ba00 <icmp_send_response>
}
 800b9d8:	bf00      	nop
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b9ec:	78fb      	ldrb	r3, [r7, #3]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	210b      	movs	r1, #11
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f804 	bl	800ba00 <icmp_send_response>
}
 800b9f8:	bf00      	nop
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b08c      	sub	sp, #48	@ 0x30
 800ba04:	af04      	add	r7, sp, #16
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ba10:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ba14:	2124      	movs	r1, #36	@ 0x24
 800ba16:	2022      	movs	r0, #34	@ 0x22
 800ba18:	f7f8 ff6e 	bl	80048f8 <pbuf_alloc>
 800ba1c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d04c      	beq.n	800babe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	895b      	ldrh	r3, [r3, #10]
 800ba28:	2b23      	cmp	r3, #35	@ 0x23
 800ba2a:	d806      	bhi.n	800ba3a <icmp_send_response+0x3a>
 800ba2c:	4b26      	ldr	r3, [pc, #152]	@ (800bac8 <icmp_send_response+0xc8>)
 800ba2e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800ba32:	4926      	ldr	r1, [pc, #152]	@ (800bacc <icmp_send_response+0xcc>)
 800ba34:	4826      	ldr	r0, [pc, #152]	@ (800bad0 <icmp_send_response+0xd0>)
 800ba36:	f001 fb2f 	bl	800d098 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	78fa      	ldrb	r2, [r7, #3]
 800ba4a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	78ba      	ldrb	r2, [r7, #2]
 800ba50:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2200      	movs	r2, #0
 800ba56:	711a      	strb	r2, [r3, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	719a      	strb	r2, [r3, #6]
 800ba62:	2200      	movs	r2, #0
 800ba64:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	f103 0008 	add.w	r0, r3, #8
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	221c      	movs	r2, #28
 800ba74:	4619      	mov	r1, r3
 800ba76:	f001 fbea 	bl	800d24e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ba80:	f107 030c 	add.w	r3, r7, #12
 800ba84:	4618      	mov	r0, r3
 800ba86:	f000 f825 	bl	800bad4 <ip4_route>
 800ba8a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d011      	beq.n	800bab6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	2200      	movs	r2, #0
 800ba96:	709a      	strb	r2, [r3, #2]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ba9c:	f107 020c 	add.w	r2, r7, #12
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	9302      	str	r3, [sp, #8]
 800baa4:	2301      	movs	r3, #1
 800baa6:	9301      	str	r3, [sp, #4]
 800baa8:	2300      	movs	r3, #0
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	23ff      	movs	r3, #255	@ 0xff
 800baae:	2100      	movs	r1, #0
 800bab0:	69f8      	ldr	r0, [r7, #28]
 800bab2:	f000 f9c3 	bl	800be3c <ip4_output_if>
  }
  pbuf_free(q);
 800bab6:	69f8      	ldr	r0, [r7, #28]
 800bab8:	f7f9 fa02 	bl	8004ec0 <pbuf_free>
 800babc:	e000      	b.n	800bac0 <icmp_send_response+0xc0>
    return;
 800babe:	bf00      	nop
}
 800bac0:	3720      	adds	r7, #32
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	080100f4 	.word	0x080100f4
 800bacc:	080101c0 	.word	0x080101c0
 800bad0:	08010164 	.word	0x08010164

0800bad4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800badc:	4b33      	ldr	r3, [pc, #204]	@ (800bbac <ip4_route+0xd8>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	60fb      	str	r3, [r7, #12]
 800bae2:	e036      	b.n	800bb52 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800baea:	f003 0301 	and.w	r3, r3, #1
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d02b      	beq.n	800bb4c <ip4_route+0x78>
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bafa:	089b      	lsrs	r3, r3, #2
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d022      	beq.n	800bb4c <ip4_route+0x78>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3304      	adds	r3, #4
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d01d      	beq.n	800bb4c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	3304      	adds	r3, #4
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	405a      	eors	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	3308      	adds	r3, #8
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4013      	ands	r3, r2
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d101      	bne.n	800bb2c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	e038      	b.n	800bb9e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb32:	f003 0302 	and.w	r3, r3, #2
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d108      	bne.n	800bb4c <ip4_route+0x78>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	330c      	adds	r3, #12
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d101      	bne.n	800bb4c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	e028      	b.n	800bb9e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	60fb      	str	r3, [r7, #12]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d1c5      	bne.n	800bae4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bb58:	4b15      	ldr	r3, [pc, #84]	@ (800bbb0 <ip4_route+0xdc>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d01a      	beq.n	800bb96 <ip4_route+0xc2>
 800bb60:	4b13      	ldr	r3, [pc, #76]	@ (800bbb0 <ip4_route+0xdc>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb68:	f003 0301 	and.w	r3, r3, #1
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d012      	beq.n	800bb96 <ip4_route+0xc2>
 800bb70:	4b0f      	ldr	r3, [pc, #60]	@ (800bbb0 <ip4_route+0xdc>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb78:	f003 0304 	and.w	r3, r3, #4
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00a      	beq.n	800bb96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800bb80:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb0 <ip4_route+0xdc>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	3304      	adds	r3, #4
 800bb86:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d004      	beq.n	800bb96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb94:	d101      	bne.n	800bb9a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	e001      	b.n	800bb9e <ip4_route+0xca>
  }

  return netif_default;
 800bb9a:	4b05      	ldr	r3, [pc, #20]	@ (800bbb0 <ip4_route+0xdc>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	200081a8 	.word	0x200081a8
 800bbb0:	200081ac 	.word	0x200081ac

0800bbb4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bbc2:	f003 0301 	and.w	r3, r3, #1
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d016      	beq.n	800bbfa <ip4_input_accept+0x46>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	3304      	adds	r3, #4
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d011      	beq.n	800bbfa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bbd6:	4b0b      	ldr	r3, [pc, #44]	@ (800bc04 <ip4_input_accept+0x50>)
 800bbd8:	695a      	ldr	r2, [r3, #20]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	3304      	adds	r3, #4
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d008      	beq.n	800bbf6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800bbe4:	4b07      	ldr	r3, [pc, #28]	@ (800bc04 <ip4_input_accept+0x50>)
 800bbe6:	695b      	ldr	r3, [r3, #20]
 800bbe8:	6879      	ldr	r1, [r7, #4]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 f9fe 	bl	800bfec <ip4_addr_isbroadcast_u32>
 800bbf0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e000      	b.n	800bbfc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	20004ccc 	.word	0x20004ccc

0800bc08 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	091b      	lsrs	r3, r3, #4
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	2b04      	cmp	r3, #4
 800bc22:	d004      	beq.n	800bc2e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7f9 f94b 	bl	8004ec0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	e0fd      	b.n	800be2a <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	f003 030f 	and.w	r3, r3, #15
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	885b      	ldrh	r3, [r3, #2]
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7f7 fde3 	bl	8003810 <lwip_htons>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	891b      	ldrh	r3, [r3, #8]
 800bc52:	89ba      	ldrh	r2, [r7, #12]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d204      	bcs.n	800bc62 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800bc58:	89bb      	ldrh	r3, [r7, #12]
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7f8 ffa9 	bl	8004bb4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	895b      	ldrh	r3, [r3, #10]
 800bc66:	89fa      	ldrh	r2, [r7, #14]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d807      	bhi.n	800bc7c <ip4_input+0x74>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	891b      	ldrh	r3, [r3, #8]
 800bc70:	89ba      	ldrh	r2, [r7, #12]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d802      	bhi.n	800bc7c <ip4_input+0x74>
 800bc76:	89fb      	ldrh	r3, [r7, #14]
 800bc78:	2b13      	cmp	r3, #19
 800bc7a:	d804      	bhi.n	800bc86 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7f9 f91f 	bl	8004ec0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	e0d1      	b.n	800be2a <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	4a6a      	ldr	r2, [pc, #424]	@ (800be34 <ip4_input+0x22c>)
 800bc8c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	4a68      	ldr	r2, [pc, #416]	@ (800be34 <ip4_input+0x22c>)
 800bc94:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bc96:	4b67      	ldr	r3, [pc, #412]	@ (800be34 <ip4_input+0x22c>)
 800bc98:	695b      	ldr	r3, [r3, #20]
 800bc9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc9e:	2be0      	cmp	r3, #224	@ 0xe0
 800bca0:	d112      	bne.n	800bcc8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d007      	beq.n	800bcc2 <ip4_input+0xba>
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	3304      	adds	r3, #4
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d002      	beq.n	800bcc2 <ip4_input+0xba>
      netif = inp;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	613b      	str	r3, [r7, #16]
 800bcc0:	e02a      	b.n	800bd18 <ip4_input+0x110>
    } else {
      netif = NULL;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	613b      	str	r3, [r7, #16]
 800bcc6:	e027      	b.n	800bd18 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800bcc8:	6838      	ldr	r0, [r7, #0]
 800bcca:	f7ff ff73 	bl	800bbb4 <ip4_input_accept>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d002      	beq.n	800bcda <ip4_input+0xd2>
      netif = inp;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	613b      	str	r3, [r7, #16]
 800bcd8:	e01e      	b.n	800bd18 <ip4_input+0x110>
    } else {
      netif = NULL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800bcde:	4b55      	ldr	r3, [pc, #340]	@ (800be34 <ip4_input+0x22c>)
 800bce0:	695b      	ldr	r3, [r3, #20]
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	2b7f      	cmp	r3, #127	@ 0x7f
 800bce6:	d017      	beq.n	800bd18 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800bce8:	4b53      	ldr	r3, [pc, #332]	@ (800be38 <ip4_input+0x230>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	613b      	str	r3, [r7, #16]
 800bcee:	e00e      	b.n	800bd0e <ip4_input+0x106>
          if (netif == inp) {
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d006      	beq.n	800bd06 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800bcf8:	6938      	ldr	r0, [r7, #16]
 800bcfa:	f7ff ff5b 	bl	800bbb4 <ip4_input_accept>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d108      	bne.n	800bd16 <ip4_input+0x10e>
 800bd04:	e000      	b.n	800bd08 <ip4_input+0x100>
            continue;
 800bd06:	bf00      	nop
        NETIF_FOREACH(netif) {
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	613b      	str	r3, [r7, #16]
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1ed      	bne.n	800bcf0 <ip4_input+0xe8>
 800bd14:	e000      	b.n	800bd18 <ip4_input+0x110>
            break;
 800bd16:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bd18:	4b46      	ldr	r3, [pc, #280]	@ (800be34 <ip4_input+0x22c>)
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	6839      	ldr	r1, [r7, #0]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f000 f964 	bl	800bfec <ip4_addr_isbroadcast_u32>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d105      	bne.n	800bd36 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800bd2a:	4b42      	ldr	r3, [pc, #264]	@ (800be34 <ip4_input+0x22c>)
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bd32:	2be0      	cmp	r3, #224	@ 0xe0
 800bd34:	d104      	bne.n	800bd40 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7f9 f8c2 	bl	8004ec0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	e074      	b.n	800be2a <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d104      	bne.n	800bd50 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f7f9 f8ba 	bl	8004ec0 <pbuf_free>
    return ERR_OK;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	e06c      	b.n	800be2a <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	88db      	ldrh	r3, [r3, #6]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	461a      	mov	r2, r3
 800bd58:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d00b      	beq.n	800bd7a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fc88 	bl	800c678 <ip4_reass>
 800bd68:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <ip4_input+0x16c>
      return ERR_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	e05a      	b.n	800be2a <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800bd7a:	4a2e      	ldr	r2, [pc, #184]	@ (800be34 <ip4_input+0x22c>)
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800bd80:	4a2c      	ldr	r2, [pc, #176]	@ (800be34 <ip4_input+0x22c>)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800bd86:	4a2b      	ldr	r2, [pc, #172]	@ (800be34 <ip4_input+0x22c>)
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	f003 030f 	and.w	r3, r3, #15
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	4b25      	ldr	r3, [pc, #148]	@ (800be34 <ip4_input+0x22c>)
 800bd9e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800bda0:	89fb      	ldrh	r3, [r7, #14]
 800bda2:	4619      	mov	r1, r3
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f7f9 f805 	bl	8004db4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	7a5b      	ldrb	r3, [r3, #9]
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d006      	beq.n	800bdc0 <ip4_input+0x1b8>
 800bdb2:	2b06      	cmp	r3, #6
 800bdb4:	d109      	bne.n	800bdca <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800bdb6:	6839      	ldr	r1, [r7, #0]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7fa feab 	bl	8006b14 <tcp_input>
        break;
 800bdbe:	e021      	b.n	800be04 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7ff fcf8 	bl	800b7b8 <icmp_input>
        break;
 800bdc8:	e01c      	b.n	800be04 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bdca:	4b1a      	ldr	r3, [pc, #104]	@ (800be34 <ip4_input+0x22c>)
 800bdcc:	695b      	ldr	r3, [r3, #20]
 800bdce:	6939      	ldr	r1, [r7, #16]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f000 f90b 	bl	800bfec <ip4_addr_isbroadcast_u32>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10f      	bne.n	800bdfc <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bddc:	4b15      	ldr	r3, [pc, #84]	@ (800be34 <ip4_input+0x22c>)
 800bdde:	695b      	ldr	r3, [r3, #20]
 800bde0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bde4:	2be0      	cmp	r3, #224	@ 0xe0
 800bde6:	d009      	beq.n	800bdfc <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800bde8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7f9 f853 	bl	8004e9a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800bdf4:	2102      	movs	r1, #2
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7ff fde2 	bl	800b9c0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f7f9 f85f 	bl	8004ec0 <pbuf_free>
        break;
 800be02:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800be04:	4b0b      	ldr	r3, [pc, #44]	@ (800be34 <ip4_input+0x22c>)
 800be06:	2200      	movs	r2, #0
 800be08:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800be0a:	4b0a      	ldr	r3, [pc, #40]	@ (800be34 <ip4_input+0x22c>)
 800be0c:	2200      	movs	r2, #0
 800be0e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800be10:	4b08      	ldr	r3, [pc, #32]	@ (800be34 <ip4_input+0x22c>)
 800be12:	2200      	movs	r2, #0
 800be14:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800be16:	4b07      	ldr	r3, [pc, #28]	@ (800be34 <ip4_input+0x22c>)
 800be18:	2200      	movs	r2, #0
 800be1a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800be1c:	4b05      	ldr	r3, [pc, #20]	@ (800be34 <ip4_input+0x22c>)
 800be1e:	2200      	movs	r2, #0
 800be20:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800be22:	4b04      	ldr	r3, [pc, #16]	@ (800be34 <ip4_input+0x22c>)
 800be24:	2200      	movs	r2, #0
 800be26:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3718      	adds	r7, #24
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	20004ccc 	.word	0x20004ccc
 800be38:	200081a8 	.word	0x200081a8

0800be3c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b08a      	sub	sp, #40	@ 0x28
 800be40:	af04      	add	r7, sp, #16
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d009      	beq.n	800be68 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <ip4_output_if+0x26>
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d102      	bne.n	800be68 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800be62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be64:	3304      	adds	r3, #4
 800be66:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800be68:	78fa      	ldrb	r2, [r7, #3]
 800be6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6c:	9302      	str	r3, [sp, #8]
 800be6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	4613      	mov	r3, r2
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	6979      	ldr	r1, [r7, #20]
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f000 f805 	bl	800be90 <ip4_output_if_src>
 800be86:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3718      	adds	r7, #24
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
 800be9c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	7b9b      	ldrb	r3, [r3, #14]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d006      	beq.n	800beb4 <ip4_output_if_src+0x24>
 800bea6:	4b4b      	ldr	r3, [pc, #300]	@ (800bfd4 <ip4_output_if_src+0x144>)
 800bea8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800beac:	494a      	ldr	r1, [pc, #296]	@ (800bfd8 <ip4_output_if_src+0x148>)
 800beae:	484b      	ldr	r0, [pc, #300]	@ (800bfdc <ip4_output_if_src+0x14c>)
 800beb0:	f001 f8f2 	bl	800d098 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d060      	beq.n	800bf7c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800beba:	2314      	movs	r3, #20
 800bebc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800bebe:	2114      	movs	r1, #20
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f7f8 ff67 	bl	8004d94 <pbuf_add_header>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800becc:	f06f 0301 	mvn.w	r3, #1
 800bed0:	e07c      	b.n	800bfcc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	895b      	ldrh	r3, [r3, #10]
 800bedc:	2b13      	cmp	r3, #19
 800bede:	d806      	bhi.n	800beee <ip4_output_if_src+0x5e>
 800bee0:	4b3c      	ldr	r3, [pc, #240]	@ (800bfd4 <ip4_output_if_src+0x144>)
 800bee2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800bee6:	493e      	ldr	r1, [pc, #248]	@ (800bfe0 <ip4_output_if_src+0x150>)
 800bee8:	483c      	ldr	r0, [pc, #240]	@ (800bfdc <ip4_output_if_src+0x14c>)
 800beea:	f001 f8d5 	bl	800d098 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	78fa      	ldrb	r2, [r7, #3]
 800bef2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800befa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800bf04:	8b7b      	ldrh	r3, [r7, #26]
 800bf06:	089b      	lsrs	r3, r3, #2
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf10:	b2da      	uxtb	r2, r3
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800bf1c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	891b      	ldrh	r3, [r3, #8]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7f7 fc74 	bl	8003810 <lwip_htons>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	2200      	movs	r2, #0
 800bf34:	719a      	strb	r2, [r3, #6]
 800bf36:	2200      	movs	r2, #0
 800bf38:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800bf3a:	4b2a      	ldr	r3, [pc, #168]	@ (800bfe4 <ip4_output_if_src+0x154>)
 800bf3c:	881b      	ldrh	r3, [r3, #0]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7f7 fc66 	bl	8003810 <lwip_htons>
 800bf44:	4603      	mov	r3, r0
 800bf46:	461a      	mov	r2, r3
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800bf4c:	4b25      	ldr	r3, [pc, #148]	@ (800bfe4 <ip4_output_if_src+0x154>)
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	3301      	adds	r3, #1
 800bf52:	b29a      	uxth	r2, r3
 800bf54:	4b23      	ldr	r3, [pc, #140]	@ (800bfe4 <ip4_output_if_src+0x154>)
 800bf56:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d104      	bne.n	800bf68 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800bf5e:	4b22      	ldr	r3, [pc, #136]	@ (800bfe8 <ip4_output_if_src+0x158>)
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	60da      	str	r2, [r3, #12]
 800bf66:	e003      	b.n	800bf70 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	2200      	movs	r2, #0
 800bf74:	729a      	strb	r2, [r3, #10]
 800bf76:	2200      	movs	r2, #0
 800bf78:	72da      	strb	r2, [r3, #11]
 800bf7a:	e00f      	b.n	800bf9c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	895b      	ldrh	r3, [r3, #10]
 800bf80:	2b13      	cmp	r3, #19
 800bf82:	d802      	bhi.n	800bf8a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bf84:	f06f 0301 	mvn.w	r3, #1
 800bf88:	e020      	b.n	800bfcc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800bf96:	f107 0314 	add.w	r3, r7, #20
 800bf9a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800bf9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00c      	beq.n	800bfbe <ip4_output_if_src+0x12e>
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	891a      	ldrh	r2, [r3, #8]
 800bfa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfaa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d906      	bls.n	800bfbe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f000 fd53 	bl	800ca60 <ip4_frag>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	e006      	b.n	800bfcc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc0:	695b      	ldr	r3, [r3, #20]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	68f9      	ldr	r1, [r7, #12]
 800bfc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bfc8:	4798      	blx	r3
 800bfca:	4603      	mov	r3, r0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3720      	adds	r7, #32
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	080101ec 	.word	0x080101ec
 800bfd8:	08010220 	.word	0x08010220
 800bfdc:	0801022c 	.word	0x0801022c
 800bfe0:	08010254 	.word	0x08010254
 800bfe4:	20008302 	.word	0x20008302
 800bfe8:	0801061c 	.word	0x0801061c

0800bfec <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c000:	d002      	beq.n	800c008 <ip4_addr_isbroadcast_u32+0x1c>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d101      	bne.n	800c00c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c008:	2301      	movs	r3, #1
 800c00a:	e02a      	b.n	800c062 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c012:	f003 0302 	and.w	r3, r3, #2
 800c016:	2b00      	cmp	r3, #0
 800c018:	d101      	bne.n	800c01e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c01a:	2300      	movs	r3, #0
 800c01c:	e021      	b.n	800c062 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	3304      	adds	r3, #4
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	429a      	cmp	r2, r3
 800c028:	d101      	bne.n	800c02e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c02a:	2300      	movs	r3, #0
 800c02c:	e019      	b.n	800c062 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	3304      	adds	r3, #4
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	405a      	eors	r2, r3
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	3308      	adds	r3, #8
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4013      	ands	r3, r2
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10d      	bne.n	800c060 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	3308      	adds	r3, #8
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	43da      	mvns	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	3308      	adds	r3, #8
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c058:	429a      	cmp	r2, r3
 800c05a:	d101      	bne.n	800c060 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c05c:	2301      	movs	r3, #1
 800c05e:	e000      	b.n	800c062 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c060:	2300      	movs	r3, #0
  }
}
 800c062:	4618      	mov	r0, r3
 800c064:	3714      	adds	r7, #20
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr
	...

0800c070 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c076:	2300      	movs	r3, #0
 800c078:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c07a:	4b12      	ldr	r3, [pc, #72]	@ (800c0c4 <ip_reass_tmr+0x54>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c080:	e018      	b.n	800c0b4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	7fdb      	ldrb	r3, [r3, #31]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00b      	beq.n	800c0a2 <ip_reass_tmr+0x32>
      r->timer--;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	7fdb      	ldrb	r3, [r3, #31]
 800c08e:	3b01      	subs	r3, #1
 800c090:	b2da      	uxtb	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	e008      	b.n	800c0b4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c0ac:	68b9      	ldr	r1, [r7, #8]
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 f80a 	bl	800c0c8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e3      	bne.n	800c082 <ip_reass_tmr+0x12>
    }
  }
}
 800c0ba:	bf00      	nop
 800c0bc:	bf00      	nop
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	20008304 	.word	0x20008304

0800c0c8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b088      	sub	sp, #32
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c0d6:	683a      	ldr	r2, [r7, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d105      	bne.n	800c0ea <ip_reass_free_complete_datagram+0x22>
 800c0de:	4b45      	ldr	r3, [pc, #276]	@ (800c1f4 <ip_reass_free_complete_datagram+0x12c>)
 800c0e0:	22ab      	movs	r2, #171	@ 0xab
 800c0e2:	4945      	ldr	r1, [pc, #276]	@ (800c1f8 <ip_reass_free_complete_datagram+0x130>)
 800c0e4:	4845      	ldr	r0, [pc, #276]	@ (800c1fc <ip_reass_free_complete_datagram+0x134>)
 800c0e6:	f000 ffd7 	bl	800d098 <iprintf>
  if (prev != NULL) {
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00a      	beq.n	800c106 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d005      	beq.n	800c106 <ip_reass_free_complete_datagram+0x3e>
 800c0fa:	4b3e      	ldr	r3, [pc, #248]	@ (800c1f4 <ip_reass_free_complete_datagram+0x12c>)
 800c0fc:	22ad      	movs	r2, #173	@ 0xad
 800c0fe:	4940      	ldr	r1, [pc, #256]	@ (800c200 <ip_reass_free_complete_datagram+0x138>)
 800c100:	483e      	ldr	r0, [pc, #248]	@ (800c1fc <ip_reass_free_complete_datagram+0x134>)
 800c102:	f000 ffc9 	bl	800d098 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	889b      	ldrh	r3, [r3, #4]
 800c112:	b29b      	uxth	r3, r3
 800c114:	2b00      	cmp	r3, #0
 800c116:	d12a      	bne.n	800c16e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	6858      	ldr	r0, [r3, #4]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	3308      	adds	r3, #8
 800c12e:	2214      	movs	r2, #20
 800c130:	4619      	mov	r1, r3
 800c132:	f001 f88c 	bl	800d24e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c136:	2101      	movs	r1, #1
 800c138:	69b8      	ldr	r0, [r7, #24]
 800c13a:	f7ff fc51 	bl	800b9e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c13e:	69b8      	ldr	r0, [r7, #24]
 800c140:	f7f8 ff46 	bl	8004fd0 <pbuf_clen>
 800c144:	4603      	mov	r3, r0
 800c146:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c148:	8bfa      	ldrh	r2, [r7, #30]
 800c14a:	8a7b      	ldrh	r3, [r7, #18]
 800c14c:	4413      	add	r3, r2
 800c14e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c152:	db05      	blt.n	800c160 <ip_reass_free_complete_datagram+0x98>
 800c154:	4b27      	ldr	r3, [pc, #156]	@ (800c1f4 <ip_reass_free_complete_datagram+0x12c>)
 800c156:	22bc      	movs	r2, #188	@ 0xbc
 800c158:	492a      	ldr	r1, [pc, #168]	@ (800c204 <ip_reass_free_complete_datagram+0x13c>)
 800c15a:	4828      	ldr	r0, [pc, #160]	@ (800c1fc <ip_reass_free_complete_datagram+0x134>)
 800c15c:	f000 ff9c 	bl	800d098 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c160:	8bfa      	ldrh	r2, [r7, #30]
 800c162:	8a7b      	ldrh	r3, [r7, #18]
 800c164:	4413      	add	r3, r2
 800c166:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c168:	69b8      	ldr	r0, [r7, #24]
 800c16a:	f7f8 fea9 	bl	8004ec0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c174:	e01f      	b.n	800c1b6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f7f8 ff22 	bl	8004fd0 <pbuf_clen>
 800c18c:	4603      	mov	r3, r0
 800c18e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c190:	8bfa      	ldrh	r2, [r7, #30]
 800c192:	8a7b      	ldrh	r3, [r7, #18]
 800c194:	4413      	add	r3, r2
 800c196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c19a:	db05      	blt.n	800c1a8 <ip_reass_free_complete_datagram+0xe0>
 800c19c:	4b15      	ldr	r3, [pc, #84]	@ (800c1f4 <ip_reass_free_complete_datagram+0x12c>)
 800c19e:	22cc      	movs	r2, #204	@ 0xcc
 800c1a0:	4918      	ldr	r1, [pc, #96]	@ (800c204 <ip_reass_free_complete_datagram+0x13c>)
 800c1a2:	4816      	ldr	r0, [pc, #88]	@ (800c1fc <ip_reass_free_complete_datagram+0x134>)
 800c1a4:	f000 ff78 	bl	800d098 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c1a8:	8bfa      	ldrh	r2, [r7, #30]
 800c1aa:	8a7b      	ldrh	r3, [r7, #18]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c1b0:	68f8      	ldr	r0, [r7, #12]
 800c1b2:	f7f8 fe85 	bl	8004ec0 <pbuf_free>
  while (p != NULL) {
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1dc      	bne.n	800c176 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c1bc:	6839      	ldr	r1, [r7, #0]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f8c2 	bl	800c348 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c1c4:	4b10      	ldr	r3, [pc, #64]	@ (800c208 <ip_reass_free_complete_datagram+0x140>)
 800c1c6:	881b      	ldrh	r3, [r3, #0]
 800c1c8:	8bfa      	ldrh	r2, [r7, #30]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d905      	bls.n	800c1da <ip_reass_free_complete_datagram+0x112>
 800c1ce:	4b09      	ldr	r3, [pc, #36]	@ (800c1f4 <ip_reass_free_complete_datagram+0x12c>)
 800c1d0:	22d2      	movs	r2, #210	@ 0xd2
 800c1d2:	490e      	ldr	r1, [pc, #56]	@ (800c20c <ip_reass_free_complete_datagram+0x144>)
 800c1d4:	4809      	ldr	r0, [pc, #36]	@ (800c1fc <ip_reass_free_complete_datagram+0x134>)
 800c1d6:	f000 ff5f 	bl	800d098 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c1da:	4b0b      	ldr	r3, [pc, #44]	@ (800c208 <ip_reass_free_complete_datagram+0x140>)
 800c1dc:	881a      	ldrh	r2, [r3, #0]
 800c1de:	8bfb      	ldrh	r3, [r7, #30]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	4b08      	ldr	r3, [pc, #32]	@ (800c208 <ip_reass_free_complete_datagram+0x140>)
 800c1e6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c1e8:	8bfb      	ldrh	r3, [r7, #30]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3720      	adds	r7, #32
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	08010284 	.word	0x08010284
 800c1f8:	080102c0 	.word	0x080102c0
 800c1fc:	080102cc 	.word	0x080102cc
 800c200:	080102f4 	.word	0x080102f4
 800c204:	08010308 	.word	0x08010308
 800c208:	20008308 	.word	0x20008308
 800c20c:	08010328 	.word	0x08010328

0800c210 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b08a      	sub	sp, #40	@ 0x28
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c21a:	2300      	movs	r3, #0
 800c21c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c21e:	2300      	movs	r3, #0
 800c220:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c222:	2300      	movs	r3, #0
 800c224:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c226:	2300      	movs	r3, #0
 800c228:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c22e:	4b28      	ldr	r3, [pc, #160]	@ (800c2d0 <ip_reass_remove_oldest_datagram+0xc0>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800c234:	e030      	b.n	800c298 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c238:	695a      	ldr	r2, [r3, #20]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d10c      	bne.n	800c25c <ip_reass_remove_oldest_datagram+0x4c>
 800c242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c244:	699a      	ldr	r2, [r3, #24]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d106      	bne.n	800c25c <ip_reass_remove_oldest_datagram+0x4c>
 800c24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c250:	899a      	ldrh	r2, [r3, #12]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	889b      	ldrh	r3, [r3, #4]
 800c256:	b29b      	uxth	r3, r3
 800c258:	429a      	cmp	r2, r3
 800c25a:	d014      	beq.n	800c286 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	3301      	adds	r3, #1
 800c260:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c262:	6a3b      	ldr	r3, [r7, #32]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d104      	bne.n	800c272 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	61bb      	str	r3, [r7, #24]
 800c270:	e009      	b.n	800c286 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c274:	7fda      	ldrb	r2, [r3, #31]
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	7fdb      	ldrb	r3, [r3, #31]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d803      	bhi.n	800c286 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c280:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d001      	beq.n	800c292 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c290:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800c298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d1cb      	bne.n	800c236 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c29e:	6a3b      	ldr	r3, [r7, #32]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d008      	beq.n	800c2b6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c2a4:	69b9      	ldr	r1, [r7, #24]
 800c2a6:	6a38      	ldr	r0, [r7, #32]
 800c2a8:	f7ff ff0e 	bl	800c0c8 <ip_reass_free_complete_datagram>
 800c2ac:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	da02      	bge.n	800c2c4 <ip_reass_remove_oldest_datagram+0xb4>
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	dcac      	bgt.n	800c21e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c2c4:	697b      	ldr	r3, [r7, #20]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3728      	adds	r7, #40	@ 0x28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	20008304 	.word	0x20008304

0800c2d4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c2de:	2003      	movs	r0, #3
 800c2e0:	f7f7 ff0c 	bl	80040fc <memp_malloc>
 800c2e4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d110      	bne.n	800c30e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff ff8e 	bl	800c210 <ip_reass_remove_oldest_datagram>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	dc03      	bgt.n	800c304 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c2fc:	2003      	movs	r0, #3
 800c2fe:	f7f7 fefd 	bl	80040fc <memp_malloc>
 800c302:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800c30a:	2300      	movs	r3, #0
 800c30c:	e016      	b.n	800c33c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c30e:	2220      	movs	r2, #32
 800c310:	2100      	movs	r1, #0
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f000 ff25 	bl	800d162 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	220f      	movs	r2, #15
 800c31c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c31e:	4b09      	ldr	r3, [pc, #36]	@ (800c344 <ip_reass_enqueue_new_datagram+0x70>)
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c326:	4a07      	ldr	r2, [pc, #28]	@ (800c344 <ip_reass_enqueue_new_datagram+0x70>)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3308      	adds	r3, #8
 800c330:	2214      	movs	r2, #20
 800c332:	6879      	ldr	r1, [r7, #4]
 800c334:	4618      	mov	r0, r3
 800c336:	f000 ff8a 	bl	800d24e <memcpy>
  return ipr;
 800c33a:	68fb      	ldr	r3, [r7, #12]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3710      	adds	r7, #16
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	20008304 	.word	0x20008304

0800c348 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c352:	4b10      	ldr	r3, [pc, #64]	@ (800c394 <ip_reass_dequeue_datagram+0x4c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d104      	bne.n	800c366 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a0c      	ldr	r2, [pc, #48]	@ (800c394 <ip_reass_dequeue_datagram+0x4c>)
 800c362:	6013      	str	r3, [r2, #0]
 800c364:	e00d      	b.n	800c382 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d106      	bne.n	800c37a <ip_reass_dequeue_datagram+0x32>
 800c36c:	4b0a      	ldr	r3, [pc, #40]	@ (800c398 <ip_reass_dequeue_datagram+0x50>)
 800c36e:	f240 1245 	movw	r2, #325	@ 0x145
 800c372:	490a      	ldr	r1, [pc, #40]	@ (800c39c <ip_reass_dequeue_datagram+0x54>)
 800c374:	480a      	ldr	r0, [pc, #40]	@ (800c3a0 <ip_reass_dequeue_datagram+0x58>)
 800c376:	f000 fe8f 	bl	800d098 <iprintf>
    prev->next = ipr->next;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c382:	6879      	ldr	r1, [r7, #4]
 800c384:	2003      	movs	r0, #3
 800c386:	f7f7 ff29 	bl	80041dc <memp_free>
}
 800c38a:	bf00      	nop
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	20008304 	.word	0x20008304
 800c398:	08010284 	.word	0x08010284
 800c39c:	0801034c 	.word	0x0801034c
 800c3a0:	080102cc 	.word	0x080102cc

0800c3a4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b08c      	sub	sp, #48	@ 0x30
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	885b      	ldrh	r3, [r3, #2]
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7f7 fa23 	bl	8003810 <lwip_htons>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	f003 030f 	and.w	r3, r3, #15
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c3dc:	7e7b      	ldrb	r3, [r7, #25]
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	8b7a      	ldrh	r2, [r7, #26]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d202      	bcs.n	800c3ec <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c3e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ea:	e135      	b.n	800c658 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c3ec:	7e7b      	ldrb	r3, [r7, #25]
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	8b7a      	ldrh	r2, [r7, #26]
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	88db      	ldrh	r3, [r3, #6]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7f7 fa07 	bl	8003810 <lwip_htons>
 800c402:	4603      	mov	r3, r0
 800c404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c408:	b29b      	uxth	r3, r3
 800c40a:	00db      	lsls	r3, r3, #3
 800c40c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800c414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c416:	2200      	movs	r2, #0
 800c418:	701a      	strb	r2, [r3, #0]
 800c41a:	2200      	movs	r2, #0
 800c41c:	705a      	strb	r2, [r3, #1]
 800c41e:	2200      	movs	r2, #0
 800c420:	709a      	strb	r2, [r3, #2]
 800c422:	2200      	movs	r2, #0
 800c424:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c428:	8afa      	ldrh	r2, [r7, #22]
 800c42a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800c42c:	8afa      	ldrh	r2, [r7, #22]
 800c42e:	8b7b      	ldrh	r3, [r7, #26]
 800c430:	4413      	add	r3, r2
 800c432:	b29a      	uxth	r2, r3
 800c434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c436:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800c438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c43a:	88db      	ldrh	r3, [r3, #6]
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	8afa      	ldrh	r2, [r7, #22]
 800c440:	429a      	cmp	r2, r3
 800c442:	d902      	bls.n	800c44a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c444:	f04f 33ff 	mov.w	r3, #4294967295
 800c448:	e106      	b.n	800c658 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c450:	e068      	b.n	800c524 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800c458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45a:	889b      	ldrh	r3, [r3, #4]
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	889b      	ldrh	r3, [r3, #4]
 800c462:	b29b      	uxth	r3, r3
 800c464:	429a      	cmp	r2, r3
 800c466:	d235      	bcs.n	800c4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c46a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c46c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c470:	2b00      	cmp	r3, #0
 800c472:	d020      	beq.n	800c4b6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c476:	889b      	ldrh	r3, [r3, #4]
 800c478:	b29a      	uxth	r2, r3
 800c47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47c:	88db      	ldrh	r3, [r3, #6]
 800c47e:	b29b      	uxth	r3, r3
 800c480:	429a      	cmp	r2, r3
 800c482:	d307      	bcc.n	800c494 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800c484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c486:	88db      	ldrh	r3, [r3, #6]
 800c488:	b29a      	uxth	r2, r3
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	889b      	ldrh	r3, [r3, #4]
 800c48e:	b29b      	uxth	r3, r3
 800c490:	429a      	cmp	r2, r3
 800c492:	d902      	bls.n	800c49a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c494:	f04f 33ff 	mov.w	r3, #4294967295
 800c498:	e0de      	b.n	800c658 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a2:	88db      	ldrh	r3, [r3, #6]
 800c4a4:	b29a      	uxth	r2, r3
 800c4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a8:	889b      	ldrh	r3, [r3, #4]
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d03d      	beq.n	800c52c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c4b4:	e03a      	b.n	800c52c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800c4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b8:	88db      	ldrh	r3, [r3, #6]
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	889b      	ldrh	r3, [r3, #4]
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d902      	bls.n	800c4cc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ca:	e0c5      	b.n	800c658 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	605a      	str	r2, [r3, #4]
      break;
 800c4d2:	e02b      	b.n	800c52c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800c4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d6:	889b      	ldrh	r3, [r3, #4]
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	889b      	ldrh	r3, [r3, #4]
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d102      	bne.n	800c4ea <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e8:	e0b6      	b.n	800c658 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ec:	889b      	ldrh	r3, [r3, #4]
 800c4ee:	b29a      	uxth	r2, r3
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	88db      	ldrh	r3, [r3, #6]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d202      	bcs.n	800c500 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c4fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c4fe:	e0ab      	b.n	800c658 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c502:	2b00      	cmp	r3, #0
 800c504:	d009      	beq.n	800c51a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800c506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c508:	88db      	ldrh	r3, [r3, #6]
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	889b      	ldrh	r3, [r3, #4]
 800c510:	b29b      	uxth	r3, r3
 800c512:	429a      	cmp	r2, r3
 800c514:	d001      	beq.n	800c51a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800c524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c526:	2b00      	cmp	r3, #0
 800c528:	d193      	bne.n	800c452 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800c52a:	e000      	b.n	800c52e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800c52c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c530:	2b00      	cmp	r3, #0
 800c532:	d12d      	bne.n	800c590 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800c534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c536:	2b00      	cmp	r3, #0
 800c538:	d01c      	beq.n	800c574 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c53c:	88db      	ldrh	r3, [r3, #6]
 800c53e:	b29a      	uxth	r2, r3
 800c540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c542:	889b      	ldrh	r3, [r3, #4]
 800c544:	b29b      	uxth	r3, r3
 800c546:	429a      	cmp	r2, r3
 800c548:	d906      	bls.n	800c558 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800c54a:	4b45      	ldr	r3, [pc, #276]	@ (800c660 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c54c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800c550:	4944      	ldr	r1, [pc, #272]	@ (800c664 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c552:	4845      	ldr	r0, [pc, #276]	@ (800c668 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c554:	f000 fda0 	bl	800d098 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c560:	88db      	ldrh	r3, [r3, #6]
 800c562:	b29a      	uxth	r2, r3
 800c564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c566:	889b      	ldrh	r3, [r3, #4]
 800c568:	b29b      	uxth	r3, r3
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d010      	beq.n	800c590 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c56e:	2300      	movs	r3, #0
 800c570:	623b      	str	r3, [r7, #32]
 800c572:	e00d      	b.n	800c590 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d006      	beq.n	800c58a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c57c:	4b38      	ldr	r3, [pc, #224]	@ (800c660 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c57e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800c582:	493a      	ldr	r1, [pc, #232]	@ (800c66c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c584:	4838      	ldr	r0, [pc, #224]	@ (800c668 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c586:	f000 fd87 	bl	800d098 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d105      	bne.n	800c5a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	7f9b      	ldrb	r3, [r3, #30]
 800c59a:	f003 0301 	and.w	r3, r3, #1
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d059      	beq.n	800c656 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800c5a2:	6a3b      	ldr	r3, [r7, #32]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d04f      	beq.n	800c648 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d006      	beq.n	800c5be <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	889b      	ldrh	r3, [r3, #4]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d002      	beq.n	800c5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	623b      	str	r3, [r7, #32]
 800c5c2:	e041      	b.n	800c648 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800c5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800c5ce:	e012      	b.n	800c5f6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800c5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d8:	88db      	ldrh	r3, [r3, #6]
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5de:	889b      	ldrh	r3, [r3, #4]
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d002      	beq.n	800c5ec <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	623b      	str	r3, [r7, #32]
            break;
 800c5ea:	e007      	b.n	800c5fc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800c5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800c5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1e9      	bne.n	800c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d022      	beq.n	800c648 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d106      	bne.n	800c618 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800c60a:	4b15      	ldr	r3, [pc, #84]	@ (800c660 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c60c:	f240 12df 	movw	r2, #479	@ 0x1df
 800c610:	4917      	ldr	r1, [pc, #92]	@ (800c670 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c612:	4815      	ldr	r0, [pc, #84]	@ (800c668 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c614:	f000 fd40 	bl	800d098 <iprintf>
          LWIP_ASSERT("sanity check",
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c620:	429a      	cmp	r2, r3
 800c622:	d106      	bne.n	800c632 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800c624:	4b0e      	ldr	r3, [pc, #56]	@ (800c660 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c626:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c62a:	4911      	ldr	r1, [pc, #68]	@ (800c670 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c62c:	480e      	ldr	r0, [pc, #56]	@ (800c668 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c62e:	f000 fd33 	bl	800d098 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d006      	beq.n	800c648 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800c63a:	4b09      	ldr	r3, [pc, #36]	@ (800c660 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c63c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800c640:	490c      	ldr	r1, [pc, #48]	@ (800c674 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c642:	4809      	ldr	r0, [pc, #36]	@ (800c668 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c644:	f000 fd28 	bl	800d098 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c648:	6a3b      	ldr	r3, [r7, #32]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	bf14      	ite	ne
 800c64e:	2301      	movne	r3, #1
 800c650:	2300      	moveq	r3, #0
 800c652:	b2db      	uxtb	r3, r3
 800c654:	e000      	b.n	800c658 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c656:	2300      	movs	r3, #0
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3730      	adds	r7, #48	@ 0x30
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	08010284 	.word	0x08010284
 800c664:	08010368 	.word	0x08010368
 800c668:	080102cc 	.word	0x080102cc
 800c66c:	08010388 	.word	0x08010388
 800c670:	080103c0 	.word	0x080103c0
 800c674:	080103d0 	.word	0x080103d0

0800c678 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b08e      	sub	sp, #56	@ 0x38
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800c686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	f003 030f 	and.w	r3, r3, #15
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b14      	cmp	r3, #20
 800c696:	f040 8171 	bne.w	800c97c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800c69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69c:	88db      	ldrh	r3, [r3, #6]
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7f7 f8b5 	bl	8003810 <lwip_htons>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b4:	885b      	ldrh	r3, [r3, #2]
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7f7 f8a9 	bl	8003810 <lwip_htons>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800c6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	f003 030f 	and.w	r3, r3, #15
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800c6d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	f0c0 8150 	bcc.w	800c980 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800c6e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f7f8 fc6f 	bl	8004fd0 <pbuf_clen>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c6f6:	4b8c      	ldr	r3, [pc, #560]	@ (800c928 <ip4_reass+0x2b0>)
 800c6f8:	881b      	ldrh	r3, [r3, #0]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	8c3b      	ldrh	r3, [r7, #32]
 800c6fe:	4413      	add	r3, r2
 800c700:	2b0a      	cmp	r3, #10
 800c702:	dd10      	ble.n	800c726 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c704:	8c3b      	ldrh	r3, [r7, #32]
 800c706:	4619      	mov	r1, r3
 800c708:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c70a:	f7ff fd81 	bl	800c210 <ip_reass_remove_oldest_datagram>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	f000 8137 	beq.w	800c984 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c716:	4b84      	ldr	r3, [pc, #528]	@ (800c928 <ip4_reass+0x2b0>)
 800c718:	881b      	ldrh	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	8c3b      	ldrh	r3, [r7, #32]
 800c71e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c720:	2b0a      	cmp	r3, #10
 800c722:	f300 812f 	bgt.w	800c984 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c726:	4b81      	ldr	r3, [pc, #516]	@ (800c92c <ip4_reass+0x2b4>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c72c:	e015      	b.n	800c75a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c730:	695a      	ldr	r2, [r3, #20]
 800c732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	429a      	cmp	r2, r3
 800c738:	d10c      	bne.n	800c754 <ip4_reass+0xdc>
 800c73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c73c:	699a      	ldr	r2, [r3, #24]
 800c73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	429a      	cmp	r2, r3
 800c744:	d106      	bne.n	800c754 <ip4_reass+0xdc>
 800c746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c748:	899a      	ldrh	r2, [r3, #12]
 800c74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c74c:	889b      	ldrh	r3, [r3, #4]
 800c74e:	b29b      	uxth	r3, r3
 800c750:	429a      	cmp	r2, r3
 800c752:	d006      	beq.n	800c762 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	633b      	str	r3, [r7, #48]	@ 0x30
 800c75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1e6      	bne.n	800c72e <ip4_reass+0xb6>
 800c760:	e000      	b.n	800c764 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c762:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c766:	2b00      	cmp	r3, #0
 800c768:	d109      	bne.n	800c77e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c76a:	8c3b      	ldrh	r3, [r7, #32]
 800c76c:	4619      	mov	r1, r3
 800c76e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c770:	f7ff fdb0 	bl	800c2d4 <ip_reass_enqueue_new_datagram>
 800c774:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d11c      	bne.n	800c7b6 <ip4_reass+0x13e>
      goto nullreturn;
 800c77c:	e105      	b.n	800c98a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c780:	88db      	ldrh	r3, [r3, #6]
 800c782:	b29b      	uxth	r3, r3
 800c784:	4618      	mov	r0, r3
 800c786:	f7f7 f843 	bl	8003810 <lwip_htons>
 800c78a:	4603      	mov	r3, r0
 800c78c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c790:	2b00      	cmp	r3, #0
 800c792:	d110      	bne.n	800c7b6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c796:	89db      	ldrh	r3, [r3, #14]
 800c798:	4618      	mov	r0, r3
 800c79a:	f7f7 f839 	bl	8003810 <lwip_htons>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d006      	beq.n	800c7b6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7aa:	3308      	adds	r3, #8
 800c7ac:	2214      	movs	r2, #20
 800c7ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 fd4c 	bl	800d24e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b8:	88db      	ldrh	r3, [r3, #6]
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	f003 0320 	and.w	r3, r3, #32
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	bf0c      	ite	eq
 800c7c4:	2301      	moveq	r3, #1
 800c7c6:	2300      	movne	r3, #0
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00e      	beq.n	800c7f0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800c7d2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c7d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c7d6:	4413      	add	r3, r2
 800c7d8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c7da:	8b7a      	ldrh	r2, [r7, #26]
 800c7dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	f0c0 80a0 	bcc.w	800c924 <ip4_reass+0x2ac>
 800c7e4:	8b7b      	ldrh	r3, [r7, #26]
 800c7e6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	f200 809a 	bhi.w	800c924 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c7f0:	69fa      	ldr	r2, [r7, #28]
 800c7f2:	6879      	ldr	r1, [r7, #4]
 800c7f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7f6:	f7ff fdd5 	bl	800c3a4 <ip_reass_chain_frag_into_datagram_and_validate>
 800c7fa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c802:	f000 809b 	beq.w	800c93c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c806:	4b48      	ldr	r3, [pc, #288]	@ (800c928 <ip4_reass+0x2b0>)
 800c808:	881a      	ldrh	r2, [r3, #0]
 800c80a:	8c3b      	ldrh	r3, [r7, #32]
 800c80c:	4413      	add	r3, r2
 800c80e:	b29a      	uxth	r2, r3
 800c810:	4b45      	ldr	r3, [pc, #276]	@ (800c928 <ip4_reass+0x2b0>)
 800c812:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00d      	beq.n	800c836 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800c81a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c81c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c81e:	4413      	add	r3, r2
 800c820:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c824:	8a7a      	ldrh	r2, [r7, #18]
 800c826:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82a:	7f9b      	ldrb	r3, [r3, #30]
 800c82c:	f043 0301 	orr.w	r3, r3, #1
 800c830:	b2da      	uxtb	r2, r3
 800c832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c834:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d171      	bne.n	800c920 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800c83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83e:	8b9b      	ldrh	r3, [r3, #28]
 800c840:	3314      	adds	r3, #20
 800c842:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800c844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800c84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c858:	3308      	adds	r3, #8
 800c85a:	2214      	movs	r2, #20
 800c85c:	4619      	mov	r1, r3
 800c85e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c860:	f000 fcf5 	bl	800d24e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800c864:	8a3b      	ldrh	r3, [r7, #16]
 800c866:	4618      	mov	r0, r3
 800c868:	f7f6 ffd2 	bl	8003810 <lwip_htons>
 800c86c:	4603      	mov	r3, r0
 800c86e:	461a      	mov	r2, r3
 800c870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c872:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c876:	2200      	movs	r2, #0
 800c878:	719a      	strb	r2, [r3, #6]
 800c87a:	2200      	movs	r2, #0
 800c87c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c880:	2200      	movs	r2, #0
 800c882:	729a      	strb	r2, [r3, #10]
 800c884:	2200      	movs	r2, #0
 800c886:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c88e:	e00d      	b.n	800c8ac <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800c890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800c896:	2114      	movs	r1, #20
 800c898:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c89a:	f7f8 fa8b 	bl	8004db4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800c89e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7f8 fbcf 	bl	8005044 <pbuf_cat>
      r = iprh->next_pbuf;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800c8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1ee      	bne.n	800c890 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c8b2:	4b1e      	ldr	r3, [pc, #120]	@ (800c92c <ip4_reass+0x2b4>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d102      	bne.n	800c8c2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8c0:	e010      	b.n	800c8e4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c8c2:	4b1a      	ldr	r3, [pc, #104]	@ (800c92c <ip4_reass+0x2b4>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8c8:	e007      	b.n	800c8da <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800c8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d006      	beq.n	800c8e2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1f4      	bne.n	800c8ca <ip4_reass+0x252>
 800c8e0:	e000      	b.n	800c8e4 <ip4_reass+0x26c>
          break;
 800c8e2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c8e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8e8:	f7ff fd2e 	bl	800c348 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7f8 fb6f 	bl	8004fd0 <pbuf_clen>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c8f6:	4b0c      	ldr	r3, [pc, #48]	@ (800c928 <ip4_reass+0x2b0>)
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	8c3a      	ldrh	r2, [r7, #32]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d906      	bls.n	800c90e <ip4_reass+0x296>
 800c900:	4b0b      	ldr	r3, [pc, #44]	@ (800c930 <ip4_reass+0x2b8>)
 800c902:	f240 229b 	movw	r2, #667	@ 0x29b
 800c906:	490b      	ldr	r1, [pc, #44]	@ (800c934 <ip4_reass+0x2bc>)
 800c908:	480b      	ldr	r0, [pc, #44]	@ (800c938 <ip4_reass+0x2c0>)
 800c90a:	f000 fbc5 	bl	800d098 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800c90e:	4b06      	ldr	r3, [pc, #24]	@ (800c928 <ip4_reass+0x2b0>)
 800c910:	881a      	ldrh	r2, [r3, #0]
 800c912:	8c3b      	ldrh	r3, [r7, #32]
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	b29a      	uxth	r2, r3
 800c918:	4b03      	ldr	r3, [pc, #12]	@ (800c928 <ip4_reass+0x2b0>)
 800c91a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	e038      	b.n	800c992 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c920:	2300      	movs	r3, #0
 800c922:	e036      	b.n	800c992 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800c924:	bf00      	nop
 800c926:	e00a      	b.n	800c93e <ip4_reass+0x2c6>
 800c928:	20008308 	.word	0x20008308
 800c92c:	20008304 	.word	0x20008304
 800c930:	08010284 	.word	0x08010284
 800c934:	080103f4 	.word	0x080103f4
 800c938:	080102cc 	.word	0x080102cc
    goto nullreturn_ipr;
 800c93c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800c93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c940:	2b00      	cmp	r3, #0
 800c942:	d106      	bne.n	800c952 <ip4_reass+0x2da>
 800c944:	4b15      	ldr	r3, [pc, #84]	@ (800c99c <ip4_reass+0x324>)
 800c946:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800c94a:	4915      	ldr	r1, [pc, #84]	@ (800c9a0 <ip4_reass+0x328>)
 800c94c:	4815      	ldr	r0, [pc, #84]	@ (800c9a4 <ip4_reass+0x32c>)
 800c94e:	f000 fba3 	bl	800d098 <iprintf>
  if (ipr->p == NULL) {
 800c952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d116      	bne.n	800c988 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800c95a:	4b13      	ldr	r3, [pc, #76]	@ (800c9a8 <ip4_reass+0x330>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c960:	429a      	cmp	r2, r3
 800c962:	d006      	beq.n	800c972 <ip4_reass+0x2fa>
 800c964:	4b0d      	ldr	r3, [pc, #52]	@ (800c99c <ip4_reass+0x324>)
 800c966:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c96a:	4910      	ldr	r1, [pc, #64]	@ (800c9ac <ip4_reass+0x334>)
 800c96c:	480d      	ldr	r0, [pc, #52]	@ (800c9a4 <ip4_reass+0x32c>)
 800c96e:	f000 fb93 	bl	800d098 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800c972:	2100      	movs	r1, #0
 800c974:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c976:	f7ff fce7 	bl	800c348 <ip_reass_dequeue_datagram>
 800c97a:	e006      	b.n	800c98a <ip4_reass+0x312>
    goto nullreturn;
 800c97c:	bf00      	nop
 800c97e:	e004      	b.n	800c98a <ip4_reass+0x312>
    goto nullreturn;
 800c980:	bf00      	nop
 800c982:	e002      	b.n	800c98a <ip4_reass+0x312>
      goto nullreturn;
 800c984:	bf00      	nop
 800c986:	e000      	b.n	800c98a <ip4_reass+0x312>
  }

nullreturn:
 800c988:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7f8 fa98 	bl	8004ec0 <pbuf_free>
  return NULL;
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	3738      	adds	r7, #56	@ 0x38
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	08010284 	.word	0x08010284
 800c9a0:	08010410 	.word	0x08010410
 800c9a4:	080102cc 	.word	0x080102cc
 800c9a8:	20008304 	.word	0x20008304
 800c9ac:	0801041c 	.word	0x0801041c

0800c9b0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800c9b4:	2004      	movs	r0, #4
 800c9b6:	f7f7 fba1 	bl	80040fc <memp_malloc>
 800c9ba:	4603      	mov	r3, r0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <ip_frag_free_pbuf_custom_ref+0x1c>
 800c9ce:	4b07      	ldr	r3, [pc, #28]	@ (800c9ec <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c9d0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800c9d4:	4906      	ldr	r1, [pc, #24]	@ (800c9f0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800c9d6:	4807      	ldr	r0, [pc, #28]	@ (800c9f4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800c9d8:	f000 fb5e 	bl	800d098 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c9dc:	6879      	ldr	r1, [r7, #4]
 800c9de:	2004      	movs	r0, #4
 800c9e0:	f7f7 fbfc 	bl	80041dc <memp_free>
}
 800c9e4:	bf00      	nop
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	08010284 	.word	0x08010284
 800c9f0:	0801043c 	.word	0x0801043c
 800c9f4:	080102cc 	.word	0x080102cc

0800c9f8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d106      	bne.n	800ca18 <ipfrag_free_pbuf_custom+0x20>
 800ca0a:	4b11      	ldr	r3, [pc, #68]	@ (800ca50 <ipfrag_free_pbuf_custom+0x58>)
 800ca0c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800ca10:	4910      	ldr	r1, [pc, #64]	@ (800ca54 <ipfrag_free_pbuf_custom+0x5c>)
 800ca12:	4811      	ldr	r0, [pc, #68]	@ (800ca58 <ipfrag_free_pbuf_custom+0x60>)
 800ca14:	f000 fb40 	bl	800d098 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d006      	beq.n	800ca2e <ipfrag_free_pbuf_custom+0x36>
 800ca20:	4b0b      	ldr	r3, [pc, #44]	@ (800ca50 <ipfrag_free_pbuf_custom+0x58>)
 800ca22:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800ca26:	490d      	ldr	r1, [pc, #52]	@ (800ca5c <ipfrag_free_pbuf_custom+0x64>)
 800ca28:	480b      	ldr	r0, [pc, #44]	@ (800ca58 <ipfrag_free_pbuf_custom+0x60>)
 800ca2a:	f000 fb35 	bl	800d098 <iprintf>
  if (pcr->original != NULL) {
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	695b      	ldr	r3, [r3, #20]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d004      	beq.n	800ca40 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	695b      	ldr	r3, [r3, #20]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7f8 fa40 	bl	8004ec0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f7ff ffbd 	bl	800c9c0 <ip_frag_free_pbuf_custom_ref>
}
 800ca46:	bf00      	nop
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	08010284 	.word	0x08010284
 800ca54:	08010448 	.word	0x08010448
 800ca58:	080102cc 	.word	0x080102cc
 800ca5c:	08010454 	.word	0x08010454

0800ca60 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b094      	sub	sp, #80	@ 0x50
 800ca64:	af02      	add	r7, sp, #8
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ca76:	3b14      	subs	r3, #20
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	da00      	bge.n	800ca7e <ip4_frag+0x1e>
 800ca7c:	3307      	adds	r3, #7
 800ca7e:	10db      	asrs	r3, r3, #3
 800ca80:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ca82:	2314      	movs	r3, #20
 800ca84:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800ca8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca8e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ca90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	f003 030f 	and.w	r3, r3, #15
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	2b14      	cmp	r3, #20
 800caa0:	d002      	beq.n	800caa8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800caa2:	f06f 0305 	mvn.w	r3, #5
 800caa6:	e110      	b.n	800ccca <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	895b      	ldrh	r3, [r3, #10]
 800caac:	2b13      	cmp	r3, #19
 800caae:	d809      	bhi.n	800cac4 <ip4_frag+0x64>
 800cab0:	4b88      	ldr	r3, [pc, #544]	@ (800ccd4 <ip4_frag+0x274>)
 800cab2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800cab6:	4988      	ldr	r1, [pc, #544]	@ (800ccd8 <ip4_frag+0x278>)
 800cab8:	4888      	ldr	r0, [pc, #544]	@ (800ccdc <ip4_frag+0x27c>)
 800caba:	f000 faed 	bl	800d098 <iprintf>
 800cabe:	f06f 0305 	mvn.w	r3, #5
 800cac2:	e102      	b.n	800ccca <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800cac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac6:	88db      	ldrh	r3, [r3, #6]
 800cac8:	b29b      	uxth	r3, r3
 800caca:	4618      	mov	r0, r3
 800cacc:	f7f6 fea0 	bl	8003810 <lwip_htons>
 800cad0:	4603      	mov	r3, r0
 800cad2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800cad4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800cad6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cada:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800cade:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800cae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cae4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	891b      	ldrh	r3, [r3, #8]
 800caea:	3b14      	subs	r3, #20
 800caec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800caf0:	e0e1      	b.n	800ccb6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800caf2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800caf4:	00db      	lsls	r3, r3, #3
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800cafc:	4293      	cmp	r3, r2
 800cafe:	bf28      	it	cs
 800cb00:	4613      	movcs	r3, r2
 800cb02:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800cb04:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cb08:	2114      	movs	r1, #20
 800cb0a:	200e      	movs	r0, #14
 800cb0c:	f7f7 fef4 	bl	80048f8 <pbuf_alloc>
 800cb10:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800cb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f000 80d5 	beq.w	800ccc4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1c:	895b      	ldrh	r3, [r3, #10]
 800cb1e:	2b13      	cmp	r3, #19
 800cb20:	d806      	bhi.n	800cb30 <ip4_frag+0xd0>
 800cb22:	4b6c      	ldr	r3, [pc, #432]	@ (800ccd4 <ip4_frag+0x274>)
 800cb24:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800cb28:	496d      	ldr	r1, [pc, #436]	@ (800cce0 <ip4_frag+0x280>)
 800cb2a:	486c      	ldr	r0, [pc, #432]	@ (800ccdc <ip4_frag+0x27c>)
 800cb2c:	f000 fab4 	bl	800d098 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800cb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	2214      	movs	r2, #20
 800cb36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 fb88 	bl	800d24e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800cb44:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cb46:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800cb4a:	e064      	b.n	800cc16 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	895a      	ldrh	r2, [r3, #10]
 800cb50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	895b      	ldrh	r3, [r3, #10]
 800cb5a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d906      	bls.n	800cb6e <ip4_frag+0x10e>
 800cb60:	4b5c      	ldr	r3, [pc, #368]	@ (800ccd4 <ip4_frag+0x274>)
 800cb62:	f240 322d 	movw	r2, #813	@ 0x32d
 800cb66:	495f      	ldr	r1, [pc, #380]	@ (800cce4 <ip4_frag+0x284>)
 800cb68:	485c      	ldr	r0, [pc, #368]	@ (800ccdc <ip4_frag+0x27c>)
 800cb6a:	f000 fa95 	bl	800d098 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800cb6e:	8bfa      	ldrh	r2, [r7, #30]
 800cb70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cb74:	4293      	cmp	r3, r2
 800cb76:	bf28      	it	cs
 800cb78:	4613      	movcs	r3, r2
 800cb7a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800cb7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d105      	bne.n	800cb92 <ip4_frag+0x132>
        poff = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	60fb      	str	r3, [r7, #12]
        continue;
 800cb90:	e041      	b.n	800cc16 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800cb92:	f7ff ff0d 	bl	800c9b0 <ip_frag_alloc_pbuf_custom_ref>
 800cb96:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d103      	bne.n	800cba6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800cb9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cba0:	f7f8 f98e 	bl	8004ec0 <pbuf_free>
        goto memerr;
 800cba4:	e08f      	b.n	800ccc6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cba6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800cbac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800cbae:	4413      	add	r3, r2
 800cbb0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800cbb4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800cbb8:	9201      	str	r2, [sp, #4]
 800cbba:	9300      	str	r3, [sp, #0]
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2241      	movs	r2, #65	@ 0x41
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	f7f7 ffc3 	bl	8004b4c <pbuf_alloced_custom>
 800cbc6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d106      	bne.n	800cbdc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800cbce:	69b8      	ldr	r0, [r7, #24]
 800cbd0:	f7ff fef6 	bl	800c9c0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800cbd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cbd6:	f7f8 f973 	bl	8004ec0 <pbuf_free>
        goto memerr;
 800cbda:	e074      	b.n	800ccc6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f7f8 fa0f 	bl	8005000 <pbuf_ref>
      pcr->original = p;
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	4a3f      	ldr	r2, [pc, #252]	@ (800cce8 <ip4_frag+0x288>)
 800cbec:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800cbee:	6979      	ldr	r1, [r7, #20]
 800cbf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cbf2:	f7f8 fa27 	bl	8005044 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800cbf6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800cbfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800cc04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d004      	beq.n	800cc16 <ip4_frag+0x1b6>
        poff = 0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800cc16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d196      	bne.n	800cb4c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800cc1e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800cc20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cc24:	4413      	add	r3, r2
 800cc26:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cc2c:	f1a3 0213 	sub.w	r2, r3, #19
 800cc30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cc34:	429a      	cmp	r2, r3
 800cc36:	bfcc      	ite	gt
 800cc38:	2301      	movgt	r3, #1
 800cc3a:	2300      	movle	r3, #0
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800cc40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800cc44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc48:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d002      	beq.n	800cc56 <ip4_frag+0x1f6>
 800cc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d003      	beq.n	800cc5e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800cc56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800cc58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800cc5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800cc5e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7f6 fdd5 	bl	8003810 <lwip_htons>
 800cc66:	4603      	mov	r3, r0
 800cc68:	461a      	mov	r2, r3
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800cc6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cc70:	3314      	adds	r3, #20
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7f6 fdcb 	bl	8003810 <lwip_htons>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc80:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800cc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc84:	2200      	movs	r2, #0
 800cc86:	729a      	strb	r2, [r3, #10]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	695b      	ldr	r3, [r3, #20]
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cc94:	68b8      	ldr	r0, [r7, #8]
 800cc96:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800cc98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cc9a:	f7f8 f911 	bl	8004ec0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800cc9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800cca2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800ccaa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ccae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800ccb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f47f af19 	bne.w	800caf2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	e002      	b.n	800ccca <ip4_frag+0x26a>
      goto memerr;
 800ccc4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ccc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3748      	adds	r7, #72	@ 0x48
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	08010284 	.word	0x08010284
 800ccd8:	08010460 	.word	0x08010460
 800ccdc:	080102cc 	.word	0x080102cc
 800cce0:	0801047c 	.word	0x0801047c
 800cce4:	0801049c 	.word	0x0801049c
 800cce8:	0800c9f9 	.word	0x0800c9f9

0800ccec <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b086      	sub	sp, #24
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ccf6:	230e      	movs	r3, #14
 800ccf8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	895b      	ldrh	r3, [r3, #10]
 800ccfe:	2b0e      	cmp	r3, #14
 800cd00:	d96e      	bls.n	800cde0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	7bdb      	ldrb	r3, [r3, #15]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d106      	bne.n	800cd18 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd10:	3301      	adds	r3, #1
 800cd12:	b2da      	uxtb	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	7b1a      	ldrb	r2, [r3, #12]
 800cd22:	7b5b      	ldrb	r3, [r3, #13]
 800cd24:	021b      	lsls	r3, r3, #8
 800cd26:	4313      	orrs	r3, r2
 800cd28:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	f003 0301 	and.w	r3, r3, #1
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d023      	beq.n	800cd7e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d10f      	bne.n	800cd5e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	785b      	ldrb	r3, [r3, #1]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d11b      	bne.n	800cd7e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cd4a:	2b5e      	cmp	r3, #94	@ 0x5e
 800cd4c:	d117      	bne.n	800cd7e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	7b5b      	ldrb	r3, [r3, #13]
 800cd52:	f043 0310 	orr.w	r3, r3, #16
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	735a      	strb	r2, [r3, #13]
 800cd5c:	e00f      	b.n	800cd7e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	2206      	movs	r2, #6
 800cd62:	4928      	ldr	r1, [pc, #160]	@ (800ce04 <ethernet_input+0x118>)
 800cd64:	4618      	mov	r0, r3
 800cd66:	f000 f9ec 	bl	800d142 <memcmp>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d106      	bne.n	800cd7e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	7b5b      	ldrb	r3, [r3, #13]
 800cd74:	f043 0308 	orr.w	r3, r3, #8
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800cd7e:	89fb      	ldrh	r3, [r7, #14]
 800cd80:	2b08      	cmp	r3, #8
 800cd82:	d003      	beq.n	800cd8c <ethernet_input+0xa0>
 800cd84:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800cd88:	d014      	beq.n	800cdb4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800cd8a:	e032      	b.n	800cdf2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd92:	f003 0308 	and.w	r3, r3, #8
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d024      	beq.n	800cde4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800cd9a:	8afb      	ldrh	r3, [r7, #22]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7f8 f808 	bl	8004db4 <pbuf_remove_header>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d11e      	bne.n	800cde8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7fe ff2b 	bl	800bc08 <ip4_input>
      break;
 800cdb2:	e013      	b.n	800cddc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cdba:	f003 0308 	and.w	r3, r3, #8
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d014      	beq.n	800cdec <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800cdc2:	8afb      	ldrh	r3, [r7, #22]
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7f7 fff4 	bl	8004db4 <pbuf_remove_header>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10e      	bne.n	800cdf0 <ethernet_input+0x104>
        etharp_input(p, netif);
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7fe f8cb 	bl	800af70 <etharp_input>
      break;
 800cdda:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	e00c      	b.n	800cdfa <ethernet_input+0x10e>
    goto free_and_return;
 800cde0:	bf00      	nop
 800cde2:	e006      	b.n	800cdf2 <ethernet_input+0x106>
        goto free_and_return;
 800cde4:	bf00      	nop
 800cde6:	e004      	b.n	800cdf2 <ethernet_input+0x106>
        goto free_and_return;
 800cde8:	bf00      	nop
 800cdea:	e002      	b.n	800cdf2 <ethernet_input+0x106>
        goto free_and_return;
 800cdec:	bf00      	nop
 800cdee:	e000      	b.n	800cdf2 <ethernet_input+0x106>
        goto free_and_return;
 800cdf0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7f8 f864 	bl	8004ec0 <pbuf_free>
  return ERR_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3718      	adds	r7, #24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	08010620 	.word	0x08010620

0800ce08 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	607a      	str	r2, [r7, #4]
 800ce14:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ce16:	8c3b      	ldrh	r3, [r7, #32]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7f6 fcf9 	bl	8003810 <lwip_htons>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ce22:	210e      	movs	r1, #14
 800ce24:	68b8      	ldr	r0, [r7, #8]
 800ce26:	f7f7 ffb5 	bl	8004d94 <pbuf_add_header>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d125      	bne.n	800ce7c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	8afa      	ldrh	r2, [r7, #22]
 800ce3a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	2206      	movs	r2, #6
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f000 fa03 	bl	800d24e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	3306      	adds	r3, #6
 800ce4c:	2206      	movs	r2, #6
 800ce4e:	6879      	ldr	r1, [r7, #4]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f000 f9fc 	bl	800d24e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ce5c:	2b06      	cmp	r3, #6
 800ce5e:	d006      	beq.n	800ce6e <ethernet_output+0x66>
 800ce60:	4b0a      	ldr	r3, [pc, #40]	@ (800ce8c <ethernet_output+0x84>)
 800ce62:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800ce66:	490a      	ldr	r1, [pc, #40]	@ (800ce90 <ethernet_output+0x88>)
 800ce68:	480a      	ldr	r0, [pc, #40]	@ (800ce94 <ethernet_output+0x8c>)
 800ce6a:	f000 f915 	bl	800d098 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	699b      	ldr	r3, [r3, #24]
 800ce72:	68b9      	ldr	r1, [r7, #8]
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	4798      	blx	r3
 800ce78:	4603      	mov	r3, r0
 800ce7a:	e002      	b.n	800ce82 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ce7c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ce7e:	f06f 0301 	mvn.w	r3, #1
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3718      	adds	r7, #24
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	080104ac 	.word	0x080104ac
 800ce90:	080104e4 	.word	0x080104e4
 800ce94:	08010518 	.word	0x08010518

0800ce98 <rand>:
 800ce98:	4b16      	ldr	r3, [pc, #88]	@ (800cef4 <rand+0x5c>)
 800ce9a:	b510      	push	{r4, lr}
 800ce9c:	681c      	ldr	r4, [r3, #0]
 800ce9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cea0:	b9b3      	cbnz	r3, 800ced0 <rand+0x38>
 800cea2:	2018      	movs	r0, #24
 800cea4:	f000 fa4a 	bl	800d33c <malloc>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	6320      	str	r0, [r4, #48]	@ 0x30
 800ceac:	b920      	cbnz	r0, 800ceb8 <rand+0x20>
 800ceae:	4b12      	ldr	r3, [pc, #72]	@ (800cef8 <rand+0x60>)
 800ceb0:	4812      	ldr	r0, [pc, #72]	@ (800cefc <rand+0x64>)
 800ceb2:	2152      	movs	r1, #82	@ 0x52
 800ceb4:	f000 f9da 	bl	800d26c <__assert_func>
 800ceb8:	4911      	ldr	r1, [pc, #68]	@ (800cf00 <rand+0x68>)
 800ceba:	4b12      	ldr	r3, [pc, #72]	@ (800cf04 <rand+0x6c>)
 800cebc:	e9c0 1300 	strd	r1, r3, [r0]
 800cec0:	4b11      	ldr	r3, [pc, #68]	@ (800cf08 <rand+0x70>)
 800cec2:	6083      	str	r3, [r0, #8]
 800cec4:	230b      	movs	r3, #11
 800cec6:	8183      	strh	r3, [r0, #12]
 800cec8:	2100      	movs	r1, #0
 800ceca:	2001      	movs	r0, #1
 800cecc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ced0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ced2:	480e      	ldr	r0, [pc, #56]	@ (800cf0c <rand+0x74>)
 800ced4:	690b      	ldr	r3, [r1, #16]
 800ced6:	694c      	ldr	r4, [r1, #20]
 800ced8:	4a0d      	ldr	r2, [pc, #52]	@ (800cf10 <rand+0x78>)
 800ceda:	4358      	muls	r0, r3
 800cedc:	fb02 0004 	mla	r0, r2, r4, r0
 800cee0:	fba3 3202 	umull	r3, r2, r3, r2
 800cee4:	3301      	adds	r3, #1
 800cee6:	eb40 0002 	adc.w	r0, r0, r2
 800ceea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ceee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800cef2:	bd10      	pop	{r4, pc}
 800cef4:	20000034 	.word	0x20000034
 800cef8:	0801062e 	.word	0x0801062e
 800cefc:	08010645 	.word	0x08010645
 800cf00:	abcd330e 	.word	0xabcd330e
 800cf04:	e66d1234 	.word	0xe66d1234
 800cf08:	0005deec 	.word	0x0005deec
 800cf0c:	5851f42d 	.word	0x5851f42d
 800cf10:	4c957f2d 	.word	0x4c957f2d

0800cf14 <std>:
 800cf14:	2300      	movs	r3, #0
 800cf16:	b510      	push	{r4, lr}
 800cf18:	4604      	mov	r4, r0
 800cf1a:	e9c0 3300 	strd	r3, r3, [r0]
 800cf1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf22:	6083      	str	r3, [r0, #8]
 800cf24:	8181      	strh	r1, [r0, #12]
 800cf26:	6643      	str	r3, [r0, #100]	@ 0x64
 800cf28:	81c2      	strh	r2, [r0, #14]
 800cf2a:	6183      	str	r3, [r0, #24]
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	2208      	movs	r2, #8
 800cf30:	305c      	adds	r0, #92	@ 0x5c
 800cf32:	f000 f916 	bl	800d162 <memset>
 800cf36:	4b0d      	ldr	r3, [pc, #52]	@ (800cf6c <std+0x58>)
 800cf38:	6263      	str	r3, [r4, #36]	@ 0x24
 800cf3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf70 <std+0x5c>)
 800cf3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cf3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cf74 <std+0x60>)
 800cf40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf42:	4b0d      	ldr	r3, [pc, #52]	@ (800cf78 <std+0x64>)
 800cf44:	6323      	str	r3, [r4, #48]	@ 0x30
 800cf46:	4b0d      	ldr	r3, [pc, #52]	@ (800cf7c <std+0x68>)
 800cf48:	6224      	str	r4, [r4, #32]
 800cf4a:	429c      	cmp	r4, r3
 800cf4c:	d006      	beq.n	800cf5c <std+0x48>
 800cf4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cf52:	4294      	cmp	r4, r2
 800cf54:	d002      	beq.n	800cf5c <std+0x48>
 800cf56:	33d0      	adds	r3, #208	@ 0xd0
 800cf58:	429c      	cmp	r4, r3
 800cf5a:	d105      	bne.n	800cf68 <std+0x54>
 800cf5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cf60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf64:	f000 b970 	b.w	800d248 <__retarget_lock_init_recursive>
 800cf68:	bd10      	pop	{r4, pc}
 800cf6a:	bf00      	nop
 800cf6c:	0800d0bd 	.word	0x0800d0bd
 800cf70:	0800d0df 	.word	0x0800d0df
 800cf74:	0800d117 	.word	0x0800d117
 800cf78:	0800d13b 	.word	0x0800d13b
 800cf7c:	2000830c 	.word	0x2000830c

0800cf80 <stdio_exit_handler>:
 800cf80:	4a02      	ldr	r2, [pc, #8]	@ (800cf8c <stdio_exit_handler+0xc>)
 800cf82:	4903      	ldr	r1, [pc, #12]	@ (800cf90 <stdio_exit_handler+0x10>)
 800cf84:	4803      	ldr	r0, [pc, #12]	@ (800cf94 <stdio_exit_handler+0x14>)
 800cf86:	f000 b869 	b.w	800d05c <_fwalk_sglue>
 800cf8a:	bf00      	nop
 800cf8c:	20000028 	.word	0x20000028
 800cf90:	0800db51 	.word	0x0800db51
 800cf94:	20000038 	.word	0x20000038

0800cf98 <cleanup_stdio>:
 800cf98:	6841      	ldr	r1, [r0, #4]
 800cf9a:	4b0c      	ldr	r3, [pc, #48]	@ (800cfcc <cleanup_stdio+0x34>)
 800cf9c:	4299      	cmp	r1, r3
 800cf9e:	b510      	push	{r4, lr}
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	d001      	beq.n	800cfa8 <cleanup_stdio+0x10>
 800cfa4:	f000 fdd4 	bl	800db50 <_fflush_r>
 800cfa8:	68a1      	ldr	r1, [r4, #8]
 800cfaa:	4b09      	ldr	r3, [pc, #36]	@ (800cfd0 <cleanup_stdio+0x38>)
 800cfac:	4299      	cmp	r1, r3
 800cfae:	d002      	beq.n	800cfb6 <cleanup_stdio+0x1e>
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f000 fdcd 	bl	800db50 <_fflush_r>
 800cfb6:	68e1      	ldr	r1, [r4, #12]
 800cfb8:	4b06      	ldr	r3, [pc, #24]	@ (800cfd4 <cleanup_stdio+0x3c>)
 800cfba:	4299      	cmp	r1, r3
 800cfbc:	d004      	beq.n	800cfc8 <cleanup_stdio+0x30>
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfc4:	f000 bdc4 	b.w	800db50 <_fflush_r>
 800cfc8:	bd10      	pop	{r4, pc}
 800cfca:	bf00      	nop
 800cfcc:	2000830c 	.word	0x2000830c
 800cfd0:	20008374 	.word	0x20008374
 800cfd4:	200083dc 	.word	0x200083dc

0800cfd8 <global_stdio_init.part.0>:
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	4b0b      	ldr	r3, [pc, #44]	@ (800d008 <global_stdio_init.part.0+0x30>)
 800cfdc:	4c0b      	ldr	r4, [pc, #44]	@ (800d00c <global_stdio_init.part.0+0x34>)
 800cfde:	4a0c      	ldr	r2, [pc, #48]	@ (800d010 <global_stdio_init.part.0+0x38>)
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	2104      	movs	r1, #4
 800cfe8:	f7ff ff94 	bl	800cf14 <std>
 800cfec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cff0:	2201      	movs	r2, #1
 800cff2:	2109      	movs	r1, #9
 800cff4:	f7ff ff8e 	bl	800cf14 <std>
 800cff8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cffc:	2202      	movs	r2, #2
 800cffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d002:	2112      	movs	r1, #18
 800d004:	f7ff bf86 	b.w	800cf14 <std>
 800d008:	20008444 	.word	0x20008444
 800d00c:	2000830c 	.word	0x2000830c
 800d010:	0800cf81 	.word	0x0800cf81

0800d014 <__sfp_lock_acquire>:
 800d014:	4801      	ldr	r0, [pc, #4]	@ (800d01c <__sfp_lock_acquire+0x8>)
 800d016:	f000 b918 	b.w	800d24a <__retarget_lock_acquire_recursive>
 800d01a:	bf00      	nop
 800d01c:	2000844d 	.word	0x2000844d

0800d020 <__sfp_lock_release>:
 800d020:	4801      	ldr	r0, [pc, #4]	@ (800d028 <__sfp_lock_release+0x8>)
 800d022:	f000 b913 	b.w	800d24c <__retarget_lock_release_recursive>
 800d026:	bf00      	nop
 800d028:	2000844d 	.word	0x2000844d

0800d02c <__sinit>:
 800d02c:	b510      	push	{r4, lr}
 800d02e:	4604      	mov	r4, r0
 800d030:	f7ff fff0 	bl	800d014 <__sfp_lock_acquire>
 800d034:	6a23      	ldr	r3, [r4, #32]
 800d036:	b11b      	cbz	r3, 800d040 <__sinit+0x14>
 800d038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d03c:	f7ff bff0 	b.w	800d020 <__sfp_lock_release>
 800d040:	4b04      	ldr	r3, [pc, #16]	@ (800d054 <__sinit+0x28>)
 800d042:	6223      	str	r3, [r4, #32]
 800d044:	4b04      	ldr	r3, [pc, #16]	@ (800d058 <__sinit+0x2c>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1f5      	bne.n	800d038 <__sinit+0xc>
 800d04c:	f7ff ffc4 	bl	800cfd8 <global_stdio_init.part.0>
 800d050:	e7f2      	b.n	800d038 <__sinit+0xc>
 800d052:	bf00      	nop
 800d054:	0800cf99 	.word	0x0800cf99
 800d058:	20008444 	.word	0x20008444

0800d05c <_fwalk_sglue>:
 800d05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d060:	4607      	mov	r7, r0
 800d062:	4688      	mov	r8, r1
 800d064:	4614      	mov	r4, r2
 800d066:	2600      	movs	r6, #0
 800d068:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d06c:	f1b9 0901 	subs.w	r9, r9, #1
 800d070:	d505      	bpl.n	800d07e <_fwalk_sglue+0x22>
 800d072:	6824      	ldr	r4, [r4, #0]
 800d074:	2c00      	cmp	r4, #0
 800d076:	d1f7      	bne.n	800d068 <_fwalk_sglue+0xc>
 800d078:	4630      	mov	r0, r6
 800d07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d07e:	89ab      	ldrh	r3, [r5, #12]
 800d080:	2b01      	cmp	r3, #1
 800d082:	d907      	bls.n	800d094 <_fwalk_sglue+0x38>
 800d084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d088:	3301      	adds	r3, #1
 800d08a:	d003      	beq.n	800d094 <_fwalk_sglue+0x38>
 800d08c:	4629      	mov	r1, r5
 800d08e:	4638      	mov	r0, r7
 800d090:	47c0      	blx	r8
 800d092:	4306      	orrs	r6, r0
 800d094:	3568      	adds	r5, #104	@ 0x68
 800d096:	e7e9      	b.n	800d06c <_fwalk_sglue+0x10>

0800d098 <iprintf>:
 800d098:	b40f      	push	{r0, r1, r2, r3}
 800d09a:	b507      	push	{r0, r1, r2, lr}
 800d09c:	4906      	ldr	r1, [pc, #24]	@ (800d0b8 <iprintf+0x20>)
 800d09e:	ab04      	add	r3, sp, #16
 800d0a0:	6808      	ldr	r0, [r1, #0]
 800d0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0a6:	6881      	ldr	r1, [r0, #8]
 800d0a8:	9301      	str	r3, [sp, #4]
 800d0aa:	f000 fa27 	bl	800d4fc <_vfiprintf_r>
 800d0ae:	b003      	add	sp, #12
 800d0b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0b4:	b004      	add	sp, #16
 800d0b6:	4770      	bx	lr
 800d0b8:	20000034 	.word	0x20000034

0800d0bc <__sread>:
 800d0bc:	b510      	push	{r4, lr}
 800d0be:	460c      	mov	r4, r1
 800d0c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0c4:	f000 f878 	bl	800d1b8 <_read_r>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	bfab      	itete	ge
 800d0cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d0ce:	89a3      	ldrhlt	r3, [r4, #12]
 800d0d0:	181b      	addge	r3, r3, r0
 800d0d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d0d6:	bfac      	ite	ge
 800d0d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d0da:	81a3      	strhlt	r3, [r4, #12]
 800d0dc:	bd10      	pop	{r4, pc}

0800d0de <__swrite>:
 800d0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e2:	461f      	mov	r7, r3
 800d0e4:	898b      	ldrh	r3, [r1, #12]
 800d0e6:	05db      	lsls	r3, r3, #23
 800d0e8:	4605      	mov	r5, r0
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	4616      	mov	r6, r2
 800d0ee:	d505      	bpl.n	800d0fc <__swrite+0x1e>
 800d0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	f000 f84c 	bl	800d194 <_lseek_r>
 800d0fc:	89a3      	ldrh	r3, [r4, #12]
 800d0fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d102:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d106:	81a3      	strh	r3, [r4, #12]
 800d108:	4632      	mov	r2, r6
 800d10a:	463b      	mov	r3, r7
 800d10c:	4628      	mov	r0, r5
 800d10e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d112:	f000 b863 	b.w	800d1dc <_write_r>

0800d116 <__sseek>:
 800d116:	b510      	push	{r4, lr}
 800d118:	460c      	mov	r4, r1
 800d11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d11e:	f000 f839 	bl	800d194 <_lseek_r>
 800d122:	1c43      	adds	r3, r0, #1
 800d124:	89a3      	ldrh	r3, [r4, #12]
 800d126:	bf15      	itete	ne
 800d128:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d12a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d12e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d132:	81a3      	strheq	r3, [r4, #12]
 800d134:	bf18      	it	ne
 800d136:	81a3      	strhne	r3, [r4, #12]
 800d138:	bd10      	pop	{r4, pc}

0800d13a <__sclose>:
 800d13a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d13e:	f000 b819 	b.w	800d174 <_close_r>

0800d142 <memcmp>:
 800d142:	b510      	push	{r4, lr}
 800d144:	3901      	subs	r1, #1
 800d146:	4402      	add	r2, r0
 800d148:	4290      	cmp	r0, r2
 800d14a:	d101      	bne.n	800d150 <memcmp+0xe>
 800d14c:	2000      	movs	r0, #0
 800d14e:	e005      	b.n	800d15c <memcmp+0x1a>
 800d150:	7803      	ldrb	r3, [r0, #0]
 800d152:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d156:	42a3      	cmp	r3, r4
 800d158:	d001      	beq.n	800d15e <memcmp+0x1c>
 800d15a:	1b18      	subs	r0, r3, r4
 800d15c:	bd10      	pop	{r4, pc}
 800d15e:	3001      	adds	r0, #1
 800d160:	e7f2      	b.n	800d148 <memcmp+0x6>

0800d162 <memset>:
 800d162:	4402      	add	r2, r0
 800d164:	4603      	mov	r3, r0
 800d166:	4293      	cmp	r3, r2
 800d168:	d100      	bne.n	800d16c <memset+0xa>
 800d16a:	4770      	bx	lr
 800d16c:	f803 1b01 	strb.w	r1, [r3], #1
 800d170:	e7f9      	b.n	800d166 <memset+0x4>
	...

0800d174 <_close_r>:
 800d174:	b538      	push	{r3, r4, r5, lr}
 800d176:	4d06      	ldr	r5, [pc, #24]	@ (800d190 <_close_r+0x1c>)
 800d178:	2300      	movs	r3, #0
 800d17a:	4604      	mov	r4, r0
 800d17c:	4608      	mov	r0, r1
 800d17e:	602b      	str	r3, [r5, #0]
 800d180:	f7f3 fbae 	bl	80008e0 <_close>
 800d184:	1c43      	adds	r3, r0, #1
 800d186:	d102      	bne.n	800d18e <_close_r+0x1a>
 800d188:	682b      	ldr	r3, [r5, #0]
 800d18a:	b103      	cbz	r3, 800d18e <_close_r+0x1a>
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	bd38      	pop	{r3, r4, r5, pc}
 800d190:	20008448 	.word	0x20008448

0800d194 <_lseek_r>:
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	4d07      	ldr	r5, [pc, #28]	@ (800d1b4 <_lseek_r+0x20>)
 800d198:	4604      	mov	r4, r0
 800d19a:	4608      	mov	r0, r1
 800d19c:	4611      	mov	r1, r2
 800d19e:	2200      	movs	r2, #0
 800d1a0:	602a      	str	r2, [r5, #0]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	f7f3 fbc3 	bl	800092e <_lseek>
 800d1a8:	1c43      	adds	r3, r0, #1
 800d1aa:	d102      	bne.n	800d1b2 <_lseek_r+0x1e>
 800d1ac:	682b      	ldr	r3, [r5, #0]
 800d1ae:	b103      	cbz	r3, 800d1b2 <_lseek_r+0x1e>
 800d1b0:	6023      	str	r3, [r4, #0]
 800d1b2:	bd38      	pop	{r3, r4, r5, pc}
 800d1b4:	20008448 	.word	0x20008448

0800d1b8 <_read_r>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	4d07      	ldr	r5, [pc, #28]	@ (800d1d8 <_read_r+0x20>)
 800d1bc:	4604      	mov	r4, r0
 800d1be:	4608      	mov	r0, r1
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	602a      	str	r2, [r5, #0]
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	f7f3 fb51 	bl	800086e <_read>
 800d1cc:	1c43      	adds	r3, r0, #1
 800d1ce:	d102      	bne.n	800d1d6 <_read_r+0x1e>
 800d1d0:	682b      	ldr	r3, [r5, #0]
 800d1d2:	b103      	cbz	r3, 800d1d6 <_read_r+0x1e>
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	20008448 	.word	0x20008448

0800d1dc <_write_r>:
 800d1dc:	b538      	push	{r3, r4, r5, lr}
 800d1de:	4d07      	ldr	r5, [pc, #28]	@ (800d1fc <_write_r+0x20>)
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	4608      	mov	r0, r1
 800d1e4:	4611      	mov	r1, r2
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	602a      	str	r2, [r5, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	f7f3 fb5c 	bl	80008a8 <_write>
 800d1f0:	1c43      	adds	r3, r0, #1
 800d1f2:	d102      	bne.n	800d1fa <_write_r+0x1e>
 800d1f4:	682b      	ldr	r3, [r5, #0]
 800d1f6:	b103      	cbz	r3, 800d1fa <_write_r+0x1e>
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	bd38      	pop	{r3, r4, r5, pc}
 800d1fc:	20008448 	.word	0x20008448

0800d200 <__libc_init_array>:
 800d200:	b570      	push	{r4, r5, r6, lr}
 800d202:	4d0d      	ldr	r5, [pc, #52]	@ (800d238 <__libc_init_array+0x38>)
 800d204:	4c0d      	ldr	r4, [pc, #52]	@ (800d23c <__libc_init_array+0x3c>)
 800d206:	1b64      	subs	r4, r4, r5
 800d208:	10a4      	asrs	r4, r4, #2
 800d20a:	2600      	movs	r6, #0
 800d20c:	42a6      	cmp	r6, r4
 800d20e:	d109      	bne.n	800d224 <__libc_init_array+0x24>
 800d210:	4d0b      	ldr	r5, [pc, #44]	@ (800d240 <__libc_init_array+0x40>)
 800d212:	4c0c      	ldr	r4, [pc, #48]	@ (800d244 <__libc_init_array+0x44>)
 800d214:	f000 fe4a 	bl	800deac <_init>
 800d218:	1b64      	subs	r4, r4, r5
 800d21a:	10a4      	asrs	r4, r4, #2
 800d21c:	2600      	movs	r6, #0
 800d21e:	42a6      	cmp	r6, r4
 800d220:	d105      	bne.n	800d22e <__libc_init_array+0x2e>
 800d222:	bd70      	pop	{r4, r5, r6, pc}
 800d224:	f855 3b04 	ldr.w	r3, [r5], #4
 800d228:	4798      	blx	r3
 800d22a:	3601      	adds	r6, #1
 800d22c:	e7ee      	b.n	800d20c <__libc_init_array+0xc>
 800d22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d232:	4798      	blx	r3
 800d234:	3601      	adds	r6, #1
 800d236:	e7f2      	b.n	800d21e <__libc_init_array+0x1e>
 800d238:	08010714 	.word	0x08010714
 800d23c:	08010714 	.word	0x08010714
 800d240:	08010714 	.word	0x08010714
 800d244:	08010718 	.word	0x08010718

0800d248 <__retarget_lock_init_recursive>:
 800d248:	4770      	bx	lr

0800d24a <__retarget_lock_acquire_recursive>:
 800d24a:	4770      	bx	lr

0800d24c <__retarget_lock_release_recursive>:
 800d24c:	4770      	bx	lr

0800d24e <memcpy>:
 800d24e:	440a      	add	r2, r1
 800d250:	4291      	cmp	r1, r2
 800d252:	f100 33ff 	add.w	r3, r0, #4294967295
 800d256:	d100      	bne.n	800d25a <memcpy+0xc>
 800d258:	4770      	bx	lr
 800d25a:	b510      	push	{r4, lr}
 800d25c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d260:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d264:	4291      	cmp	r1, r2
 800d266:	d1f9      	bne.n	800d25c <memcpy+0xe>
 800d268:	bd10      	pop	{r4, pc}
	...

0800d26c <__assert_func>:
 800d26c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d26e:	4614      	mov	r4, r2
 800d270:	461a      	mov	r2, r3
 800d272:	4b09      	ldr	r3, [pc, #36]	@ (800d298 <__assert_func+0x2c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4605      	mov	r5, r0
 800d278:	68d8      	ldr	r0, [r3, #12]
 800d27a:	b954      	cbnz	r4, 800d292 <__assert_func+0x26>
 800d27c:	4b07      	ldr	r3, [pc, #28]	@ (800d29c <__assert_func+0x30>)
 800d27e:	461c      	mov	r4, r3
 800d280:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d284:	9100      	str	r1, [sp, #0]
 800d286:	462b      	mov	r3, r5
 800d288:	4905      	ldr	r1, [pc, #20]	@ (800d2a0 <__assert_func+0x34>)
 800d28a:	f000 fc89 	bl	800dba0 <fiprintf>
 800d28e:	f000 fd3d 	bl	800dd0c <abort>
 800d292:	4b04      	ldr	r3, [pc, #16]	@ (800d2a4 <__assert_func+0x38>)
 800d294:	e7f4      	b.n	800d280 <__assert_func+0x14>
 800d296:	bf00      	nop
 800d298:	20000034 	.word	0x20000034
 800d29c:	080106d8 	.word	0x080106d8
 800d2a0:	080106aa 	.word	0x080106aa
 800d2a4:	0801069d 	.word	0x0801069d

0800d2a8 <_free_r>:
 800d2a8:	b538      	push	{r3, r4, r5, lr}
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	2900      	cmp	r1, #0
 800d2ae:	d041      	beq.n	800d334 <_free_r+0x8c>
 800d2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2b4:	1f0c      	subs	r4, r1, #4
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	bfb8      	it	lt
 800d2ba:	18e4      	addlt	r4, r4, r3
 800d2bc:	f000 f8e8 	bl	800d490 <__malloc_lock>
 800d2c0:	4a1d      	ldr	r2, [pc, #116]	@ (800d338 <_free_r+0x90>)
 800d2c2:	6813      	ldr	r3, [r2, #0]
 800d2c4:	b933      	cbnz	r3, 800d2d4 <_free_r+0x2c>
 800d2c6:	6063      	str	r3, [r4, #4]
 800d2c8:	6014      	str	r4, [r2, #0]
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2d0:	f000 b8e4 	b.w	800d49c <__malloc_unlock>
 800d2d4:	42a3      	cmp	r3, r4
 800d2d6:	d908      	bls.n	800d2ea <_free_r+0x42>
 800d2d8:	6820      	ldr	r0, [r4, #0]
 800d2da:	1821      	adds	r1, r4, r0
 800d2dc:	428b      	cmp	r3, r1
 800d2de:	bf01      	itttt	eq
 800d2e0:	6819      	ldreq	r1, [r3, #0]
 800d2e2:	685b      	ldreq	r3, [r3, #4]
 800d2e4:	1809      	addeq	r1, r1, r0
 800d2e6:	6021      	streq	r1, [r4, #0]
 800d2e8:	e7ed      	b.n	800d2c6 <_free_r+0x1e>
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	b10b      	cbz	r3, 800d2f4 <_free_r+0x4c>
 800d2f0:	42a3      	cmp	r3, r4
 800d2f2:	d9fa      	bls.n	800d2ea <_free_r+0x42>
 800d2f4:	6811      	ldr	r1, [r2, #0]
 800d2f6:	1850      	adds	r0, r2, r1
 800d2f8:	42a0      	cmp	r0, r4
 800d2fa:	d10b      	bne.n	800d314 <_free_r+0x6c>
 800d2fc:	6820      	ldr	r0, [r4, #0]
 800d2fe:	4401      	add	r1, r0
 800d300:	1850      	adds	r0, r2, r1
 800d302:	4283      	cmp	r3, r0
 800d304:	6011      	str	r1, [r2, #0]
 800d306:	d1e0      	bne.n	800d2ca <_free_r+0x22>
 800d308:	6818      	ldr	r0, [r3, #0]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	6053      	str	r3, [r2, #4]
 800d30e:	4408      	add	r0, r1
 800d310:	6010      	str	r0, [r2, #0]
 800d312:	e7da      	b.n	800d2ca <_free_r+0x22>
 800d314:	d902      	bls.n	800d31c <_free_r+0x74>
 800d316:	230c      	movs	r3, #12
 800d318:	602b      	str	r3, [r5, #0]
 800d31a:	e7d6      	b.n	800d2ca <_free_r+0x22>
 800d31c:	6820      	ldr	r0, [r4, #0]
 800d31e:	1821      	adds	r1, r4, r0
 800d320:	428b      	cmp	r3, r1
 800d322:	bf04      	itt	eq
 800d324:	6819      	ldreq	r1, [r3, #0]
 800d326:	685b      	ldreq	r3, [r3, #4]
 800d328:	6063      	str	r3, [r4, #4]
 800d32a:	bf04      	itt	eq
 800d32c:	1809      	addeq	r1, r1, r0
 800d32e:	6021      	streq	r1, [r4, #0]
 800d330:	6054      	str	r4, [r2, #4]
 800d332:	e7ca      	b.n	800d2ca <_free_r+0x22>
 800d334:	bd38      	pop	{r3, r4, r5, pc}
 800d336:	bf00      	nop
 800d338:	20008454 	.word	0x20008454

0800d33c <malloc>:
 800d33c:	4b02      	ldr	r3, [pc, #8]	@ (800d348 <malloc+0xc>)
 800d33e:	4601      	mov	r1, r0
 800d340:	6818      	ldr	r0, [r3, #0]
 800d342:	f000 b825 	b.w	800d390 <_malloc_r>
 800d346:	bf00      	nop
 800d348:	20000034 	.word	0x20000034

0800d34c <sbrk_aligned>:
 800d34c:	b570      	push	{r4, r5, r6, lr}
 800d34e:	4e0f      	ldr	r6, [pc, #60]	@ (800d38c <sbrk_aligned+0x40>)
 800d350:	460c      	mov	r4, r1
 800d352:	6831      	ldr	r1, [r6, #0]
 800d354:	4605      	mov	r5, r0
 800d356:	b911      	cbnz	r1, 800d35e <sbrk_aligned+0x12>
 800d358:	f000 fcc8 	bl	800dcec <_sbrk_r>
 800d35c:	6030      	str	r0, [r6, #0]
 800d35e:	4621      	mov	r1, r4
 800d360:	4628      	mov	r0, r5
 800d362:	f000 fcc3 	bl	800dcec <_sbrk_r>
 800d366:	1c43      	adds	r3, r0, #1
 800d368:	d103      	bne.n	800d372 <sbrk_aligned+0x26>
 800d36a:	f04f 34ff 	mov.w	r4, #4294967295
 800d36e:	4620      	mov	r0, r4
 800d370:	bd70      	pop	{r4, r5, r6, pc}
 800d372:	1cc4      	adds	r4, r0, #3
 800d374:	f024 0403 	bic.w	r4, r4, #3
 800d378:	42a0      	cmp	r0, r4
 800d37a:	d0f8      	beq.n	800d36e <sbrk_aligned+0x22>
 800d37c:	1a21      	subs	r1, r4, r0
 800d37e:	4628      	mov	r0, r5
 800d380:	f000 fcb4 	bl	800dcec <_sbrk_r>
 800d384:	3001      	adds	r0, #1
 800d386:	d1f2      	bne.n	800d36e <sbrk_aligned+0x22>
 800d388:	e7ef      	b.n	800d36a <sbrk_aligned+0x1e>
 800d38a:	bf00      	nop
 800d38c:	20008450 	.word	0x20008450

0800d390 <_malloc_r>:
 800d390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d394:	1ccd      	adds	r5, r1, #3
 800d396:	f025 0503 	bic.w	r5, r5, #3
 800d39a:	3508      	adds	r5, #8
 800d39c:	2d0c      	cmp	r5, #12
 800d39e:	bf38      	it	cc
 800d3a0:	250c      	movcc	r5, #12
 800d3a2:	2d00      	cmp	r5, #0
 800d3a4:	4606      	mov	r6, r0
 800d3a6:	db01      	blt.n	800d3ac <_malloc_r+0x1c>
 800d3a8:	42a9      	cmp	r1, r5
 800d3aa:	d904      	bls.n	800d3b6 <_malloc_r+0x26>
 800d3ac:	230c      	movs	r3, #12
 800d3ae:	6033      	str	r3, [r6, #0]
 800d3b0:	2000      	movs	r0, #0
 800d3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d48c <_malloc_r+0xfc>
 800d3ba:	f000 f869 	bl	800d490 <__malloc_lock>
 800d3be:	f8d8 3000 	ldr.w	r3, [r8]
 800d3c2:	461c      	mov	r4, r3
 800d3c4:	bb44      	cbnz	r4, 800d418 <_malloc_r+0x88>
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	f7ff ffbf 	bl	800d34c <sbrk_aligned>
 800d3ce:	1c43      	adds	r3, r0, #1
 800d3d0:	4604      	mov	r4, r0
 800d3d2:	d158      	bne.n	800d486 <_malloc_r+0xf6>
 800d3d4:	f8d8 4000 	ldr.w	r4, [r8]
 800d3d8:	4627      	mov	r7, r4
 800d3da:	2f00      	cmp	r7, #0
 800d3dc:	d143      	bne.n	800d466 <_malloc_r+0xd6>
 800d3de:	2c00      	cmp	r4, #0
 800d3e0:	d04b      	beq.n	800d47a <_malloc_r+0xea>
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	4639      	mov	r1, r7
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	eb04 0903 	add.w	r9, r4, r3
 800d3ec:	f000 fc7e 	bl	800dcec <_sbrk_r>
 800d3f0:	4581      	cmp	r9, r0
 800d3f2:	d142      	bne.n	800d47a <_malloc_r+0xea>
 800d3f4:	6821      	ldr	r1, [r4, #0]
 800d3f6:	1a6d      	subs	r5, r5, r1
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	f7ff ffa6 	bl	800d34c <sbrk_aligned>
 800d400:	3001      	adds	r0, #1
 800d402:	d03a      	beq.n	800d47a <_malloc_r+0xea>
 800d404:	6823      	ldr	r3, [r4, #0]
 800d406:	442b      	add	r3, r5
 800d408:	6023      	str	r3, [r4, #0]
 800d40a:	f8d8 3000 	ldr.w	r3, [r8]
 800d40e:	685a      	ldr	r2, [r3, #4]
 800d410:	bb62      	cbnz	r2, 800d46c <_malloc_r+0xdc>
 800d412:	f8c8 7000 	str.w	r7, [r8]
 800d416:	e00f      	b.n	800d438 <_malloc_r+0xa8>
 800d418:	6822      	ldr	r2, [r4, #0]
 800d41a:	1b52      	subs	r2, r2, r5
 800d41c:	d420      	bmi.n	800d460 <_malloc_r+0xd0>
 800d41e:	2a0b      	cmp	r2, #11
 800d420:	d917      	bls.n	800d452 <_malloc_r+0xc2>
 800d422:	1961      	adds	r1, r4, r5
 800d424:	42a3      	cmp	r3, r4
 800d426:	6025      	str	r5, [r4, #0]
 800d428:	bf18      	it	ne
 800d42a:	6059      	strne	r1, [r3, #4]
 800d42c:	6863      	ldr	r3, [r4, #4]
 800d42e:	bf08      	it	eq
 800d430:	f8c8 1000 	streq.w	r1, [r8]
 800d434:	5162      	str	r2, [r4, r5]
 800d436:	604b      	str	r3, [r1, #4]
 800d438:	4630      	mov	r0, r6
 800d43a:	f000 f82f 	bl	800d49c <__malloc_unlock>
 800d43e:	f104 000b 	add.w	r0, r4, #11
 800d442:	1d23      	adds	r3, r4, #4
 800d444:	f020 0007 	bic.w	r0, r0, #7
 800d448:	1ac2      	subs	r2, r0, r3
 800d44a:	bf1c      	itt	ne
 800d44c:	1a1b      	subne	r3, r3, r0
 800d44e:	50a3      	strne	r3, [r4, r2]
 800d450:	e7af      	b.n	800d3b2 <_malloc_r+0x22>
 800d452:	6862      	ldr	r2, [r4, #4]
 800d454:	42a3      	cmp	r3, r4
 800d456:	bf0c      	ite	eq
 800d458:	f8c8 2000 	streq.w	r2, [r8]
 800d45c:	605a      	strne	r2, [r3, #4]
 800d45e:	e7eb      	b.n	800d438 <_malloc_r+0xa8>
 800d460:	4623      	mov	r3, r4
 800d462:	6864      	ldr	r4, [r4, #4]
 800d464:	e7ae      	b.n	800d3c4 <_malloc_r+0x34>
 800d466:	463c      	mov	r4, r7
 800d468:	687f      	ldr	r7, [r7, #4]
 800d46a:	e7b6      	b.n	800d3da <_malloc_r+0x4a>
 800d46c:	461a      	mov	r2, r3
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	42a3      	cmp	r3, r4
 800d472:	d1fb      	bne.n	800d46c <_malloc_r+0xdc>
 800d474:	2300      	movs	r3, #0
 800d476:	6053      	str	r3, [r2, #4]
 800d478:	e7de      	b.n	800d438 <_malloc_r+0xa8>
 800d47a:	230c      	movs	r3, #12
 800d47c:	6033      	str	r3, [r6, #0]
 800d47e:	4630      	mov	r0, r6
 800d480:	f000 f80c 	bl	800d49c <__malloc_unlock>
 800d484:	e794      	b.n	800d3b0 <_malloc_r+0x20>
 800d486:	6005      	str	r5, [r0, #0]
 800d488:	e7d6      	b.n	800d438 <_malloc_r+0xa8>
 800d48a:	bf00      	nop
 800d48c:	20008454 	.word	0x20008454

0800d490 <__malloc_lock>:
 800d490:	4801      	ldr	r0, [pc, #4]	@ (800d498 <__malloc_lock+0x8>)
 800d492:	f7ff beda 	b.w	800d24a <__retarget_lock_acquire_recursive>
 800d496:	bf00      	nop
 800d498:	2000844c 	.word	0x2000844c

0800d49c <__malloc_unlock>:
 800d49c:	4801      	ldr	r0, [pc, #4]	@ (800d4a4 <__malloc_unlock+0x8>)
 800d49e:	f7ff bed5 	b.w	800d24c <__retarget_lock_release_recursive>
 800d4a2:	bf00      	nop
 800d4a4:	2000844c 	.word	0x2000844c

0800d4a8 <__sfputc_r>:
 800d4a8:	6893      	ldr	r3, [r2, #8]
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	b410      	push	{r4}
 800d4b0:	6093      	str	r3, [r2, #8]
 800d4b2:	da08      	bge.n	800d4c6 <__sfputc_r+0x1e>
 800d4b4:	6994      	ldr	r4, [r2, #24]
 800d4b6:	42a3      	cmp	r3, r4
 800d4b8:	db01      	blt.n	800d4be <__sfputc_r+0x16>
 800d4ba:	290a      	cmp	r1, #10
 800d4bc:	d103      	bne.n	800d4c6 <__sfputc_r+0x1e>
 800d4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4c2:	f000 bb7f 	b.w	800dbc4 <__swbuf_r>
 800d4c6:	6813      	ldr	r3, [r2, #0]
 800d4c8:	1c58      	adds	r0, r3, #1
 800d4ca:	6010      	str	r0, [r2, #0]
 800d4cc:	7019      	strb	r1, [r3, #0]
 800d4ce:	4608      	mov	r0, r1
 800d4d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4d4:	4770      	bx	lr

0800d4d6 <__sfputs_r>:
 800d4d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d8:	4606      	mov	r6, r0
 800d4da:	460f      	mov	r7, r1
 800d4dc:	4614      	mov	r4, r2
 800d4de:	18d5      	adds	r5, r2, r3
 800d4e0:	42ac      	cmp	r4, r5
 800d4e2:	d101      	bne.n	800d4e8 <__sfputs_r+0x12>
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	e007      	b.n	800d4f8 <__sfputs_r+0x22>
 800d4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ec:	463a      	mov	r2, r7
 800d4ee:	4630      	mov	r0, r6
 800d4f0:	f7ff ffda 	bl	800d4a8 <__sfputc_r>
 800d4f4:	1c43      	adds	r3, r0, #1
 800d4f6:	d1f3      	bne.n	800d4e0 <__sfputs_r+0xa>
 800d4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4fc <_vfiprintf_r>:
 800d4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d500:	460d      	mov	r5, r1
 800d502:	b09d      	sub	sp, #116	@ 0x74
 800d504:	4614      	mov	r4, r2
 800d506:	4698      	mov	r8, r3
 800d508:	4606      	mov	r6, r0
 800d50a:	b118      	cbz	r0, 800d514 <_vfiprintf_r+0x18>
 800d50c:	6a03      	ldr	r3, [r0, #32]
 800d50e:	b90b      	cbnz	r3, 800d514 <_vfiprintf_r+0x18>
 800d510:	f7ff fd8c 	bl	800d02c <__sinit>
 800d514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d516:	07d9      	lsls	r1, r3, #31
 800d518:	d405      	bmi.n	800d526 <_vfiprintf_r+0x2a>
 800d51a:	89ab      	ldrh	r3, [r5, #12]
 800d51c:	059a      	lsls	r2, r3, #22
 800d51e:	d402      	bmi.n	800d526 <_vfiprintf_r+0x2a>
 800d520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d522:	f7ff fe92 	bl	800d24a <__retarget_lock_acquire_recursive>
 800d526:	89ab      	ldrh	r3, [r5, #12]
 800d528:	071b      	lsls	r3, r3, #28
 800d52a:	d501      	bpl.n	800d530 <_vfiprintf_r+0x34>
 800d52c:	692b      	ldr	r3, [r5, #16]
 800d52e:	b99b      	cbnz	r3, 800d558 <_vfiprintf_r+0x5c>
 800d530:	4629      	mov	r1, r5
 800d532:	4630      	mov	r0, r6
 800d534:	f000 fb84 	bl	800dc40 <__swsetup_r>
 800d538:	b170      	cbz	r0, 800d558 <_vfiprintf_r+0x5c>
 800d53a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d53c:	07dc      	lsls	r4, r3, #31
 800d53e:	d504      	bpl.n	800d54a <_vfiprintf_r+0x4e>
 800d540:	f04f 30ff 	mov.w	r0, #4294967295
 800d544:	b01d      	add	sp, #116	@ 0x74
 800d546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54a:	89ab      	ldrh	r3, [r5, #12]
 800d54c:	0598      	lsls	r0, r3, #22
 800d54e:	d4f7      	bmi.n	800d540 <_vfiprintf_r+0x44>
 800d550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d552:	f7ff fe7b 	bl	800d24c <__retarget_lock_release_recursive>
 800d556:	e7f3      	b.n	800d540 <_vfiprintf_r+0x44>
 800d558:	2300      	movs	r3, #0
 800d55a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d55c:	2320      	movs	r3, #32
 800d55e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d562:	f8cd 800c 	str.w	r8, [sp, #12]
 800d566:	2330      	movs	r3, #48	@ 0x30
 800d568:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d718 <_vfiprintf_r+0x21c>
 800d56c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d570:	f04f 0901 	mov.w	r9, #1
 800d574:	4623      	mov	r3, r4
 800d576:	469a      	mov	sl, r3
 800d578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d57c:	b10a      	cbz	r2, 800d582 <_vfiprintf_r+0x86>
 800d57e:	2a25      	cmp	r2, #37	@ 0x25
 800d580:	d1f9      	bne.n	800d576 <_vfiprintf_r+0x7a>
 800d582:	ebba 0b04 	subs.w	fp, sl, r4
 800d586:	d00b      	beq.n	800d5a0 <_vfiprintf_r+0xa4>
 800d588:	465b      	mov	r3, fp
 800d58a:	4622      	mov	r2, r4
 800d58c:	4629      	mov	r1, r5
 800d58e:	4630      	mov	r0, r6
 800d590:	f7ff ffa1 	bl	800d4d6 <__sfputs_r>
 800d594:	3001      	adds	r0, #1
 800d596:	f000 80a7 	beq.w	800d6e8 <_vfiprintf_r+0x1ec>
 800d59a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d59c:	445a      	add	r2, fp
 800d59e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f000 809f 	beq.w	800d6e8 <_vfiprintf_r+0x1ec>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5b4:	f10a 0a01 	add.w	sl, sl, #1
 800d5b8:	9304      	str	r3, [sp, #16]
 800d5ba:	9307      	str	r3, [sp, #28]
 800d5bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5c2:	4654      	mov	r4, sl
 800d5c4:	2205      	movs	r2, #5
 800d5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ca:	4853      	ldr	r0, [pc, #332]	@ (800d718 <_vfiprintf_r+0x21c>)
 800d5cc:	f7f2 fe10 	bl	80001f0 <memchr>
 800d5d0:	9a04      	ldr	r2, [sp, #16]
 800d5d2:	b9d8      	cbnz	r0, 800d60c <_vfiprintf_r+0x110>
 800d5d4:	06d1      	lsls	r1, r2, #27
 800d5d6:	bf44      	itt	mi
 800d5d8:	2320      	movmi	r3, #32
 800d5da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5de:	0713      	lsls	r3, r2, #28
 800d5e0:	bf44      	itt	mi
 800d5e2:	232b      	movmi	r3, #43	@ 0x2b
 800d5e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5ee:	d015      	beq.n	800d61c <_vfiprintf_r+0x120>
 800d5f0:	9a07      	ldr	r2, [sp, #28]
 800d5f2:	4654      	mov	r4, sl
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	f04f 0c0a 	mov.w	ip, #10
 800d5fa:	4621      	mov	r1, r4
 800d5fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d600:	3b30      	subs	r3, #48	@ 0x30
 800d602:	2b09      	cmp	r3, #9
 800d604:	d94b      	bls.n	800d69e <_vfiprintf_r+0x1a2>
 800d606:	b1b0      	cbz	r0, 800d636 <_vfiprintf_r+0x13a>
 800d608:	9207      	str	r2, [sp, #28]
 800d60a:	e014      	b.n	800d636 <_vfiprintf_r+0x13a>
 800d60c:	eba0 0308 	sub.w	r3, r0, r8
 800d610:	fa09 f303 	lsl.w	r3, r9, r3
 800d614:	4313      	orrs	r3, r2
 800d616:	9304      	str	r3, [sp, #16]
 800d618:	46a2      	mov	sl, r4
 800d61a:	e7d2      	b.n	800d5c2 <_vfiprintf_r+0xc6>
 800d61c:	9b03      	ldr	r3, [sp, #12]
 800d61e:	1d19      	adds	r1, r3, #4
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	9103      	str	r1, [sp, #12]
 800d624:	2b00      	cmp	r3, #0
 800d626:	bfbb      	ittet	lt
 800d628:	425b      	neglt	r3, r3
 800d62a:	f042 0202 	orrlt.w	r2, r2, #2
 800d62e:	9307      	strge	r3, [sp, #28]
 800d630:	9307      	strlt	r3, [sp, #28]
 800d632:	bfb8      	it	lt
 800d634:	9204      	strlt	r2, [sp, #16]
 800d636:	7823      	ldrb	r3, [r4, #0]
 800d638:	2b2e      	cmp	r3, #46	@ 0x2e
 800d63a:	d10a      	bne.n	800d652 <_vfiprintf_r+0x156>
 800d63c:	7863      	ldrb	r3, [r4, #1]
 800d63e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d640:	d132      	bne.n	800d6a8 <_vfiprintf_r+0x1ac>
 800d642:	9b03      	ldr	r3, [sp, #12]
 800d644:	1d1a      	adds	r2, r3, #4
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	9203      	str	r2, [sp, #12]
 800d64a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d64e:	3402      	adds	r4, #2
 800d650:	9305      	str	r3, [sp, #20]
 800d652:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d728 <_vfiprintf_r+0x22c>
 800d656:	7821      	ldrb	r1, [r4, #0]
 800d658:	2203      	movs	r2, #3
 800d65a:	4650      	mov	r0, sl
 800d65c:	f7f2 fdc8 	bl	80001f0 <memchr>
 800d660:	b138      	cbz	r0, 800d672 <_vfiprintf_r+0x176>
 800d662:	9b04      	ldr	r3, [sp, #16]
 800d664:	eba0 000a 	sub.w	r0, r0, sl
 800d668:	2240      	movs	r2, #64	@ 0x40
 800d66a:	4082      	lsls	r2, r0
 800d66c:	4313      	orrs	r3, r2
 800d66e:	3401      	adds	r4, #1
 800d670:	9304      	str	r3, [sp, #16]
 800d672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d676:	4829      	ldr	r0, [pc, #164]	@ (800d71c <_vfiprintf_r+0x220>)
 800d678:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d67c:	2206      	movs	r2, #6
 800d67e:	f7f2 fdb7 	bl	80001f0 <memchr>
 800d682:	2800      	cmp	r0, #0
 800d684:	d03f      	beq.n	800d706 <_vfiprintf_r+0x20a>
 800d686:	4b26      	ldr	r3, [pc, #152]	@ (800d720 <_vfiprintf_r+0x224>)
 800d688:	bb1b      	cbnz	r3, 800d6d2 <_vfiprintf_r+0x1d6>
 800d68a:	9b03      	ldr	r3, [sp, #12]
 800d68c:	3307      	adds	r3, #7
 800d68e:	f023 0307 	bic.w	r3, r3, #7
 800d692:	3308      	adds	r3, #8
 800d694:	9303      	str	r3, [sp, #12]
 800d696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d698:	443b      	add	r3, r7
 800d69a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d69c:	e76a      	b.n	800d574 <_vfiprintf_r+0x78>
 800d69e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6a2:	460c      	mov	r4, r1
 800d6a4:	2001      	movs	r0, #1
 800d6a6:	e7a8      	b.n	800d5fa <_vfiprintf_r+0xfe>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	3401      	adds	r4, #1
 800d6ac:	9305      	str	r3, [sp, #20]
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	f04f 0c0a 	mov.w	ip, #10
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6ba:	3a30      	subs	r2, #48	@ 0x30
 800d6bc:	2a09      	cmp	r2, #9
 800d6be:	d903      	bls.n	800d6c8 <_vfiprintf_r+0x1cc>
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d0c6      	beq.n	800d652 <_vfiprintf_r+0x156>
 800d6c4:	9105      	str	r1, [sp, #20]
 800d6c6:	e7c4      	b.n	800d652 <_vfiprintf_r+0x156>
 800d6c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e7f0      	b.n	800d6b4 <_vfiprintf_r+0x1b8>
 800d6d2:	ab03      	add	r3, sp, #12
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	462a      	mov	r2, r5
 800d6d8:	4b12      	ldr	r3, [pc, #72]	@ (800d724 <_vfiprintf_r+0x228>)
 800d6da:	a904      	add	r1, sp, #16
 800d6dc:	4630      	mov	r0, r6
 800d6de:	f3af 8000 	nop.w
 800d6e2:	4607      	mov	r7, r0
 800d6e4:	1c78      	adds	r0, r7, #1
 800d6e6:	d1d6      	bne.n	800d696 <_vfiprintf_r+0x19a>
 800d6e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6ea:	07d9      	lsls	r1, r3, #31
 800d6ec:	d405      	bmi.n	800d6fa <_vfiprintf_r+0x1fe>
 800d6ee:	89ab      	ldrh	r3, [r5, #12]
 800d6f0:	059a      	lsls	r2, r3, #22
 800d6f2:	d402      	bmi.n	800d6fa <_vfiprintf_r+0x1fe>
 800d6f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6f6:	f7ff fda9 	bl	800d24c <__retarget_lock_release_recursive>
 800d6fa:	89ab      	ldrh	r3, [r5, #12]
 800d6fc:	065b      	lsls	r3, r3, #25
 800d6fe:	f53f af1f 	bmi.w	800d540 <_vfiprintf_r+0x44>
 800d702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d704:	e71e      	b.n	800d544 <_vfiprintf_r+0x48>
 800d706:	ab03      	add	r3, sp, #12
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	462a      	mov	r2, r5
 800d70c:	4b05      	ldr	r3, [pc, #20]	@ (800d724 <_vfiprintf_r+0x228>)
 800d70e:	a904      	add	r1, sp, #16
 800d710:	4630      	mov	r0, r6
 800d712:	f000 f879 	bl	800d808 <_printf_i>
 800d716:	e7e4      	b.n	800d6e2 <_vfiprintf_r+0x1e6>
 800d718:	080106d9 	.word	0x080106d9
 800d71c:	080106e3 	.word	0x080106e3
 800d720:	00000000 	.word	0x00000000
 800d724:	0800d4d7 	.word	0x0800d4d7
 800d728:	080106df 	.word	0x080106df

0800d72c <_printf_common>:
 800d72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d730:	4616      	mov	r6, r2
 800d732:	4698      	mov	r8, r3
 800d734:	688a      	ldr	r2, [r1, #8]
 800d736:	690b      	ldr	r3, [r1, #16]
 800d738:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d73c:	4293      	cmp	r3, r2
 800d73e:	bfb8      	it	lt
 800d740:	4613      	movlt	r3, r2
 800d742:	6033      	str	r3, [r6, #0]
 800d744:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d748:	4607      	mov	r7, r0
 800d74a:	460c      	mov	r4, r1
 800d74c:	b10a      	cbz	r2, 800d752 <_printf_common+0x26>
 800d74e:	3301      	adds	r3, #1
 800d750:	6033      	str	r3, [r6, #0]
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	0699      	lsls	r1, r3, #26
 800d756:	bf42      	ittt	mi
 800d758:	6833      	ldrmi	r3, [r6, #0]
 800d75a:	3302      	addmi	r3, #2
 800d75c:	6033      	strmi	r3, [r6, #0]
 800d75e:	6825      	ldr	r5, [r4, #0]
 800d760:	f015 0506 	ands.w	r5, r5, #6
 800d764:	d106      	bne.n	800d774 <_printf_common+0x48>
 800d766:	f104 0a19 	add.w	sl, r4, #25
 800d76a:	68e3      	ldr	r3, [r4, #12]
 800d76c:	6832      	ldr	r2, [r6, #0]
 800d76e:	1a9b      	subs	r3, r3, r2
 800d770:	42ab      	cmp	r3, r5
 800d772:	dc26      	bgt.n	800d7c2 <_printf_common+0x96>
 800d774:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d778:	6822      	ldr	r2, [r4, #0]
 800d77a:	3b00      	subs	r3, #0
 800d77c:	bf18      	it	ne
 800d77e:	2301      	movne	r3, #1
 800d780:	0692      	lsls	r2, r2, #26
 800d782:	d42b      	bmi.n	800d7dc <_printf_common+0xb0>
 800d784:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d788:	4641      	mov	r1, r8
 800d78a:	4638      	mov	r0, r7
 800d78c:	47c8      	blx	r9
 800d78e:	3001      	adds	r0, #1
 800d790:	d01e      	beq.n	800d7d0 <_printf_common+0xa4>
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	6922      	ldr	r2, [r4, #16]
 800d796:	f003 0306 	and.w	r3, r3, #6
 800d79a:	2b04      	cmp	r3, #4
 800d79c:	bf02      	ittt	eq
 800d79e:	68e5      	ldreq	r5, [r4, #12]
 800d7a0:	6833      	ldreq	r3, [r6, #0]
 800d7a2:	1aed      	subeq	r5, r5, r3
 800d7a4:	68a3      	ldr	r3, [r4, #8]
 800d7a6:	bf0c      	ite	eq
 800d7a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7ac:	2500      	movne	r5, #0
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	bfc4      	itt	gt
 800d7b2:	1a9b      	subgt	r3, r3, r2
 800d7b4:	18ed      	addgt	r5, r5, r3
 800d7b6:	2600      	movs	r6, #0
 800d7b8:	341a      	adds	r4, #26
 800d7ba:	42b5      	cmp	r5, r6
 800d7bc:	d11a      	bne.n	800d7f4 <_printf_common+0xc8>
 800d7be:	2000      	movs	r0, #0
 800d7c0:	e008      	b.n	800d7d4 <_printf_common+0xa8>
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	4652      	mov	r2, sl
 800d7c6:	4641      	mov	r1, r8
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	47c8      	blx	r9
 800d7cc:	3001      	adds	r0, #1
 800d7ce:	d103      	bne.n	800d7d8 <_printf_common+0xac>
 800d7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7d8:	3501      	adds	r5, #1
 800d7da:	e7c6      	b.n	800d76a <_printf_common+0x3e>
 800d7dc:	18e1      	adds	r1, r4, r3
 800d7de:	1c5a      	adds	r2, r3, #1
 800d7e0:	2030      	movs	r0, #48	@ 0x30
 800d7e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d7e6:	4422      	add	r2, r4
 800d7e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d7ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d7f0:	3302      	adds	r3, #2
 800d7f2:	e7c7      	b.n	800d784 <_printf_common+0x58>
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	4622      	mov	r2, r4
 800d7f8:	4641      	mov	r1, r8
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	47c8      	blx	r9
 800d7fe:	3001      	adds	r0, #1
 800d800:	d0e6      	beq.n	800d7d0 <_printf_common+0xa4>
 800d802:	3601      	adds	r6, #1
 800d804:	e7d9      	b.n	800d7ba <_printf_common+0x8e>
	...

0800d808 <_printf_i>:
 800d808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d80c:	7e0f      	ldrb	r7, [r1, #24]
 800d80e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d810:	2f78      	cmp	r7, #120	@ 0x78
 800d812:	4691      	mov	r9, r2
 800d814:	4680      	mov	r8, r0
 800d816:	460c      	mov	r4, r1
 800d818:	469a      	mov	sl, r3
 800d81a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d81e:	d807      	bhi.n	800d830 <_printf_i+0x28>
 800d820:	2f62      	cmp	r7, #98	@ 0x62
 800d822:	d80a      	bhi.n	800d83a <_printf_i+0x32>
 800d824:	2f00      	cmp	r7, #0
 800d826:	f000 80d2 	beq.w	800d9ce <_printf_i+0x1c6>
 800d82a:	2f58      	cmp	r7, #88	@ 0x58
 800d82c:	f000 80b9 	beq.w	800d9a2 <_printf_i+0x19a>
 800d830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d834:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d838:	e03a      	b.n	800d8b0 <_printf_i+0xa8>
 800d83a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d83e:	2b15      	cmp	r3, #21
 800d840:	d8f6      	bhi.n	800d830 <_printf_i+0x28>
 800d842:	a101      	add	r1, pc, #4	@ (adr r1, 800d848 <_printf_i+0x40>)
 800d844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d848:	0800d8a1 	.word	0x0800d8a1
 800d84c:	0800d8b5 	.word	0x0800d8b5
 800d850:	0800d831 	.word	0x0800d831
 800d854:	0800d831 	.word	0x0800d831
 800d858:	0800d831 	.word	0x0800d831
 800d85c:	0800d831 	.word	0x0800d831
 800d860:	0800d8b5 	.word	0x0800d8b5
 800d864:	0800d831 	.word	0x0800d831
 800d868:	0800d831 	.word	0x0800d831
 800d86c:	0800d831 	.word	0x0800d831
 800d870:	0800d831 	.word	0x0800d831
 800d874:	0800d9b5 	.word	0x0800d9b5
 800d878:	0800d8df 	.word	0x0800d8df
 800d87c:	0800d96f 	.word	0x0800d96f
 800d880:	0800d831 	.word	0x0800d831
 800d884:	0800d831 	.word	0x0800d831
 800d888:	0800d9d7 	.word	0x0800d9d7
 800d88c:	0800d831 	.word	0x0800d831
 800d890:	0800d8df 	.word	0x0800d8df
 800d894:	0800d831 	.word	0x0800d831
 800d898:	0800d831 	.word	0x0800d831
 800d89c:	0800d977 	.word	0x0800d977
 800d8a0:	6833      	ldr	r3, [r6, #0]
 800d8a2:	1d1a      	adds	r2, r3, #4
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	6032      	str	r2, [r6, #0]
 800d8a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e09d      	b.n	800d9f0 <_printf_i+0x1e8>
 800d8b4:	6833      	ldr	r3, [r6, #0]
 800d8b6:	6820      	ldr	r0, [r4, #0]
 800d8b8:	1d19      	adds	r1, r3, #4
 800d8ba:	6031      	str	r1, [r6, #0]
 800d8bc:	0606      	lsls	r6, r0, #24
 800d8be:	d501      	bpl.n	800d8c4 <_printf_i+0xbc>
 800d8c0:	681d      	ldr	r5, [r3, #0]
 800d8c2:	e003      	b.n	800d8cc <_printf_i+0xc4>
 800d8c4:	0645      	lsls	r5, r0, #25
 800d8c6:	d5fb      	bpl.n	800d8c0 <_printf_i+0xb8>
 800d8c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d8cc:	2d00      	cmp	r5, #0
 800d8ce:	da03      	bge.n	800d8d8 <_printf_i+0xd0>
 800d8d0:	232d      	movs	r3, #45	@ 0x2d
 800d8d2:	426d      	negs	r5, r5
 800d8d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8d8:	4859      	ldr	r0, [pc, #356]	@ (800da40 <_printf_i+0x238>)
 800d8da:	230a      	movs	r3, #10
 800d8dc:	e011      	b.n	800d902 <_printf_i+0xfa>
 800d8de:	6821      	ldr	r1, [r4, #0]
 800d8e0:	6833      	ldr	r3, [r6, #0]
 800d8e2:	0608      	lsls	r0, r1, #24
 800d8e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d8e8:	d402      	bmi.n	800d8f0 <_printf_i+0xe8>
 800d8ea:	0649      	lsls	r1, r1, #25
 800d8ec:	bf48      	it	mi
 800d8ee:	b2ad      	uxthmi	r5, r5
 800d8f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d8f2:	4853      	ldr	r0, [pc, #332]	@ (800da40 <_printf_i+0x238>)
 800d8f4:	6033      	str	r3, [r6, #0]
 800d8f6:	bf14      	ite	ne
 800d8f8:	230a      	movne	r3, #10
 800d8fa:	2308      	moveq	r3, #8
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d902:	6866      	ldr	r6, [r4, #4]
 800d904:	60a6      	str	r6, [r4, #8]
 800d906:	2e00      	cmp	r6, #0
 800d908:	bfa2      	ittt	ge
 800d90a:	6821      	ldrge	r1, [r4, #0]
 800d90c:	f021 0104 	bicge.w	r1, r1, #4
 800d910:	6021      	strge	r1, [r4, #0]
 800d912:	b90d      	cbnz	r5, 800d918 <_printf_i+0x110>
 800d914:	2e00      	cmp	r6, #0
 800d916:	d04b      	beq.n	800d9b0 <_printf_i+0x1a8>
 800d918:	4616      	mov	r6, r2
 800d91a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d91e:	fb03 5711 	mls	r7, r3, r1, r5
 800d922:	5dc7      	ldrb	r7, [r0, r7]
 800d924:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d928:	462f      	mov	r7, r5
 800d92a:	42bb      	cmp	r3, r7
 800d92c:	460d      	mov	r5, r1
 800d92e:	d9f4      	bls.n	800d91a <_printf_i+0x112>
 800d930:	2b08      	cmp	r3, #8
 800d932:	d10b      	bne.n	800d94c <_printf_i+0x144>
 800d934:	6823      	ldr	r3, [r4, #0]
 800d936:	07df      	lsls	r7, r3, #31
 800d938:	d508      	bpl.n	800d94c <_printf_i+0x144>
 800d93a:	6923      	ldr	r3, [r4, #16]
 800d93c:	6861      	ldr	r1, [r4, #4]
 800d93e:	4299      	cmp	r1, r3
 800d940:	bfde      	ittt	le
 800d942:	2330      	movle	r3, #48	@ 0x30
 800d944:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d948:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d94c:	1b92      	subs	r2, r2, r6
 800d94e:	6122      	str	r2, [r4, #16]
 800d950:	f8cd a000 	str.w	sl, [sp]
 800d954:	464b      	mov	r3, r9
 800d956:	aa03      	add	r2, sp, #12
 800d958:	4621      	mov	r1, r4
 800d95a:	4640      	mov	r0, r8
 800d95c:	f7ff fee6 	bl	800d72c <_printf_common>
 800d960:	3001      	adds	r0, #1
 800d962:	d14a      	bne.n	800d9fa <_printf_i+0x1f2>
 800d964:	f04f 30ff 	mov.w	r0, #4294967295
 800d968:	b004      	add	sp, #16
 800d96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d96e:	6823      	ldr	r3, [r4, #0]
 800d970:	f043 0320 	orr.w	r3, r3, #32
 800d974:	6023      	str	r3, [r4, #0]
 800d976:	4833      	ldr	r0, [pc, #204]	@ (800da44 <_printf_i+0x23c>)
 800d978:	2778      	movs	r7, #120	@ 0x78
 800d97a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d97e:	6823      	ldr	r3, [r4, #0]
 800d980:	6831      	ldr	r1, [r6, #0]
 800d982:	061f      	lsls	r7, r3, #24
 800d984:	f851 5b04 	ldr.w	r5, [r1], #4
 800d988:	d402      	bmi.n	800d990 <_printf_i+0x188>
 800d98a:	065f      	lsls	r7, r3, #25
 800d98c:	bf48      	it	mi
 800d98e:	b2ad      	uxthmi	r5, r5
 800d990:	6031      	str	r1, [r6, #0]
 800d992:	07d9      	lsls	r1, r3, #31
 800d994:	bf44      	itt	mi
 800d996:	f043 0320 	orrmi.w	r3, r3, #32
 800d99a:	6023      	strmi	r3, [r4, #0]
 800d99c:	b11d      	cbz	r5, 800d9a6 <_printf_i+0x19e>
 800d99e:	2310      	movs	r3, #16
 800d9a0:	e7ac      	b.n	800d8fc <_printf_i+0xf4>
 800d9a2:	4827      	ldr	r0, [pc, #156]	@ (800da40 <_printf_i+0x238>)
 800d9a4:	e7e9      	b.n	800d97a <_printf_i+0x172>
 800d9a6:	6823      	ldr	r3, [r4, #0]
 800d9a8:	f023 0320 	bic.w	r3, r3, #32
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	e7f6      	b.n	800d99e <_printf_i+0x196>
 800d9b0:	4616      	mov	r6, r2
 800d9b2:	e7bd      	b.n	800d930 <_printf_i+0x128>
 800d9b4:	6833      	ldr	r3, [r6, #0]
 800d9b6:	6825      	ldr	r5, [r4, #0]
 800d9b8:	6961      	ldr	r1, [r4, #20]
 800d9ba:	1d18      	adds	r0, r3, #4
 800d9bc:	6030      	str	r0, [r6, #0]
 800d9be:	062e      	lsls	r6, r5, #24
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	d501      	bpl.n	800d9c8 <_printf_i+0x1c0>
 800d9c4:	6019      	str	r1, [r3, #0]
 800d9c6:	e002      	b.n	800d9ce <_printf_i+0x1c6>
 800d9c8:	0668      	lsls	r0, r5, #25
 800d9ca:	d5fb      	bpl.n	800d9c4 <_printf_i+0x1bc>
 800d9cc:	8019      	strh	r1, [r3, #0]
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	6123      	str	r3, [r4, #16]
 800d9d2:	4616      	mov	r6, r2
 800d9d4:	e7bc      	b.n	800d950 <_printf_i+0x148>
 800d9d6:	6833      	ldr	r3, [r6, #0]
 800d9d8:	1d1a      	adds	r2, r3, #4
 800d9da:	6032      	str	r2, [r6, #0]
 800d9dc:	681e      	ldr	r6, [r3, #0]
 800d9de:	6862      	ldr	r2, [r4, #4]
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	f7f2 fc04 	bl	80001f0 <memchr>
 800d9e8:	b108      	cbz	r0, 800d9ee <_printf_i+0x1e6>
 800d9ea:	1b80      	subs	r0, r0, r6
 800d9ec:	6060      	str	r0, [r4, #4]
 800d9ee:	6863      	ldr	r3, [r4, #4]
 800d9f0:	6123      	str	r3, [r4, #16]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9f8:	e7aa      	b.n	800d950 <_printf_i+0x148>
 800d9fa:	6923      	ldr	r3, [r4, #16]
 800d9fc:	4632      	mov	r2, r6
 800d9fe:	4649      	mov	r1, r9
 800da00:	4640      	mov	r0, r8
 800da02:	47d0      	blx	sl
 800da04:	3001      	adds	r0, #1
 800da06:	d0ad      	beq.n	800d964 <_printf_i+0x15c>
 800da08:	6823      	ldr	r3, [r4, #0]
 800da0a:	079b      	lsls	r3, r3, #30
 800da0c:	d413      	bmi.n	800da36 <_printf_i+0x22e>
 800da0e:	68e0      	ldr	r0, [r4, #12]
 800da10:	9b03      	ldr	r3, [sp, #12]
 800da12:	4298      	cmp	r0, r3
 800da14:	bfb8      	it	lt
 800da16:	4618      	movlt	r0, r3
 800da18:	e7a6      	b.n	800d968 <_printf_i+0x160>
 800da1a:	2301      	movs	r3, #1
 800da1c:	4632      	mov	r2, r6
 800da1e:	4649      	mov	r1, r9
 800da20:	4640      	mov	r0, r8
 800da22:	47d0      	blx	sl
 800da24:	3001      	adds	r0, #1
 800da26:	d09d      	beq.n	800d964 <_printf_i+0x15c>
 800da28:	3501      	adds	r5, #1
 800da2a:	68e3      	ldr	r3, [r4, #12]
 800da2c:	9903      	ldr	r1, [sp, #12]
 800da2e:	1a5b      	subs	r3, r3, r1
 800da30:	42ab      	cmp	r3, r5
 800da32:	dcf2      	bgt.n	800da1a <_printf_i+0x212>
 800da34:	e7eb      	b.n	800da0e <_printf_i+0x206>
 800da36:	2500      	movs	r5, #0
 800da38:	f104 0619 	add.w	r6, r4, #25
 800da3c:	e7f5      	b.n	800da2a <_printf_i+0x222>
 800da3e:	bf00      	nop
 800da40:	080106ea 	.word	0x080106ea
 800da44:	080106fb 	.word	0x080106fb

0800da48 <__sflush_r>:
 800da48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da50:	0716      	lsls	r6, r2, #28
 800da52:	4605      	mov	r5, r0
 800da54:	460c      	mov	r4, r1
 800da56:	d454      	bmi.n	800db02 <__sflush_r+0xba>
 800da58:	684b      	ldr	r3, [r1, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	dc02      	bgt.n	800da64 <__sflush_r+0x1c>
 800da5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da60:	2b00      	cmp	r3, #0
 800da62:	dd48      	ble.n	800daf6 <__sflush_r+0xae>
 800da64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da66:	2e00      	cmp	r6, #0
 800da68:	d045      	beq.n	800daf6 <__sflush_r+0xae>
 800da6a:	2300      	movs	r3, #0
 800da6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da70:	682f      	ldr	r7, [r5, #0]
 800da72:	6a21      	ldr	r1, [r4, #32]
 800da74:	602b      	str	r3, [r5, #0]
 800da76:	d030      	beq.n	800dada <__sflush_r+0x92>
 800da78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da7a:	89a3      	ldrh	r3, [r4, #12]
 800da7c:	0759      	lsls	r1, r3, #29
 800da7e:	d505      	bpl.n	800da8c <__sflush_r+0x44>
 800da80:	6863      	ldr	r3, [r4, #4]
 800da82:	1ad2      	subs	r2, r2, r3
 800da84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da86:	b10b      	cbz	r3, 800da8c <__sflush_r+0x44>
 800da88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da8a:	1ad2      	subs	r2, r2, r3
 800da8c:	2300      	movs	r3, #0
 800da8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da90:	6a21      	ldr	r1, [r4, #32]
 800da92:	4628      	mov	r0, r5
 800da94:	47b0      	blx	r6
 800da96:	1c43      	adds	r3, r0, #1
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	d106      	bne.n	800daaa <__sflush_r+0x62>
 800da9c:	6829      	ldr	r1, [r5, #0]
 800da9e:	291d      	cmp	r1, #29
 800daa0:	d82b      	bhi.n	800dafa <__sflush_r+0xb2>
 800daa2:	4a2a      	ldr	r2, [pc, #168]	@ (800db4c <__sflush_r+0x104>)
 800daa4:	410a      	asrs	r2, r1
 800daa6:	07d6      	lsls	r6, r2, #31
 800daa8:	d427      	bmi.n	800dafa <__sflush_r+0xb2>
 800daaa:	2200      	movs	r2, #0
 800daac:	6062      	str	r2, [r4, #4]
 800daae:	04d9      	lsls	r1, r3, #19
 800dab0:	6922      	ldr	r2, [r4, #16]
 800dab2:	6022      	str	r2, [r4, #0]
 800dab4:	d504      	bpl.n	800dac0 <__sflush_r+0x78>
 800dab6:	1c42      	adds	r2, r0, #1
 800dab8:	d101      	bne.n	800dabe <__sflush_r+0x76>
 800daba:	682b      	ldr	r3, [r5, #0]
 800dabc:	b903      	cbnz	r3, 800dac0 <__sflush_r+0x78>
 800dabe:	6560      	str	r0, [r4, #84]	@ 0x54
 800dac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dac2:	602f      	str	r7, [r5, #0]
 800dac4:	b1b9      	cbz	r1, 800daf6 <__sflush_r+0xae>
 800dac6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800daca:	4299      	cmp	r1, r3
 800dacc:	d002      	beq.n	800dad4 <__sflush_r+0x8c>
 800dace:	4628      	mov	r0, r5
 800dad0:	f7ff fbea 	bl	800d2a8 <_free_r>
 800dad4:	2300      	movs	r3, #0
 800dad6:	6363      	str	r3, [r4, #52]	@ 0x34
 800dad8:	e00d      	b.n	800daf6 <__sflush_r+0xae>
 800dada:	2301      	movs	r3, #1
 800dadc:	4628      	mov	r0, r5
 800dade:	47b0      	blx	r6
 800dae0:	4602      	mov	r2, r0
 800dae2:	1c50      	adds	r0, r2, #1
 800dae4:	d1c9      	bne.n	800da7a <__sflush_r+0x32>
 800dae6:	682b      	ldr	r3, [r5, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d0c6      	beq.n	800da7a <__sflush_r+0x32>
 800daec:	2b1d      	cmp	r3, #29
 800daee:	d001      	beq.n	800daf4 <__sflush_r+0xac>
 800daf0:	2b16      	cmp	r3, #22
 800daf2:	d11e      	bne.n	800db32 <__sflush_r+0xea>
 800daf4:	602f      	str	r7, [r5, #0]
 800daf6:	2000      	movs	r0, #0
 800daf8:	e022      	b.n	800db40 <__sflush_r+0xf8>
 800dafa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dafe:	b21b      	sxth	r3, r3
 800db00:	e01b      	b.n	800db3a <__sflush_r+0xf2>
 800db02:	690f      	ldr	r7, [r1, #16]
 800db04:	2f00      	cmp	r7, #0
 800db06:	d0f6      	beq.n	800daf6 <__sflush_r+0xae>
 800db08:	0793      	lsls	r3, r2, #30
 800db0a:	680e      	ldr	r6, [r1, #0]
 800db0c:	bf08      	it	eq
 800db0e:	694b      	ldreq	r3, [r1, #20]
 800db10:	600f      	str	r7, [r1, #0]
 800db12:	bf18      	it	ne
 800db14:	2300      	movne	r3, #0
 800db16:	eba6 0807 	sub.w	r8, r6, r7
 800db1a:	608b      	str	r3, [r1, #8]
 800db1c:	f1b8 0f00 	cmp.w	r8, #0
 800db20:	dde9      	ble.n	800daf6 <__sflush_r+0xae>
 800db22:	6a21      	ldr	r1, [r4, #32]
 800db24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800db26:	4643      	mov	r3, r8
 800db28:	463a      	mov	r2, r7
 800db2a:	4628      	mov	r0, r5
 800db2c:	47b0      	blx	r6
 800db2e:	2800      	cmp	r0, #0
 800db30:	dc08      	bgt.n	800db44 <__sflush_r+0xfc>
 800db32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db3a:	81a3      	strh	r3, [r4, #12]
 800db3c:	f04f 30ff 	mov.w	r0, #4294967295
 800db40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db44:	4407      	add	r7, r0
 800db46:	eba8 0800 	sub.w	r8, r8, r0
 800db4a:	e7e7      	b.n	800db1c <__sflush_r+0xd4>
 800db4c:	dfbffffe 	.word	0xdfbffffe

0800db50 <_fflush_r>:
 800db50:	b538      	push	{r3, r4, r5, lr}
 800db52:	690b      	ldr	r3, [r1, #16]
 800db54:	4605      	mov	r5, r0
 800db56:	460c      	mov	r4, r1
 800db58:	b913      	cbnz	r3, 800db60 <_fflush_r+0x10>
 800db5a:	2500      	movs	r5, #0
 800db5c:	4628      	mov	r0, r5
 800db5e:	bd38      	pop	{r3, r4, r5, pc}
 800db60:	b118      	cbz	r0, 800db6a <_fflush_r+0x1a>
 800db62:	6a03      	ldr	r3, [r0, #32]
 800db64:	b90b      	cbnz	r3, 800db6a <_fflush_r+0x1a>
 800db66:	f7ff fa61 	bl	800d02c <__sinit>
 800db6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d0f3      	beq.n	800db5a <_fflush_r+0xa>
 800db72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db74:	07d0      	lsls	r0, r2, #31
 800db76:	d404      	bmi.n	800db82 <_fflush_r+0x32>
 800db78:	0599      	lsls	r1, r3, #22
 800db7a:	d402      	bmi.n	800db82 <_fflush_r+0x32>
 800db7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db7e:	f7ff fb64 	bl	800d24a <__retarget_lock_acquire_recursive>
 800db82:	4628      	mov	r0, r5
 800db84:	4621      	mov	r1, r4
 800db86:	f7ff ff5f 	bl	800da48 <__sflush_r>
 800db8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db8c:	07da      	lsls	r2, r3, #31
 800db8e:	4605      	mov	r5, r0
 800db90:	d4e4      	bmi.n	800db5c <_fflush_r+0xc>
 800db92:	89a3      	ldrh	r3, [r4, #12]
 800db94:	059b      	lsls	r3, r3, #22
 800db96:	d4e1      	bmi.n	800db5c <_fflush_r+0xc>
 800db98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db9a:	f7ff fb57 	bl	800d24c <__retarget_lock_release_recursive>
 800db9e:	e7dd      	b.n	800db5c <_fflush_r+0xc>

0800dba0 <fiprintf>:
 800dba0:	b40e      	push	{r1, r2, r3}
 800dba2:	b503      	push	{r0, r1, lr}
 800dba4:	4601      	mov	r1, r0
 800dba6:	ab03      	add	r3, sp, #12
 800dba8:	4805      	ldr	r0, [pc, #20]	@ (800dbc0 <fiprintf+0x20>)
 800dbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbae:	6800      	ldr	r0, [r0, #0]
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	f7ff fca3 	bl	800d4fc <_vfiprintf_r>
 800dbb6:	b002      	add	sp, #8
 800dbb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbbc:	b003      	add	sp, #12
 800dbbe:	4770      	bx	lr
 800dbc0:	20000034 	.word	0x20000034

0800dbc4 <__swbuf_r>:
 800dbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc6:	460e      	mov	r6, r1
 800dbc8:	4614      	mov	r4, r2
 800dbca:	4605      	mov	r5, r0
 800dbcc:	b118      	cbz	r0, 800dbd6 <__swbuf_r+0x12>
 800dbce:	6a03      	ldr	r3, [r0, #32]
 800dbd0:	b90b      	cbnz	r3, 800dbd6 <__swbuf_r+0x12>
 800dbd2:	f7ff fa2b 	bl	800d02c <__sinit>
 800dbd6:	69a3      	ldr	r3, [r4, #24]
 800dbd8:	60a3      	str	r3, [r4, #8]
 800dbda:	89a3      	ldrh	r3, [r4, #12]
 800dbdc:	071a      	lsls	r2, r3, #28
 800dbde:	d501      	bpl.n	800dbe4 <__swbuf_r+0x20>
 800dbe0:	6923      	ldr	r3, [r4, #16]
 800dbe2:	b943      	cbnz	r3, 800dbf6 <__swbuf_r+0x32>
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	f000 f82a 	bl	800dc40 <__swsetup_r>
 800dbec:	b118      	cbz	r0, 800dbf6 <__swbuf_r+0x32>
 800dbee:	f04f 37ff 	mov.w	r7, #4294967295
 800dbf2:	4638      	mov	r0, r7
 800dbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	6922      	ldr	r2, [r4, #16]
 800dbfa:	1a98      	subs	r0, r3, r2
 800dbfc:	6963      	ldr	r3, [r4, #20]
 800dbfe:	b2f6      	uxtb	r6, r6
 800dc00:	4283      	cmp	r3, r0
 800dc02:	4637      	mov	r7, r6
 800dc04:	dc05      	bgt.n	800dc12 <__swbuf_r+0x4e>
 800dc06:	4621      	mov	r1, r4
 800dc08:	4628      	mov	r0, r5
 800dc0a:	f7ff ffa1 	bl	800db50 <_fflush_r>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d1ed      	bne.n	800dbee <__swbuf_r+0x2a>
 800dc12:	68a3      	ldr	r3, [r4, #8]
 800dc14:	3b01      	subs	r3, #1
 800dc16:	60a3      	str	r3, [r4, #8]
 800dc18:	6823      	ldr	r3, [r4, #0]
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	6022      	str	r2, [r4, #0]
 800dc1e:	701e      	strb	r6, [r3, #0]
 800dc20:	6962      	ldr	r2, [r4, #20]
 800dc22:	1c43      	adds	r3, r0, #1
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d004      	beq.n	800dc32 <__swbuf_r+0x6e>
 800dc28:	89a3      	ldrh	r3, [r4, #12]
 800dc2a:	07db      	lsls	r3, r3, #31
 800dc2c:	d5e1      	bpl.n	800dbf2 <__swbuf_r+0x2e>
 800dc2e:	2e0a      	cmp	r6, #10
 800dc30:	d1df      	bne.n	800dbf2 <__swbuf_r+0x2e>
 800dc32:	4621      	mov	r1, r4
 800dc34:	4628      	mov	r0, r5
 800dc36:	f7ff ff8b 	bl	800db50 <_fflush_r>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d0d9      	beq.n	800dbf2 <__swbuf_r+0x2e>
 800dc3e:	e7d6      	b.n	800dbee <__swbuf_r+0x2a>

0800dc40 <__swsetup_r>:
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	4b29      	ldr	r3, [pc, #164]	@ (800dce8 <__swsetup_r+0xa8>)
 800dc44:	4605      	mov	r5, r0
 800dc46:	6818      	ldr	r0, [r3, #0]
 800dc48:	460c      	mov	r4, r1
 800dc4a:	b118      	cbz	r0, 800dc54 <__swsetup_r+0x14>
 800dc4c:	6a03      	ldr	r3, [r0, #32]
 800dc4e:	b90b      	cbnz	r3, 800dc54 <__swsetup_r+0x14>
 800dc50:	f7ff f9ec 	bl	800d02c <__sinit>
 800dc54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc58:	0719      	lsls	r1, r3, #28
 800dc5a:	d422      	bmi.n	800dca2 <__swsetup_r+0x62>
 800dc5c:	06da      	lsls	r2, r3, #27
 800dc5e:	d407      	bmi.n	800dc70 <__swsetup_r+0x30>
 800dc60:	2209      	movs	r2, #9
 800dc62:	602a      	str	r2, [r5, #0]
 800dc64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc68:	81a3      	strh	r3, [r4, #12]
 800dc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6e:	e033      	b.n	800dcd8 <__swsetup_r+0x98>
 800dc70:	0758      	lsls	r0, r3, #29
 800dc72:	d512      	bpl.n	800dc9a <__swsetup_r+0x5a>
 800dc74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc76:	b141      	cbz	r1, 800dc8a <__swsetup_r+0x4a>
 800dc78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc7c:	4299      	cmp	r1, r3
 800dc7e:	d002      	beq.n	800dc86 <__swsetup_r+0x46>
 800dc80:	4628      	mov	r0, r5
 800dc82:	f7ff fb11 	bl	800d2a8 <_free_r>
 800dc86:	2300      	movs	r3, #0
 800dc88:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc8a:	89a3      	ldrh	r3, [r4, #12]
 800dc8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc90:	81a3      	strh	r3, [r4, #12]
 800dc92:	2300      	movs	r3, #0
 800dc94:	6063      	str	r3, [r4, #4]
 800dc96:	6923      	ldr	r3, [r4, #16]
 800dc98:	6023      	str	r3, [r4, #0]
 800dc9a:	89a3      	ldrh	r3, [r4, #12]
 800dc9c:	f043 0308 	orr.w	r3, r3, #8
 800dca0:	81a3      	strh	r3, [r4, #12]
 800dca2:	6923      	ldr	r3, [r4, #16]
 800dca4:	b94b      	cbnz	r3, 800dcba <__swsetup_r+0x7a>
 800dca6:	89a3      	ldrh	r3, [r4, #12]
 800dca8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dcac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcb0:	d003      	beq.n	800dcba <__swsetup_r+0x7a>
 800dcb2:	4621      	mov	r1, r4
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	f000 f856 	bl	800dd66 <__smakebuf_r>
 800dcba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcbe:	f013 0201 	ands.w	r2, r3, #1
 800dcc2:	d00a      	beq.n	800dcda <__swsetup_r+0x9a>
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	60a2      	str	r2, [r4, #8]
 800dcc8:	6962      	ldr	r2, [r4, #20]
 800dcca:	4252      	negs	r2, r2
 800dccc:	61a2      	str	r2, [r4, #24]
 800dcce:	6922      	ldr	r2, [r4, #16]
 800dcd0:	b942      	cbnz	r2, 800dce4 <__swsetup_r+0xa4>
 800dcd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dcd6:	d1c5      	bne.n	800dc64 <__swsetup_r+0x24>
 800dcd8:	bd38      	pop	{r3, r4, r5, pc}
 800dcda:	0799      	lsls	r1, r3, #30
 800dcdc:	bf58      	it	pl
 800dcde:	6962      	ldrpl	r2, [r4, #20]
 800dce0:	60a2      	str	r2, [r4, #8]
 800dce2:	e7f4      	b.n	800dcce <__swsetup_r+0x8e>
 800dce4:	2000      	movs	r0, #0
 800dce6:	e7f7      	b.n	800dcd8 <__swsetup_r+0x98>
 800dce8:	20000034 	.word	0x20000034

0800dcec <_sbrk_r>:
 800dcec:	b538      	push	{r3, r4, r5, lr}
 800dcee:	4d06      	ldr	r5, [pc, #24]	@ (800dd08 <_sbrk_r+0x1c>)
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	4608      	mov	r0, r1
 800dcf6:	602b      	str	r3, [r5, #0]
 800dcf8:	f7f2 fe26 	bl	8000948 <_sbrk>
 800dcfc:	1c43      	adds	r3, r0, #1
 800dcfe:	d102      	bne.n	800dd06 <_sbrk_r+0x1a>
 800dd00:	682b      	ldr	r3, [r5, #0]
 800dd02:	b103      	cbz	r3, 800dd06 <_sbrk_r+0x1a>
 800dd04:	6023      	str	r3, [r4, #0]
 800dd06:	bd38      	pop	{r3, r4, r5, pc}
 800dd08:	20008448 	.word	0x20008448

0800dd0c <abort>:
 800dd0c:	b508      	push	{r3, lr}
 800dd0e:	2006      	movs	r0, #6
 800dd10:	f000 f88e 	bl	800de30 <raise>
 800dd14:	2001      	movs	r0, #1
 800dd16:	f7f2 fd9f 	bl	8000858 <_exit>

0800dd1a <__swhatbuf_r>:
 800dd1a:	b570      	push	{r4, r5, r6, lr}
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd22:	2900      	cmp	r1, #0
 800dd24:	b096      	sub	sp, #88	@ 0x58
 800dd26:	4615      	mov	r5, r2
 800dd28:	461e      	mov	r6, r3
 800dd2a:	da0d      	bge.n	800dd48 <__swhatbuf_r+0x2e>
 800dd2c:	89a3      	ldrh	r3, [r4, #12]
 800dd2e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd32:	f04f 0100 	mov.w	r1, #0
 800dd36:	bf14      	ite	ne
 800dd38:	2340      	movne	r3, #64	@ 0x40
 800dd3a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd3e:	2000      	movs	r0, #0
 800dd40:	6031      	str	r1, [r6, #0]
 800dd42:	602b      	str	r3, [r5, #0]
 800dd44:	b016      	add	sp, #88	@ 0x58
 800dd46:	bd70      	pop	{r4, r5, r6, pc}
 800dd48:	466a      	mov	r2, sp
 800dd4a:	f000 f879 	bl	800de40 <_fstat_r>
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	dbec      	blt.n	800dd2c <__swhatbuf_r+0x12>
 800dd52:	9901      	ldr	r1, [sp, #4]
 800dd54:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd58:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd5c:	4259      	negs	r1, r3
 800dd5e:	4159      	adcs	r1, r3
 800dd60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd64:	e7eb      	b.n	800dd3e <__swhatbuf_r+0x24>

0800dd66 <__smakebuf_r>:
 800dd66:	898b      	ldrh	r3, [r1, #12]
 800dd68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd6a:	079d      	lsls	r5, r3, #30
 800dd6c:	4606      	mov	r6, r0
 800dd6e:	460c      	mov	r4, r1
 800dd70:	d507      	bpl.n	800dd82 <__smakebuf_r+0x1c>
 800dd72:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd76:	6023      	str	r3, [r4, #0]
 800dd78:	6123      	str	r3, [r4, #16]
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	6163      	str	r3, [r4, #20]
 800dd7e:	b003      	add	sp, #12
 800dd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd82:	ab01      	add	r3, sp, #4
 800dd84:	466a      	mov	r2, sp
 800dd86:	f7ff ffc8 	bl	800dd1a <__swhatbuf_r>
 800dd8a:	9f00      	ldr	r7, [sp, #0]
 800dd8c:	4605      	mov	r5, r0
 800dd8e:	4639      	mov	r1, r7
 800dd90:	4630      	mov	r0, r6
 800dd92:	f7ff fafd 	bl	800d390 <_malloc_r>
 800dd96:	b948      	cbnz	r0, 800ddac <__smakebuf_r+0x46>
 800dd98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd9c:	059a      	lsls	r2, r3, #22
 800dd9e:	d4ee      	bmi.n	800dd7e <__smakebuf_r+0x18>
 800dda0:	f023 0303 	bic.w	r3, r3, #3
 800dda4:	f043 0302 	orr.w	r3, r3, #2
 800dda8:	81a3      	strh	r3, [r4, #12]
 800ddaa:	e7e2      	b.n	800dd72 <__smakebuf_r+0xc>
 800ddac:	89a3      	ldrh	r3, [r4, #12]
 800ddae:	6020      	str	r0, [r4, #0]
 800ddb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddb4:	81a3      	strh	r3, [r4, #12]
 800ddb6:	9b01      	ldr	r3, [sp, #4]
 800ddb8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ddbc:	b15b      	cbz	r3, 800ddd6 <__smakebuf_r+0x70>
 800ddbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	f000 f84e 	bl	800de64 <_isatty_r>
 800ddc8:	b128      	cbz	r0, 800ddd6 <__smakebuf_r+0x70>
 800ddca:	89a3      	ldrh	r3, [r4, #12]
 800ddcc:	f023 0303 	bic.w	r3, r3, #3
 800ddd0:	f043 0301 	orr.w	r3, r3, #1
 800ddd4:	81a3      	strh	r3, [r4, #12]
 800ddd6:	89a3      	ldrh	r3, [r4, #12]
 800ddd8:	431d      	orrs	r5, r3
 800ddda:	81a5      	strh	r5, [r4, #12]
 800dddc:	e7cf      	b.n	800dd7e <__smakebuf_r+0x18>

0800ddde <_raise_r>:
 800ddde:	291f      	cmp	r1, #31
 800dde0:	b538      	push	{r3, r4, r5, lr}
 800dde2:	4605      	mov	r5, r0
 800dde4:	460c      	mov	r4, r1
 800dde6:	d904      	bls.n	800ddf2 <_raise_r+0x14>
 800dde8:	2316      	movs	r3, #22
 800ddea:	6003      	str	r3, [r0, #0]
 800ddec:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf0:	bd38      	pop	{r3, r4, r5, pc}
 800ddf2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ddf4:	b112      	cbz	r2, 800ddfc <_raise_r+0x1e>
 800ddf6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ddfa:	b94b      	cbnz	r3, 800de10 <_raise_r+0x32>
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	f000 f853 	bl	800dea8 <_getpid_r>
 800de02:	4622      	mov	r2, r4
 800de04:	4601      	mov	r1, r0
 800de06:	4628      	mov	r0, r5
 800de08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de0c:	f000 b83a 	b.w	800de84 <_kill_r>
 800de10:	2b01      	cmp	r3, #1
 800de12:	d00a      	beq.n	800de2a <_raise_r+0x4c>
 800de14:	1c59      	adds	r1, r3, #1
 800de16:	d103      	bne.n	800de20 <_raise_r+0x42>
 800de18:	2316      	movs	r3, #22
 800de1a:	6003      	str	r3, [r0, #0]
 800de1c:	2001      	movs	r0, #1
 800de1e:	e7e7      	b.n	800ddf0 <_raise_r+0x12>
 800de20:	2100      	movs	r1, #0
 800de22:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de26:	4620      	mov	r0, r4
 800de28:	4798      	blx	r3
 800de2a:	2000      	movs	r0, #0
 800de2c:	e7e0      	b.n	800ddf0 <_raise_r+0x12>
	...

0800de30 <raise>:
 800de30:	4b02      	ldr	r3, [pc, #8]	@ (800de3c <raise+0xc>)
 800de32:	4601      	mov	r1, r0
 800de34:	6818      	ldr	r0, [r3, #0]
 800de36:	f7ff bfd2 	b.w	800ddde <_raise_r>
 800de3a:	bf00      	nop
 800de3c:	20000034 	.word	0x20000034

0800de40 <_fstat_r>:
 800de40:	b538      	push	{r3, r4, r5, lr}
 800de42:	4d07      	ldr	r5, [pc, #28]	@ (800de60 <_fstat_r+0x20>)
 800de44:	2300      	movs	r3, #0
 800de46:	4604      	mov	r4, r0
 800de48:	4608      	mov	r0, r1
 800de4a:	4611      	mov	r1, r2
 800de4c:	602b      	str	r3, [r5, #0]
 800de4e:	f7f2 fd53 	bl	80008f8 <_fstat>
 800de52:	1c43      	adds	r3, r0, #1
 800de54:	d102      	bne.n	800de5c <_fstat_r+0x1c>
 800de56:	682b      	ldr	r3, [r5, #0]
 800de58:	b103      	cbz	r3, 800de5c <_fstat_r+0x1c>
 800de5a:	6023      	str	r3, [r4, #0]
 800de5c:	bd38      	pop	{r3, r4, r5, pc}
 800de5e:	bf00      	nop
 800de60:	20008448 	.word	0x20008448

0800de64 <_isatty_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	4d06      	ldr	r5, [pc, #24]	@ (800de80 <_isatty_r+0x1c>)
 800de68:	2300      	movs	r3, #0
 800de6a:	4604      	mov	r4, r0
 800de6c:	4608      	mov	r0, r1
 800de6e:	602b      	str	r3, [r5, #0]
 800de70:	f7f2 fd52 	bl	8000918 <_isatty>
 800de74:	1c43      	adds	r3, r0, #1
 800de76:	d102      	bne.n	800de7e <_isatty_r+0x1a>
 800de78:	682b      	ldr	r3, [r5, #0]
 800de7a:	b103      	cbz	r3, 800de7e <_isatty_r+0x1a>
 800de7c:	6023      	str	r3, [r4, #0]
 800de7e:	bd38      	pop	{r3, r4, r5, pc}
 800de80:	20008448 	.word	0x20008448

0800de84 <_kill_r>:
 800de84:	b538      	push	{r3, r4, r5, lr}
 800de86:	4d07      	ldr	r5, [pc, #28]	@ (800dea4 <_kill_r+0x20>)
 800de88:	2300      	movs	r3, #0
 800de8a:	4604      	mov	r4, r0
 800de8c:	4608      	mov	r0, r1
 800de8e:	4611      	mov	r1, r2
 800de90:	602b      	str	r3, [r5, #0]
 800de92:	f7f2 fccf 	bl	8000834 <_kill>
 800de96:	1c43      	adds	r3, r0, #1
 800de98:	d102      	bne.n	800dea0 <_kill_r+0x1c>
 800de9a:	682b      	ldr	r3, [r5, #0]
 800de9c:	b103      	cbz	r3, 800dea0 <_kill_r+0x1c>
 800de9e:	6023      	str	r3, [r4, #0]
 800dea0:	bd38      	pop	{r3, r4, r5, pc}
 800dea2:	bf00      	nop
 800dea4:	20008448 	.word	0x20008448

0800dea8 <_getpid_r>:
 800dea8:	f7f2 bcbb 	b.w	8000822 <_getpid>

0800deac <_init>:
 800deac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deae:	bf00      	nop
 800deb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deb2:	bc08      	pop	{r3}
 800deb4:	469e      	mov	lr, r3
 800deb6:	4770      	bx	lr

0800deb8 <_fini>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	bf00      	nop
 800debc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800debe:	bc08      	pop	{r3}
 800dec0:	469e      	mov	lr, r3
 800dec2:	4770      	bx	lr
