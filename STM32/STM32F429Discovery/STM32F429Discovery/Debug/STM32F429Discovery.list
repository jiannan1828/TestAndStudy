
STM32F429Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c74  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007e24  08007e24  00008e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e3c  08007e3c  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007e3c  08007e3c  00008e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e44  08007e44  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e44  08007e44  00008e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e48  08007e48  00008e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007e4c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009010  2**0
                  CONTENTS
 10 .bss          00000798  20000010  20000010  00009010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007a8  200007a8  00009010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026976  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c54  00000000  00000000  0002f9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002148  00000000  00000000  00035610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019b8  00000000  00000000  00037758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a1dc  00000000  00000000  00039110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e3d9  00000000  00000000  000632ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4557  00000000  00000000  000916c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00185c1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008c40  00000000  00000000  00185c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0018e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007e0c 	.word	0x08007e0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08007e0c 	.word	0x08007e0c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_CRC_Init+0x20>)
 80004e6:	4a07      	ldr	r2, [pc, #28]	@ (8000504 <MX_CRC_Init+0x24>)
 80004e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <MX_CRC_Init+0x20>)
 80004ec:	f001 f95c 	bl	80017a8 <HAL_CRC_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004f6:	f000 fd95 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	2000002c 	.word	0x2000002c
 8000504:	40023000 	.word	0x40023000

08000508 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0b      	ldr	r2, [pc, #44]	@ (8000544 <HAL_CRC_MspInit+0x3c>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d10d      	bne.n	8000536 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <HAL_CRC_MspInit+0x40>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a09      	ldr	r2, [pc, #36]	@ (8000548 <HAL_CRC_MspInit+0x40>)
 8000524:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <HAL_CRC_MspInit+0x40>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40023000 	.word	0x40023000
 8000548:	40023800 	.word	0x40023800

0800054c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000550:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000552:	4a16      	ldr	r2, [pc, #88]	@ (80005ac <MX_DMA2D_Init+0x60>)
 8000554:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000556:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800055c:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000562:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 800056a:	2200      	movs	r2, #0
 800056c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000580:	4809      	ldr	r0, [pc, #36]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000582:	f001 f92d 	bl	80017e0 <HAL_DMA2D_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800058c:	f000 fd4a 	bl	8001024 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000590:	2101      	movs	r1, #1
 8000592:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000594:	f001 fa7e 	bl	8001a94 <HAL_DMA2D_ConfigLayer>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800059e:	f000 fd41 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000034 	.word	0x20000034
 80005ac:	4002b000 	.word	0x4002b000

080005b0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0e      	ldr	r2, [pc, #56]	@ (80005f8 <HAL_DMA2D_MspInit+0x48>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d115      	bne.n	80005ee <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <HAL_DMA2D_MspInit+0x4c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a0c      	ldr	r2, [pc, #48]	@ (80005fc <HAL_DMA2D_MspInit+0x4c>)
 80005cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <HAL_DMA2D_MspInit+0x4c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2105      	movs	r1, #5
 80005e2:	205a      	movs	r0, #90	@ 0x5a
 80005e4:	f001 f8b6 	bl	8001754 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80005e8:	205a      	movs	r0, #90	@ 0x5a
 80005ea:	f001 f8cf 	bl	800178c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	4002b000 	.word	0x4002b000
 80005fc:	40023800 	.word	0x40023800

08000600 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_FMC_Init+0x98>)
 800061a:	4a20      	ldr	r2, [pc, #128]	@ (800069c <MX_FMC_Init+0x9c>)
 800061c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_FMC_Init+0x98>)
 8000620:	2201      	movs	r2, #1
 8000622:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000624:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_FMC_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_FMC_Init+0x98>)
 800062c:	2204      	movs	r2, #4
 800062e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_FMC_Init+0x98>)
 8000632:	2210      	movs	r2, #16
 8000634:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000636:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_FMC_Init+0x98>)
 8000638:	2240      	movs	r2, #64	@ 0x40
 800063a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800063c:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <MX_FMC_Init+0x98>)
 800063e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000642:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_FMC_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800064a:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <MX_FMC_Init+0x98>)
 800064c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000650:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_FMC_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_FMC_Init+0x98>)
 800065a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800066c:	2307      	movs	r3, #7
 800066e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000670:	2303      	movs	r3, #3
 8000672:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000674:	2302      	movs	r3, #2
 8000676:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_FMC_Init+0x98>)
 8000682:	f004 fdb7 	bl	80051f4 <HAL_SDRAM_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800068c:	f000 fcca 	bl	8001024 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000074 	.word	0x20000074
 800069c:	a0000140 	.word	0xa0000140

080006a0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006b4:	4b3b      	ldr	r3, [pc, #236]	@ (80007a4 <HAL_FMC_MspInit+0x104>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d16f      	bne.n	800079c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006bc:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <HAL_FMC_MspInit+0x104>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b38      	ldr	r3, [pc, #224]	@ (80007a8 <HAL_FMC_MspInit+0x108>)
 80006c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006ca:	4a37      	ldr	r2, [pc, #220]	@ (80007a8 <HAL_FMC_MspInit+0x108>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6393      	str	r3, [r2, #56]	@ 0x38
 80006d2:	4b35      	ldr	r3, [pc, #212]	@ (80007a8 <HAL_FMC_MspInit+0x108>)
 80006d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80006de:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80006e2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006f0:	230c      	movs	r3, #12
 80006f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	482c      	ldr	r0, [pc, #176]	@ (80007ac <HAL_FMC_MspInit+0x10c>)
 80006fa:	f001 fa5d 	bl	8001bb8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800070e:	230c      	movs	r3, #12
 8000710:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4826      	ldr	r0, [pc, #152]	@ (80007b0 <HAL_FMC_MspInit+0x110>)
 8000718:	f001 fa4e 	bl	8001bb8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800071c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000720:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800072e:	230c      	movs	r3, #12
 8000730:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	481f      	ldr	r0, [pc, #124]	@ (80007b4 <HAL_FMC_MspInit+0x114>)
 8000738:	f001 fa3e 	bl	8001bb8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800073c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000740:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800074e:	230c      	movs	r3, #12
 8000750:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	4818      	ldr	r0, [pc, #96]	@ (80007b8 <HAL_FMC_MspInit+0x118>)
 8000758:	f001 fa2e 	bl	8001bb8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800075c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000760:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800076e:	230c      	movs	r3, #12
 8000770:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4811      	ldr	r0, [pc, #68]	@ (80007bc <HAL_FMC_MspInit+0x11c>)
 8000778:	f001 fa1e 	bl	8001bb8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800077c:	2360      	movs	r3, #96	@ 0x60
 800077e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800078c:	230c      	movs	r3, #12
 800078e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	480a      	ldr	r0, [pc, #40]	@ (80007c0 <HAL_FMC_MspInit+0x120>)
 8000796:	f001 fa0f 	bl	8001bb8 <HAL_GPIO_Init>
 800079a:	e000      	b.n	800079e <HAL_FMC_MspInit+0xfe>
    return;
 800079c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000a8 	.word	0x200000a8
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40021400 	.word	0x40021400
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40021800 	.word	0x40021800
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40020c00 	.word	0x40020c00
 80007c0:	40020400 	.word	0x40020400

080007c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007cc:	f7ff ff68 	bl	80006a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08e      	sub	sp, #56	@ 0x38
 80007f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
 800080a:	4b7b      	ldr	r3, [pc, #492]	@ (80009f8 <MX_GPIO_Init+0x208>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a7a      	ldr	r2, [pc, #488]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b78      	ldr	r3, [pc, #480]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	623b      	str	r3, [r7, #32]
 8000820:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
 8000826:	4b74      	ldr	r3, [pc, #464]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a73      	ldr	r2, [pc, #460]	@ (80009f8 <MX_GPIO_Init+0x208>)
 800082c:	f043 0320 	orr.w	r3, r3, #32
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b71      	ldr	r3, [pc, #452]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0320 	and.w	r3, r3, #32
 800083a:	61fb      	str	r3, [r7, #28]
 800083c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	4b6d      	ldr	r3, [pc, #436]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a6c      	ldr	r2, [pc, #432]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b6a      	ldr	r3, [pc, #424]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	4b66      	ldr	r3, [pc, #408]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a65      	ldr	r2, [pc, #404]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b63      	ldr	r3, [pc, #396]	@ (80009f8 <MX_GPIO_Init+0x208>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b5f      	ldr	r3, [pc, #380]	@ (80009f8 <MX_GPIO_Init+0x208>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a5e      	ldr	r2, [pc, #376]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b5c      	ldr	r3, [pc, #368]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b58      	ldr	r3, [pc, #352]	@ (80009f8 <MX_GPIO_Init+0x208>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a57      	ldr	r2, [pc, #348]	@ (80009f8 <MX_GPIO_Init+0x208>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b55      	ldr	r3, [pc, #340]	@ (80009f8 <MX_GPIO_Init+0x208>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b51      	ldr	r3, [pc, #324]	@ (80009f8 <MX_GPIO_Init+0x208>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a50      	ldr	r2, [pc, #320]	@ (80009f8 <MX_GPIO_Init+0x208>)
 80008b8:	f043 0310 	orr.w	r3, r3, #16
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b4e      	ldr	r3, [pc, #312]	@ (80009f8 <MX_GPIO_Init+0x208>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0310 	and.w	r3, r3, #16
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b4a      	ldr	r3, [pc, #296]	@ (80009f8 <MX_GPIO_Init+0x208>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a49      	ldr	r2, [pc, #292]	@ (80009f8 <MX_GPIO_Init+0x208>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b47      	ldr	r3, [pc, #284]	@ (80009f8 <MX_GPIO_Init+0x208>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2116      	movs	r1, #22
 80008ea:	4844      	ldr	r0, [pc, #272]	@ (80009fc <MX_GPIO_Init+0x20c>)
 80008ec:	f001 fb10 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2180      	movs	r1, #128	@ 0x80
 80008f4:	4842      	ldr	r0, [pc, #264]	@ (8000a00 <MX_GPIO_Init+0x210>)
 80008f6:	f001 fb0b 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000900:	4840      	ldr	r0, [pc, #256]	@ (8000a04 <MX_GPIO_Init+0x214>)
 8000902:	f001 fb05 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800090c:	483e      	ldr	r0, [pc, #248]	@ (8000a08 <MX_GPIO_Init+0x218>)
 800090e:	f001 faff 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000912:	2316      	movs	r3, #22
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	4834      	ldr	r0, [pc, #208]	@ (80009fc <MX_GPIO_Init+0x20c>)
 800092a:	f001 f945 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800092e:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000934:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000942:	4619      	mov	r1, r3
 8000944:	482e      	ldr	r0, [pc, #184]	@ (8000a00 <MX_GPIO_Init+0x210>)
 8000946:	f001 f937 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800094a:	2380      	movs	r3, #128	@ 0x80
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	4827      	ldr	r0, [pc, #156]	@ (8000a00 <MX_GPIO_Init+0x210>)
 8000962:	f001 f929 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000966:	2320      	movs	r3, #32
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	4820      	ldr	r0, [pc, #128]	@ (80009fc <MX_GPIO_Init+0x20c>)
 800097c:	f001 f91c 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000980:	2304      	movs	r3, #4
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	481e      	ldr	r0, [pc, #120]	@ (8000a0c <MX_GPIO_Init+0x21c>)
 8000994:	f001 f910 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000998:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4815      	ldr	r0, [pc, #84]	@ (8000a04 <MX_GPIO_Init+0x214>)
 80009ae:	f001 f903 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80009b2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	480e      	ldr	r0, [pc, #56]	@ (8000a04 <MX_GPIO_Init+0x214>)
 80009cc:	f001 f8f4 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80009d0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	4807      	ldr	r0, [pc, #28]	@ (8000a08 <MX_GPIO_Init+0x218>)
 80009ea:	f001 f8e5 	bl	8001bb8 <HAL_GPIO_Init>

}
 80009ee:	bf00      	nop
 80009f0:	3738      	adds	r7, #56	@ 0x38
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	40021800 	.word	0x40021800
 8000a0c:	40020400 	.word	0x40020400

08000a10 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	@ (8000a84 <MX_I2C3_Init+0x74>)
 8000a16:	4a1c      	ldr	r2, [pc, #112]	@ (8000a88 <MX_I2C3_Init+0x78>)
 8000a18:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_I2C3_Init+0x74>)
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a8c <MX_I2C3_Init+0x7c>)
 8000a1e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a20:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <MX_I2C3_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_I2C3_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <MX_I2C3_Init+0x74>)
 8000a2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a32:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a34:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <MX_I2C3_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_I2C3_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a40:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <MX_I2C3_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_I2C3_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a4c:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <MX_I2C3_Init+0x74>)
 8000a4e:	f003 f81f 	bl	8003a90 <HAL_I2C_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a58:	f000 fae4 	bl	8001024 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4809      	ldr	r0, [pc, #36]	@ (8000a84 <MX_I2C3_Init+0x74>)
 8000a60:	f003 f95a 	bl	8003d18 <HAL_I2CEx_ConfigAnalogFilter>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000a6a:	f000 fadb 	bl	8001024 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <MX_I2C3_Init+0x74>)
 8000a72:	f003 f98d 	bl	8003d90 <HAL_I2CEx_ConfigDigitalFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000a7c:	f000 fad2 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000ac 	.word	0x200000ac
 8000a88:	40005c00 	.word	0x40005c00
 8000a8c:	000186a0 	.word	0x000186a0

08000a90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a29      	ldr	r2, [pc, #164]	@ (8000b54 <HAL_I2C_MspInit+0xc4>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d14b      	bne.n	8000b4a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b28      	ldr	r3, [pc, #160]	@ (8000b58 <HAL_I2C_MspInit+0xc8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a27      	ldr	r2, [pc, #156]	@ (8000b58 <HAL_I2C_MspInit+0xc8>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b25      	ldr	r3, [pc, #148]	@ (8000b58 <HAL_I2C_MspInit+0xc8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <HAL_I2C_MspInit+0xc8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a20      	ldr	r2, [pc, #128]	@ (8000b58 <HAL_I2C_MspInit+0xc8>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <HAL_I2C_MspInit+0xc8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000afc:	2304      	movs	r3, #4
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4815      	ldr	r0, [pc, #84]	@ (8000b5c <HAL_I2C_MspInit+0xcc>)
 8000b08:	f001 f856 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b12:	2312      	movs	r3, #18
 8000b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <HAL_I2C_MspInit+0xd0>)
 8000b2a:	f001 f845 	bl	8001bb8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <HAL_I2C_MspInit+0xc8>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	@ (8000b58 <HAL_I2C_MspInit+0xc8>)
 8000b38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_I2C_MspInit+0xc8>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	@ 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40005c00 	.word	0x40005c00
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020000 	.word	0x40020000

08000b64 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	@ 0x38
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2234      	movs	r2, #52	@ 0x34
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f007 f911 	bl	8007d98 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b76:	4b39      	ldr	r3, [pc, #228]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000b78:	4a39      	ldr	r2, [pc, #228]	@ (8000c60 <MX_LTDC_Init+0xfc>)
 8000b7a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b7c:	4b37      	ldr	r3, [pc, #220]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b82:	4b36      	ldr	r3, [pc, #216]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b88:	4b34      	ldr	r3, [pc, #208]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b8e:	4b33      	ldr	r3, [pc, #204]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000b94:	4b31      	ldr	r3, [pc, #196]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000b96:	2209      	movs	r2, #9
 8000b98:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000b9a:	4b30      	ldr	r3, [pc, #192]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000ba2:	221d      	movs	r2, #29
 8000ba4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000ba8:	2203      	movs	r2, #3
 8000baa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000bac:	4b2b      	ldr	r3, [pc, #172]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000bae:	f240 120d 	movw	r2, #269	@ 0x10d
 8000bb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000bb4:	4b29      	ldr	r3, [pc, #164]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000bb6:	f240 1243 	movw	r2, #323	@ 0x143
 8000bba:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000bbc:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000bbe:	f240 1217 	movw	r2, #279	@ 0x117
 8000bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000bc4:	4b25      	ldr	r3, [pc, #148]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000bc6:	f240 1247 	movw	r2, #327	@ 0x147
 8000bca:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bcc:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000be4:	481d      	ldr	r0, [pc, #116]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000be6:	f003 f913 	bl	8003e10 <HAL_LTDC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000bf0:	f000 fa18 	bl	8001024 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000bf8:	23f0      	movs	r3, #240	@ 0xf0
 8000bfa:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000c00:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c04:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c06:	2302      	movs	r3, #2
 8000c08:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c0a:	23ff      	movs	r3, #255	@ 0xff
 8000c0c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c12:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c16:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000c1c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000c22:	23f0      	movs	r3, #240	@ 0xf0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000c26:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <MX_LTDC_Init+0xf8>)
 8000c46:	f003 fa75 	bl	8004134 <HAL_LTDC_ConfigLayer>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000c50:	f000 f9e8 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	3738      	adds	r7, #56	@ 0x38
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000100 	.word	0x20000100
 8000c60:	40016800 	.word	0x40016800

08000c64 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b09a      	sub	sp, #104	@ 0x68
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c80:	2230      	movs	r2, #48	@ 0x30
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f007 f887 	bl	8007d98 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a85      	ldr	r2, [pc, #532]	@ (8000ea4 <HAL_LTDC_MspInit+0x240>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	f040 8102 	bne.w	8000e9a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000c96:	2308      	movs	r3, #8
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000c9a:	2332      	movs	r3, #50	@ 0x32
 8000c9c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000caa:	4618      	mov	r0, r3
 8000cac:	f004 f8e2 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000cb6:	f000 f9b5 	bl	8001024 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
 8000cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	4a79      	ldr	r2, [pc, #484]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000cc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cca:	4b77      	ldr	r3, [pc, #476]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000cd2:	623b      	str	r3, [r7, #32]
 8000cd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	4b73      	ldr	r3, [pc, #460]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a72      	ldr	r2, [pc, #456]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000ce0:	f043 0320 	orr.w	r3, r3, #32
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b70      	ldr	r3, [pc, #448]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0320 	and.w	r3, r3, #32
 8000cee:	61fb      	str	r3, [r7, #28]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	4b6c      	ldr	r3, [pc, #432]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a6b      	ldr	r2, [pc, #428]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b69      	ldr	r3, [pc, #420]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	4b65      	ldr	r3, [pc, #404]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a64      	ldr	r2, [pc, #400]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b62      	ldr	r3, [pc, #392]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a5d      	ldr	r2, [pc, #372]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b57      	ldr	r3, [pc, #348]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a56      	ldr	r2, [pc, #344]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b54      	ldr	r3, [pc, #336]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	4b50      	ldr	r3, [pc, #320]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a4f      	ldr	r2, [pc, #316]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea8 <HAL_LTDC_MspInit+0x244>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d82:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d90:	230e      	movs	r3, #14
 8000d92:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4844      	ldr	r0, [pc, #272]	@ (8000eac <HAL_LTDC_MspInit+0x248>)
 8000d9c:	f000 ff0c 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000da0:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000da4:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000db2:	230e      	movs	r3, #14
 8000db4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dba:	4619      	mov	r1, r3
 8000dbc:	483c      	ldr	r0, [pc, #240]	@ (8000eb0 <HAL_LTDC_MspInit+0x24c>)
 8000dbe:	f000 fefb 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000dd2:	2309      	movs	r3, #9
 8000dd4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4835      	ldr	r0, [pc, #212]	@ (8000eb4 <HAL_LTDC_MspInit+0x250>)
 8000dde:	f000 feeb 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000de2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000de6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000df4:	230e      	movs	r3, #14
 8000df6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	482d      	ldr	r0, [pc, #180]	@ (8000eb4 <HAL_LTDC_MspInit+0x250>)
 8000e00:	f000 feda 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000e04:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000e08:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e16:	230e      	movs	r3, #14
 8000e18:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4825      	ldr	r0, [pc, #148]	@ (8000eb8 <HAL_LTDC_MspInit+0x254>)
 8000e22:	f000 fec9 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000e26:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000e2a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e38:	230e      	movs	r3, #14
 8000e3a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e40:	4619      	mov	r1, r3
 8000e42:	481e      	ldr	r0, [pc, #120]	@ (8000ebc <HAL_LTDC_MspInit+0x258>)
 8000e44:	f000 feb8 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000e48:	2348      	movs	r3, #72	@ 0x48
 8000e4a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e58:	230e      	movs	r3, #14
 8000e5a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e60:	4619      	mov	r1, r3
 8000e62:	4817      	ldr	r0, [pc, #92]	@ (8000ec0 <HAL_LTDC_MspInit+0x25c>)
 8000e64:	f000 fea8 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000e68:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e6c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e7a:	2309      	movs	r3, #9
 8000e7c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e82:	4619      	mov	r1, r3
 8000e84:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <HAL_LTDC_MspInit+0x254>)
 8000e86:	f000 fe97 	bl	8001bb8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2105      	movs	r1, #5
 8000e8e:	2058      	movs	r0, #88	@ 0x58
 8000e90:	f000 fc60 	bl	8001754 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000e94:	2058      	movs	r0, #88	@ 0x58
 8000e96:	f000 fc79 	bl	800178c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3768      	adds	r7, #104	@ 0x68
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40016800 	.word	0x40016800
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40021400 	.word	0x40021400
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40021800 	.word	0x40021800
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec8:	f000 fb4a 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ecc:	f000 f82e 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f7ff fc8e 	bl	80007f0 <MX_GPIO_Init>
  MX_CRC_Init();
 8000ed4:	f7ff fb04 	bl	80004e0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000ed8:	f7ff fb38 	bl	800054c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000edc:	f7ff fb90 	bl	8000600 <MX_FMC_Init>
  MX_I2C3_Init();
 8000ee0:	f7ff fd96 	bl	8000a10 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000ee4:	f7ff fe3e 	bl	8000b64 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000ee8:	f000 f8a2 	bl	8001030 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000eec:	f000 fa2a 	bl	8001344 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000ef0:	f000 fa9a 	bl	8001428 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000efa:	480b      	ldr	r0, [pc, #44]	@ (8000f28 <main+0x64>)
 8000efc:	f001 f808 	bl	8001f10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f06:	4808      	ldr	r0, [pc, #32]	@ (8000f28 <main+0x64>)
 8000f08:	f001 f802 	bl	8001f10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <main+0x64>)
 8000f14:	f000 fffc 	bl	8001f10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f1e:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <main+0x64>)
 8000f20:	f000 fff6 	bl	8001f10 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 8000f24:	bf00      	nop
 8000f26:	e7e5      	b.n	8000ef4 <main+0x30>
 8000f28:	40021800 	.word	0x40021800

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	@ 0x50
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	2230      	movs	r2, #48	@ 0x30
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 ff2c 	bl	8007d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b28      	ldr	r3, [pc, #160]	@ (8000ff8 <SystemClock_Config+0xcc>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	4a27      	ldr	r2, [pc, #156]	@ (8000ff8 <SystemClock_Config+0xcc>)
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f60:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <SystemClock_Config+0xcc>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f78:	4a20      	ldr	r2, [pc, #128]	@ (8000ffc <SystemClock_Config+0xd0>)
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <SystemClock_Config+0xd0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fa4:	2348      	movs	r3, #72	@ 0x48
 8000fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fac:	2303      	movs	r3, #3
 8000fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 fa93 	bl	80044e0 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fc0:	f000 f830 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fcf5 	bl	80049d0 <HAL_RCC_ClockConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fec:	f000 f81a 	bl	8001024 <Error_Handler>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3750      	adds	r7, #80	@ 0x50
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001012:	f000 fac7 	bl	80015a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40001000 	.word	0x40001000

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <Error_Handler+0x8>

08001030 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001034:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <MX_SPI5_Init+0x64>)
 8001036:	4a18      	ldr	r2, [pc, #96]	@ (8001098 <MX_SPI5_Init+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800103a:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <MX_SPI5_Init+0x64>)
 800103c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001040:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001042:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <MX_SPI5_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <MX_SPI5_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <MX_SPI5_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <MX_SPI5_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800105a:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <MX_SPI5_Init+0x64>)
 800105c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001060:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001062:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <MX_SPI5_Init+0x64>)
 8001064:	2218      	movs	r2, #24
 8001066:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <MX_SPI5_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <MX_SPI5_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <MX_SPI5_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <MX_SPI5_Init+0x64>)
 800107c:	220a      	movs	r2, #10
 800107e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	@ (8001094 <MX_SPI5_Init+0x64>)
 8001082:	f004 f8eb 	bl	800525c <HAL_SPI_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800108c:	f7ff ffca 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200001a8 	.word	0x200001a8
 8001098:	40015000 	.word	0x40015000

0800109c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	@ (8001120 <HAL_SPI_MspInit+0x84>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12c      	bne.n	8001118 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <HAL_SPI_MspInit+0x88>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <HAL_SPI_MspInit+0x88>)
 80010c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <HAL_SPI_MspInit+0x88>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <HAL_SPI_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a10      	ldr	r2, [pc, #64]	@ (8001124 <HAL_SPI_MspInit+0x88>)
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <HAL_SPI_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0320 	and.w	r3, r3, #32
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80010f6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001108:	2305      	movs	r3, #5
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4805      	ldr	r0, [pc, #20]	@ (8001128 <HAL_SPI_MspInit+0x8c>)
 8001114:	f000 fd50 	bl	8001bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	@ 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40015000 	.word	0x40015000
 8001124:	40023800 	.word	0x40023800
 8001128:	40021400 	.word	0x40021400

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <HAL_MspInit+0x64>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a15      	ldr	r2, [pc, #84]	@ (8001190 <HAL_MspInit+0x64>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <HAL_MspInit+0x64>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <HAL_MspInit+0x64>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <HAL_MspInit+0x64>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115c:	6413      	str	r3, [r2, #64]	@ 0x40
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <HAL_MspInit+0x64>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	210f      	movs	r1, #15
 800116e:	f06f 0001 	mvn.w	r0, #1
 8001172:	f000 faef 	bl	8001754 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2105      	movs	r1, #5
 800117a:	2005      	movs	r0, #5
 800117c:	f000 faea 	bl	8001754 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001180:	2005      	movs	r0, #5
 8001182:	f000 fb03 	bl	800178c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800

08001194 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08e      	sub	sp, #56	@ 0x38
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	4b33      	ldr	r3, [pc, #204]	@ (8001278 <HAL_InitTick+0xe4>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	4a32      	ldr	r2, [pc, #200]	@ (8001278 <HAL_InitTick+0xe4>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b4:	4b30      	ldr	r3, [pc, #192]	@ (8001278 <HAL_InitTick+0xe4>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011c0:	f107 0210 	add.w	r2, r7, #16
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fe20 	bl	8004e10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d103      	bne.n	80011e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011da:	f003 fdf1 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 80011de:	6378      	str	r0, [r7, #52]	@ 0x34
 80011e0:	e004      	b.n	80011ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011e2:	f003 fded 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 80011e6:	4603      	mov	r3, r0
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ee:	4a23      	ldr	r2, [pc, #140]	@ (800127c <HAL_InitTick+0xe8>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	0c9b      	lsrs	r3, r3, #18
 80011f6:	3b01      	subs	r3, #1
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011fa:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <HAL_InitTick+0xec>)
 80011fc:	4a21      	ldr	r2, [pc, #132]	@ (8001284 <HAL_InitTick+0xf0>)
 80011fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <HAL_InitTick+0xec>)
 8001202:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001206:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001208:	4a1d      	ldr	r2, [pc, #116]	@ (8001280 <HAL_InitTick+0xec>)
 800120a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800120c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <HAL_InitTick+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <HAL_InitTick+0xec>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <HAL_InitTick+0xec>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001220:	4817      	ldr	r0, [pc, #92]	@ (8001280 <HAL_InitTick+0xec>)
 8001222:	f004 f8a4 	bl	800536e <HAL_TIM_Base_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800122c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001230:	2b00      	cmp	r3, #0
 8001232:	d11b      	bne.n	800126c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001234:	4812      	ldr	r0, [pc, #72]	@ (8001280 <HAL_InitTick+0xec>)
 8001236:	f004 f8e9 	bl	800540c <HAL_TIM_Base_Start_IT>
 800123a:	4603      	mov	r3, r0
 800123c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001240:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001244:	2b00      	cmp	r3, #0
 8001246:	d111      	bne.n	800126c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001248:	2036      	movs	r0, #54	@ 0x36
 800124a:	f000 fa9f 	bl	800178c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d808      	bhi.n	8001266 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	2036      	movs	r0, #54	@ 0x36
 800125a:	f000 fa7b 	bl	8001754 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <HAL_InitTick+0xf4>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e002      	b.n	800126c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800126c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001270:	4618      	mov	r0, r3
 8001272:	3738      	adds	r7, #56	@ 0x38
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800
 800127c:	431bde83 	.word	0x431bde83
 8001280:	20000200 	.word	0x20000200
 8001284:	40001000 	.word	0x40001000
 8001288:	20000004 	.word	0x20000004

0800128c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <NMI_Handler+0x4>

08001294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <MemManage_Handler+0x4>

080012a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <TIM6_DAC_IRQHandler+0x10>)
 80012d6:	f004 f909 	bl	80054ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000200 	.word	0x20000200

080012e4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <OTG_HS_IRQHandler+0x10>)
 80012ea:	f000 fe2a 	bl	8001f42 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200003c8 	.word	0x200003c8

080012f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <LTDC_IRQHandler+0x10>)
 80012fe:	f002 fe57 	bl	8003fb0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000100 	.word	0x20000100

0800130c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <DMA2D_IRQHandler+0x10>)
 8001312:	f000 faae 	bl	8001872 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000034 	.word	0x20000034

08001320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001360:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001362:	4a1f      	ldr	r2, [pc, #124]	@ (80013e0 <MX_TIM1_Init+0x9c>)
 8001364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_TIM1_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001374:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <MX_TIM1_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <MX_TIM1_Init+0x98>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800138c:	4813      	ldr	r0, [pc, #76]	@ (80013dc <MX_TIM1_Init+0x98>)
 800138e:	f003 ffee 	bl	800536e <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001398:	f7ff fe44 	bl	8001024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <MX_TIM1_Init+0x98>)
 80013aa:	f004 f98f 	bl	80056cc <HAL_TIM_ConfigClockSource>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013b4:	f7ff fe36 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_TIM1_Init+0x98>)
 80013c6:	f004 fbb7 	bl	8005b38 <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013d0:	f7ff fe28 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000248 	.word	0x20000248
 80013e0:	40010000 	.word	0x40010000

080013e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001420 <HAL_TIM_Base_MspInit+0x3c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10d      	bne.n	8001412 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <HAL_TIM_Base_MspInit+0x40>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	4a09      	ldr	r2, [pc, #36]	@ (8001424 <HAL_TIM_Base_MspInit+0x40>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6453      	str	r3, [r2, #68]	@ 0x44
 8001406:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <HAL_TIM_Base_MspInit+0x40>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40010000 	.word	0x40010000
 8001424:	40023800 	.word	0x40023800

08001428 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <MX_USART1_UART_Init+0x4c>)
 800142e:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <MX_USART1_UART_Init+0x50>)
 8001430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <MX_USART1_UART_Init+0x4c>)
 8001434:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <MX_USART1_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <MX_USART1_UART_Init+0x4c>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <MX_USART1_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <MX_USART1_UART_Init+0x4c>)
 800144e:	220c      	movs	r2, #12
 8001450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <MX_USART1_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <MX_USART1_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_USART1_UART_Init+0x4c>)
 8001460:	f004 fbfa 	bl	8005c58 <HAL_UART_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800146a:	f7ff fddb 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000290 	.word	0x20000290
 8001478:	40011000 	.word	0x40011000

0800147c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	@ 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	@ (8001500 <HAL_UART_MspInit+0x84>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12c      	bne.n	80014f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <HAL_UART_MspInit+0x88>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	4a17      	ldr	r2, [pc, #92]	@ (8001504 <HAL_UART_MspInit+0x88>)
 80014a8:	f043 0310 	orr.w	r3, r3, #16
 80014ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_UART_MspInit+0x88>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <HAL_UART_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a10      	ldr	r2, [pc, #64]	@ (8001504 <HAL_UART_MspInit+0x88>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <HAL_UART_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e8:	2307      	movs	r3, #7
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <HAL_UART_MspInit+0x8c>)
 80014f4:	f000 fb60 	bl	8001bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	@ 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40011000 	.word	0x40011000
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001544 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001510:	f7ff ff06 	bl	8001320 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001514:	480c      	ldr	r0, [pc, #48]	@ (8001548 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001516:	490d      	ldr	r1, [pc, #52]	@ (800154c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001518:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152a:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800152c:	4c0a      	ldr	r4, [pc, #40]	@ (8001558 <LoopFillZerobss+0x22>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800153a:	f006 fc35 	bl	8007da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff fcc1 	bl	8000ec4 <main>
  bx  lr    
 8001542:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001544:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001550:	08007e4c 	.word	0x08007e4c
  ldr r2, =_sbss
 8001554:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001558:	200007a8 	.word	0x200007a8

0800155c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001564:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <HAL_Init+0x40>)
 800156a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800156e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <HAL_Init+0x40>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800157a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <HAL_Init+0x40>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f8d8 	bl	800173e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff fe00 	bl	8001194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fdca 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_IncTick+0x20>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_IncTick+0x24>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <HAL_IncTick+0x24>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008
 80015c8:	200002d8 	.word	0x200002d8

080015cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return uwTick;
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <HAL_GetTick+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	200002d8 	.word	0x200002d8

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4907      	ldr	r1, [pc, #28]	@ (8001680 <__NVIC_EnableIRQ+0x38>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	@ (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	@ (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	@ 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	@ 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff4c 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001766:	f7ff ff61 	bl	800162c <__NVIC_GetPriorityGrouping>
 800176a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	6978      	ldr	r0, [r7, #20]
 8001772:	f7ff ffb1 	bl	80016d8 <NVIC_EncodePriority>
 8001776:	4602      	mov	r2, r0
 8001778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff80 	bl	8001684 <__NVIC_SetPriority>
}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff54 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	795b      	ldrb	r3, [r3, #5]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d105      	bne.n	80017d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7fe fe9c 	bl	8000508 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e03b      	b.n	800186a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7fe fed2 	bl	80005b0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001830:	f023 0107 	bic.w	r1, r3, #7
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800184a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68d1      	ldr	r1, [r2, #12]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	430b      	orrs	r3, r1
 8001858:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d026      	beq.n	80018e2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189a:	2b00      	cmp	r3, #0
 800189c:	d021      	beq.n	80018e2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018ac:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2204      	movs	r2, #4
 80018c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d026      	beq.n	800193a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d021      	beq.n	800193a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001904:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2220      	movs	r2, #32
 800190c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001912:	f043 0202 	orr.w	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2204      	movs	r2, #4
 800191e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d026      	beq.n	8001992 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800194a:	2b00      	cmp	r3, #0
 800194c:	d021      	beq.n	8001992 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800195c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2208      	movs	r2, #8
 8001964:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800196a:	f043 0204 	orr.w	r2, r3, #4
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2204      	movs	r2, #4
 8001976:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00e      	beq.n	80019c4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019b4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2204      	movs	r2, #4
 80019bc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f853 	bl	8001a6a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d024      	beq.n	8001a18 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d01f      	beq.n	8001a18 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019e6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2202      	movs	r2, #2
 80019ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01f      	beq.n	8001a62 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01a      	beq.n	8001a62 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2210      	movs	r2, #16
 8001a42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f80e 	bl	8001a7e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_DMA2D_ConfigLayer+0x20>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e079      	b.n	8001ba8 <HAL_DMA2D_ConfigLayer+0x114>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	3318      	adds	r3, #24
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	4313      	orrs	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001ade:	4b35      	ldr	r3, [pc, #212]	@ (8001bb4 <HAL_DMA2D_ConfigLayer+0x120>)
 8001ae0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b0a      	cmp	r3, #10
 8001ae8:	d003      	beq.n	8001af2 <HAL_DMA2D_ConfigLayer+0x5e>
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b09      	cmp	r3, #9
 8001af0:	d107      	bne.n	8001b02 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e005      	b.n	8001b0e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	061b      	lsls	r3, r3, #24
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d120      	bne.n	8001b56 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	ea02 0103 	and.w	r1, r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b0a      	cmp	r3, #10
 8001b3c:	d003      	beq.n	8001b46 <HAL_DMA2D_ConfigLayer+0xb2>
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b09      	cmp	r3, #9
 8001b44:	d127      	bne.n	8001b96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001b52:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b54:	e01f      	b.n	8001b96 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69da      	ldr	r2, [r3, #28]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	ea02 0103 	and.w	r1, r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b0a      	cmp	r3, #10
 8001b7e:	d003      	beq.n	8001b88 <HAL_DMA2D_ConfigLayer+0xf4>
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	d106      	bne.n	8001b96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001b94:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	371c      	adds	r7, #28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	ff03000f 	.word	0xff03000f

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	@ 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	e177      	b.n	8001ec4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f040 8166 	bne.w	8001ebe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d005      	beq.n	8001c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d130      	bne.n	8001c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 0201 	and.w	r2, r3, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d017      	beq.n	8001ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d123      	bne.n	8001cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	08da      	lsrs	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	69b9      	ldr	r1, [r7, #24]
 8001cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0203 	and.w	r2, r3, #3
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80c0 	beq.w	8001ebe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b66      	ldr	r3, [pc, #408]	@ (8001edc <HAL_GPIO_Init+0x324>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	4a65      	ldr	r2, [pc, #404]	@ (8001edc <HAL_GPIO_Init+0x324>)
 8001d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4e:	4b63      	ldr	r3, [pc, #396]	@ (8001edc <HAL_GPIO_Init+0x324>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5a:	4a61      	ldr	r2, [pc, #388]	@ (8001ee0 <HAL_GPIO_Init+0x328>)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	220f      	movs	r2, #15
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a58      	ldr	r2, [pc, #352]	@ (8001ee4 <HAL_GPIO_Init+0x32c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d037      	beq.n	8001df6 <HAL_GPIO_Init+0x23e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a57      	ldr	r2, [pc, #348]	@ (8001ee8 <HAL_GPIO_Init+0x330>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d031      	beq.n	8001df2 <HAL_GPIO_Init+0x23a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a56      	ldr	r2, [pc, #344]	@ (8001eec <HAL_GPIO_Init+0x334>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d02b      	beq.n	8001dee <HAL_GPIO_Init+0x236>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a55      	ldr	r2, [pc, #340]	@ (8001ef0 <HAL_GPIO_Init+0x338>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d025      	beq.n	8001dea <HAL_GPIO_Init+0x232>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a54      	ldr	r2, [pc, #336]	@ (8001ef4 <HAL_GPIO_Init+0x33c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01f      	beq.n	8001de6 <HAL_GPIO_Init+0x22e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a53      	ldr	r2, [pc, #332]	@ (8001ef8 <HAL_GPIO_Init+0x340>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d019      	beq.n	8001de2 <HAL_GPIO_Init+0x22a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a52      	ldr	r2, [pc, #328]	@ (8001efc <HAL_GPIO_Init+0x344>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d013      	beq.n	8001dde <HAL_GPIO_Init+0x226>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a51      	ldr	r2, [pc, #324]	@ (8001f00 <HAL_GPIO_Init+0x348>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00d      	beq.n	8001dda <HAL_GPIO_Init+0x222>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a50      	ldr	r2, [pc, #320]	@ (8001f04 <HAL_GPIO_Init+0x34c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <HAL_GPIO_Init+0x21e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4f      	ldr	r2, [pc, #316]	@ (8001f08 <HAL_GPIO_Init+0x350>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_GPIO_Init+0x21a>
 8001dce:	2309      	movs	r3, #9
 8001dd0:	e012      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001dd2:	230a      	movs	r3, #10
 8001dd4:	e010      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001dd6:	2308      	movs	r3, #8
 8001dd8:	e00e      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001dda:	2307      	movs	r3, #7
 8001ddc:	e00c      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001dde:	2306      	movs	r3, #6
 8001de0:	e00a      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001de2:	2305      	movs	r3, #5
 8001de4:	e008      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001de6:	2304      	movs	r3, #4
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x240>
 8001df6:	2300      	movs	r3, #0
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	f002 0203 	and.w	r2, r2, #3
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e08:	4935      	ldr	r1, [pc, #212]	@ (8001ee0 <HAL_GPIO_Init+0x328>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <HAL_GPIO_Init+0x354>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a34      	ldr	r2, [pc, #208]	@ (8001f0c <HAL_GPIO_Init+0x354>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b32      	ldr	r3, [pc, #200]	@ (8001f0c <HAL_GPIO_Init+0x354>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a29      	ldr	r2, [pc, #164]	@ (8001f0c <HAL_GPIO_Init+0x354>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6a:	4b28      	ldr	r3, [pc, #160]	@ (8001f0c <HAL_GPIO_Init+0x354>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <HAL_GPIO_Init+0x354>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e94:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <HAL_GPIO_Init+0x354>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	@ (8001f0c <HAL_GPIO_Init+0x354>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	f67f ae84 	bls.w	8001bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3724      	adds	r7, #36	@ 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020c00 	.word	0x40020c00
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40021400 	.word	0x40021400
 8001efc:	40021800 	.word	0x40021800
 8001f00:	40021c00 	.word	0x40021c00
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40022400 	.word	0x40022400
 8001f0c:	40013c00 	.word	0x40013c00

08001f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f20:	787b      	ldrb	r3, [r7, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f2c:	e003      	b.n	8001f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	041a      	lsls	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f004 fb15 	bl	8006588 <USB_GetMode>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	f040 80fb 	bne.w	800215c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 fad8 	bl	8006520 <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80f1 	beq.w	800215a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f004 facf 	bl	8006520 <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f8c:	d104      	bne.n	8001f98 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001f96:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 fabf 	bl	8006520 <USB_ReadInterrupts>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fac:	d104      	bne.n	8001fb8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001fb6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 faaf 	bl	8006520 <USB_ReadInterrupts>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001fcc:	d104      	bne.n	8001fd8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fd6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f004 fa9f 	bl	8006520 <USB_ReadInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d103      	bne.n	8001ff4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f004 fa91 	bl	8006520 <USB_ReadInterrupts>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002008:	d120      	bne.n	800204c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002012:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d113      	bne.n	800204c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002024:	2110      	movs	r1, #16
 8002026:	6938      	ldr	r0, [r7, #16]
 8002028:	f004 f9c2 	bl	80063b0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800202c:	6938      	ldr	r0, [r7, #16]
 800202e:	f004 f9f1 	bl	8006414 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7a5b      	ldrb	r3, [r3, #9]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d105      	bne.n	8002046 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	4618      	mov	r0, r3
 8002042:	f004 faaf 	bl	80065a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f005 fe22 	bl	8007c90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f004 fa65 	bl	8006520 <USB_ReadInterrupts>
 8002056:	4603      	mov	r3, r0
 8002058:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800205c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002060:	d102      	bne.n	8002068 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f001 fca1 	bl	80039aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f004 fa57 	bl	8006520 <USB_ReadInterrupts>
 8002072:	4603      	mov	r3, r0
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b08      	cmp	r3, #8
 800207a:	d106      	bne.n	800208a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f005 fdeb 	bl	8007c58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2208      	movs	r2, #8
 8002088:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f004 fa46 	bl	8006520 <USB_ReadInterrupts>
 8002094:	4603      	mov	r3, r0
 8002096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800209e:	d139      	bne.n	8002114 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f004 faba 	bl	800661e <USB_HC_ReadInterrupt>
 80020aa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e025      	b.n	80020fe <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d018      	beq.n	80020f8 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020dc:	d106      	bne.n	80020ec <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f859 	bl	800219c <HCD_HC_IN_IRQHandler>
 80020ea:	e005      	b.n	80020f8 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	4619      	mov	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 febb 	bl	8002e6e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	795b      	ldrb	r3, [r3, #5]
 8002102:	461a      	mov	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	4293      	cmp	r3, r2
 8002108:	d3d3      	bcc.n	80020b2 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002112:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f004 fa01 	bl	8006520 <USB_ReadInterrupts>
 800211e:	4603      	mov	r3, r0
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b10      	cmp	r3, #16
 8002126:	d101      	bne.n	800212c <HAL_HCD_IRQHandler+0x1ea>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_HCD_IRQHandler+0x1ec>
 800212c:	2300      	movs	r3, #0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d014      	beq.n	800215c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0210 	bic.w	r2, r2, #16
 8002140:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f001 fb52 	bl	80037ec <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0210 	orr.w	r2, r2, #16
 8002156:	619a      	str	r2, [r3, #24]
 8002158:	e000      	b.n	800215c <HAL_HCD_IRQHandler+0x21a>
      return;
 800215a:	bf00      	nop
    }
  }
}
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_HCD_Stop+0x16>
 8002174:	2302      	movs	r3, #2
 8002176:	e00d      	b.n	8002194 <HAL_HCD_Stop+0x32>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f004 fb7b 	bl	8006880 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f004 f9c3 	bl	8006546 <USB_ReadChInterrupts>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d11a      	bne.n	8002200 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	2304      	movs	r3, #4
 80021da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	334d      	adds	r3, #77	@ 0x4d
 80021ec:	2207      	movs	r2, #7
 80021ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f004 fa21 	bl	8006640 <USB_HC_Halt>
 80021fe:	e09e      	b.n	800233e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f004 f99c 	bl	8006546 <USB_ReadChInterrupts>
 800220e:	4603      	mov	r3, r0
 8002210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002218:	d11b      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002226:	461a      	mov	r2, r3
 8002228:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800222c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	334d      	adds	r3, #77	@ 0x4d
 800223e:	2208      	movs	r2, #8
 8002240:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f004 f9f8 	bl	8006640 <USB_HC_Halt>
 8002250:	e075      	b.n	800233e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f004 f973 	bl	8006546 <USB_ReadChInterrupts>
 8002260:	4603      	mov	r3, r0
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11a      	bne.n	80022a0 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002276:	461a      	mov	r2, r3
 8002278:	2308      	movs	r3, #8
 800227a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	334d      	adds	r3, #77	@ 0x4d
 800228c:	2206      	movs	r2, #6
 800228e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f004 f9d1 	bl	8006640 <USB_HC_Halt>
 800229e:	e04e      	b.n	800233e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f004 f94c 	bl	8006546 <USB_ReadChInterrupts>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b8:	d11b      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c6:	461a      	mov	r2, r3
 80022c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	334d      	adds	r3, #77	@ 0x4d
 80022de:	2209      	movs	r2, #9
 80022e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f004 f9a8 	bl	8006640 <USB_HC_Halt>
 80022f0:	e025      	b.n	800233e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	4611      	mov	r1, r2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f004 f923 	bl	8006546 <USB_ReadChInterrupts>
 8002300:	4603      	mov	r3, r0
 8002302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002306:	2b80      	cmp	r3, #128	@ 0x80
 8002308:	d119      	bne.n	800233e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4413      	add	r3, r2
 8002312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002316:	461a      	mov	r2, r3
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	334d      	adds	r3, #77	@ 0x4d
 800232c:	2207      	movs	r2, #7
 800232e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f004 f981 	bl	8006640 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f004 f8fd 	bl	8006546 <USB_ReadChInterrupts>
 800234c:	4603      	mov	r3, r0
 800234e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002356:	d112      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f004 f96d 	bl	8006640 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002372:	461a      	mov	r2, r3
 8002374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002378:	6093      	str	r3, [r2, #8]
 800237a:	f000 bd75 	b.w	8002e68 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f004 f8dd 	bl	8006546 <USB_ReadChInterrupts>
 800238c:	4603      	mov	r3, r0
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	f040 8128 	bne.w	80025e8 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a4:	461a      	mov	r2, r3
 80023a6:	2320      	movs	r3, #32
 80023a8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	331b      	adds	r3, #27
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d119      	bne.n	80023f4 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	331b      	adds	r3, #27
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	0151      	lsls	r1, r2, #5
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	440a      	add	r2, r1
 80023ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f2:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	799b      	ldrb	r3, [r3, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01b      	beq.n	8002434 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	3330      	adds	r3, #48	@ 0x30
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	1ac9      	subs	r1, r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4403      	add	r3, r0
 8002430:	3338      	adds	r3, #56	@ 0x38
 8002432:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	334d      	adds	r3, #77	@ 0x4d
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3344      	adds	r3, #68	@ 0x44
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002468:	461a      	mov	r2, r3
 800246a:	2301      	movs	r3, #1
 800246c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3326      	adds	r3, #38	@ 0x26
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00a      	beq.n	800249a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3326      	adds	r3, #38	@ 0x26
 8002494:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002496:	2b02      	cmp	r3, #2
 8002498:	d110      	bne.n	80024bc <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f004 f8cc 	bl	8006640 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b4:	461a      	mov	r2, r3
 80024b6:	2310      	movs	r3, #16
 80024b8:	6093      	str	r3, [r2, #8]
 80024ba:	e03d      	b.n	8002538 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	3326      	adds	r3, #38	@ 0x26
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d00a      	beq.n	80024e8 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3326      	adds	r3, #38	@ 0x26
 80024e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d127      	bne.n	8002538 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	0151      	lsls	r1, r2, #5
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	440a      	add	r2, r1
 80024fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002502:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002506:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	334c      	adds	r3, #76	@ 0x4c
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	334c      	adds	r3, #76	@ 0x4c
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	4619      	mov	r1, r3
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f005 fbba 	bl	8007cac <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	799b      	ldrb	r3, [r3, #6]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d13b      	bne.n	80025b8 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3338      	adds	r3, #56	@ 0x38
 8002550:	6819      	ldr	r1, [r3, #0]
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4403      	add	r3, r0
 8002560:	3328      	adds	r3, #40	@ 0x28
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	440b      	add	r3, r1
 8002566:	1e59      	subs	r1, r3, #1
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4403      	add	r3, r0
 8002576:	3328      	adds	r3, #40	@ 0x28
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	fbb1 f3f3 	udiv	r3, r1, r3
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8470 	beq.w	8002e68 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	333c      	adds	r3, #60	@ 0x3c
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	f083 0301 	eor.w	r3, r3, #1
 80025a0:	b2d8      	uxtb	r0, r3
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	333c      	adds	r3, #60	@ 0x3c
 80025b0:	4602      	mov	r2, r0
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	f000 bc58 	b.w	8002e68 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	333c      	adds	r3, #60	@ 0x3c
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	f083 0301 	eor.w	r3, r3, #1
 80025d0:	b2d8      	uxtb	r0, r3
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	333c      	adds	r3, #60	@ 0x3c
 80025e0:	4602      	mov	r2, r0
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	f000 bc40 	b.w	8002e68 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 ffa8 	bl	8006546 <USB_ReadChInterrupts>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d131      	bne.n	8002664 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800260c:	461a      	mov	r2, r3
 800260e:	2320      	movs	r3, #32
 8002610:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	331a      	adds	r3, #26
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	f040 841f 	bne.w	8002e68 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	331b      	adds	r3, #27
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	334d      	adds	r3, #77	@ 0x4d
 800264e:	2203      	movs	r2, #3
 8002650:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f003 fff0 	bl	8006640 <USB_HC_Halt>
 8002660:	f000 bc02 	b.w	8002e68 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f003 ff6a 	bl	8006546 <USB_ReadChInterrupts>
 8002672:	4603      	mov	r3, r0
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b02      	cmp	r3, #2
 800267a:	f040 8305 	bne.w	8002c88 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800268a:	461a      	mov	r2, r3
 800268c:	2302      	movs	r3, #2
 800268e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	334d      	adds	r3, #77	@ 0x4d
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d114      	bne.n	80026d0 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	334d      	adds	r3, #77	@ 0x4d
 80026b6:	2202      	movs	r2, #2
 80026b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	334c      	adds	r3, #76	@ 0x4c
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	e2cc      	b.n	8002c6a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	334d      	adds	r3, #77	@ 0x4d
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d114      	bne.n	8002710 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	334d      	adds	r3, #77	@ 0x4d
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	334c      	adds	r3, #76	@ 0x4c
 800270a:	2205      	movs	r2, #5
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e2ac      	b.n	8002c6a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	334d      	adds	r3, #77	@ 0x4d
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b07      	cmp	r3, #7
 8002724:	d00b      	beq.n	800273e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	334d      	adds	r3, #77	@ 0x4d
 8002736:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002738:	2b09      	cmp	r3, #9
 800273a:	f040 80a6 	bne.w	800288a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	334d      	adds	r3, #77	@ 0x4d
 800274e:	2202      	movs	r2, #2
 8002750:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	3344      	adds	r3, #68	@ 0x44
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	1c59      	adds	r1, r3, #1
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4403      	add	r3, r0
 8002772:	3344      	adds	r3, #68	@ 0x44
 8002774:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	3344      	adds	r3, #68	@ 0x44
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d943      	bls.n	8002814 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	3344      	adds	r3, #68	@ 0x44
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	331a      	adds	r3, #26
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d123      	bne.n	80027fe <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	331b      	adds	r3, #27
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	331c      	adds	r3, #28
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	0151      	lsls	r1, r2, #5
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	440a      	add	r2, r1
 80027f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027fc:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	334c      	adds	r3, #76	@ 0x4c
 800280e:	2204      	movs	r2, #4
 8002810:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002812:	e229      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	334c      	adds	r3, #76	@ 0x4c
 8002824:	2202      	movs	r2, #2
 8002826:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	3326      	adds	r3, #38	@ 0x26
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	3326      	adds	r3, #38	@ 0x26
 800284e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002850:	2b02      	cmp	r3, #2
 8002852:	f040 8209 	bne.w	8002c68 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800286c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002874:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002888:	e1ee      	b.n	8002c68 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	334d      	adds	r3, #77	@ 0x4d
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b05      	cmp	r3, #5
 800289e:	f040 80c8 	bne.w	8002a32 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	334d      	adds	r3, #77	@ 0x4d
 80028b2:	2202      	movs	r2, #2
 80028b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	331b      	adds	r3, #27
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	f040 81ce 	bne.w	8002c6a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3326      	adds	r3, #38	@ 0x26
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d16b      	bne.n	80029bc <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3348      	adds	r3, #72	@ 0x48
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	1c59      	adds	r1, r3, #1
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4403      	add	r3, r0
 8002904:	3348      	adds	r3, #72	@ 0x48
 8002906:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	3348      	adds	r3, #72	@ 0x48
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d943      	bls.n	80029a6 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3348      	adds	r3, #72	@ 0x48
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	331b      	adds	r3, #27
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3344      	adds	r3, #68	@ 0x44
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d809      	bhi.n	8002970 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	331c      	adds	r3, #28
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	0151      	lsls	r1, r2, #5
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	440a      	add	r2, r1
 8002986:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800298a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	334c      	adds	r3, #76	@ 0x4c
 80029a0:	2204      	movs	r2, #4
 80029a2:	701a      	strb	r2, [r3, #0]
 80029a4:	e014      	b.n	80029d0 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	334c      	adds	r3, #76	@ 0x4c
 80029b6:	2202      	movs	r2, #2
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	e009      	b.n	80029d0 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	334c      	adds	r3, #76	@ 0x4c
 80029cc:	2202      	movs	r2, #2
 80029ce:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3326      	adds	r3, #38	@ 0x26
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00b      	beq.n	80029fe <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3326      	adds	r3, #38	@ 0x26
 80029f6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	f040 8136 	bne.w	8002c6a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a14:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a1c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	e11b      	b.n	8002c6a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	334d      	adds	r3, #77	@ 0x4d
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	f040 8081 	bne.w	8002b4c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	334d      	adds	r3, #77	@ 0x4d
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	331b      	adds	r3, #27
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	f040 80fa 	bne.w	8002c6a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	334c      	adds	r3, #76	@ 0x4c
 8002a86:	2202      	movs	r2, #2
 8002a88:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	0151      	lsls	r1, r2, #5
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	440a      	add	r2, r1
 8002aa0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	0151      	lsls	r1, r2, #5
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	440a      	add	r2, r1
 8002ac0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ac8:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	0151      	lsls	r1, r2, #5
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	440a      	add	r2, r1
 8002ae0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ae4:	f023 0320 	bic.w	r3, r3, #32
 8002ae8:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	3326      	adds	r3, #38	@ 0x26
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00b      	beq.n	8002b18 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3326      	adds	r3, #38	@ 0x26
 8002b10:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	f040 80a9 	bne.w	8002c6a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b2e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b36:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b44:	461a      	mov	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e08e      	b.n	8002c6a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	334d      	adds	r3, #77	@ 0x4d
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d143      	bne.n	8002bea <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	334d      	adds	r3, #77	@ 0x4d
 8002b72:	2202      	movs	r2, #2
 8002b74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	334c      	adds	r3, #76	@ 0x4c
 8002b86:	2202      	movs	r2, #2
 8002b88:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3326      	adds	r3, #38	@ 0x26
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	3326      	adds	r3, #38	@ 0x26
 8002bb0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d159      	bne.n	8002c6a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002bcc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002bd4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e03f      	b.n	8002c6a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	334d      	adds	r3, #77	@ 0x4d
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d126      	bne.n	8002c4e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	334d      	adds	r3, #77	@ 0x4d
 8002c10:	2202      	movs	r2, #2
 8002c12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	3344      	adds	r3, #68	@ 0x44
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	1c59      	adds	r1, r3, #1
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4403      	add	r3, r0
 8002c34:	3344      	adds	r3, #68	@ 0x44
 8002c36:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	334c      	adds	r3, #76	@ 0x4c
 8002c48:	2204      	movs	r2, #4
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	e00d      	b.n	8002c6a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	334d      	adds	r3, #77	@ 0x4d
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	f000 8100 	beq.w	8002e66 <HCD_HC_IN_IRQHandler+0xcca>
 8002c66:	e000      	b.n	8002c6a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c68:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	334c      	adds	r3, #76	@ 0x4c
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f005 f813 	bl	8007cac <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c86:	e0ef      	b.n	8002e68 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 fc58 	bl	8006546 <USB_ReadChInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9c:	2b40      	cmp	r3, #64	@ 0x40
 8002c9e:	d12f      	bne.n	8002d00 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cac:	461a      	mov	r2, r3
 8002cae:	2340      	movs	r3, #64	@ 0x40
 8002cb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	334d      	adds	r3, #77	@ 0x4d
 8002cc2:	2205      	movs	r2, #5
 8002cc4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	331a      	adds	r3, #26
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	3344      	adds	r3, #68	@ 0x44
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 fca1 	bl	8006640 <USB_HC_Halt>
 8002cfe:	e0b3      	b.n	8002e68 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f003 fc1c 	bl	8006546 <USB_ReadChInterrupts>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	f040 80a7 	bne.w	8002e68 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	3326      	adds	r3, #38	@ 0x26
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d11b      	bne.n	8002d68 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	3344      	adds	r3, #68	@ 0x44
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	334d      	adds	r3, #77	@ 0x4d
 8002d54:	2204      	movs	r2, #4
 8002d56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 fc6d 	bl	8006640 <USB_HC_Halt>
 8002d66:	e03f      	b.n	8002de8 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3326      	adds	r3, #38	@ 0x26
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3326      	adds	r3, #38	@ 0x26
 8002d8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d129      	bne.n	8002de8 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3344      	adds	r3, #68	@ 0x44
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	799b      	ldrb	r3, [r3, #6]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HCD_HC_IN_IRQHandler+0xc2a>
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	331b      	adds	r3, #27
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d110      	bne.n	8002de8 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	334d      	adds	r3, #77	@ 0x4d
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 fc2c 	bl	8006640 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	331b      	adds	r3, #27
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d129      	bne.n	8002e52 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	331b      	adds	r3, #27
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	0151      	lsls	r1, r2, #5
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	440a      	add	r2, r1
 8002e28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e30:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	0151      	lsls	r1, r2, #5
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	440a      	add	r2, r1
 8002e48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e4c:	f043 0320 	orr.w	r3, r3, #32
 8002e50:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2310      	movs	r3, #16
 8002e62:	6093      	str	r3, [r2, #8]
 8002e64:	e000      	b.n	8002e68 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002e66:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 fb5a 	bl	8006546 <USB_ReadChInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d11b      	bne.n	8002ed4 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2304      	movs	r3, #4
 8002eac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	334d      	adds	r3, #77	@ 0x4d
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 fbb8 	bl	8006640 <USB_HC_Halt>
 8002ed0:	f000 bc89 	b.w	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 fb32 	bl	8006546 <USB_ReadChInterrupts>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	f040 8082 	bne.w	8002ff2 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efa:	461a      	mov	r2, r3
 8002efc:	2320      	movs	r3, #32
 8002efe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3319      	adds	r3, #25
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d124      	bne.n	8002f60 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	3319      	adds	r3, #25
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	334c      	adds	r3, #76	@ 0x4c
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	334d      	adds	r3, #77	@ 0x4d
 8002f4e:	2203      	movs	r2, #3
 8002f50:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f003 fb70 	bl	8006640 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	331a      	adds	r3, #26
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	f040 8437 	bne.w	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	331b      	adds	r3, #27
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 842b 	bne.w	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3326      	adds	r3, #38	@ 0x26
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d009      	beq.n	8002fba <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	331b      	adds	r3, #27
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	334d      	adds	r3, #77	@ 0x4d
 8002fca:	2203      	movs	r2, #3
 8002fcc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 fb32 	bl	8006640 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3344      	adds	r3, #68	@ 0x44
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e3f9      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 faa3 	bl	8006546 <USB_ReadChInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800300a:	d111      	bne.n	8003030 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003018:	461a      	mov	r2, r3
 800301a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800301e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f003 fb09 	bl	8006640 <USB_HC_Halt>
 800302e:	e3da      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f003 fa84 	bl	8006546 <USB_ReadChInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d168      	bne.n	800311a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3344      	adds	r3, #68	@ 0x44
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f003 fa6e 	bl	8006546 <USB_ReadChInterrupts>
 800306a:	4603      	mov	r3, r0
 800306c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003070:	2b40      	cmp	r3, #64	@ 0x40
 8003072:	d112      	bne.n	800309a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3319      	adds	r3, #25
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003094:	461a      	mov	r2, r3
 8003096:	2340      	movs	r3, #64	@ 0x40
 8003098:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	331b      	adds	r3, #27
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d019      	beq.n	80030e4 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	331b      	adds	r3, #27
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	0151      	lsls	r1, r2, #5
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	440a      	add	r2, r1
 80030da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e2:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f0:	461a      	mov	r2, r3
 80030f2:	2301      	movs	r3, #1
 80030f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	334d      	adds	r3, #77	@ 0x4d
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f003 fa94 	bl	8006640 <USB_HC_Halt>
 8003118:	e365      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f003 fa0f 	bl	8006546 <USB_ReadChInterrupts>
 8003128:	4603      	mov	r3, r0
 800312a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312e:	2b40      	cmp	r3, #64	@ 0x40
 8003130:	d139      	bne.n	80031a6 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	334d      	adds	r3, #77	@ 0x4d
 8003142:	2205      	movs	r2, #5
 8003144:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	331a      	adds	r3, #26
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	3319      	adds	r3, #25
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	3344      	adds	r3, #68	@ 0x44
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f003 fa57 	bl	8006640 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4413      	add	r3, r2
 800319a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800319e:	461a      	mov	r2, r3
 80031a0:	2340      	movs	r3, #64	@ 0x40
 80031a2:	6093      	str	r3, [r2, #8]
 80031a4:	e31f      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 f9c9 	bl	8006546 <USB_ReadChInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d11a      	bne.n	80031f4 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ca:	461a      	mov	r2, r3
 80031cc:	2308      	movs	r3, #8
 80031ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	334d      	adds	r3, #77	@ 0x4d
 80031e0:	2206      	movs	r2, #6
 80031e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fa27 	bl	8006640 <USB_HC_Halt>
 80031f2:	e2f8      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 f9a2 	bl	8006546 <USB_ReadChInterrupts>
 8003202:	4603      	mov	r3, r0
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b10      	cmp	r3, #16
 800320a:	d144      	bne.n	8003296 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3344      	adds	r3, #68	@ 0x44
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	334d      	adds	r3, #77	@ 0x4d
 8003230:	2204      	movs	r2, #4
 8003232:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3319      	adds	r3, #25
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d114      	bne.n	8003274 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	3318      	adds	r3, #24
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d109      	bne.n	8003274 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	3319      	adds	r3, #25
 8003270:	2201      	movs	r2, #1
 8003272:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f003 f9df 	bl	8006640 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800328e:	461a      	mov	r2, r3
 8003290:	2310      	movs	r3, #16
 8003292:	6093      	str	r3, [r2, #8]
 8003294:	e2a7      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 f951 	bl	8006546 <USB_ReadChInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032aa:	2b80      	cmp	r3, #128	@ 0x80
 80032ac:	f040 8083 	bne.w	80033b6 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	799b      	ldrb	r3, [r3, #6]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d111      	bne.n	80032dc <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334d      	adds	r3, #77	@ 0x4d
 80032c8:	2207      	movs	r2, #7
 80032ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f003 f9b3 	bl	8006640 <USB_HC_Halt>
 80032da:	e062      	b.n	80033a2 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	3344      	adds	r3, #68	@ 0x44
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1c59      	adds	r1, r3, #1
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4403      	add	r3, r0
 80032fc:	3344      	adds	r3, #68	@ 0x44
 80032fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	3344      	adds	r3, #68	@ 0x44
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d922      	bls.n	800335c <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	3344      	adds	r3, #68	@ 0x44
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	334c      	adds	r3, #76	@ 0x4c
 800333a:	2204      	movs	r2, #4
 800333c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	334c      	adds	r3, #76	@ 0x4c
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	4619      	mov	r1, r3
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f004 fca9 	bl	8007cac <HAL_HCD_HC_NotifyURBChange_Callback>
 800335a:	e022      	b.n	80033a2 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	334c      	adds	r3, #76	@ 0x4c
 800336c:	2202      	movs	r2, #2
 800336e:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003386:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800338e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800339c:	461a      	mov	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ae:	461a      	mov	r2, r3
 80033b0:	2380      	movs	r3, #128	@ 0x80
 80033b2:	6093      	str	r3, [r2, #8]
 80033b4:	e217      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f003 f8c1 	bl	8006546 <USB_ReadChInterrupts>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ce:	d11b      	bne.n	8003408 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	334d      	adds	r3, #77	@ 0x4d
 80033e0:	2209      	movs	r2, #9
 80033e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 f927 	bl	8006640 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fe:	461a      	mov	r2, r3
 8003400:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003404:	6093      	str	r3, [r2, #8]
 8003406:	e1ee      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f003 f898 	bl	8006546 <USB_ReadChInterrupts>
 8003416:	4603      	mov	r3, r0
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	f040 81df 	bne.w	80037e0 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800342e:	461a      	mov	r2, r3
 8003430:	2302      	movs	r3, #2
 8003432:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	334d      	adds	r3, #77	@ 0x4d
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b01      	cmp	r3, #1
 8003448:	f040 8093 	bne.w	8003572 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	334d      	adds	r3, #77	@ 0x4d
 800345c:	2202      	movs	r2, #2
 800345e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	334c      	adds	r3, #76	@ 0x4c
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3326      	adds	r3, #38	@ 0x26
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d00b      	beq.n	80034a2 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3326      	adds	r3, #38	@ 0x26
 800349a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800349c:	2b03      	cmp	r3, #3
 800349e:	f040 8190 	bne.w	80037c2 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	799b      	ldrb	r3, [r3, #6]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d115      	bne.n	80034d6 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	333d      	adds	r3, #61	@ 0x3d
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	f083 0301 	eor.w	r3, r3, #1
 80034c2:	b2d8      	uxtb	r0, r3
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	333d      	adds	r3, #61	@ 0x3d
 80034d2:	4602      	mov	r2, r0
 80034d4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	799b      	ldrb	r3, [r3, #6]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	f040 8171 	bne.w	80037c2 <HCD_HC_OUT_IRQHandler+0x954>
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	3334      	adds	r3, #52	@ 0x34
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8165 	beq.w	80037c2 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3334      	adds	r3, #52	@ 0x34
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4403      	add	r3, r0
 8003518:	3328      	adds	r3, #40	@ 0x28
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	440b      	add	r3, r1
 800351e:	1e59      	subs	r1, r3, #1
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4403      	add	r3, r0
 800352e:	3328      	adds	r3, #40	@ 0x28
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	fbb1 f3f3 	udiv	r3, r1, r3
 8003536:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 813f 	beq.w	80037c2 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	333d      	adds	r3, #61	@ 0x3d
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	f083 0301 	eor.w	r3, r3, #1
 800355c:	b2d8      	uxtb	r0, r3
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	333d      	adds	r3, #61	@ 0x3d
 800356c:	4602      	mov	r2, r0
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e127      	b.n	80037c2 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	334d      	adds	r3, #77	@ 0x4d
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b03      	cmp	r3, #3
 8003586:	d120      	bne.n	80035ca <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	334d      	adds	r3, #77	@ 0x4d
 8003598:	2202      	movs	r2, #2
 800359a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	331b      	adds	r3, #27
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	f040 8107 	bne.w	80037c2 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	334c      	adds	r3, #76	@ 0x4c
 80035c4:	2202      	movs	r2, #2
 80035c6:	701a      	strb	r2, [r3, #0]
 80035c8:	e0fb      	b.n	80037c2 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	334d      	adds	r3, #77	@ 0x4d
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d13a      	bne.n	8003656 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	334d      	adds	r3, #77	@ 0x4d
 80035f0:	2202      	movs	r2, #2
 80035f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	334c      	adds	r3, #76	@ 0x4c
 8003604:	2202      	movs	r2, #2
 8003606:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	331b      	adds	r3, #27
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	f040 80d1 	bne.w	80037c2 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	331b      	adds	r3, #27
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4413      	add	r3, r2
 800363c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	0151      	lsls	r1, r2, #5
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	440a      	add	r2, r1
 800364a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800364e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003652:	6053      	str	r3, [r2, #4]
 8003654:	e0b5      	b.n	80037c2 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	334d      	adds	r3, #77	@ 0x4d
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b05      	cmp	r3, #5
 800366a:	d114      	bne.n	8003696 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	334d      	adds	r3, #77	@ 0x4d
 800367c:	2202      	movs	r2, #2
 800367e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	334c      	adds	r3, #76	@ 0x4c
 8003690:	2202      	movs	r2, #2
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	e095      	b.n	80037c2 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	334d      	adds	r3, #77	@ 0x4d
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b06      	cmp	r3, #6
 80036aa:	d114      	bne.n	80036d6 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	334d      	adds	r3, #77	@ 0x4d
 80036bc:	2202      	movs	r2, #2
 80036be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	334c      	adds	r3, #76	@ 0x4c
 80036d0:	2205      	movs	r2, #5
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e075      	b.n	80037c2 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	334d      	adds	r3, #77	@ 0x4d
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b07      	cmp	r3, #7
 80036ea:	d00a      	beq.n	8003702 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	334d      	adds	r3, #77	@ 0x4d
 80036fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036fe:	2b09      	cmp	r3, #9
 8003700:	d170      	bne.n	80037e4 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003702:	78fa      	ldrb	r2, [r7, #3]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	334d      	adds	r3, #77	@ 0x4d
 8003712:	2202      	movs	r2, #2
 8003714:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	3344      	adds	r3, #68	@ 0x44
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1c59      	adds	r1, r3, #1
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4403      	add	r3, r0
 8003736:	3344      	adds	r3, #68	@ 0x44
 8003738:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	3344      	adds	r3, #68	@ 0x44
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d914      	bls.n	800377a <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	3344      	adds	r3, #68	@ 0x44
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	334c      	adds	r3, #76	@ 0x4c
 8003774:	2204      	movs	r2, #4
 8003776:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003778:	e022      	b.n	80037c0 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	334c      	adds	r3, #76	@ 0x4c
 800378a:	2202      	movs	r2, #2
 800378c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037a4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037ac:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ba:	461a      	mov	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037c0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	334c      	adds	r3, #76	@ 0x4c
 80037d2:	781a      	ldrb	r2, [r3, #0]
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	4619      	mov	r1, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f004 fa67 	bl	8007cac <HAL_HCD_HC_NotifyURBChange_Callback>
 80037de:	e002      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80037e0:	bf00      	nop
 80037e2:	e000      	b.n	80037e6 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80037e4:	bf00      	nop
  }
}
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	@ 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	0c5b      	lsrs	r3, r3, #17
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003820:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d004      	beq.n	8003832 <HCD_RXQLVL_IRQHandler+0x46>
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b05      	cmp	r3, #5
 800382c:	f000 80b6 	beq.w	800399c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003830:	e0b7      	b.n	80039a2 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80b3 	beq.w	80039a0 <HCD_RXQLVL_IRQHandler+0x1b4>
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	332c      	adds	r3, #44	@ 0x2c
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80a7 	beq.w	80039a0 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3338      	adds	r3, #56	@ 0x38
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	18d1      	adds	r1, r2, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4613      	mov	r3, r2
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4403      	add	r3, r0
 8003876:	3334      	adds	r3, #52	@ 0x34
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4299      	cmp	r1, r3
 800387c:	f200 8083 	bhi.w	8003986 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	332c      	adds	r3, #44	@ 0x2c
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	b292      	uxth	r2, r2
 800389a:	4619      	mov	r1, r3
 800389c:	f002 fde8 	bl	8006470 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	332c      	adds	r3, #44	@ 0x2c
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	18d1      	adds	r1, r2, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4613      	mov	r3, r2
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4403      	add	r3, r0
 80038c4:	332c      	adds	r3, #44	@ 0x2c
 80038c6:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	3338      	adds	r3, #56	@ 0x38
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	18d1      	adds	r1, r2, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4403      	add	r3, r0
 80038ec:	3338      	adds	r3, #56	@ 0x38
 80038ee:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	0cdb      	lsrs	r3, r3, #19
 8003900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003904:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	3328      	adds	r3, #40	@ 0x28
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4293      	cmp	r3, r2
 800391e:	d13f      	bne.n	80039a0 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d03c      	beq.n	80039a0 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	4413      	add	r3, r2
 800392e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800393c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003944:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	4413      	add	r3, r2
 800394e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003952:	461a      	mov	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	333c      	adds	r3, #60	@ 0x3c
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	f083 0301 	eor.w	r3, r3, #1
 800396e:	b2d8      	uxtb	r0, r3
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	333c      	adds	r3, #60	@ 0x3c
 8003980:	4602      	mov	r2, r0
 8003982:	701a      	strb	r2, [r3, #0]
      break;
 8003984:	e00c      	b.n	80039a0 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	334c      	adds	r3, #76	@ 0x4c
 8003996:	2204      	movs	r2, #4
 8003998:	701a      	strb	r2, [r3, #0]
      break;
 800399a:	e001      	b.n	80039a0 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800399c:	bf00      	nop
 800399e:	e000      	b.n	80039a2 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80039a0:	bf00      	nop
  }
}
 80039a2:	bf00      	nop
 80039a4:	3728      	adds	r7, #40	@ 0x28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80039d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d10b      	bne.n	80039fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d102      	bne.n	80039f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f004 f941 	bl	8007c74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f043 0302 	orr.w	r3, r3, #2
 80039f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d132      	bne.n	8003a6a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f043 0308 	orr.w	r3, r3, #8
 8003a0a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d126      	bne.n	8003a64 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	7a5b      	ldrb	r3, [r3, #9]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d113      	bne.n	8003a46 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003a24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a28:	d106      	bne.n	8003a38 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2102      	movs	r1, #2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f002 fdb7 	bl	80065a4 <USB_InitFSLSPClkSel>
 8003a36:	e011      	b.n	8003a5c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f002 fdb0 	bl	80065a4 <USB_InitFSLSPClkSel>
 8003a44:	e00a      	b.n	8003a5c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	79db      	ldrb	r3, [r3, #7]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d106      	bne.n	8003a5c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a54:	461a      	mov	r2, r3
 8003a56:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003a5a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f004 f937 	bl	8007cd0 <HAL_HCD_PortEnabled_Callback>
 8003a62:	e002      	b.n	8003a6a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f004 f941 	bl	8007cec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d103      	bne.n	8003a7c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f043 0320 	orr.w	r3, r3, #32
 8003a7a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a82:	461a      	mov	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e12b      	b.n	8003cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fc ffea 	bl	8000a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	@ 0x24
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af4:	f001 f964 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 8003af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4a81      	ldr	r2, [pc, #516]	@ (8003d04 <HAL_I2C_Init+0x274>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d807      	bhi.n	8003b14 <HAL_I2C_Init+0x84>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a80      	ldr	r2, [pc, #512]	@ (8003d08 <HAL_I2C_Init+0x278>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	bf94      	ite	ls
 8003b0c:	2301      	movls	r3, #1
 8003b0e:	2300      	movhi	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e006      	b.n	8003b22 <HAL_I2C_Init+0x92>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a7d      	ldr	r2, [pc, #500]	@ (8003d0c <HAL_I2C_Init+0x27c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	bf94      	ite	ls
 8003b1c:	2301      	movls	r3, #1
 8003b1e:	2300      	movhi	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e0e7      	b.n	8003cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a78      	ldr	r2, [pc, #480]	@ (8003d10 <HAL_I2C_Init+0x280>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	0c9b      	lsrs	r3, r3, #18
 8003b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a6a      	ldr	r2, [pc, #424]	@ (8003d04 <HAL_I2C_Init+0x274>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d802      	bhi.n	8003b64 <HAL_I2C_Init+0xd4>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3301      	adds	r3, #1
 8003b62:	e009      	b.n	8003b78 <HAL_I2C_Init+0xe8>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	4a69      	ldr	r2, [pc, #420]	@ (8003d14 <HAL_I2C_Init+0x284>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	3301      	adds	r3, #1
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	495c      	ldr	r1, [pc, #368]	@ (8003d04 <HAL_I2C_Init+0x274>)
 8003b94:	428b      	cmp	r3, r1
 8003b96:	d819      	bhi.n	8003bcc <HAL_I2C_Init+0x13c>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e59      	subs	r1, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba6:	1c59      	adds	r1, r3, #1
 8003ba8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bac:	400b      	ands	r3, r1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_I2C_Init+0x138>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1e59      	subs	r1, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc6:	e051      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	e04f      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d111      	bne.n	8003bf8 <HAL_I2C_Init+0x168>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e58      	subs	r0, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	440b      	add	r3, r1
 8003be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be6:	3301      	adds	r3, #1
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	e012      	b.n	8003c1e <HAL_I2C_Init+0x18e>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1e58      	subs	r0, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	0099      	lsls	r1, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Init+0x196>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e022      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10e      	bne.n	8003c4c <HAL_I2C_Init+0x1bc>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1e58      	subs	r0, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	460b      	mov	r3, r1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	440b      	add	r3, r1
 8003c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c4a:	e00f      	b.n	8003c6c <HAL_I2C_Init+0x1dc>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	0099      	lsls	r1, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c62:	3301      	adds	r3, #1
 8003c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	6809      	ldr	r1, [r1, #0]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69da      	ldr	r2, [r3, #28]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6911      	ldr	r1, [r2, #16]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	4311      	orrs	r1, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	000186a0 	.word	0x000186a0
 8003d08:	001e847f 	.word	0x001e847f
 8003d0c:	003d08ff 	.word	0x003d08ff
 8003d10:	431bde83 	.word	0x431bde83
 8003d14:	10624dd3 	.word	0x10624dd3

08003d18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d129      	bne.n	8003d82 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2224      	movs	r2, #36	@ 0x24
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0210 	bic.w	r2, r2, #16
 8003d54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e000      	b.n	8003d84 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
  }
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d12a      	bne.n	8003e00 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2224      	movs	r2, #36	@ 0x24
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003dca:	89fb      	ldrh	r3, [r7, #14]
 8003dcc:	f023 030f 	bic.w	r3, r3, #15
 8003dd0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	89fb      	ldrh	r3, [r7, #14]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	89fa      	ldrh	r2, [r7, #14]
 8003de2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e000      	b.n	8003e02 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
  }
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0bf      	b.n	8003fa2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fc ff14 	bl	8000c64 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003e52:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6999      	ldr	r1, [r3, #24]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e68:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6899      	ldr	r1, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b4a      	ldr	r3, [pc, #296]	@ (8003fac <HAL_LTDC_Init+0x19c>)
 8003e84:	400b      	ands	r3, r1
 8003e86:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	041b      	lsls	r3, r3, #16
 8003e8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6899      	ldr	r1, [r3, #8]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68d9      	ldr	r1, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b3e      	ldr	r3, [pc, #248]	@ (8003fac <HAL_LTDC_Init+0x19c>)
 8003eb2:	400b      	ands	r3, r1
 8003eb4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68d9      	ldr	r1, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1a      	ldr	r2, [r3, #32]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6919      	ldr	r1, [r3, #16]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4b33      	ldr	r3, [pc, #204]	@ (8003fac <HAL_LTDC_Init+0x19c>)
 8003ee0:	400b      	ands	r3, r1
 8003ee2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6919      	ldr	r1, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6959      	ldr	r1, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b27      	ldr	r3, [pc, #156]	@ (8003fac <HAL_LTDC_Init+0x19c>)
 8003f0e:	400b      	ands	r3, r1
 8003f10:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6959      	ldr	r1, [r3, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003f52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0206 	orr.w	r2, r2, #6
 8003f7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	f000f800 	.word	0xf000f800

08003fb0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d023      	beq.n	800401a <HAL_LTDC_IRQHandler+0x6a>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01e      	beq.n	800401a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0204 	bic.w	r2, r2, #4
 8003fea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ffa:	f043 0201 	orr.w	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2204      	movs	r2, #4
 8004008:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f86f 	bl	80040f8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d023      	beq.n	800406c <HAL_LTDC_IRQHandler+0xbc>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01e      	beq.n	800406c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0202 	bic.w	r2, r2, #2
 800403c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2202      	movs	r2, #2
 8004044:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800404c:	f043 0202 	orr.w	r2, r3, #2
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2204      	movs	r2, #4
 800405a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f846 	bl	80040f8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01b      	beq.n	80040ae <HAL_LTDC_IRQHandler+0xfe>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d016      	beq.n	80040ae <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2201      	movs	r2, #1
 8004096:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f82f 	bl	800410c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01b      	beq.n	80040f0 <HAL_LTDC_IRQHandler+0x140>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0208 	bic.w	r2, r2, #8
 80040d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2208      	movs	r2, #8
 80040d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f818 	bl	8004120 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004134:	b5b0      	push	{r4, r5, r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_LTDC_ConfigLayer+0x1a>
 800414a:	2302      	movs	r3, #2
 800414c:	e02c      	b.n	80041a8 <HAL_LTDC_ConfigLayer+0x74>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2202      	movs	r2, #2
 800415a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2134      	movs	r1, #52	@ 0x34
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	4413      	add	r3, r2
 800416a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4614      	mov	r4, r2
 8004172:	461d      	mov	r5, r3
 8004174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800417c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f811 	bl	80041b0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2201      	movs	r2, #1
 8004194:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bdb0      	pop	{r4, r5, r7, pc}

080041b0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b089      	sub	sp, #36	@ 0x24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	0c1b      	lsrs	r3, r3, #16
 80041c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041cc:	4413      	add	r3, r2
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	01db      	lsls	r3, r3, #7
 80041dc:	4413      	add	r3, r2
 80041de:	3384      	adds	r3, #132	@ 0x84
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	4611      	mov	r1, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	01d2      	lsls	r2, r2, #7
 80041ec:	440a      	add	r2, r1
 80041ee:	3284      	adds	r2, #132	@ 0x84
 80041f0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80041f4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004206:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004208:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4619      	mov	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	01db      	lsls	r3, r3, #7
 8004214:	440b      	add	r3, r1
 8004216:	3384      	adds	r3, #132	@ 0x84
 8004218:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800421e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800422e:	4413      	add	r3, r2
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	01db      	lsls	r3, r3, #7
 800423e:	4413      	add	r3, r2
 8004240:	3384      	adds	r3, #132	@ 0x84
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	4611      	mov	r1, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	01d2      	lsls	r2, r2, #7
 800424e:	440a      	add	r2, r1
 8004250:	3284      	adds	r2, #132	@ 0x84
 8004252:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004256:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004266:	4413      	add	r3, r2
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4619      	mov	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	01db      	lsls	r3, r3, #7
 8004274:	440b      	add	r3, r1
 8004276:	3384      	adds	r3, #132	@ 0x84
 8004278:	4619      	mov	r1, r3
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4313      	orrs	r3, r2
 800427e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	01db      	lsls	r3, r3, #7
 800428a:	4413      	add	r3, r2
 800428c:	3384      	adds	r3, #132	@ 0x84
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	4611      	mov	r1, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	01d2      	lsls	r2, r2, #7
 800429a:	440a      	add	r2, r1
 800429c:	3284      	adds	r2, #132	@ 0x84
 800429e:	f023 0307 	bic.w	r3, r3, #7
 80042a2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	01db      	lsls	r3, r3, #7
 80042ae:	4413      	add	r3, r2
 80042b0:	3384      	adds	r3, #132	@ 0x84
 80042b2:	461a      	mov	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80042ca:	041b      	lsls	r3, r3, #16
 80042cc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	061b      	lsls	r3, r3, #24
 80042d4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	01db      	lsls	r3, r3, #7
 80042e0:	4413      	add	r3, r2
 80042e2:	3384      	adds	r3, #132	@ 0x84
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	01db      	lsls	r3, r3, #7
 80042f0:	4413      	add	r3, r2
 80042f2:	3384      	adds	r3, #132	@ 0x84
 80042f4:	461a      	mov	r2, r3
 80042f6:	2300      	movs	r3, #0
 80042f8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004300:	461a      	mov	r2, r3
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	431a      	orrs	r2, r3
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	431a      	orrs	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4619      	mov	r1, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	01db      	lsls	r3, r3, #7
 8004314:	440b      	add	r3, r1
 8004316:	3384      	adds	r3, #132	@ 0x84
 8004318:	4619      	mov	r1, r3
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	01db      	lsls	r3, r3, #7
 800432a:	4413      	add	r3, r2
 800432c:	3384      	adds	r3, #132	@ 0x84
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	4611      	mov	r1, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	01d2      	lsls	r2, r2, #7
 800433a:	440a      	add	r2, r1
 800433c:	3284      	adds	r2, #132	@ 0x84
 800433e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004342:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	01db      	lsls	r3, r3, #7
 800434e:	4413      	add	r3, r2
 8004350:	3384      	adds	r3, #132	@ 0x84
 8004352:	461a      	mov	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	01db      	lsls	r3, r3, #7
 8004364:	4413      	add	r3, r2
 8004366:	3384      	adds	r3, #132	@ 0x84
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	4611      	mov	r1, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	01d2      	lsls	r2, r2, #7
 8004374:	440a      	add	r2, r1
 8004376:	3284      	adds	r2, #132	@ 0x84
 8004378:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800437c:	f023 0307 	bic.w	r3, r3, #7
 8004380:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	69da      	ldr	r2, [r3, #28]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	68f9      	ldr	r1, [r7, #12]
 800438c:	6809      	ldr	r1, [r1, #0]
 800438e:	4608      	mov	r0, r1
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	01c9      	lsls	r1, r1, #7
 8004394:	4401      	add	r1, r0
 8004396:	3184      	adds	r1, #132	@ 0x84
 8004398:	4313      	orrs	r3, r2
 800439a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	01db      	lsls	r3, r3, #7
 80043a6:	4413      	add	r3, r2
 80043a8:	3384      	adds	r3, #132	@ 0x84
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	01db      	lsls	r3, r3, #7
 80043b6:	4413      	add	r3, r2
 80043b8:	3384      	adds	r3, #132	@ 0x84
 80043ba:	461a      	mov	r2, r3
 80043bc:	2300      	movs	r3, #0
 80043be:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	01db      	lsls	r3, r3, #7
 80043ca:	4413      	add	r3, r2
 80043cc:	3384      	adds	r3, #132	@ 0x84
 80043ce:	461a      	mov	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80043de:	2304      	movs	r3, #4
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	e01b      	b.n	800441c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d102      	bne.n	80043f2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80043ec:	2303      	movs	r3, #3
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	e014      	b.n	800441c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d00b      	beq.n	8004412 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d007      	beq.n	8004412 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004406:	2b03      	cmp	r3, #3
 8004408:	d003      	beq.n	8004412 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800440e:	2b07      	cmp	r3, #7
 8004410:	d102      	bne.n	8004418 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004412:	2302      	movs	r3, #2
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	e001      	b.n	800441c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004418:	2301      	movs	r3, #1
 800441a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	01db      	lsls	r3, r3, #7
 8004426:	4413      	add	r3, r2
 8004428:	3384      	adds	r3, #132	@ 0x84
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	4611      	mov	r1, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	01d2      	lsls	r2, r2, #7
 8004436:	440a      	add	r2, r1
 8004438:	3284      	adds	r2, #132	@ 0x84
 800443a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800443e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	fb02 f303 	mul.w	r3, r2, r3
 800444a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	1acb      	subs	r3, r1, r3
 8004456:	69f9      	ldr	r1, [r7, #28]
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	6809      	ldr	r1, [r1, #0]
 8004462:	4608      	mov	r0, r1
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	01c9      	lsls	r1, r1, #7
 8004468:	4401      	add	r1, r0
 800446a:	3184      	adds	r1, #132	@ 0x84
 800446c:	4313      	orrs	r3, r2
 800446e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	01db      	lsls	r3, r3, #7
 800447a:	4413      	add	r3, r2
 800447c:	3384      	adds	r3, #132	@ 0x84
 800447e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	4611      	mov	r1, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	01d2      	lsls	r2, r2, #7
 800448a:	440a      	add	r2, r1
 800448c:	3284      	adds	r2, #132	@ 0x84
 800448e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004492:	f023 0307 	bic.w	r3, r3, #7
 8004496:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	01db      	lsls	r3, r3, #7
 80044a2:	4413      	add	r3, r2
 80044a4:	3384      	adds	r3, #132	@ 0x84
 80044a6:	461a      	mov	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	01db      	lsls	r3, r3, #7
 80044b8:	4413      	add	r3, r2
 80044ba:	3384      	adds	r3, #132	@ 0x84
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	4611      	mov	r1, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	01d2      	lsls	r2, r2, #7
 80044c8:	440a      	add	r2, r1
 80044ca:	3284      	adds	r2, #132	@ 0x84
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	6013      	str	r3, [r2, #0]
}
 80044d2:	bf00      	nop
 80044d4:	3724      	adds	r7, #36	@ 0x24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e267      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d075      	beq.n	80045ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044fe:	4b88      	ldr	r3, [pc, #544]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	2b04      	cmp	r3, #4
 8004508:	d00c      	beq.n	8004524 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800450a:	4b85      	ldr	r3, [pc, #532]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004512:	2b08      	cmp	r3, #8
 8004514:	d112      	bne.n	800453c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004516:	4b82      	ldr	r3, [pc, #520]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800451e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004522:	d10b      	bne.n	800453c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	4b7e      	ldr	r3, [pc, #504]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d05b      	beq.n	80045e8 <HAL_RCC_OscConfig+0x108>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d157      	bne.n	80045e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e242      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004544:	d106      	bne.n	8004554 <HAL_RCC_OscConfig+0x74>
 8004546:	4b76      	ldr	r3, [pc, #472]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a75      	ldr	r2, [pc, #468]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e01d      	b.n	8004590 <HAL_RCC_OscConfig+0xb0>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800455c:	d10c      	bne.n	8004578 <HAL_RCC_OscConfig+0x98>
 800455e:	4b70      	ldr	r3, [pc, #448]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6f      	ldr	r2, [pc, #444]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	4b6d      	ldr	r3, [pc, #436]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a6c      	ldr	r2, [pc, #432]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e00b      	b.n	8004590 <HAL_RCC_OscConfig+0xb0>
 8004578:	4b69      	ldr	r3, [pc, #420]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a68      	ldr	r2, [pc, #416]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800457e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4b66      	ldr	r3, [pc, #408]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a65      	ldr	r2, [pc, #404]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800458a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800458e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d013      	beq.n	80045c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fd f818 	bl	80015cc <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a0:	f7fd f814 	bl	80015cc <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	@ 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e207      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0xc0>
 80045be:	e014      	b.n	80045ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fd f804 	bl	80015cc <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c8:	f7fd f800 	bl	80015cc <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b64      	cmp	r3, #100	@ 0x64
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e1f3      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045da:	4b51      	ldr	r3, [pc, #324]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0xe8>
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d063      	beq.n	80046be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004602:	4b47      	ldr	r3, [pc, #284]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800460a:	2b08      	cmp	r3, #8
 800460c:	d11c      	bne.n	8004648 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800460e:	4b44      	ldr	r3, [pc, #272]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d116      	bne.n	8004648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461a:	4b41      	ldr	r3, [pc, #260]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <HAL_RCC_OscConfig+0x152>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d001      	beq.n	8004632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e1c7      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004632:	4b3b      	ldr	r3, [pc, #236]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	4937      	ldr	r1, [pc, #220]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004642:	4313      	orrs	r3, r2
 8004644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004646:	e03a      	b.n	80046be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d020      	beq.n	8004692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004650:	4b34      	ldr	r3, [pc, #208]	@ (8004724 <HAL_RCC_OscConfig+0x244>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004656:	f7fc ffb9 	bl	80015cc <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465e:	f7fc ffb5 	bl	80015cc <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e1a8      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004670:	4b2b      	ldr	r3, [pc, #172]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467c:	4b28      	ldr	r3, [pc, #160]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4925      	ldr	r1, [pc, #148]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 800468c:	4313      	orrs	r3, r2
 800468e:	600b      	str	r3, [r1, #0]
 8004690:	e015      	b.n	80046be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004692:	4b24      	ldr	r3, [pc, #144]	@ (8004724 <HAL_RCC_OscConfig+0x244>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fc ff98 	bl	80015cc <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a0:	f7fc ff94 	bl	80015cc <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e187      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d036      	beq.n	8004738 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d016      	beq.n	8004700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d2:	4b15      	ldr	r3, [pc, #84]	@ (8004728 <HAL_RCC_OscConfig+0x248>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d8:	f7fc ff78 	bl	80015cc <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e0:	f7fc ff74 	bl	80015cc <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e167      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <HAL_RCC_OscConfig+0x240>)
 80046f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x200>
 80046fe:	e01b      	b.n	8004738 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004700:	4b09      	ldr	r3, [pc, #36]	@ (8004728 <HAL_RCC_OscConfig+0x248>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004706:	f7fc ff61 	bl	80015cc <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470c:	e00e      	b.n	800472c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470e:	f7fc ff5d 	bl	80015cc <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d907      	bls.n	800472c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e150      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
 8004720:	40023800 	.word	0x40023800
 8004724:	42470000 	.word	0x42470000
 8004728:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800472c:	4b88      	ldr	r3, [pc, #544]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800472e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1ea      	bne.n	800470e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 8097 	beq.w	8004874 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004746:	2300      	movs	r3, #0
 8004748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800474a:	4b81      	ldr	r3, [pc, #516]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10f      	bne.n	8004776 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	4b7d      	ldr	r3, [pc, #500]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	4a7c      	ldr	r2, [pc, #496]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004764:	6413      	str	r3, [r2, #64]	@ 0x40
 8004766:	4b7a      	ldr	r3, [pc, #488]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004776:	4b77      	ldr	r3, [pc, #476]	@ (8004954 <HAL_RCC_OscConfig+0x474>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d118      	bne.n	80047b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004782:	4b74      	ldr	r3, [pc, #464]	@ (8004954 <HAL_RCC_OscConfig+0x474>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a73      	ldr	r2, [pc, #460]	@ (8004954 <HAL_RCC_OscConfig+0x474>)
 8004788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478e:	f7fc ff1d 	bl	80015cc <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004796:	f7fc ff19 	bl	80015cc <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e10c      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004954 <HAL_RCC_OscConfig+0x474>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d106      	bne.n	80047ca <HAL_RCC_OscConfig+0x2ea>
 80047bc:	4b64      	ldr	r3, [pc, #400]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c0:	4a63      	ldr	r2, [pc, #396]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c8:	e01c      	b.n	8004804 <HAL_RCC_OscConfig+0x324>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	d10c      	bne.n	80047ec <HAL_RCC_OscConfig+0x30c>
 80047d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047d8:	f043 0304 	orr.w	r3, r3, #4
 80047dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047de:	4b5c      	ldr	r3, [pc, #368]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ea:	e00b      	b.n	8004804 <HAL_RCC_OscConfig+0x324>
 80047ec:	4b58      	ldr	r3, [pc, #352]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f0:	4a57      	ldr	r2, [pc, #348]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f8:	4b55      	ldr	r3, [pc, #340]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fc:	4a54      	ldr	r2, [pc, #336]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80047fe:	f023 0304 	bic.w	r3, r3, #4
 8004802:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d015      	beq.n	8004838 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480c:	f7fc fede 	bl	80015cc <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004812:	e00a      	b.n	800482a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004814:	f7fc feda 	bl	80015cc <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e0cb      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482a:	4b49      	ldr	r3, [pc, #292]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0ee      	beq.n	8004814 <HAL_RCC_OscConfig+0x334>
 8004836:	e014      	b.n	8004862 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004838:	f7fc fec8 	bl	80015cc <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800483e:	e00a      	b.n	8004856 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004840:	f7fc fec4 	bl	80015cc <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e0b5      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004856:	4b3e      	ldr	r3, [pc, #248]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1ee      	bne.n	8004840 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d105      	bne.n	8004874 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004868:	4b39      	ldr	r3, [pc, #228]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800486a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486c:	4a38      	ldr	r2, [pc, #224]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800486e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004872:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80a1 	beq.w	80049c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800487e:	4b34      	ldr	r3, [pc, #208]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b08      	cmp	r3, #8
 8004888:	d05c      	beq.n	8004944 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d141      	bne.n	8004916 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004892:	4b31      	ldr	r3, [pc, #196]	@ (8004958 <HAL_RCC_OscConfig+0x478>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7fc fe98 	bl	80015cc <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fc fe94 	bl	80015cc <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e087      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b2:	4b27      	ldr	r3, [pc, #156]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69da      	ldr	r2, [r3, #28]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	019b      	lsls	r3, r3, #6
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	3b01      	subs	r3, #1
 80048d8:	041b      	lsls	r3, r3, #16
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	061b      	lsls	r3, r3, #24
 80048e2:	491b      	ldr	r1, [pc, #108]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004958 <HAL_RCC_OscConfig+0x478>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ee:	f7fc fe6d 	bl	80015cc <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f6:	f7fc fe69 	bl	80015cc <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e05c      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004908:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x416>
 8004914:	e054      	b.n	80049c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b10      	ldr	r3, [pc, #64]	@ (8004958 <HAL_RCC_OscConfig+0x478>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fc fe56 	bl	80015cc <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fc fe52 	bl	80015cc <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e045      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004936:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <HAL_RCC_OscConfig+0x470>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x444>
 8004942:	e03d      	b.n	80049c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d107      	bne.n	800495c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e038      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
 8004950:	40023800 	.word	0x40023800
 8004954:	40007000 	.word	0x40007000
 8004958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800495c:	4b1b      	ldr	r3, [pc, #108]	@ (80049cc <HAL_RCC_OscConfig+0x4ec>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d028      	beq.n	80049bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d121      	bne.n	80049bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d11a      	bne.n	80049bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004994:	4293      	cmp	r3, r2
 8004996:	d111      	bne.n	80049bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a2:	085b      	lsrs	r3, r3, #1
 80049a4:	3b01      	subs	r3, #1
 80049a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d107      	bne.n	80049bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800

080049d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0cc      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049e4:	4b68      	ldr	r3, [pc, #416]	@ (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d90c      	bls.n	8004a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b65      	ldr	r3, [pc, #404]	@ (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	4b63      	ldr	r3, [pc, #396]	@ (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e0b8      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d020      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a24:	4b59      	ldr	r3, [pc, #356]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4a58      	ldr	r2, [pc, #352]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a3c:	4b53      	ldr	r3, [pc, #332]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4a52      	ldr	r2, [pc, #328]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b50      	ldr	r3, [pc, #320]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	494d      	ldr	r1, [pc, #308]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d044      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	4b47      	ldr	r3, [pc, #284]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d119      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e07f      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d003      	beq.n	8004a8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d107      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e06f      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e067      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aae:	4b37      	ldr	r3, [pc, #220]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f023 0203 	bic.w	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4934      	ldr	r1, [pc, #208]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac0:	f7fc fd84 	bl	80015cc <HAL_GetTick>
 8004ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac8:	f7fc fd80 	bl	80015cc <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e04f      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	4b2b      	ldr	r3, [pc, #172]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 020c 	and.w	r2, r3, #12
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d1eb      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af0:	4b25      	ldr	r3, [pc, #148]	@ (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d20c      	bcs.n	8004b18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afe:	4b22      	ldr	r3, [pc, #136]	@ (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b06:	4b20      	ldr	r3, [pc, #128]	@ (8004b88 <HAL_RCC_ClockConfig+0x1b8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d001      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e032      	b.n	8004b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b24:	4b19      	ldr	r3, [pc, #100]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4916      	ldr	r1, [pc, #88]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b42:	4b12      	ldr	r3, [pc, #72]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	490e      	ldr	r1, [pc, #56]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b56:	f000 f821 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	490a      	ldr	r1, [pc, #40]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b68:	5ccb      	ldrb	r3, [r1, r3]
 8004b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6e:	4a09      	ldr	r2, [pc, #36]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b72:	4b09      	ldr	r3, [pc, #36]	@ (8004b98 <HAL_RCC_ClockConfig+0x1c8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fc fb0c 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40023c00 	.word	0x40023c00
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	08007e24 	.word	0x08007e24
 8004b94:	20000000 	.word	0x20000000
 8004b98:	20000004 	.word	0x20000004

08004b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba0:	b094      	sub	sp, #80	@ 0x50
 8004ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb4:	4b79      	ldr	r3, [pc, #484]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 030c 	and.w	r3, r3, #12
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d00d      	beq.n	8004bdc <HAL_RCC_GetSysClockFreq+0x40>
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	f200 80e1 	bhi.w	8004d88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bce:	e0db      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bd0:	4b73      	ldr	r3, [pc, #460]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bd4:	e0db      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bd6:	4b73      	ldr	r3, [pc, #460]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bda:	e0d8      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004be4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004be6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d063      	beq.n	8004cba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	099b      	lsrs	r3, r3, #6
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c06:	2300      	movs	r3, #0
 8004c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c0e:	4622      	mov	r2, r4
 8004c10:	462b      	mov	r3, r5
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f04f 0100 	mov.w	r1, #0
 8004c1a:	0159      	lsls	r1, r3, #5
 8004c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c20:	0150      	lsls	r0, r2, #5
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4621      	mov	r1, r4
 8004c28:	1a51      	subs	r1, r2, r1
 8004c2a:	6139      	str	r1, [r7, #16]
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c40:	4659      	mov	r1, fp
 8004c42:	018b      	lsls	r3, r1, #6
 8004c44:	4651      	mov	r1, sl
 8004c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	018a      	lsls	r2, r1, #6
 8004c4e:	4651      	mov	r1, sl
 8004c50:	ebb2 0801 	subs.w	r8, r2, r1
 8004c54:	4659      	mov	r1, fp
 8004c56:	eb63 0901 	sbc.w	r9, r3, r1
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6e:	4690      	mov	r8, r2
 8004c70:	4699      	mov	r9, r3
 8004c72:	4623      	mov	r3, r4
 8004c74:	eb18 0303 	adds.w	r3, r8, r3
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	462b      	mov	r3, r5
 8004c7c:	eb49 0303 	adc.w	r3, r9, r3
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c8e:	4629      	mov	r1, r5
 8004c90:	024b      	lsls	r3, r1, #9
 8004c92:	4621      	mov	r1, r4
 8004c94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c98:	4621      	mov	r1, r4
 8004c9a:	024a      	lsls	r2, r1, #9
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ca8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004cac:	f7fb faa0 	bl	80001f0 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cb8:	e058      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cba:	4b38      	ldr	r3, [pc, #224]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cca:	623b      	str	r3, [r7, #32]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cd4:	4642      	mov	r2, r8
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	f04f 0000 	mov.w	r0, #0
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	0159      	lsls	r1, r3, #5
 8004ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce6:	0150      	lsls	r0, r2, #5
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4641      	mov	r1, r8
 8004cee:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d0c:	ebb2 040a 	subs.w	r4, r2, sl
 8004d10:	eb63 050b 	sbc.w	r5, r3, fp
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	00eb      	lsls	r3, r5, #3
 8004d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d22:	00e2      	lsls	r2, r4, #3
 8004d24:	4614      	mov	r4, r2
 8004d26:	461d      	mov	r5, r3
 8004d28:	4643      	mov	r3, r8
 8004d2a:	18e3      	adds	r3, r4, r3
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	464b      	mov	r3, r9
 8004d30:	eb45 0303 	adc.w	r3, r5, r3
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d42:	4629      	mov	r1, r5
 8004d44:	028b      	lsls	r3, r1, #10
 8004d46:	4621      	mov	r1, r4
 8004d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	028a      	lsls	r2, r1, #10
 8004d50:	4610      	mov	r0, r2
 8004d52:	4619      	mov	r1, r3
 8004d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d56:	2200      	movs	r2, #0
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	61fa      	str	r2, [r7, #28]
 8004d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d60:	f7fb fa46 	bl	80001f0 <__aeabi_uldivmod>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4613      	mov	r3, r2
 8004d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	3301      	adds	r3, #1
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d86:	e002      	b.n	8004d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d88:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3750      	adds	r7, #80	@ 0x50
 8004d94:	46bd      	mov	sp, r7
 8004d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	00f42400 	.word	0x00f42400
 8004da4:	007a1200 	.word	0x007a1200

08004da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dac:	4b03      	ldr	r3, [pc, #12]	@ (8004dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dae:	681b      	ldr	r3, [r3, #0]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000000 	.word	0x20000000

08004dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dc4:	f7ff fff0 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	0a9b      	lsrs	r3, r3, #10
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4903      	ldr	r1, [pc, #12]	@ (8004de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40023800 	.word	0x40023800
 8004de4:	08007e34 	.word	0x08007e34

08004de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dec:	f7ff ffdc 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8004df0:	4602      	mov	r2, r0
 8004df2:	4b05      	ldr	r3, [pc, #20]	@ (8004e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	0b5b      	lsrs	r3, r3, #13
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	4903      	ldr	r1, [pc, #12]	@ (8004e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dfe:	5ccb      	ldrb	r3, [r1, r3]
 8004e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	08007e34 	.word	0x08007e34

08004e10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	220f      	movs	r2, #15
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e20:	4b12      	ldr	r3, [pc, #72]	@ (8004e6c <HAL_RCC_GetClockConfig+0x5c>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 0203 	and.w	r2, r3, #3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e6c <HAL_RCC_GetClockConfig+0x5c>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e38:	4b0c      	ldr	r3, [pc, #48]	@ (8004e6c <HAL_RCC_GetClockConfig+0x5c>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e44:	4b09      	ldr	r3, [pc, #36]	@ (8004e6c <HAL_RCC_GetClockConfig+0x5c>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	08db      	lsrs	r3, r3, #3
 8004e4a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e52:	4b07      	ldr	r3, [pc, #28]	@ (8004e70 <HAL_RCC_GetClockConfig+0x60>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 020f 	and.w	r2, r3, #15
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	601a      	str	r2, [r3, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40023c00 	.word	0x40023c00

08004e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d075      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ea8:	4b91      	ldr	r3, [pc, #580]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eae:	f7fc fb8d 	bl	80015cc <HAL_GetTick>
 8004eb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004eb6:	f7fc fb89 	bl	80015cc <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e189      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ec8:	4b8a      	ldr	r3, [pc, #552]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d009      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	019a      	lsls	r2, r3, #6
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	071b      	lsls	r3, r3, #28
 8004eec:	4981      	ldr	r1, [pc, #516]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01f      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f00:	4b7c      	ldr	r3, [pc, #496]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f06:	0f1b      	lsrs	r3, r3, #28
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	019a      	lsls	r2, r3, #6
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	061b      	lsls	r3, r3, #24
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	071b      	lsls	r3, r3, #28
 8004f20:	4974      	ldr	r1, [pc, #464]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f28:	4b72      	ldr	r3, [pc, #456]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f2e:	f023 021f 	bic.w	r2, r3, #31
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	496e      	ldr	r1, [pc, #440]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00d      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	019a      	lsls	r2, r3, #6
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	061b      	lsls	r3, r3, #24
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	071b      	lsls	r3, r3, #28
 8004f60:	4964      	ldr	r1, [pc, #400]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f68:	4b61      	ldr	r3, [pc, #388]	@ (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6e:	f7fc fb2d 	bl	80015cc <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f76:	f7fc fb29 	bl	80015cc <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e129      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f88:	4b5a      	ldr	r3, [pc, #360]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d105      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d079      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fac:	4b52      	ldr	r3, [pc, #328]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb2:	f7fc fb0b 	bl	80015cc <HAL_GetTick>
 8004fb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fba:	f7fc fb07 	bl	80015cc <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e107      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fcc:	4b49      	ldr	r3, [pc, #292]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fd8:	d0ef      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d020      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fe6:	4b43      	ldr	r3, [pc, #268]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fec:	0f1b      	lsrs	r3, r3, #28
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	019a      	lsls	r2, r3, #6
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	061b      	lsls	r3, r3, #24
 8005000:	431a      	orrs	r2, r3
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	071b      	lsls	r3, r3, #28
 8005006:	493b      	ldr	r1, [pc, #236]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800500e:	4b39      	ldr	r3, [pc, #228]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005014:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	3b01      	subs	r3, #1
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	4934      	ldr	r1, [pc, #208]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01e      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005034:	4b2f      	ldr	r3, [pc, #188]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503a:	0e1b      	lsrs	r3, r3, #24
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	019a      	lsls	r2, r3, #6
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	071b      	lsls	r3, r3, #28
 8005054:	4927      	ldr	r1, [pc, #156]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800505c:	4b25      	ldr	r3, [pc, #148]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800505e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005062:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	4922      	ldr	r1, [pc, #136]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005072:	4b21      	ldr	r3, [pc, #132]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005078:	f7fc faa8 	bl	80015cc <HAL_GetTick>
 800507c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005080:	f7fc faa4 	bl	80015cc <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e0a4      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005092:	4b18      	ldr	r3, [pc, #96]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800509a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800509e:	d1ef      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 808b 	beq.w	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	4b10      	ldr	r3, [pc, #64]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	4a0f      	ldr	r2, [pc, #60]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80050be:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050ca:	4b0c      	ldr	r3, [pc, #48]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a0b      	ldr	r2, [pc, #44]	@ (80050fc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80050d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050d6:	f7fc fa79 	bl	80015cc <HAL_GetTick>
 80050da:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80050dc:	e010      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050de:	f7fc fa75 	bl	80015cc <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d909      	bls.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e075      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80050f0:	42470068 	.word	0x42470068
 80050f4:	40023800 	.word	0x40023800
 80050f8:	42470070 	.word	0x42470070
 80050fc:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005100:	4b38      	ldr	r3, [pc, #224]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0e8      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800510c:	4b36      	ldr	r3, [pc, #216]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005110:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005114:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d02f      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	429a      	cmp	r2, r3
 8005128:	d028      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800512a:	4b2f      	ldr	r3, [pc, #188]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800512c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005132:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005134:	4b2d      	ldr	r3, [pc, #180]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005136:	2201      	movs	r2, #1
 8005138:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800513a:	4b2c      	ldr	r3, [pc, #176]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005140:	4a29      	ldr	r2, [pc, #164]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005146:	4b28      	ldr	r3, [pc, #160]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d114      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005152:	f7fc fa3b 	bl	80015cc <HAL_GetTick>
 8005156:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005158:	e00a      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800515a:	f7fc fa37 	bl	80015cc <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005168:	4293      	cmp	r3, r2
 800516a:	d901      	bls.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e035      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005170:	4b1d      	ldr	r3, [pc, #116]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0ee      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005180:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005184:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005188:	d10d      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800518a:	4b17      	ldr	r3, [pc, #92]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005196:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800519a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800519e:	4912      	ldr	r1, [pc, #72]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	608b      	str	r3, [r1, #8]
 80051a4:	e005      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80051a6:	4b10      	ldr	r3, [pc, #64]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	4a0f      	ldr	r2, [pc, #60]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ac:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80051b0:	6093      	str	r3, [r2, #8]
 80051b2:	4b0d      	ldr	r3, [pc, #52]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051be:	490a      	ldr	r1, [pc, #40]	@ (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80051d6:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80051d8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40007000 	.word	0x40007000
 80051e8:	40023800 	.word	0x40023800
 80051ec:	42470e40 	.word	0x42470e40
 80051f0:	424711e0 	.word	0x424711e0

080051f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e025      	b.n	8005254 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d106      	bne.n	8005222 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fb fad1 	bl	80007c4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f000 ffd3 	bl	80061e0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	461a      	mov	r2, r3
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	f001 f828 	bl	800629a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e07b      	b.n	8005366 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	2b00      	cmp	r3, #0
 8005274:	d108      	bne.n	8005288 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800527e:	d009      	beq.n	8005294 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	61da      	str	r2, [r3, #28]
 8005286:	e005      	b.n	8005294 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fb fef4 	bl	800109c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005318:	ea42 0103 	orr.w	r1, r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005320:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	f003 0104 	and.w	r1, r3, #4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	f003 0210 	and.w	r2, r3, #16
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005354:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e041      	b.n	8005404 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fc f825 	bl	80013e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f000 fa7d 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b01      	cmp	r3, #1
 800541e:	d001      	beq.n	8005424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e04e      	b.n	80054c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a23      	ldr	r2, [pc, #140]	@ (80054d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d022      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800544e:	d01d      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1f      	ldr	r2, [pc, #124]	@ (80054d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1e      	ldr	r2, [pc, #120]	@ (80054d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1c      	ldr	r2, [pc, #112]	@ (80054dc <HAL_TIM_Base_Start_IT+0xd0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1b      	ldr	r2, [pc, #108]	@ (80054e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a19      	ldr	r2, [pc, #100]	@ (80054e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a18      	ldr	r2, [pc, #96]	@ (80054e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d111      	bne.n	80054b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b06      	cmp	r3, #6
 800549c:	d010      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ae:	e007      	b.n	80054c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800
 80054dc:	40000c00 	.word	0x40000c00
 80054e0:	40010400 	.word	0x40010400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40001800 	.word	0x40001800

080054ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d020      	beq.n	8005550 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01b      	beq.n	8005550 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0202 	mvn.w	r2, #2
 8005520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f999 	bl	800586e <HAL_TIM_IC_CaptureCallback>
 800553c:	e005      	b.n	800554a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f98b 	bl	800585a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f99c 	bl	8005882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	d020      	beq.n	800559c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01b      	beq.n	800559c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0204 	mvn.w	r2, #4
 800556c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2202      	movs	r2, #2
 8005572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f973 	bl	800586e <HAL_TIM_IC_CaptureCallback>
 8005588:	e005      	b.n	8005596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f965 	bl	800585a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f976 	bl	8005882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d020      	beq.n	80055e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01b      	beq.n	80055e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0208 	mvn.w	r2, #8
 80055b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2204      	movs	r2, #4
 80055be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f94d 	bl	800586e <HAL_TIM_IC_CaptureCallback>
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f93f 	bl	800585a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f950 	bl	8005882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d020      	beq.n	8005634 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0210 	mvn.w	r2, #16
 8005604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2208      	movs	r2, #8
 800560a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f927 	bl	800586e <HAL_TIM_IC_CaptureCallback>
 8005620:	e005      	b.n	800562e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f919 	bl	800585a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f92a 	bl	8005882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0201 	mvn.w	r2, #1
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fb fcd4 	bl	8001000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00c      	beq.n	800567c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fae4 	bl	8005c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00c      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	d007      	beq.n	80056a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f8fb 	bl	8005896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00c      	beq.n	80056c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0220 	mvn.w	r2, #32
 80056bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fab6 	bl	8005c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056c4:	bf00      	nop
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_TIM_ConfigClockSource+0x1c>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e0b4      	b.n	8005852 <HAL_TIM_ConfigClockSource+0x186>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800570e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005720:	d03e      	beq.n	80057a0 <HAL_TIM_ConfigClockSource+0xd4>
 8005722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005726:	f200 8087 	bhi.w	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 800572a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800572e:	f000 8086 	beq.w	800583e <HAL_TIM_ConfigClockSource+0x172>
 8005732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005736:	d87f      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005738:	2b70      	cmp	r3, #112	@ 0x70
 800573a:	d01a      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0xa6>
 800573c:	2b70      	cmp	r3, #112	@ 0x70
 800573e:	d87b      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005740:	2b60      	cmp	r3, #96	@ 0x60
 8005742:	d050      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x11a>
 8005744:	2b60      	cmp	r3, #96	@ 0x60
 8005746:	d877      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005748:	2b50      	cmp	r3, #80	@ 0x50
 800574a:	d03c      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0xfa>
 800574c:	2b50      	cmp	r3, #80	@ 0x50
 800574e:	d873      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005750:	2b40      	cmp	r3, #64	@ 0x40
 8005752:	d058      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x13a>
 8005754:	2b40      	cmp	r3, #64	@ 0x40
 8005756:	d86f      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005758:	2b30      	cmp	r3, #48	@ 0x30
 800575a:	d064      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x15a>
 800575c:	2b30      	cmp	r3, #48	@ 0x30
 800575e:	d86b      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005760:	2b20      	cmp	r3, #32
 8005762:	d060      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x15a>
 8005764:	2b20      	cmp	r3, #32
 8005766:	d867      	bhi.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d05c      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x15a>
 800576c:	2b10      	cmp	r3, #16
 800576e:	d05a      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x15a>
 8005770:	e062      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005782:	f000 f9b9 	bl	8005af8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	609a      	str	r2, [r3, #8]
      break;
 800579e:	e04f      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057b0:	f000 f9a2 	bl	8005af8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057c2:	609a      	str	r2, [r3, #8]
      break;
 80057c4:	e03c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d2:	461a      	mov	r2, r3
 80057d4:	f000 f916 	bl	8005a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2150      	movs	r1, #80	@ 0x50
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 f96f 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 80057e4:	e02c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057f2:	461a      	mov	r2, r3
 80057f4:	f000 f935 	bl	8005a62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2160      	movs	r1, #96	@ 0x60
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f95f 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 8005804:	e01c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005812:	461a      	mov	r2, r3
 8005814:	f000 f8f6 	bl	8005a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2140      	movs	r1, #64	@ 0x40
 800581e:	4618      	mov	r0, r3
 8005820:	f000 f94f 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 8005824:	e00c      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4619      	mov	r1, r3
 8005830:	4610      	mov	r0, r2
 8005832:	f000 f946 	bl	8005ac2 <TIM_ITRx_SetConfig>
      break;
 8005836:	e003      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
      break;
 800583c:	e000      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800583e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a46      	ldr	r2, [pc, #280]	@ (80059d8 <TIM_Base_SetConfig+0x12c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ca:	d00f      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a43      	ldr	r2, [pc, #268]	@ (80059dc <TIM_Base_SetConfig+0x130>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00b      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a42      	ldr	r2, [pc, #264]	@ (80059e0 <TIM_Base_SetConfig+0x134>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a41      	ldr	r2, [pc, #260]	@ (80059e4 <TIM_Base_SetConfig+0x138>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a40      	ldr	r2, [pc, #256]	@ (80059e8 <TIM_Base_SetConfig+0x13c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d108      	bne.n	80058fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a35      	ldr	r2, [pc, #212]	@ (80059d8 <TIM_Base_SetConfig+0x12c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d02b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800590c:	d027      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a32      	ldr	r2, [pc, #200]	@ (80059dc <TIM_Base_SetConfig+0x130>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d023      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a31      	ldr	r2, [pc, #196]	@ (80059e0 <TIM_Base_SetConfig+0x134>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01f      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a30      	ldr	r2, [pc, #192]	@ (80059e4 <TIM_Base_SetConfig+0x138>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d01b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a2f      	ldr	r2, [pc, #188]	@ (80059e8 <TIM_Base_SetConfig+0x13c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d017      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a2e      	ldr	r2, [pc, #184]	@ (80059ec <TIM_Base_SetConfig+0x140>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a2d      	ldr	r2, [pc, #180]	@ (80059f0 <TIM_Base_SetConfig+0x144>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00f      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a2c      	ldr	r2, [pc, #176]	@ (80059f4 <TIM_Base_SetConfig+0x148>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a2b      	ldr	r2, [pc, #172]	@ (80059f8 <TIM_Base_SetConfig+0x14c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d007      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a2a      	ldr	r2, [pc, #168]	@ (80059fc <TIM_Base_SetConfig+0x150>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a29      	ldr	r2, [pc, #164]	@ (8005a00 <TIM_Base_SetConfig+0x154>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d108      	bne.n	8005970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a10      	ldr	r2, [pc, #64]	@ (80059d8 <TIM_Base_SetConfig+0x12c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_Base_SetConfig+0xf8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a12      	ldr	r2, [pc, #72]	@ (80059e8 <TIM_Base_SetConfig+0x13c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d103      	bne.n	80059ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d105      	bne.n	80059ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]
  }
}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	40000c00 	.word	0x40000c00
 80059e8:	40010400 	.word	0x40010400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40014400 	.word	0x40014400
 80059f4:	40014800 	.word	0x40014800
 80059f8:	40001800 	.word	0x40001800
 80059fc:	40001c00 	.word	0x40001c00
 8005a00:	40002000 	.word	0x40002000

08005a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0201 	bic.w	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f023 030a 	bic.w	r3, r3, #10
 8005a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b087      	sub	sp, #28
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	f023 0210 	bic.w	r2, r3, #16
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	031b      	lsls	r3, r3, #12
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f043 0307 	orr.w	r3, r3, #7
 8005ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	609a      	str	r2, [r3, #8]
}
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	021a      	lsls	r2, r3, #8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	609a      	str	r2, [r3, #8]
}
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e05a      	b.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a21      	ldr	r2, [pc, #132]	@ (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d022      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b9c:	d01d      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d018      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1b      	ldr	r2, [pc, #108]	@ (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00e      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a18      	ldr	r2, [pc, #96]	@ (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a17      	ldr	r2, [pc, #92]	@ (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d004      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a15      	ldr	r2, [pc, #84]	@ (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d10c      	bne.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40000800 	.word	0x40000800
 8005c20:	40000c00 	.word	0x40000c00
 8005c24:	40010400 	.word	0x40010400
 8005c28:	40014000 	.word	0x40014000
 8005c2c:	40001800 	.word	0x40001800

08005c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e042      	b.n	8005cf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fb fbfc 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2224      	movs	r2, #36	@ 0x24
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f82b 	bl	8005cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695a      	ldr	r2, [r3, #20]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cfc:	b0c0      	sub	sp, #256	@ 0x100
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d14:	68d9      	ldr	r1, [r3, #12]
 8005d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	ea40 0301 	orr.w	r3, r0, r1
 8005d20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d50:	f021 010c 	bic.w	r1, r1, #12
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d72:	6999      	ldr	r1, [r3, #24]
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	ea40 0301 	orr.w	r3, r0, r1
 8005d7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4b8f      	ldr	r3, [pc, #572]	@ (8005fc4 <UART_SetConfig+0x2cc>)
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d005      	beq.n	8005d98 <UART_SetConfig+0xa0>
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4b8d      	ldr	r3, [pc, #564]	@ (8005fc8 <UART_SetConfig+0x2d0>)
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d104      	bne.n	8005da2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d98:	f7ff f826 	bl	8004de8 <HAL_RCC_GetPCLK2Freq>
 8005d9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005da0:	e003      	b.n	8005daa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005da2:	f7ff f80d 	bl	8004dc0 <HAL_RCC_GetPCLK1Freq>
 8005da6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db4:	f040 810c 	bne.w	8005fd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005dc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005dca:	4622      	mov	r2, r4
 8005dcc:	462b      	mov	r3, r5
 8005dce:	1891      	adds	r1, r2, r2
 8005dd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005dd2:	415b      	adcs	r3, r3
 8005dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005dda:	4621      	mov	r1, r4
 8005ddc:	eb12 0801 	adds.w	r8, r2, r1
 8005de0:	4629      	mov	r1, r5
 8005de2:	eb43 0901 	adc.w	r9, r3, r1
 8005de6:	f04f 0200 	mov.w	r2, #0
 8005dea:	f04f 0300 	mov.w	r3, #0
 8005dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dfa:	4690      	mov	r8, r2
 8005dfc:	4699      	mov	r9, r3
 8005dfe:	4623      	mov	r3, r4
 8005e00:	eb18 0303 	adds.w	r3, r8, r3
 8005e04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e08:	462b      	mov	r3, r5
 8005e0a:	eb49 0303 	adc.w	r3, r9, r3
 8005e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e26:	460b      	mov	r3, r1
 8005e28:	18db      	adds	r3, r3, r3
 8005e2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	eb42 0303 	adc.w	r3, r2, r3
 8005e32:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e3c:	f7fa f9d8 	bl	80001f0 <__aeabi_uldivmod>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4b61      	ldr	r3, [pc, #388]	@ (8005fcc <UART_SetConfig+0x2d4>)
 8005e46:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	011c      	lsls	r4, r3, #4
 8005e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e60:	4642      	mov	r2, r8
 8005e62:	464b      	mov	r3, r9
 8005e64:	1891      	adds	r1, r2, r2
 8005e66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e68:	415b      	adcs	r3, r3
 8005e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e70:	4641      	mov	r1, r8
 8005e72:	eb12 0a01 	adds.w	sl, r2, r1
 8005e76:	4649      	mov	r1, r9
 8005e78:	eb43 0b01 	adc.w	fp, r3, r1
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e90:	4692      	mov	sl, r2
 8005e92:	469b      	mov	fp, r3
 8005e94:	4643      	mov	r3, r8
 8005e96:	eb1a 0303 	adds.w	r3, sl, r3
 8005e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005eb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005eb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	18db      	adds	r3, r3, r3
 8005ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	eb42 0303 	adc.w	r3, r2, r3
 8005ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ece:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ed2:	f7fa f98d 	bl	80001f0 <__aeabi_uldivmod>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	4b3b      	ldr	r3, [pc, #236]	@ (8005fcc <UART_SetConfig+0x2d4>)
 8005ede:	fba3 2301 	umull	r2, r3, r3, r1
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	2264      	movs	r2, #100	@ 0x64
 8005ee6:	fb02 f303 	mul.w	r3, r2, r3
 8005eea:	1acb      	subs	r3, r1, r3
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ef2:	4b36      	ldr	r3, [pc, #216]	@ (8005fcc <UART_SetConfig+0x2d4>)
 8005ef4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f00:	441c      	add	r4, r3
 8005f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f14:	4642      	mov	r2, r8
 8005f16:	464b      	mov	r3, r9
 8005f18:	1891      	adds	r1, r2, r2
 8005f1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f1c:	415b      	adcs	r3, r3
 8005f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f24:	4641      	mov	r1, r8
 8005f26:	1851      	adds	r1, r2, r1
 8005f28:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	414b      	adcs	r3, r1
 8005f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f3c:	4659      	mov	r1, fp
 8005f3e:	00cb      	lsls	r3, r1, #3
 8005f40:	4651      	mov	r1, sl
 8005f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f46:	4651      	mov	r1, sl
 8005f48:	00ca      	lsls	r2, r1, #3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4642      	mov	r2, r8
 8005f52:	189b      	adds	r3, r3, r2
 8005f54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f58:	464b      	mov	r3, r9
 8005f5a:	460a      	mov	r2, r1
 8005f5c:	eb42 0303 	adc.w	r3, r2, r3
 8005f60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f78:	460b      	mov	r3, r1
 8005f7a:	18db      	adds	r3, r3, r3
 8005f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f7e:	4613      	mov	r3, r2
 8005f80:	eb42 0303 	adc.w	r3, r2, r3
 8005f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f8e:	f7fa f92f 	bl	80001f0 <__aeabi_uldivmod>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4b0d      	ldr	r3, [pc, #52]	@ (8005fcc <UART_SetConfig+0x2d4>)
 8005f98:	fba3 1302 	umull	r1, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	2164      	movs	r1, #100	@ 0x64
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	3332      	adds	r3, #50	@ 0x32
 8005faa:	4a08      	ldr	r2, [pc, #32]	@ (8005fcc <UART_SetConfig+0x2d4>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	f003 0207 	and.w	r2, r3, #7
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4422      	add	r2, r4
 8005fbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fc0:	e106      	b.n	80061d0 <UART_SetConfig+0x4d8>
 8005fc2:	bf00      	nop
 8005fc4:	40011000 	.word	0x40011000
 8005fc8:	40011400 	.word	0x40011400
 8005fcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005fda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005fde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005fe2:	4642      	mov	r2, r8
 8005fe4:	464b      	mov	r3, r9
 8005fe6:	1891      	adds	r1, r2, r2
 8005fe8:	6239      	str	r1, [r7, #32]
 8005fea:	415b      	adcs	r3, r3
 8005fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ff2:	4641      	mov	r1, r8
 8005ff4:	1854      	adds	r4, r2, r1
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	eb43 0501 	adc.w	r5, r3, r1
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	00eb      	lsls	r3, r5, #3
 8006006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800600a:	00e2      	lsls	r2, r4, #3
 800600c:	4614      	mov	r4, r2
 800600e:	461d      	mov	r5, r3
 8006010:	4643      	mov	r3, r8
 8006012:	18e3      	adds	r3, r4, r3
 8006014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006018:	464b      	mov	r3, r9
 800601a:	eb45 0303 	adc.w	r3, r5, r3
 800601e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800602e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800603e:	4629      	mov	r1, r5
 8006040:	008b      	lsls	r3, r1, #2
 8006042:	4621      	mov	r1, r4
 8006044:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006048:	4621      	mov	r1, r4
 800604a:	008a      	lsls	r2, r1, #2
 800604c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006050:	f7fa f8ce 	bl	80001f0 <__aeabi_uldivmod>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4b60      	ldr	r3, [pc, #384]	@ (80061dc <UART_SetConfig+0x4e4>)
 800605a:	fba3 2302 	umull	r2, r3, r3, r2
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	011c      	lsls	r4, r3, #4
 8006062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006066:	2200      	movs	r2, #0
 8006068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800606c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006070:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006074:	4642      	mov	r2, r8
 8006076:	464b      	mov	r3, r9
 8006078:	1891      	adds	r1, r2, r2
 800607a:	61b9      	str	r1, [r7, #24]
 800607c:	415b      	adcs	r3, r3
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006084:	4641      	mov	r1, r8
 8006086:	1851      	adds	r1, r2, r1
 8006088:	6139      	str	r1, [r7, #16]
 800608a:	4649      	mov	r1, r9
 800608c:	414b      	adcs	r3, r1
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800609c:	4659      	mov	r1, fp
 800609e:	00cb      	lsls	r3, r1, #3
 80060a0:	4651      	mov	r1, sl
 80060a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a6:	4651      	mov	r1, sl
 80060a8:	00ca      	lsls	r2, r1, #3
 80060aa:	4610      	mov	r0, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	4642      	mov	r2, r8
 80060b2:	189b      	adds	r3, r3, r2
 80060b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060b8:	464b      	mov	r3, r9
 80060ba:	460a      	mov	r2, r1
 80060bc:	eb42 0303 	adc.w	r3, r2, r3
 80060c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80060dc:	4649      	mov	r1, r9
 80060de:	008b      	lsls	r3, r1, #2
 80060e0:	4641      	mov	r1, r8
 80060e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e6:	4641      	mov	r1, r8
 80060e8:	008a      	lsls	r2, r1, #2
 80060ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80060ee:	f7fa f87f 	bl	80001f0 <__aeabi_uldivmod>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4611      	mov	r1, r2
 80060f8:	4b38      	ldr	r3, [pc, #224]	@ (80061dc <UART_SetConfig+0x4e4>)
 80060fa:	fba3 2301 	umull	r2, r3, r3, r1
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	2264      	movs	r2, #100	@ 0x64
 8006102:	fb02 f303 	mul.w	r3, r2, r3
 8006106:	1acb      	subs	r3, r1, r3
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	3332      	adds	r3, #50	@ 0x32
 800610c:	4a33      	ldr	r2, [pc, #204]	@ (80061dc <UART_SetConfig+0x4e4>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006118:	441c      	add	r4, r3
 800611a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800611e:	2200      	movs	r2, #0
 8006120:	673b      	str	r3, [r7, #112]	@ 0x70
 8006122:	677a      	str	r2, [r7, #116]	@ 0x74
 8006124:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006128:	4642      	mov	r2, r8
 800612a:	464b      	mov	r3, r9
 800612c:	1891      	adds	r1, r2, r2
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	415b      	adcs	r3, r3
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006138:	4641      	mov	r1, r8
 800613a:	1851      	adds	r1, r2, r1
 800613c:	6039      	str	r1, [r7, #0]
 800613e:	4649      	mov	r1, r9
 8006140:	414b      	adcs	r3, r1
 8006142:	607b      	str	r3, [r7, #4]
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	f04f 0300 	mov.w	r3, #0
 800614c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006150:	4659      	mov	r1, fp
 8006152:	00cb      	lsls	r3, r1, #3
 8006154:	4651      	mov	r1, sl
 8006156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800615a:	4651      	mov	r1, sl
 800615c:	00ca      	lsls	r2, r1, #3
 800615e:	4610      	mov	r0, r2
 8006160:	4619      	mov	r1, r3
 8006162:	4603      	mov	r3, r0
 8006164:	4642      	mov	r2, r8
 8006166:	189b      	adds	r3, r3, r2
 8006168:	66bb      	str	r3, [r7, #104]	@ 0x68
 800616a:	464b      	mov	r3, r9
 800616c:	460a      	mov	r2, r1
 800616e:	eb42 0303 	adc.w	r3, r2, r3
 8006172:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	663b      	str	r3, [r7, #96]	@ 0x60
 800617e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800618c:	4649      	mov	r1, r9
 800618e:	008b      	lsls	r3, r1, #2
 8006190:	4641      	mov	r1, r8
 8006192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006196:	4641      	mov	r1, r8
 8006198:	008a      	lsls	r2, r1, #2
 800619a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800619e:	f7fa f827 	bl	80001f0 <__aeabi_uldivmod>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	4b0d      	ldr	r3, [pc, #52]	@ (80061dc <UART_SetConfig+0x4e4>)
 80061a8:	fba3 1302 	umull	r1, r3, r3, r2
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	2164      	movs	r1, #100	@ 0x64
 80061b0:	fb01 f303 	mul.w	r3, r1, r3
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	3332      	adds	r3, #50	@ 0x32
 80061ba:	4a08      	ldr	r2, [pc, #32]	@ (80061dc <UART_SetConfig+0x4e4>)
 80061bc:	fba2 2303 	umull	r2, r3, r2, r3
 80061c0:	095b      	lsrs	r3, r3, #5
 80061c2:	f003 020f 	and.w	r2, r3, #15
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4422      	add	r2, r4
 80061ce:	609a      	str	r2, [r3, #8]
}
 80061d0:	bf00      	nop
 80061d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80061d6:	46bd      	mov	sp, r7
 80061d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061dc:	51eb851f 	.word	0x51eb851f

080061e0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d123      	bne.n	800623a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80061fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	6851      	ldr	r1, [r2, #4]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	6892      	ldr	r2, [r2, #8]
 8006206:	4311      	orrs	r1, r2
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	68d2      	ldr	r2, [r2, #12]
 800620c:	4311      	orrs	r1, r2
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	6912      	ldr	r2, [r2, #16]
 8006212:	4311      	orrs	r1, r2
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	6952      	ldr	r2, [r2, #20]
 8006218:	4311      	orrs	r1, r2
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	6992      	ldr	r2, [r2, #24]
 800621e:	4311      	orrs	r1, r2
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	69d2      	ldr	r2, [r2, #28]
 8006224:	4311      	orrs	r1, r2
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	6a12      	ldr	r2, [r2, #32]
 800622a:	4311      	orrs	r1, r2
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006230:	430a      	orrs	r2, r1
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e028      	b.n	800628c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	69d9      	ldr	r1, [r3, #28]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	4319      	orrs	r1, r3
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006250:	430b      	orrs	r3, r1
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006260:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	6851      	ldr	r1, [r2, #4]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	6892      	ldr	r2, [r2, #8]
 800626c:	4311      	orrs	r1, r2
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	68d2      	ldr	r2, [r2, #12]
 8006272:	4311      	orrs	r1, r2
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	6912      	ldr	r2, [r2, #16]
 8006278:	4311      	orrs	r1, r2
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	6952      	ldr	r2, [r2, #20]
 800627e:	4311      	orrs	r1, r2
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	6992      	ldr	r2, [r2, #24]
 8006284:	430a      	orrs	r2, r1
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d128      	bne.n	80062fe <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	1e59      	subs	r1, r3, #1
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	3b01      	subs	r3, #1
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	4319      	orrs	r1, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	4319      	orrs	r1, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	031b      	lsls	r3, r3, #12
 80062d6:	4319      	orrs	r1, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	3b01      	subs	r3, #1
 80062de:	041b      	lsls	r3, r3, #16
 80062e0:	4319      	orrs	r1, r3
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	051b      	lsls	r3, r3, #20
 80062ea:	4319      	orrs	r1, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	061b      	lsls	r3, r3, #24
 80062f4:	430b      	orrs	r3, r1
 80062f6:	431a      	orrs	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	609a      	str	r2, [r3, #8]
 80062fc:	e02f      	b.n	800635e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006306:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	68d2      	ldr	r2, [r2, #12]
 800630e:	3a01      	subs	r2, #1
 8006310:	0311      	lsls	r1, r2, #12
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	6952      	ldr	r2, [r2, #20]
 8006316:	3a01      	subs	r2, #1
 8006318:	0512      	lsls	r2, r2, #20
 800631a:	430a      	orrs	r2, r1
 800631c:	431a      	orrs	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	1e59      	subs	r1, r3, #1
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	3b01      	subs	r3, #1
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	4319      	orrs	r1, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	3b01      	subs	r3, #1
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	4319      	orrs	r1, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	3b01      	subs	r3, #1
 800634a:	041b      	lsls	r3, r3, #16
 800634c:	4319      	orrs	r1, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	3b01      	subs	r3, #1
 8006354:	061b      	lsls	r3, r3, #24
 8006356:	430b      	orrs	r3, r1
 8006358:	431a      	orrs	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f043 0201 	orr.w	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f023 0201 	bic.w	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3301      	adds	r3, #1
 80063c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063ca:	d901      	bls.n	80063d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e01b      	b.n	8006408 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	daf2      	bge.n	80063be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	019b      	lsls	r3, r3, #6
 80063e0:	f043 0220 	orr.w	r2, r3, #32
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063f4:	d901      	bls.n	80063fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e006      	b.n	8006408 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b20      	cmp	r3, #32
 8006404:	d0f0      	beq.n	80063e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3301      	adds	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800642c:	d901      	bls.n	8006432 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e018      	b.n	8006464 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	daf2      	bge.n	8006420 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2210      	movs	r2, #16
 8006442:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3301      	adds	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006450:	d901      	bls.n	8006456 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e006      	b.n	8006464 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0310 	and.w	r3, r3, #16
 800645e:	2b10      	cmp	r3, #16
 8006460:	d0f0      	beq.n	8006444 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006470:	b480      	push	{r7}
 8006472:	b08b      	sub	sp, #44	@ 0x2c
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	089b      	lsrs	r3, r3, #2
 800648a:	b29b      	uxth	r3, r3
 800648c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	f003 0303 	and.w	r3, r3, #3
 8006494:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006496:	2300      	movs	r3, #0
 8006498:	623b      	str	r3, [r7, #32]
 800649a:	e014      	b.n	80064c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	3301      	adds	r3, #1
 80064ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	3301      	adds	r3, #1
 80064b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	3301      	adds	r3, #1
 80064b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	3301      	adds	r3, #1
 80064be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	3301      	adds	r3, #1
 80064c4:	623b      	str	r3, [r7, #32]
 80064c6:	6a3a      	ldr	r2, [r7, #32]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d3e6      	bcc.n	800649c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064ce:	8bfb      	ldrh	r3, [r7, #30]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01e      	beq.n	8006512 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064de:	461a      	mov	r2, r3
 80064e0:	f107 0310 	add.w	r3, r7, #16
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	fa22 f303 	lsr.w	r3, r2, r3
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	701a      	strb	r2, [r3, #0]
      i++;
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	3301      	adds	r3, #1
 80064fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	3301      	adds	r3, #1
 8006504:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006506:	8bfb      	ldrh	r3, [r7, #30]
 8006508:	3b01      	subs	r3, #1
 800650a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800650c:	8bfb      	ldrh	r3, [r7, #30]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1ea      	bne.n	80064e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006514:	4618      	mov	r0, r3
 8006516:	372c      	adds	r7, #44	@ 0x2c
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4013      	ands	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006538:	68fb      	ldr	r3, [r7, #12]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006556:	78fb      	ldrb	r3, [r7, #3]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	4013      	ands	r3, r2
 8006578:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800657a:	68bb      	ldr	r3, [r7, #8]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	f003 0301 	and.w	r3, r3, #1
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80065dc:	4313      	orrs	r3, r2
 80065de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d107      	bne.n	80065f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065ec:	461a      	mov	r2, r3
 80065ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80065f2:	6053      	str	r3, [r2, #4]
 80065f4:	e00c      	b.n	8006610 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d107      	bne.n	800660c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006602:	461a      	mov	r2, r3
 8006604:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006608:	6053      	str	r3, [r2, #4]
 800660a:	e001      	b.n	8006610 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800661e:	b480      	push	{r7}
 8006620:	b085      	sub	sp, #20
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	b29b      	uxth	r3, r3
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006640:	b480      	push	{r7}
 8006642:	b089      	sub	sp, #36	@ 0x24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	0c9b      	lsrs	r3, r3, #18
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	0fdb      	lsrs	r3, r3, #31
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	4413      	add	r3, r2
 800668c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	0fdb      	lsrs	r3, r3, #31
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d10d      	bne.n	80066c2 <USB_HC_Halt+0x82>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <USB_HC_Halt+0x82>
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d002      	beq.n	80066be <USB_HC_Halt+0x7e>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d101      	bne.n	80066c2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	e0d8      	b.n	8006874 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <USB_HC_Halt+0x8e>
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d173      	bne.n	80067b6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066ec:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d14a      	bne.n	8006790 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d133      	bne.n	800676e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	440a      	add	r2, r1
 800671c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006720:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006724:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	440a      	add	r2, r1
 800673c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006740:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006744:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	3301      	adds	r3, #1
 800674a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006752:	d82e      	bhi.n	80067b2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	4413      	add	r3, r2
 800675c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006766:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800676a:	d0ec      	beq.n	8006746 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800676c:	e081      	b.n	8006872 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4413      	add	r3, r2
 8006776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	440a      	add	r2, r1
 8006784:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006788:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800678c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800678e:	e070      	b.n	8006872 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	4413      	add	r3, r2
 8006798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067ae:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067b0:	e05f      	b.n	8006872 <USB_HC_Halt+0x232>
            break;
 80067b2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067b4:	e05d      	b.n	8006872 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	69fa      	ldr	r2, [r7, #28]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067d4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d133      	bne.n	800684e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	0151      	lsls	r1, r2, #5
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	440a      	add	r2, r1
 80067fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006800:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006804:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	4413      	add	r3, r2
 800680e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	0151      	lsls	r1, r2, #5
 8006818:	69fa      	ldr	r2, [r7, #28]
 800681a:	440a      	add	r2, r1
 800681c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006820:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006824:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	3301      	adds	r3, #1
 800682a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006832:	d81d      	bhi.n	8006870 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	4413      	add	r3, r2
 800683c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006846:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800684a:	d0ec      	beq.n	8006826 <USB_HC_Halt+0x1e6>
 800684c:	e011      	b.n	8006872 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	4413      	add	r3, r2
 8006856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	440a      	add	r2, r1
 8006864:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006868:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	e000      	b.n	8006872 <USB_HC_Halt+0x232>
          break;
 8006870:	bf00      	nop
    }
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3724      	adds	r7, #36	@ 0x24
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff fd7a 	bl	800638e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800689a:	2110      	movs	r1, #16
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff fd87 	bl	80063b0 <USB_FlushTxFifo>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff fdb1 	bl	8006414 <USB_FlushRxFifo>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80068bc:	2300      	movs	r3, #0
 80068be:	61bb      	str	r3, [r7, #24]
 80068c0:	e01f      	b.n	8006902 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f6:	461a      	mov	r2, r3
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	3301      	adds	r3, #1
 8006900:	61bb      	str	r3, [r7, #24]
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2b0f      	cmp	r3, #15
 8006906:	d9dc      	bls.n	80068c2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006908:	2300      	movs	r3, #0
 800690a:	61bb      	str	r3, [r7, #24]
 800690c:	e034      	b.n	8006978 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	4413      	add	r3, r2
 8006916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006924:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800692c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006934:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	4413      	add	r3, r2
 800693e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006942:	461a      	mov	r2, r3
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3301      	adds	r3, #1
 800694c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006954:	d80c      	bhi.n	8006970 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006968:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800696c:	d0ec      	beq.n	8006948 <USB_StopHost+0xc8>
 800696e:	e000      	b.n	8006972 <USB_StopHost+0xf2>
        break;
 8006970:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	3301      	adds	r3, #1
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	2b0f      	cmp	r3, #15
 800697c:	d9c7      	bls.n	800690e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006984:	461a      	mov	r2, r3
 8006986:	f04f 33ff 	mov.w	r3, #4294967295
 800698a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f04f 32ff 	mov.w	r2, #4294967295
 8006992:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff fce9 	bl	800636c <USB_EnableGlobalInt>

  return ret;
 800699a:	7ffb      	ldrb	r3, [r7, #31]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3720      	adds	r7, #32
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069aa:	f3ef 8305 	mrs	r3, IPSR
 80069ae:	607b      	str	r3, [r7, #4]
  return(result);
 80069b0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bf14      	ite	ne
 80069b6:	2301      	movne	r3, #1
 80069b8:	2300      	moveq	r3, #0
 80069ba:	b2db      	uxtb	r3, r3
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <osMessagePut+0x1e>
    ticks = 1;
 80069e2:	2301      	movs	r3, #1
 80069e4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80069e6:	f7ff ffdd 	bl	80069a4 <inHandlerMode>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d018      	beq.n	8006a22 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80069f0:	f107 0210 	add.w	r2, r7, #16
 80069f4:	f107 0108 	add.w	r1, r7, #8
 80069f8:	2300      	movs	r3, #0
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 faba 	bl	8006f74 <xQueueGenericSendFromISR>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d001      	beq.n	8006a0a <osMessagePut+0x42>
      return osErrorOS;
 8006a06:	23ff      	movs	r3, #255	@ 0xff
 8006a08:	e018      	b.n	8006a3c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d014      	beq.n	8006a3a <osMessagePut+0x72>
 8006a10:	4b0c      	ldr	r3, [pc, #48]	@ (8006a44 <osMessagePut+0x7c>)
 8006a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	e00b      	b.n	8006a3a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006a22:	f107 0108 	add.w	r1, r7, #8
 8006a26:	2300      	movs	r3, #0
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 f9a0 	bl	8006d70 <xQueueGenericSend>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d001      	beq.n	8006a3a <osMessagePut+0x72>
      return osErrorOS;
 8006a36:	23ff      	movs	r3, #255	@ 0xff
 8006a38:	e000      	b.n	8006a3c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	601a      	str	r2, [r3, #0]
}
 8006a84:	bf00      	nop
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa6:	d103      	bne.n	8006ab0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	e00c      	b.n	8006aca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	60fb      	str	r3, [r7, #12]
 8006ab6:	e002      	b.n	8006abe <vListInsert+0x2e>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d2f6      	bcs.n	8006ab8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	601a      	str	r2, [r3, #0]
}
 8006af6:	bf00      	nop
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6892      	ldr	r2, [r2, #8]
 8006b18:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6852      	ldr	r2, [r2, #4]
 8006b22:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d103      	bne.n	8006b36 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	1e5a      	subs	r2, r3, #1
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
	...

08006b60 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b60:	4b07      	ldr	r3, [pc, #28]	@ (8006b80 <pxCurrentTCBConst2>)
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	6808      	ldr	r0, [r1, #0]
 8006b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6a:	f380 8809 	msr	PSP, r0
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f04f 0000 	mov.w	r0, #0
 8006b76:	f380 8811 	msr	BASEPRI, r0
 8006b7a:	4770      	bx	lr
 8006b7c:	f3af 8000 	nop.w

08006b80 <pxCurrentTCBConst2>:
 8006b80:	200002e4 	.word	0x200002e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop

08006b88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ba0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ba2:	4b10      	ldr	r3, [pc, #64]	@ (8006be4 <vPortEnterCritical+0x5c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8006be4 <vPortEnterCritical+0x5c>)
 8006baa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006bac:	4b0d      	ldr	r3, [pc, #52]	@ (8006be4 <vPortEnterCritical+0x5c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d110      	bne.n	8006bd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006be8 <vPortEnterCritical+0x60>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	603b      	str	r3, [r7, #0]
}
 8006bd0:	bf00      	nop
 8006bd2:	bf00      	nop
 8006bd4:	e7fd      	b.n	8006bd2 <vPortEnterCritical+0x4a>
	}
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	2000000c 	.word	0x2000000c
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bf2:	4b12      	ldr	r3, [pc, #72]	@ (8006c3c <vPortExitCritical+0x50>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10b      	bne.n	8006c12 <vPortExitCritical+0x26>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	607b      	str	r3, [r7, #4]
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	e7fd      	b.n	8006c0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c12:	4b0a      	ldr	r3, [pc, #40]	@ (8006c3c <vPortExitCritical+0x50>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	4a08      	ldr	r2, [pc, #32]	@ (8006c3c <vPortExitCritical+0x50>)
 8006c1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c1c:	4b07      	ldr	r3, [pc, #28]	@ (8006c3c <vPortExitCritical+0x50>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <vPortExitCritical+0x44>
 8006c24:	2300      	movs	r3, #0
 8006c26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	2000000c 	.word	0x2000000c

08006c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c40:	f3ef 8009 	mrs	r0, PSP
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	4b15      	ldr	r3, [pc, #84]	@ (8006ca0 <pxCurrentTCBConst>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	f01e 0f10 	tst.w	lr, #16
 8006c50:	bf08      	it	eq
 8006c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5a:	6010      	str	r0, [r2, #0]
 8006c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c64:	f380 8811 	msr	BASEPRI, r0
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f000 fc58 	bl	8007524 <vTaskSwitchContext>
 8006c74:	f04f 0000 	mov.w	r0, #0
 8006c78:	f380 8811 	msr	BASEPRI, r0
 8006c7c:	bc09      	pop	{r0, r3}
 8006c7e:	6819      	ldr	r1, [r3, #0]
 8006c80:	6808      	ldr	r0, [r1, #0]
 8006c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c86:	f01e 0f10 	tst.w	lr, #16
 8006c8a:	bf08      	it	eq
 8006c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c90:	f380 8809 	msr	PSP, r0
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	f3af 8000 	nop.w

08006ca0 <pxCurrentTCBConst>:
 8006ca0:	200002e4 	.word	0x200002e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop

08006ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	607b      	str	r3, [r7, #4]
}
 8006cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cc2:	f000 fb75 	bl	80073b0 <xTaskIncrementTick>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ccc:	4b06      	ldr	r3, [pc, #24]	@ (8006ce8 <SysTick_Handler+0x40>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f383 8811 	msr	BASEPRI, r3
}
 8006cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cf2:	f3ef 8305 	mrs	r3, IPSR
 8006cf6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b0f      	cmp	r3, #15
 8006cfc:	d915      	bls.n	8006d2a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cfe:	4a18      	ldr	r2, [pc, #96]	@ (8006d60 <vPortValidateInterruptPriority+0x74>)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d08:	4b16      	ldr	r3, [pc, #88]	@ (8006d64 <vPortValidateInterruptPriority+0x78>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	7afa      	ldrb	r2, [r7, #11]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d20b      	bcs.n	8006d2a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	607b      	str	r3, [r7, #4]
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d68 <vPortValidateInterruptPriority+0x7c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d32:	4b0e      	ldr	r3, [pc, #56]	@ (8006d6c <vPortValidateInterruptPriority+0x80>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d90b      	bls.n	8006d52 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	603b      	str	r3, [r7, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	bf00      	nop
 8006d50:	e7fd      	b.n	8006d4e <vPortValidateInterruptPriority+0x62>
	}
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	e000e3f0 	.word	0xe000e3f0
 8006d64:	200002dc 	.word	0x200002dc
 8006d68:	e000ed0c 	.word	0xe000ed0c
 8006d6c:	200002e0 	.word	0x200002e0

08006d70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08e      	sub	sp, #56	@ 0x38
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
 8006d7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10b      	bne.n	8006da4 <xQueueGenericSend+0x34>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d9e:	bf00      	nop
 8006da0:	bf00      	nop
 8006da2:	e7fd      	b.n	8006da0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d103      	bne.n	8006db2 <xQueueGenericSend+0x42>
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <xQueueGenericSend+0x46>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <xQueueGenericSend+0x48>
 8006db6:	2300      	movs	r3, #0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <xQueueGenericSend+0x64>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	e7fd      	b.n	8006dd0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d103      	bne.n	8006de2 <xQueueGenericSend+0x72>
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d101      	bne.n	8006de6 <xQueueGenericSend+0x76>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e000      	b.n	8006de8 <xQueueGenericSend+0x78>
 8006de6:	2300      	movs	r3, #0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <xQueueGenericSend+0x94>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	623b      	str	r3, [r7, #32]
}
 8006dfe:	bf00      	nop
 8006e00:	bf00      	nop
 8006e02:	e7fd      	b.n	8006e00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e04:	f000 fd40 	bl	8007888 <xTaskGetSchedulerState>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <xQueueGenericSend+0xa4>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <xQueueGenericSend+0xa8>
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <xQueueGenericSend+0xaa>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10b      	bne.n	8006e36 <xQueueGenericSend+0xc6>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	61fb      	str	r3, [r7, #28]
}
 8006e30:	bf00      	nop
 8006e32:	bf00      	nop
 8006e34:	e7fd      	b.n	8006e32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e36:	f7ff fea7 	bl	8006b88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d302      	bcc.n	8006e4c <xQueueGenericSend+0xdc>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d129      	bne.n	8006ea0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e52:	f000 f92d 	bl	80070b0 <prvCopyDataToQueue>
 8006e56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d010      	beq.n	8006e82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e62:	3324      	adds	r3, #36	@ 0x24
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fc05 	bl	8007674 <xTaskRemoveFromEventList>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d013      	beq.n	8006e98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e70:	4b3f      	ldr	r3, [pc, #252]	@ (8006f70 <xQueueGenericSend+0x200>)
 8006e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	e00a      	b.n	8006e98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d007      	beq.n	8006e98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e88:	4b39      	ldr	r3, [pc, #228]	@ (8006f70 <xQueueGenericSend+0x200>)
 8006e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e98:	f7ff fea8 	bl	8006bec <vPortExitCritical>
				return pdPASS;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e063      	b.n	8006f68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d103      	bne.n	8006eae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ea6:	f7ff fea1 	bl	8006bec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e05c      	b.n	8006f68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d106      	bne.n	8006ec2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eb4:	f107 0314 	add.w	r3, r7, #20
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fc3f 	bl	800773c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ec2:	f7ff fe93 	bl	8006bec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ec6:	f000 f9c7 	bl	8007258 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eca:	f7ff fe5d 	bl	8006b88 <vPortEnterCritical>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ed4:	b25b      	sxtb	r3, r3
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	d103      	bne.n	8006ee4 <xQueueGenericSend+0x174>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eea:	b25b      	sxtb	r3, r3
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef0:	d103      	bne.n	8006efa <xQueueGenericSend+0x18a>
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006efa:	f7ff fe77 	bl	8006bec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006efe:	1d3a      	adds	r2, r7, #4
 8006f00:	f107 0314 	add.w	r3, r7, #20
 8006f04:	4611      	mov	r1, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fc2e 	bl	8007768 <xTaskCheckForTimeOut>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d124      	bne.n	8006f5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f14:	f000 f988 	bl	8007228 <prvIsQueueFull>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d018      	beq.n	8006f50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	3310      	adds	r3, #16
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	4611      	mov	r1, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fb7e 	bl	8007628 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f2e:	f000 f929 	bl	8007184 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f32:	f000 f99f 	bl	8007274 <xTaskResumeAll>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f47f af7c 	bne.w	8006e36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f70 <xQueueGenericSend+0x200>)
 8006f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	e772      	b.n	8006e36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f52:	f000 f917 	bl	8007184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f56:	f000 f98d 	bl	8007274 <xTaskResumeAll>
 8006f5a:	e76c      	b.n	8006e36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f5e:	f000 f911 	bl	8007184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f62:	f000 f987 	bl	8007274 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3738      	adds	r7, #56	@ 0x38
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b090      	sub	sp, #64	@ 0x40
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10b      	bne.n	8006fa4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f9e:	bf00      	nop
 8006fa0:	bf00      	nop
 8006fa2:	e7fd      	b.n	8006fa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <xQueueGenericSendFromISR+0x3e>
 8006faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <xQueueGenericSendFromISR+0x42>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e000      	b.n	8006fb8 <xQueueGenericSendFromISR+0x44>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10b      	bne.n	8006fd4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006fce:	bf00      	nop
 8006fd0:	bf00      	nop
 8006fd2:	e7fd      	b.n	8006fd0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d103      	bne.n	8006fe2 <xQueueGenericSendFromISR+0x6e>
 8006fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <xQueueGenericSendFromISR+0x72>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <xQueueGenericSendFromISR+0x74>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10b      	bne.n	8007004 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	623b      	str	r3, [r7, #32]
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	e7fd      	b.n	8007000 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007004:	f7ff fe72 	bl	8006cec <vPortValidateInterruptPriority>
	__asm volatile
 8007008:	f3ef 8211 	mrs	r2, BASEPRI
 800700c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	61fa      	str	r2, [r7, #28]
 800701e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007020:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007022:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702c:	429a      	cmp	r2, r3
 800702e:	d302      	bcc.n	8007036 <xQueueGenericSendFromISR+0xc2>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d12f      	bne.n	8007096 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007038:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800703c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007044:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	68b9      	ldr	r1, [r7, #8]
 800704a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800704c:	f000 f830 	bl	80070b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007050:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007058:	d112      	bne.n	8007080 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	d016      	beq.n	8007090 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	3324      	adds	r3, #36	@ 0x24
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fb04 	bl	8007674 <xTaskRemoveFromEventList>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00e      	beq.n	8007090 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00b      	beq.n	8007090 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	e007      	b.n	8007090 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007080:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007084:	3301      	adds	r3, #1
 8007086:	b2db      	uxtb	r3, r3
 8007088:	b25a      	sxtb	r2, r3
 800708a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007090:	2301      	movs	r3, #1
 8007092:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007094:	e001      	b.n	800709a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007096:	2300      	movs	r3, #0
 8007098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800709a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f383 8811 	msr	BASEPRI, r3
}
 80070a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3740      	adds	r7, #64	@ 0x40
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070bc:	2300      	movs	r3, #0
 80070be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10d      	bne.n	80070ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d14d      	bne.n	8007172 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fbf2 	bl	80078c4 <xTaskPriorityDisinherit>
 80070e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	e043      	b.n	8007172 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d119      	bne.n	8007124 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6858      	ldr	r0, [r3, #4]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f8:	461a      	mov	r2, r3
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	f000 fe78 	bl	8007df0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007108:	441a      	add	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	429a      	cmp	r2, r3
 8007118:	d32b      	bcc.n	8007172 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	605a      	str	r2, [r3, #4]
 8007122:	e026      	b.n	8007172 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	68d8      	ldr	r0, [r3, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712c:	461a      	mov	r2, r3
 800712e:	68b9      	ldr	r1, [r7, #8]
 8007130:	f000 fe5e 	bl	8007df0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	68da      	ldr	r2, [r3, #12]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713c:	425b      	negs	r3, r3
 800713e:	441a      	add	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	429a      	cmp	r2, r3
 800714e:	d207      	bcs.n	8007160 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007158:	425b      	negs	r3, r3
 800715a:	441a      	add	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b02      	cmp	r3, #2
 8007164:	d105      	bne.n	8007172 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	3b01      	subs	r3, #1
 8007170:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800717a:	697b      	ldr	r3, [r7, #20]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800718c:	f7ff fcfc 	bl	8006b88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007196:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007198:	e011      	b.n	80071be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d012      	beq.n	80071c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3324      	adds	r3, #36	@ 0x24
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fa64 	bl	8007674 <xTaskRemoveFromEventList>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071b2:	f000 fb3d 	bl	8007830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	dce9      	bgt.n	800719a <prvUnlockQueue+0x16>
 80071c6:	e000      	b.n	80071ca <prvUnlockQueue+0x46>
					break;
 80071c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	22ff      	movs	r2, #255	@ 0xff
 80071ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80071d2:	f7ff fd0b 	bl	8006bec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071d6:	f7ff fcd7 	bl	8006b88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071e2:	e011      	b.n	8007208 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d012      	beq.n	8007212 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3310      	adds	r3, #16
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 fa3f 	bl	8007674 <xTaskRemoveFromEventList>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071fc:	f000 fb18 	bl	8007830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	3b01      	subs	r3, #1
 8007204:	b2db      	uxtb	r3, r3
 8007206:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800720c:	2b00      	cmp	r3, #0
 800720e:	dce9      	bgt.n	80071e4 <prvUnlockQueue+0x60>
 8007210:	e000      	b.n	8007214 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007212:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	22ff      	movs	r2, #255	@ 0xff
 8007218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800721c:	f7ff fce6 	bl	8006bec <vPortExitCritical>
}
 8007220:	bf00      	nop
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007230:	f7ff fcaa 	bl	8006b88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723c:	429a      	cmp	r2, r3
 800723e:	d102      	bne.n	8007246 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007240:	2301      	movs	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	e001      	b.n	800724a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800724a:	f7ff fccf 	bl	8006bec <vPortExitCritical>

	return xReturn;
 800724e:	68fb      	ldr	r3, [r7, #12]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800725c:	4b04      	ldr	r3, [pc, #16]	@ (8007270 <vTaskSuspendAll+0x18>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3301      	adds	r3, #1
 8007262:	4a03      	ldr	r2, [pc, #12]	@ (8007270 <vTaskSuspendAll+0x18>)
 8007264:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007266:	bf00      	nop
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	200003c4 	.word	0x200003c4

08007274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800727e:	2300      	movs	r3, #0
 8007280:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007282:	4b42      	ldr	r3, [pc, #264]	@ (800738c <xTaskResumeAll+0x118>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10b      	bne.n	80072a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	603b      	str	r3, [r7, #0]
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	e7fd      	b.n	800729e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072a2:	f7ff fc71 	bl	8006b88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072a6:	4b39      	ldr	r3, [pc, #228]	@ (800738c <xTaskResumeAll+0x118>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	4a37      	ldr	r2, [pc, #220]	@ (800738c <xTaskResumeAll+0x118>)
 80072ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072b0:	4b36      	ldr	r3, [pc, #216]	@ (800738c <xTaskResumeAll+0x118>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d161      	bne.n	800737c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072b8:	4b35      	ldr	r3, [pc, #212]	@ (8007390 <xTaskResumeAll+0x11c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d05d      	beq.n	800737c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072c0:	e02e      	b.n	8007320 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c2:	4b34      	ldr	r3, [pc, #208]	@ (8007394 <xTaskResumeAll+0x120>)
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3318      	adds	r3, #24
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7ff fc17 	bl	8006b02 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4618      	mov	r0, r3
 80072da:	f7ff fc12 	bl	8006b02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e2:	2201      	movs	r2, #1
 80072e4:	409a      	lsls	r2, r3
 80072e6:	4b2c      	ldr	r3, [pc, #176]	@ (8007398 <xTaskResumeAll+0x124>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	4a2a      	ldr	r2, [pc, #168]	@ (8007398 <xTaskResumeAll+0x124>)
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4a27      	ldr	r2, [pc, #156]	@ (800739c <xTaskResumeAll+0x128>)
 80072fe:	441a      	add	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3304      	adds	r3, #4
 8007304:	4619      	mov	r1, r3
 8007306:	4610      	mov	r0, r2
 8007308:	f7ff fb9e 	bl	8006a48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007310:	4b23      	ldr	r3, [pc, #140]	@ (80073a0 <xTaskResumeAll+0x12c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007316:	429a      	cmp	r2, r3
 8007318:	d302      	bcc.n	8007320 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800731a:	4b22      	ldr	r3, [pc, #136]	@ (80073a4 <xTaskResumeAll+0x130>)
 800731c:	2201      	movs	r2, #1
 800731e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007320:	4b1c      	ldr	r3, [pc, #112]	@ (8007394 <xTaskResumeAll+0x120>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1cc      	bne.n	80072c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800732e:	f000 fa8b 	bl	8007848 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007332:	4b1d      	ldr	r3, [pc, #116]	@ (80073a8 <xTaskResumeAll+0x134>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d010      	beq.n	8007360 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800733e:	f000 f837 	bl	80073b0 <xTaskIncrementTick>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007348:	4b16      	ldr	r3, [pc, #88]	@ (80073a4 <xTaskResumeAll+0x130>)
 800734a:	2201      	movs	r2, #1
 800734c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3b01      	subs	r3, #1
 8007352:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1f1      	bne.n	800733e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800735a:	4b13      	ldr	r3, [pc, #76]	@ (80073a8 <xTaskResumeAll+0x134>)
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007360:	4b10      	ldr	r3, [pc, #64]	@ (80073a4 <xTaskResumeAll+0x130>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d009      	beq.n	800737c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007368:	2301      	movs	r3, #1
 800736a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800736c:	4b0f      	ldr	r3, [pc, #60]	@ (80073ac <xTaskResumeAll+0x138>)
 800736e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800737c:	f7ff fc36 	bl	8006bec <vPortExitCritical>

	return xAlreadyYielded;
 8007380:	68bb      	ldr	r3, [r7, #8]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	200003c4 	.word	0x200003c4
 8007390:	200003a4 	.word	0x200003a4
 8007394:	2000037c 	.word	0x2000037c
 8007398:	200003ac 	.word	0x200003ac
 800739c:	200002e8 	.word	0x200002e8
 80073a0:	200002e4 	.word	0x200002e4
 80073a4:	200003b8 	.word	0x200003b8
 80073a8:	200003b4 	.word	0x200003b4
 80073ac:	e000ed04 	.word	0xe000ed04

080073b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ba:	4b4f      	ldr	r3, [pc, #316]	@ (80074f8 <xTaskIncrementTick+0x148>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f040 808f 	bne.w	80074e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073c4:	4b4d      	ldr	r3, [pc, #308]	@ (80074fc <xTaskIncrementTick+0x14c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3301      	adds	r3, #1
 80073ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073cc:	4a4b      	ldr	r2, [pc, #300]	@ (80074fc <xTaskIncrementTick+0x14c>)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d121      	bne.n	800741c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80073d8:	4b49      	ldr	r3, [pc, #292]	@ (8007500 <xTaskIncrementTick+0x150>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	603b      	str	r3, [r7, #0]
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <xTaskIncrementTick+0x46>
 80073fa:	4b41      	ldr	r3, [pc, #260]	@ (8007500 <xTaskIncrementTick+0x150>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	4b40      	ldr	r3, [pc, #256]	@ (8007504 <xTaskIncrementTick+0x154>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a3e      	ldr	r2, [pc, #248]	@ (8007500 <xTaskIncrementTick+0x150>)
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	4a3e      	ldr	r2, [pc, #248]	@ (8007504 <xTaskIncrementTick+0x154>)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6013      	str	r3, [r2, #0]
 800740e:	4b3e      	ldr	r3, [pc, #248]	@ (8007508 <xTaskIncrementTick+0x158>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3301      	adds	r3, #1
 8007414:	4a3c      	ldr	r2, [pc, #240]	@ (8007508 <xTaskIncrementTick+0x158>)
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	f000 fa16 	bl	8007848 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800741c:	4b3b      	ldr	r3, [pc, #236]	@ (800750c <xTaskIncrementTick+0x15c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	429a      	cmp	r2, r3
 8007424:	d348      	bcc.n	80074b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007426:	4b36      	ldr	r3, [pc, #216]	@ (8007500 <xTaskIncrementTick+0x150>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007430:	4b36      	ldr	r3, [pc, #216]	@ (800750c <xTaskIncrementTick+0x15c>)
 8007432:	f04f 32ff 	mov.w	r2, #4294967295
 8007436:	601a      	str	r2, [r3, #0]
					break;
 8007438:	e03e      	b.n	80074b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800743a:	4b31      	ldr	r3, [pc, #196]	@ (8007500 <xTaskIncrementTick+0x150>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	429a      	cmp	r2, r3
 8007450:	d203      	bcs.n	800745a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007452:	4a2e      	ldr	r2, [pc, #184]	@ (800750c <xTaskIncrementTick+0x15c>)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007458:	e02e      	b.n	80074b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	3304      	adds	r3, #4
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff fb4f 	bl	8006b02 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007468:	2b00      	cmp	r3, #0
 800746a:	d004      	beq.n	8007476 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	3318      	adds	r3, #24
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fb46 	bl	8006b02 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	2201      	movs	r2, #1
 800747c:	409a      	lsls	r2, r3
 800747e:	4b24      	ldr	r3, [pc, #144]	@ (8007510 <xTaskIncrementTick+0x160>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4313      	orrs	r3, r2
 8007484:	4a22      	ldr	r2, [pc, #136]	@ (8007510 <xTaskIncrementTick+0x160>)
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4a1f      	ldr	r2, [pc, #124]	@ (8007514 <xTaskIncrementTick+0x164>)
 8007496:	441a      	add	r2, r3
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f7ff fad2 	bl	8006a48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007518 <xTaskIncrementTick+0x168>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d3b9      	bcc.n	8007426 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80074b2:	2301      	movs	r3, #1
 80074b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074b6:	e7b6      	b.n	8007426 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074b8:	4b17      	ldr	r3, [pc, #92]	@ (8007518 <xTaskIncrementTick+0x168>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074be:	4915      	ldr	r1, [pc, #84]	@ (8007514 <xTaskIncrementTick+0x164>)
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d901      	bls.n	80074d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80074d0:	2301      	movs	r3, #1
 80074d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80074d4:	4b11      	ldr	r3, [pc, #68]	@ (800751c <xTaskIncrementTick+0x16c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80074dc:	2301      	movs	r3, #1
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	e004      	b.n	80074ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80074e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007520 <xTaskIncrementTick+0x170>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3301      	adds	r3, #1
 80074e8:	4a0d      	ldr	r2, [pc, #52]	@ (8007520 <xTaskIncrementTick+0x170>)
 80074ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80074ec:	697b      	ldr	r3, [r7, #20]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	200003c4 	.word	0x200003c4
 80074fc:	200003a8 	.word	0x200003a8
 8007500:	20000374 	.word	0x20000374
 8007504:	20000378 	.word	0x20000378
 8007508:	200003bc 	.word	0x200003bc
 800750c:	200003c0 	.word	0x200003c0
 8007510:	200003ac 	.word	0x200003ac
 8007514:	200002e8 	.word	0x200002e8
 8007518:	200002e4 	.word	0x200002e4
 800751c:	200003b8 	.word	0x200003b8
 8007520:	200003b4 	.word	0x200003b4

08007524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800752a:	4b3a      	ldr	r3, [pc, #232]	@ (8007614 <vTaskSwitchContext+0xf0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007532:	4b39      	ldr	r3, [pc, #228]	@ (8007618 <vTaskSwitchContext+0xf4>)
 8007534:	2201      	movs	r2, #1
 8007536:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007538:	e067      	b.n	800760a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800753a:	4b37      	ldr	r3, [pc, #220]	@ (8007618 <vTaskSwitchContext+0xf4>)
 800753c:	2200      	movs	r2, #0
 800753e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007540:	4b36      	ldr	r3, [pc, #216]	@ (800761c <vTaskSwitchContext+0xf8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	429a      	cmp	r2, r3
 8007556:	d111      	bne.n	800757c <vTaskSwitchContext+0x58>
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	3304      	adds	r3, #4
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	429a      	cmp	r2, r3
 8007562:	d10b      	bne.n	800757c <vTaskSwitchContext+0x58>
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	3308      	adds	r3, #8
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	429a      	cmp	r2, r3
 800756e:	d105      	bne.n	800757c <vTaskSwitchContext+0x58>
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	330c      	adds	r3, #12
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	429a      	cmp	r2, r3
 800757a:	d008      	beq.n	800758e <vTaskSwitchContext+0x6a>
 800757c:	4b27      	ldr	r3, [pc, #156]	@ (800761c <vTaskSwitchContext+0xf8>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	4b26      	ldr	r3, [pc, #152]	@ (800761c <vTaskSwitchContext+0xf8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3334      	adds	r3, #52	@ 0x34
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f7f9 f925 	bl	80007d8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800758e:	4b24      	ldr	r3, [pc, #144]	@ (8007620 <vTaskSwitchContext+0xfc>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	fab3 f383 	clz	r3, r3
 800759a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800759c:	7afb      	ldrb	r3, [r7, #11]
 800759e:	f1c3 031f 	rsb	r3, r3, #31
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	491f      	ldr	r1, [pc, #124]	@ (8007624 <vTaskSwitchContext+0x100>)
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10b      	bne.n	80075d0 <vTaskSwitchContext+0xac>
	__asm volatile
 80075b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	607b      	str	r3, [r7, #4]
}
 80075ca:	bf00      	nop
 80075cc:	bf00      	nop
 80075ce:	e7fd      	b.n	80075cc <vTaskSwitchContext+0xa8>
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4a12      	ldr	r2, [pc, #72]	@ (8007624 <vTaskSwitchContext+0x100>)
 80075dc:	4413      	add	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	3308      	adds	r3, #8
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d104      	bne.n	8007600 <vTaskSwitchContext+0xdc>
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	605a      	str	r2, [r3, #4]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	4a05      	ldr	r2, [pc, #20]	@ (800761c <vTaskSwitchContext+0xf8>)
 8007608:	6013      	str	r3, [r2, #0]
}
 800760a:	bf00      	nop
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200003c4 	.word	0x200003c4
 8007618:	200003b8 	.word	0x200003b8
 800761c:	200002e4 	.word	0x200002e4
 8007620:	200003ac 	.word	0x200003ac
 8007624:	200002e8 	.word	0x200002e8

08007628 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10b      	bne.n	8007650 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	60fb      	str	r3, [r7, #12]
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	e7fd      	b.n	800764c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007650:	4b07      	ldr	r3, [pc, #28]	@ (8007670 <vTaskPlaceOnEventList+0x48>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3318      	adds	r3, #24
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff fa19 	bl	8006a90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800765e:	2101      	movs	r1, #1
 8007660:	6838      	ldr	r0, [r7, #0]
 8007662:	f000 f9b7 	bl	80079d4 <prvAddCurrentTaskToDelayedList>
}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	200002e4 	.word	0x200002e4

08007674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10b      	bne.n	80076a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	60fb      	str	r3, [r7, #12]
}
 800769c:	bf00      	nop
 800769e:	bf00      	nop
 80076a0:	e7fd      	b.n	800769e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	3318      	adds	r3, #24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff fa2b 	bl	8006b02 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007724 <xTaskRemoveFromEventList+0xb0>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d11c      	bne.n	80076ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	3304      	adds	r3, #4
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff fa22 	bl	8006b02 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c2:	2201      	movs	r2, #1
 80076c4:	409a      	lsls	r2, r3
 80076c6:	4b18      	ldr	r3, [pc, #96]	@ (8007728 <xTaskRemoveFromEventList+0xb4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	4a16      	ldr	r2, [pc, #88]	@ (8007728 <xTaskRemoveFromEventList+0xb4>)
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4a13      	ldr	r2, [pc, #76]	@ (800772c <xTaskRemoveFromEventList+0xb8>)
 80076de:	441a      	add	r2, r3
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	3304      	adds	r3, #4
 80076e4:	4619      	mov	r1, r3
 80076e6:	4610      	mov	r0, r2
 80076e8:	f7ff f9ae 	bl	8006a48 <vListInsertEnd>
 80076ec:	e005      	b.n	80076fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	3318      	adds	r3, #24
 80076f2:	4619      	mov	r1, r3
 80076f4:	480e      	ldr	r0, [pc, #56]	@ (8007730 <xTaskRemoveFromEventList+0xbc>)
 80076f6:	f7ff f9a7 	bl	8006a48 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007734 <xTaskRemoveFromEventList+0xc0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007704:	429a      	cmp	r2, r3
 8007706:	d905      	bls.n	8007714 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800770c:	4b0a      	ldr	r3, [pc, #40]	@ (8007738 <xTaskRemoveFromEventList+0xc4>)
 800770e:	2201      	movs	r2, #1
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e001      	b.n	8007718 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007718:	697b      	ldr	r3, [r7, #20]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	200003c4 	.word	0x200003c4
 8007728:	200003ac 	.word	0x200003ac
 800772c:	200002e8 	.word	0x200002e8
 8007730:	2000037c 	.word	0x2000037c
 8007734:	200002e4 	.word	0x200002e4
 8007738:	200003b8 	.word	0x200003b8

0800773c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007744:	4b06      	ldr	r3, [pc, #24]	@ (8007760 <vTaskInternalSetTimeOutState+0x24>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800774c:	4b05      	ldr	r3, [pc, #20]	@ (8007764 <vTaskInternalSetTimeOutState+0x28>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	605a      	str	r2, [r3, #4]
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	200003bc 	.word	0x200003bc
 8007764:	200003a8 	.word	0x200003a8

08007768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10b      	bne.n	8007790 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	613b      	str	r3, [r7, #16]
}
 800778a:	bf00      	nop
 800778c:	bf00      	nop
 800778e:	e7fd      	b.n	800778c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10b      	bne.n	80077ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	60fb      	str	r3, [r7, #12]
}
 80077a8:	bf00      	nop
 80077aa:	bf00      	nop
 80077ac:	e7fd      	b.n	80077aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80077ae:	f7ff f9eb 	bl	8006b88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007828 <xTaskCheckForTimeOut+0xc0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ca:	d102      	bne.n	80077d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077cc:	2300      	movs	r3, #0
 80077ce:	61fb      	str	r3, [r7, #28]
 80077d0:	e023      	b.n	800781a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	4b15      	ldr	r3, [pc, #84]	@ (800782c <xTaskCheckForTimeOut+0xc4>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d007      	beq.n	80077ee <xTaskCheckForTimeOut+0x86>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d302      	bcc.n	80077ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	e015      	b.n	800781a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d20b      	bcs.n	8007810 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	1ad2      	subs	r2, r2, r3
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff ff99 	bl	800773c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800780a:	2300      	movs	r3, #0
 800780c:	61fb      	str	r3, [r7, #28]
 800780e:	e004      	b.n	800781a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007816:	2301      	movs	r3, #1
 8007818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800781a:	f7ff f9e7 	bl	8006bec <vPortExitCritical>

	return xReturn;
 800781e:	69fb      	ldr	r3, [r7, #28]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3720      	adds	r7, #32
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	200003a8 	.word	0x200003a8
 800782c:	200003bc 	.word	0x200003bc

08007830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007834:	4b03      	ldr	r3, [pc, #12]	@ (8007844 <vTaskMissedYield+0x14>)
 8007836:	2201      	movs	r2, #1
 8007838:	601a      	str	r2, [r3, #0]
}
 800783a:	bf00      	nop
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	200003b8 	.word	0x200003b8

08007848 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800784e:	4b0c      	ldr	r3, [pc, #48]	@ (8007880 <prvResetNextTaskUnblockTime+0x38>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d104      	bne.n	8007862 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007858:	4b0a      	ldr	r3, [pc, #40]	@ (8007884 <prvResetNextTaskUnblockTime+0x3c>)
 800785a:	f04f 32ff 	mov.w	r2, #4294967295
 800785e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007860:	e008      	b.n	8007874 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007862:	4b07      	ldr	r3, [pc, #28]	@ (8007880 <prvResetNextTaskUnblockTime+0x38>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	4a04      	ldr	r2, [pc, #16]	@ (8007884 <prvResetNextTaskUnblockTime+0x3c>)
 8007872:	6013      	str	r3, [r2, #0]
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	20000374 	.word	0x20000374
 8007884:	200003c0 	.word	0x200003c0

08007888 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800788e:	4b0b      	ldr	r3, [pc, #44]	@ (80078bc <xTaskGetSchedulerState+0x34>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d102      	bne.n	800789c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007896:	2301      	movs	r3, #1
 8007898:	607b      	str	r3, [r7, #4]
 800789a:	e008      	b.n	80078ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800789c:	4b08      	ldr	r3, [pc, #32]	@ (80078c0 <xTaskGetSchedulerState+0x38>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078a4:	2302      	movs	r3, #2
 80078a6:	607b      	str	r3, [r7, #4]
 80078a8:	e001      	b.n	80078ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078aa:	2300      	movs	r3, #0
 80078ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078ae:	687b      	ldr	r3, [r7, #4]
	}
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	200003b0 	.word	0x200003b0
 80078c0:	200003c4 	.word	0x200003c4

080078c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d070      	beq.n	80079bc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078da:	4b3b      	ldr	r3, [pc, #236]	@ (80079c8 <xTaskPriorityDisinherit+0x104>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d00b      	beq.n	80078fc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	60fb      	str	r3, [r7, #12]
}
 80078f6:	bf00      	nop
 80078f8:	bf00      	nop
 80078fa:	e7fd      	b.n	80078f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10b      	bne.n	800791c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	60bb      	str	r3, [r7, #8]
}
 8007916:	bf00      	nop
 8007918:	bf00      	nop
 800791a:	e7fd      	b.n	8007918 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007920:	1e5a      	subs	r2, r3, #1
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800792e:	429a      	cmp	r2, r3
 8007930:	d044      	beq.n	80079bc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007936:	2b00      	cmp	r3, #0
 8007938:	d140      	bne.n	80079bc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	3304      	adds	r3, #4
 800793e:	4618      	mov	r0, r3
 8007940:	f7ff f8df 	bl	8006b02 <uxListRemove>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d115      	bne.n	8007976 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800794e:	491f      	ldr	r1, [pc, #124]	@ (80079cc <xTaskPriorityDisinherit+0x108>)
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <xTaskPriorityDisinherit+0xb2>
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007964:	2201      	movs	r2, #1
 8007966:	fa02 f303 	lsl.w	r3, r2, r3
 800796a:	43da      	mvns	r2, r3
 800796c:	4b18      	ldr	r3, [pc, #96]	@ (80079d0 <xTaskPriorityDisinherit+0x10c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4013      	ands	r3, r2
 8007972:	4a17      	ldr	r2, [pc, #92]	@ (80079d0 <xTaskPriorityDisinherit+0x10c>)
 8007974:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007982:	f1c3 0207 	rsb	r2, r3, #7
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	2201      	movs	r2, #1
 8007990:	409a      	lsls	r2, r3
 8007992:	4b0f      	ldr	r3, [pc, #60]	@ (80079d0 <xTaskPriorityDisinherit+0x10c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4313      	orrs	r3, r2
 8007998:	4a0d      	ldr	r2, [pc, #52]	@ (80079d0 <xTaskPriorityDisinherit+0x10c>)
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a0:	4613      	mov	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4a08      	ldr	r2, [pc, #32]	@ (80079cc <xTaskPriorityDisinherit+0x108>)
 80079aa:	441a      	add	r2, r3
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	3304      	adds	r3, #4
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f7ff f848 	bl	8006a48 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079bc:	697b      	ldr	r3, [r7, #20]
	}
 80079be:	4618      	mov	r0, r3
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	200002e4 	.word	0x200002e4
 80079cc:	200002e8 	.word	0x200002e8
 80079d0:	200003ac 	.word	0x200003ac

080079d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079de:	4b29      	ldr	r3, [pc, #164]	@ (8007a84 <prvAddCurrentTaskToDelayedList+0xb0>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079e4:	4b28      	ldr	r3, [pc, #160]	@ (8007a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3304      	adds	r3, #4
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff f889 	bl	8006b02 <uxListRemove>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10b      	bne.n	8007a0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80079f6:	4b24      	ldr	r3, [pc, #144]	@ (8007a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fc:	2201      	movs	r2, #1
 80079fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007a02:	43da      	mvns	r2, r3
 8007a04:	4b21      	ldr	r3, [pc, #132]	@ (8007a8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	4a20      	ldr	r2, [pc, #128]	@ (8007a8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d10a      	bne.n	8007a2c <prvAddCurrentTaskToDelayedList+0x58>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d007      	beq.n	8007a2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3304      	adds	r3, #4
 8007a22:	4619      	mov	r1, r3
 8007a24:	481a      	ldr	r0, [pc, #104]	@ (8007a90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a26:	f7ff f80f 	bl	8006a48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a2a:	e026      	b.n	8007a7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4413      	add	r3, r2
 8007a32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a34:	4b14      	ldr	r3, [pc, #80]	@ (8007a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d209      	bcs.n	8007a58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a44:	4b13      	ldr	r3, [pc, #76]	@ (8007a94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	4b0f      	ldr	r3, [pc, #60]	@ (8007a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4610      	mov	r0, r2
 8007a52:	f7ff f81d 	bl	8006a90 <vListInsert>
}
 8007a56:	e010      	b.n	8007a7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a58:	4b0f      	ldr	r3, [pc, #60]	@ (8007a98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3304      	adds	r3, #4
 8007a62:	4619      	mov	r1, r3
 8007a64:	4610      	mov	r0, r2
 8007a66:	f7ff f813 	bl	8006a90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d202      	bcs.n	8007a7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a74:	4a09      	ldr	r2, [pc, #36]	@ (8007a9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6013      	str	r3, [r2, #0]
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	200003a8 	.word	0x200003a8
 8007a88:	200002e4 	.word	0x200002e4
 8007a8c:	200003ac 	.word	0x200003ac
 8007a90:	20000390 	.word	0x20000390
 8007a94:	20000378 	.word	0x20000378
 8007a98:	20000374 	.word	0x20000374
 8007a9c:	200003c0 	.word	0x200003c0

08007aa0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f804 	bl	8007ac4 <USBH_HandleSof>
}
 8007abc:	bf00      	nop
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b0b      	cmp	r3, #11
 8007ad4:	d10a      	bne.n	8007aec <USBH_HandleSof+0x28>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	4798      	blx	r3
  }
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	f7fe ff54 	bl	80069c8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007b20:	bf00      	nop
}
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007b38:	bf00      	nop
}
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	f7fe ff24 	bl	80069c8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f8ac 	bl	8007d08 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	791b      	ldrb	r3, [r3, #4]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f830 	bl	8007c1c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	795b      	ldrb	r3, [r3, #5]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f82a 	bl	8007c1c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007bdc:	2200      	movs	r2, #0
 8007bde:	4619      	mov	r1, r3
 8007be0:	f7fe fef2 	bl	80069c8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	f7fe fedb 	bl	80069c8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	2b0f      	cmp	r3, #15
 8007c2c:	d80d      	bhi.n	8007c4a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	33e0      	adds	r3, #224	@ 0xe0
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007c40:	6879      	ldr	r1, [r7, #4]
 8007c42:	33e0      	adds	r3, #224	@ 0xe0
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	440b      	add	r3, r1
 8007c48:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7ff ff1a 	bl	8007aa0 <USBH_LL_IncTimer>
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff ff5e 	bl	8007b44 <USBH_LL_Connect>
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff ff73 	bl	8007b8a <USBH_LL_Disconnect>
}
 8007ca4:	bf00      	nop
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	70fb      	strb	r3, [r7, #3]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7ff ff93 	bl	8007bee <USBH_LL_NotifyURBChange>
#endif
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff ff08 	bl	8007af4 <USBH_LL_PortEnabled>
}
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff ff14 	bl	8007b28 <USBH_LL_PortDisabled>
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fa fa1f 	bl	8002162 <HAL_HCD_Stop>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 f808 	bl	8007d40 <USBH_Get_USB_Status>
 8007d30:	4603      	mov	r3, r0
 8007d32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d817      	bhi.n	8007d84 <USBH_Get_USB_Status+0x44>
 8007d54:	a201      	add	r2, pc, #4	@ (adr r2, 8007d5c <USBH_Get_USB_Status+0x1c>)
 8007d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5a:	bf00      	nop
 8007d5c:	08007d6d 	.word	0x08007d6d
 8007d60:	08007d73 	.word	0x08007d73
 8007d64:	08007d79 	.word	0x08007d79
 8007d68:	08007d7f 	.word	0x08007d7f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d70:	e00b      	b.n	8007d8a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007d72:	2302      	movs	r3, #2
 8007d74:	73fb      	strb	r3, [r7, #15]
    break;
 8007d76:	e008      	b.n	8007d8a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d7c:	e005      	b.n	8007d8a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	73fb      	strb	r3, [r7, #15]
    break;
 8007d82:	e002      	b.n	8007d8a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007d84:	2302      	movs	r3, #2
 8007d86:	73fb      	strb	r3, [r7, #15]
    break;
 8007d88:	bf00      	nop
  }
  return usb_status;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <memset>:
 8007d98:	4402      	add	r2, r0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d100      	bne.n	8007da2 <memset+0xa>
 8007da0:	4770      	bx	lr
 8007da2:	f803 1b01 	strb.w	r1, [r3], #1
 8007da6:	e7f9      	b.n	8007d9c <memset+0x4>

08007da8 <__libc_init_array>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	4d0d      	ldr	r5, [pc, #52]	@ (8007de0 <__libc_init_array+0x38>)
 8007dac:	4c0d      	ldr	r4, [pc, #52]	@ (8007de4 <__libc_init_array+0x3c>)
 8007dae:	1b64      	subs	r4, r4, r5
 8007db0:	10a4      	asrs	r4, r4, #2
 8007db2:	2600      	movs	r6, #0
 8007db4:	42a6      	cmp	r6, r4
 8007db6:	d109      	bne.n	8007dcc <__libc_init_array+0x24>
 8007db8:	4d0b      	ldr	r5, [pc, #44]	@ (8007de8 <__libc_init_array+0x40>)
 8007dba:	4c0c      	ldr	r4, [pc, #48]	@ (8007dec <__libc_init_array+0x44>)
 8007dbc:	f000 f826 	bl	8007e0c <_init>
 8007dc0:	1b64      	subs	r4, r4, r5
 8007dc2:	10a4      	asrs	r4, r4, #2
 8007dc4:	2600      	movs	r6, #0
 8007dc6:	42a6      	cmp	r6, r4
 8007dc8:	d105      	bne.n	8007dd6 <__libc_init_array+0x2e>
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd0:	4798      	blx	r3
 8007dd2:	3601      	adds	r6, #1
 8007dd4:	e7ee      	b.n	8007db4 <__libc_init_array+0xc>
 8007dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dda:	4798      	blx	r3
 8007ddc:	3601      	adds	r6, #1
 8007dde:	e7f2      	b.n	8007dc6 <__libc_init_array+0x1e>
 8007de0:	08007e44 	.word	0x08007e44
 8007de4:	08007e44 	.word	0x08007e44
 8007de8:	08007e44 	.word	0x08007e44
 8007dec:	08007e48 	.word	0x08007e48

08007df0 <memcpy>:
 8007df0:	440a      	add	r2, r1
 8007df2:	4291      	cmp	r1, r2
 8007df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007df8:	d100      	bne.n	8007dfc <memcpy+0xc>
 8007dfa:	4770      	bx	lr
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e06:	4291      	cmp	r1, r2
 8007e08:	d1f9      	bne.n	8007dfe <memcpy+0xe>
 8007e0a:	bd10      	pop	{r4, pc}

08007e0c <_init>:
 8007e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0e:	bf00      	nop
 8007e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e12:	bc08      	pop	{r3}
 8007e14:	469e      	mov	lr, r3
 8007e16:	4770      	bx	lr

08007e18 <_fini>:
 8007e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1a:	bf00      	nop
 8007e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e1e:	bc08      	pop	{r3}
 8007e20:	469e      	mov	lr, r3
 8007e22:	4770      	bx	lr
