
STM32F429Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d100  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800d2b0  0800d2b0  0000e2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d334  0800d334  0000f080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d334  0800d334  0000e334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d33c  0800d33c  0000f080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d33c  0800d33c  0000e33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d340  0800d340  0000e340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800d344  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f080  2**0
                  CONTENTS
 10 .bss          00008f90  20000080  20000080  0000f080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009010  20009010  0000f080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002aec2  00000000  00000000  0000f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006baa  00000000  00000000  00039f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023a8  00000000  00000000  00040b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b6c  00000000  00000000  00042ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c8f4  00000000  00000000  00044a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000346e7  00000000  00000000  00071328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5d03  00000000  00000000  000a5a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019b712  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097fc  00000000  00000000  0019b758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001a4f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d298 	.word	0x0800d298

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800d298 	.word	0x0800d298

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_CRC_Init+0x20>)
 80004e6:	4a07      	ldr	r2, [pc, #28]	@ (8000504 <MX_CRC_Init+0x24>)
 80004e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <MX_CRC_Init+0x20>)
 80004ec:	f001 f9e0 	bl	80018b0 <HAL_CRC_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004f6:	f000 fdcd 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	2000009c 	.word	0x2000009c
 8000504:	40023000 	.word	0x40023000

08000508 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0b      	ldr	r2, [pc, #44]	@ (8000544 <HAL_CRC_MspInit+0x3c>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d10d      	bne.n	8000536 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <HAL_CRC_MspInit+0x40>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a09      	ldr	r2, [pc, #36]	@ (8000548 <HAL_CRC_MspInit+0x40>)
 8000524:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <HAL_CRC_MspInit+0x40>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40023000 	.word	0x40023000
 8000548:	40023800 	.word	0x40023800

0800054c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000550:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000552:	4a16      	ldr	r2, [pc, #88]	@ (80005ac <MX_DMA2D_Init+0x60>)
 8000554:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000556:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800055c:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000562:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 800056a:	2200      	movs	r2, #0
 800056c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000580:	4809      	ldr	r0, [pc, #36]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000582:	f001 f9b1 	bl	80018e8 <HAL_DMA2D_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800058c:	f000 fd82 	bl	8001094 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000590:	2101      	movs	r1, #1
 8000592:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <MX_DMA2D_Init+0x5c>)
 8000594:	f001 fb02 	bl	8001b9c <HAL_DMA2D_ConfigLayer>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800059e:	f000 fd79 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000a4 	.word	0x200000a4
 80005ac:	4002b000 	.word	0x4002b000

080005b0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0e      	ldr	r2, [pc, #56]	@ (80005f8 <HAL_DMA2D_MspInit+0x48>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d115      	bne.n	80005ee <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <HAL_DMA2D_MspInit+0x4c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a0c      	ldr	r2, [pc, #48]	@ (80005fc <HAL_DMA2D_MspInit+0x4c>)
 80005cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <HAL_DMA2D_MspInit+0x4c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2105      	movs	r1, #5
 80005e2:	205a      	movs	r0, #90	@ 0x5a
 80005e4:	f001 f93a 	bl	800185c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80005e8:	205a      	movs	r0, #90	@ 0x5a
 80005ea:	f001 f953 	bl	8001894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	4002b000 	.word	0x4002b000
 80005fc:	40023800 	.word	0x40023800

08000600 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_FMC_Init+0x98>)
 800061a:	4a20      	ldr	r2, [pc, #128]	@ (800069c <MX_FMC_Init+0x9c>)
 800061c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_FMC_Init+0x98>)
 8000620:	2201      	movs	r2, #1
 8000622:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000624:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_FMC_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_FMC_Init+0x98>)
 800062c:	2204      	movs	r2, #4
 800062e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_FMC_Init+0x98>)
 8000632:	2210      	movs	r2, #16
 8000634:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000636:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_FMC_Init+0x98>)
 8000638:	2240      	movs	r2, #64	@ 0x40
 800063a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800063c:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <MX_FMC_Init+0x98>)
 800063e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000642:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_FMC_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800064a:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <MX_FMC_Init+0x98>)
 800064c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000650:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_FMC_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_FMC_Init+0x98>)
 800065a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800066c:	2307      	movs	r3, #7
 800066e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000670:	2303      	movs	r3, #3
 8000672:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000674:	2302      	movs	r3, #2
 8000676:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_FMC_Init+0x98>)
 8000682:	f005 f9c9 	bl	8005a18 <HAL_SDRAM_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800068c:	f000 fd02 	bl	8001094 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000e4 	.word	0x200000e4
 800069c:	a0000140 	.word	0xa0000140

080006a0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006b4:	4b3b      	ldr	r3, [pc, #236]	@ (80007a4 <HAL_FMC_MspInit+0x104>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d16f      	bne.n	800079c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006bc:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <HAL_FMC_MspInit+0x104>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b38      	ldr	r3, [pc, #224]	@ (80007a8 <HAL_FMC_MspInit+0x108>)
 80006c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006ca:	4a37      	ldr	r2, [pc, #220]	@ (80007a8 <HAL_FMC_MspInit+0x108>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6393      	str	r3, [r2, #56]	@ 0x38
 80006d2:	4b35      	ldr	r3, [pc, #212]	@ (80007a8 <HAL_FMC_MspInit+0x108>)
 80006d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80006de:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80006e2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006f0:	230c      	movs	r3, #12
 80006f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	482c      	ldr	r0, [pc, #176]	@ (80007ac <HAL_FMC_MspInit+0x10c>)
 80006fa:	f001 fae1 	bl	8001cc0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800070e:	230c      	movs	r3, #12
 8000710:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4826      	ldr	r0, [pc, #152]	@ (80007b0 <HAL_FMC_MspInit+0x110>)
 8000718:	f001 fad2 	bl	8001cc0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800071c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000720:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800072e:	230c      	movs	r3, #12
 8000730:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	481f      	ldr	r0, [pc, #124]	@ (80007b4 <HAL_FMC_MspInit+0x114>)
 8000738:	f001 fac2 	bl	8001cc0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800073c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000740:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800074e:	230c      	movs	r3, #12
 8000750:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	4818      	ldr	r0, [pc, #96]	@ (80007b8 <HAL_FMC_MspInit+0x118>)
 8000758:	f001 fab2 	bl	8001cc0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800075c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000760:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800076e:	230c      	movs	r3, #12
 8000770:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4811      	ldr	r0, [pc, #68]	@ (80007bc <HAL_FMC_MspInit+0x11c>)
 8000778:	f001 faa2 	bl	8001cc0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800077c:	2360      	movs	r3, #96	@ 0x60
 800077e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800078c:	230c      	movs	r3, #12
 800078e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	480a      	ldr	r0, [pc, #40]	@ (80007c0 <HAL_FMC_MspInit+0x120>)
 8000796:	f001 fa93 	bl	8001cc0 <HAL_GPIO_Init>
 800079a:	e000      	b.n	800079e <HAL_FMC_MspInit+0xfe>
    return;
 800079c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000118 	.word	0x20000118
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40021400 	.word	0x40021400
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40021800 	.word	0x40021800
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40020c00 	.word	0x40020c00
 80007c0:	40020400 	.word	0x40020400

080007c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007cc:	f7ff ff68 	bl	80006a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4a07      	ldr	r2, [pc, #28]	@ (8000838 <vApplicationGetIdleTaskMemory+0x2c>)
 800081c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	4a06      	ldr	r2, [pc, #24]	@ (800083c <vApplicationGetIdleTaskMemory+0x30>)
 8000822:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2280      	movs	r2, #128	@ 0x80
 8000828:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000120 	.word	0x20000120
 800083c:	20000178 	.word	0x20000178

08000840 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000840:	b5b0      	push	{r4, r5, r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <MX_FREERTOS_Init+0x30>)
 8000848:	1d3c      	adds	r4, r7, #4
 800084a:	461d      	mov	r5, r3
 800084c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000850:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000854:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f007 fb36 	bl	8007ece <osThreadCreate>
 8000862:	4603      	mov	r3, r0
 8000864:	4a03      	ldr	r2, [pc, #12]	@ (8000874 <MX_FREERTOS_Init+0x34>)
 8000866:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bdb0      	pop	{r4, r5, r7, pc}
 8000870:	0800d2bc 	.word	0x0800d2bc
 8000874:	2000011c 	.word	0x2000011c

08000878 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000880:	f00c f8a6 	bl	800c9d0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f007 fb6e 	bl	8007f66 <osDelay>
 800088a:	e7fb      	b.n	8000884 <StartDefaultTask+0xc>

0800088c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	@ 0x38
 8000890:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
 80008a6:	4b7b      	ldr	r3, [pc, #492]	@ (8000a94 <MX_GPIO_Init+0x208>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a7a      	ldr	r2, [pc, #488]	@ (8000a94 <MX_GPIO_Init+0x208>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b78      	ldr	r3, [pc, #480]	@ (8000a94 <MX_GPIO_Init+0x208>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	623b      	str	r3, [r7, #32]
 80008bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
 80008c2:	4b74      	ldr	r3, [pc, #464]	@ (8000a94 <MX_GPIO_Init+0x208>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a73      	ldr	r2, [pc, #460]	@ (8000a94 <MX_GPIO_Init+0x208>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b71      	ldr	r3, [pc, #452]	@ (8000a94 <MX_GPIO_Init+0x208>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
 80008d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	4b6d      	ldr	r3, [pc, #436]	@ (8000a94 <MX_GPIO_Init+0x208>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a6c      	ldr	r2, [pc, #432]	@ (8000a94 <MX_GPIO_Init+0x208>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b6a      	ldr	r3, [pc, #424]	@ (8000a94 <MX_GPIO_Init+0x208>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	4b66      	ldr	r3, [pc, #408]	@ (8000a94 <MX_GPIO_Init+0x208>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a65      	ldr	r2, [pc, #404]	@ (8000a94 <MX_GPIO_Init+0x208>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b63      	ldr	r3, [pc, #396]	@ (8000a94 <MX_GPIO_Init+0x208>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b5f      	ldr	r3, [pc, #380]	@ (8000a94 <MX_GPIO_Init+0x208>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a5e      	ldr	r2, [pc, #376]	@ (8000a94 <MX_GPIO_Init+0x208>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b5c      	ldr	r3, [pc, #368]	@ (8000a94 <MX_GPIO_Init+0x208>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b58      	ldr	r3, [pc, #352]	@ (8000a94 <MX_GPIO_Init+0x208>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a57      	ldr	r2, [pc, #348]	@ (8000a94 <MX_GPIO_Init+0x208>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b55      	ldr	r3, [pc, #340]	@ (8000a94 <MX_GPIO_Init+0x208>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b51      	ldr	r3, [pc, #324]	@ (8000a94 <MX_GPIO_Init+0x208>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a50      	ldr	r2, [pc, #320]	@ (8000a94 <MX_GPIO_Init+0x208>)
 8000954:	f043 0310 	orr.w	r3, r3, #16
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b4e      	ldr	r3, [pc, #312]	@ (8000a94 <MX_GPIO_Init+0x208>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0310 	and.w	r3, r3, #16
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b4a      	ldr	r3, [pc, #296]	@ (8000a94 <MX_GPIO_Init+0x208>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a49      	ldr	r2, [pc, #292]	@ (8000a94 <MX_GPIO_Init+0x208>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b47      	ldr	r3, [pc, #284]	@ (8000a94 <MX_GPIO_Init+0x208>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2116      	movs	r1, #22
 8000986:	4844      	ldr	r0, [pc, #272]	@ (8000a98 <MX_GPIO_Init+0x20c>)
 8000988:	f001 fb46 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2180      	movs	r1, #128	@ 0x80
 8000990:	4842      	ldr	r0, [pc, #264]	@ (8000a9c <MX_GPIO_Init+0x210>)
 8000992:	f001 fb41 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800099c:	4840      	ldr	r0, [pc, #256]	@ (8000aa0 <MX_GPIO_Init+0x214>)
 800099e:	f001 fb3b 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80009a8:	483e      	ldr	r0, [pc, #248]	@ (8000aa4 <MX_GPIO_Init+0x218>)
 80009aa:	f001 fb35 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009ae:	2316      	movs	r3, #22
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	4834      	ldr	r0, [pc, #208]	@ (8000a98 <MX_GPIO_Init+0x20c>)
 80009c6:	f001 f97b 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009ca:	f248 0307 	movw	r3, #32775	@ 0x8007
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009de:	4619      	mov	r1, r3
 80009e0:	482e      	ldr	r0, [pc, #184]	@ (8000a9c <MX_GPIO_Init+0x210>)
 80009e2:	f001 f96d 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fa:	4619      	mov	r1, r3
 80009fc:	4827      	ldr	r0, [pc, #156]	@ (8000a9c <MX_GPIO_Init+0x210>)
 80009fe:	f001 f95f 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a02:	2320      	movs	r3, #32
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a06:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	4820      	ldr	r0, [pc, #128]	@ (8000a98 <MX_GPIO_Init+0x20c>)
 8000a18:	f001 f952 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0x21c>)
 8000a30:	f001 f946 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	4815      	ldr	r0, [pc, #84]	@ (8000aa0 <MX_GPIO_Init+0x214>)
 8000a4a:	f001 f939 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a4e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <MX_GPIO_Init+0x214>)
 8000a68:	f001 f92a 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000a6c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4807      	ldr	r0, [pc, #28]	@ (8000aa4 <MX_GPIO_Init+0x218>)
 8000a86:	f001 f91b 	bl	8001cc0 <HAL_GPIO_Init>

}
 8000a8a:	bf00      	nop
 8000a8c:	3738      	adds	r7, #56	@ 0x38
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40021800 	.word	0x40021800
 8000aa8:	40020400 	.word	0x40020400

08000aac <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <MX_I2C3_Init+0x74>)
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b24 <MX_I2C3_Init+0x78>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_I2C3_Init+0x74>)
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b28 <MX_I2C3_Init+0x7c>)
 8000aba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000abc:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <MX_I2C3_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_I2C3_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <MX_I2C3_Init+0x74>)
 8000aca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ace:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <MX_I2C3_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_I2C3_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000adc:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <MX_I2C3_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_I2C3_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ae8:	480d      	ldr	r0, [pc, #52]	@ (8000b20 <MX_I2C3_Init+0x74>)
 8000aea:	f003 fbe3 	bl	80042b4 <HAL_I2C_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000af4:	f000 face 	bl	8001094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af8:	2100      	movs	r1, #0
 8000afa:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <MX_I2C3_Init+0x74>)
 8000afc:	f003 fd1e 	bl	800453c <HAL_I2CEx_ConfigAnalogFilter>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b06:	f000 fac5 	bl	8001094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_I2C3_Init+0x74>)
 8000b0e:	f003 fd51 	bl	80045b4 <HAL_I2CEx_ConfigDigitalFilter>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b18:	f000 fabc 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000378 	.word	0x20000378
 8000b24:	40005c00 	.word	0x40005c00
 8000b28:	000186a0 	.word	0x000186a0

08000b2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	@ 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a29      	ldr	r2, [pc, #164]	@ (8000bf0 <HAL_I2C_MspInit+0xc4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d14b      	bne.n	8000be6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b28      	ldr	r3, [pc, #160]	@ (8000bf4 <HAL_I2C_MspInit+0xc8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a27      	ldr	r2, [pc, #156]	@ (8000bf4 <HAL_I2C_MspInit+0xc8>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b25      	ldr	r3, [pc, #148]	@ (8000bf4 <HAL_I2C_MspInit+0xc8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <HAL_I2C_MspInit+0xc8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a20      	ldr	r2, [pc, #128]	@ (8000bf4 <HAL_I2C_MspInit+0xc8>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <HAL_I2C_MspInit+0xc8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8c:	2312      	movs	r3, #18
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4815      	ldr	r0, [pc, #84]	@ (8000bf8 <HAL_I2C_MspInit+0xcc>)
 8000ba4:	f001 f88c 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ba8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bae:	2312      	movs	r3, #18
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <HAL_I2C_MspInit+0xd0>)
 8000bc6:	f001 f87b 	bl	8001cc0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <HAL_I2C_MspInit+0xc8>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <HAL_I2C_MspInit+0xc8>)
 8000bd4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_I2C_MspInit+0xc8>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	@ 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40005c00 	.word	0x40005c00
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	@ 0x38
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2234      	movs	r2, #52	@ 0x34
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f00c faa7 	bl	800d160 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c12:	4b39      	ldr	r3, [pc, #228]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c14:	4a39      	ldr	r2, [pc, #228]	@ (8000cfc <MX_LTDC_Init+0xfc>)
 8000c16:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c18:	4b37      	ldr	r3, [pc, #220]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c1e:	4b36      	ldr	r3, [pc, #216]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c24:	4b34      	ldr	r3, [pc, #208]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c2a:	4b33      	ldr	r3, [pc, #204]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000c30:	4b31      	ldr	r3, [pc, #196]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c32:	2209      	movs	r2, #9
 8000c34:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000c36:	4b30      	ldr	r3, [pc, #192]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c3e:	221d      	movs	r2, #29
 8000c40:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000c42:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c44:	2203      	movs	r2, #3
 8000c46:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000c48:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c4a:	f240 120d 	movw	r2, #269	@ 0x10d
 8000c4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000c50:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c52:	f240 1243 	movw	r2, #323	@ 0x143
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000c58:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c5a:	f240 1217 	movw	r2, #279	@ 0x117
 8000c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000c60:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c62:	f240 1247 	movw	r2, #327	@ 0x147
 8000c66:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c68:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c70:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c78:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c80:	481d      	ldr	r0, [pc, #116]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000c82:	f003 fcd7 	bl	8004634 <HAL_LTDC_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c8c:	f000 fa02 	bl	8001094 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000c94:	23f0      	movs	r3, #240	@ 0xf0
 8000c96:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000c9c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ca0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ca6:	23ff      	movs	r3, #255	@ 0xff
 8000ca8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000cae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cb2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000cb8:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000cbe:	23f0      	movs	r3, #240	@ 0xf0
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000cc2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000cc6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_LTDC_Init+0xf8>)
 8000ce2:	f003 fe39 	bl	8004958 <HAL_LTDC_ConfigLayer>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000cec:	f000 f9d2 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3738      	adds	r7, #56	@ 0x38
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200003cc 	.word	0x200003cc
 8000cfc:	40016800 	.word	0x40016800

08000d00 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b09a      	sub	sp, #104	@ 0x68
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	2230      	movs	r2, #48	@ 0x30
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00c fa1d 	bl	800d160 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a85      	ldr	r2, [pc, #532]	@ (8000f40 <HAL_LTDC_MspInit+0x240>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	f040 8102 	bne.w	8000f36 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d32:	2308      	movs	r3, #8
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000d36:	2332      	movs	r3, #50	@ 0x32
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 fca6 	bl	8005698 <HAL_RCCEx_PeriphCLKConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000d52:	f000 f99f 	bl	8001094 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
 8000d5a:	4b7a      	ldr	r3, [pc, #488]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	4a79      	ldr	r2, [pc, #484]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000d60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d66:	4b77      	ldr	r3, [pc, #476]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d6e:	623b      	str	r3, [r7, #32]
 8000d70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	4b73      	ldr	r3, [pc, #460]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a72      	ldr	r2, [pc, #456]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000d7c:	f043 0320 	orr.w	r3, r3, #32
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b70      	ldr	r3, [pc, #448]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0320 	and.w	r3, r3, #32
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	4b6c      	ldr	r3, [pc, #432]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a6b      	ldr	r2, [pc, #428]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b69      	ldr	r3, [pc, #420]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	4b65      	ldr	r3, [pc, #404]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a64      	ldr	r2, [pc, #400]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b62      	ldr	r3, [pc, #392]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b5e      	ldr	r3, [pc, #376]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a5d      	ldr	r2, [pc, #372]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b57      	ldr	r3, [pc, #348]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a56      	ldr	r2, [pc, #344]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b54      	ldr	r3, [pc, #336]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	4b50      	ldr	r3, [pc, #320]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a4f      	ldr	r2, [pc, #316]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f44 <HAL_LTDC_MspInit+0x244>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e1e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e2c:	230e      	movs	r3, #14
 8000e2e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e34:	4619      	mov	r1, r3
 8000e36:	4844      	ldr	r0, [pc, #272]	@ (8000f48 <HAL_LTDC_MspInit+0x248>)
 8000e38:	f000 ff42 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000e3c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000e40:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e4e:	230e      	movs	r3, #14
 8000e50:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e56:	4619      	mov	r1, r3
 8000e58:	483c      	ldr	r0, [pc, #240]	@ (8000f4c <HAL_LTDC_MspInit+0x24c>)
 8000e5a:	f000 ff31 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e6e:	2309      	movs	r3, #9
 8000e70:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e76:	4619      	mov	r1, r3
 8000e78:	4835      	ldr	r0, [pc, #212]	@ (8000f50 <HAL_LTDC_MspInit+0x250>)
 8000e7a:	f000 ff21 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e7e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000e82:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e90:	230e      	movs	r3, #14
 8000e92:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e98:	4619      	mov	r1, r3
 8000e9a:	482d      	ldr	r0, [pc, #180]	@ (8000f50 <HAL_LTDC_MspInit+0x250>)
 8000e9c:	f000 ff10 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ea0:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000ea4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb2:	230e      	movs	r3, #14
 8000eb4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4825      	ldr	r0, [pc, #148]	@ (8000f54 <HAL_LTDC_MspInit+0x254>)
 8000ebe:	f000 feff 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000ec2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000ec6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed4:	230e      	movs	r3, #14
 8000ed6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000edc:	4619      	mov	r1, r3
 8000ede:	481e      	ldr	r0, [pc, #120]	@ (8000f58 <HAL_LTDC_MspInit+0x258>)
 8000ee0:	f000 feee 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000ee4:	2348      	movs	r3, #72	@ 0x48
 8000ee6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ef4:	230e      	movs	r3, #14
 8000ef6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000efc:	4619      	mov	r1, r3
 8000efe:	4817      	ldr	r0, [pc, #92]	@ (8000f5c <HAL_LTDC_MspInit+0x25c>)
 8000f00:	f000 fede 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000f04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f08:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f16:	2309      	movs	r3, #9
 8000f18:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <HAL_LTDC_MspInit+0x254>)
 8000f22:	f000 fecd 	bl	8001cc0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2105      	movs	r1, #5
 8000f2a:	2058      	movs	r0, #88	@ 0x58
 8000f2c:	f000 fc96 	bl	800185c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f30:	2058      	movs	r0, #88	@ 0x58
 8000f32:	f000 fcaf 	bl	8001894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000f36:	bf00      	nop
 8000f38:	3768      	adds	r7, #104	@ 0x68
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40016800 	.word	0x40016800
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40021400 	.word	0x40021400
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020400 	.word	0x40020400
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020c00 	.word	0x40020c00

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f64:	f000 fb5c 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f68:	f000 f818 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6c:	f7ff fc8e 	bl	800088c <MX_GPIO_Init>
  MX_CRC_Init();
 8000f70:	f7ff fab6 	bl	80004e0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000f74:	f7ff faea 	bl	800054c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000f78:	f7ff fb42 	bl	8000600 <MX_FMC_Init>
  MX_I2C3_Init();
 8000f7c:	f7ff fd96 	bl	8000aac <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f80:	f7ff fe3e 	bl	8000c00 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000f84:	f000 f88c 	bl	80010a0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000f88:	f000 fa3c 	bl	8001404 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f8c:	f000 faac 	bl	80014e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000f90:	f7ff fc56 	bl	8000840 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f94:	f006 ff94 	bl	8007ec0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <main+0x38>

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	@ 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2230      	movs	r2, #48	@ 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00c f8d8 	bl	800d160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b28      	ldr	r3, [pc, #160]	@ (8001068 <SystemClock_Config+0xcc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc8:	4a27      	ldr	r2, [pc, #156]	@ (8001068 <SystemClock_Config+0xcc>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd0:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4b22      	ldr	r3, [pc, #136]	@ (800106c <SystemClock_Config+0xd0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fe8:	4a20      	ldr	r2, [pc, #128]	@ (800106c <SystemClock_Config+0xd0>)
 8000fea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <SystemClock_Config+0xd0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001000:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800100e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001010:	2304      	movs	r3, #4
 8001012:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001014:	2348      	movs	r3, #72	@ 0x48
 8001016:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001018:	2302      	movs	r3, #2
 800101a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800101c:	2303      	movs	r3, #3
 800101e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	4618      	mov	r0, r3
 8001026:	f003 fe6d 	bl	8004d04 <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001030:	f000 f830 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001034:	230f      	movs	r3, #15
 8001036:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001038:	2302      	movs	r3, #2
 800103a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001044:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	2102      	movs	r1, #2
 8001050:	4618      	mov	r0, r3
 8001052:	f004 f8cf 	bl	80051f4 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800105c:	f000 f81a 	bl	8001094 <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3750      	adds	r7, #80	@ 0x50
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001082:	f000 faef 	bl	8001664 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40001000 	.word	0x40001000

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <Error_Handler+0x8>

080010a0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010a6:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <MX_SPI5_Init+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010d0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010d4:	2218      	movs	r2, #24
 80010d6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010ec:	220a      	movs	r2, #10
 80010ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_SPI5_Init+0x64>)
 80010f2:	f004 fcc5 	bl	8005a80 <HAL_SPI_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80010fc:	f7ff ffca 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000474 	.word	0x20000474
 8001108:	40015000 	.word	0x40015000

0800110c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	@ 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a19      	ldr	r2, [pc, #100]	@ (8001190 <HAL_SPI_MspInit+0x84>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d12c      	bne.n	8001188 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <HAL_SPI_MspInit+0x88>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a17      	ldr	r2, [pc, #92]	@ (8001194 <HAL_SPI_MspInit+0x88>)
 8001138:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_SPI_MspInit+0x88>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <HAL_SPI_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a10      	ldr	r2, [pc, #64]	@ (8001194 <HAL_SPI_MspInit+0x88>)
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_SPI_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001166:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001178:	2305      	movs	r3, #5
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <HAL_SPI_MspInit+0x8c>)
 8001184:	f000 fd9c 	bl	8001cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	@ 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40015000 	.word	0x40015000
 8001194:	40023800 	.word	0x40023800
 8001198:	40021400 	.word	0x40021400

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_MspInit+0x54>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	4a11      	ldr	r2, [pc, #68]	@ (80011f0 <HAL_MspInit+0x54>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b2:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <HAL_MspInit+0x54>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <HAL_MspInit+0x54>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <HAL_MspInit+0x54>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <HAL_MspInit+0x54>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	210f      	movs	r1, #15
 80011de:	f06f 0001 	mvn.w	r0, #1
 80011e2:	f000 fb3b 	bl	800185c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	@ 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	4b33      	ldr	r3, [pc, #204]	@ (80012d8 <HAL_InitTick+0xe4>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	4a32      	ldr	r2, [pc, #200]	@ (80012d8 <HAL_InitTick+0xe4>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	6413      	str	r3, [r2, #64]	@ 0x40
 8001214:	4b30      	ldr	r3, [pc, #192]	@ (80012d8 <HAL_InitTick+0xe4>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001220:	f107 0210 	add.w	r2, r7, #16
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f004 fa02 	bl	8005634 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800123a:	f004 f9d3 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 800123e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001240:	e004      	b.n	800124c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001242:	f004 f9cf 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 8001246:	4603      	mov	r3, r0
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800124c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800124e:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <HAL_InitTick+0xe8>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	0c9b      	lsrs	r3, r3, #18
 8001256:	3b01      	subs	r3, #1
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800125a:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <HAL_InitTick+0xec>)
 800125c:	4a21      	ldr	r2, [pc, #132]	@ (80012e4 <HAL_InitTick+0xf0>)
 800125e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001260:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <HAL_InitTick+0xec>)
 8001262:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001266:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001268:	4a1d      	ldr	r2, [pc, #116]	@ (80012e0 <HAL_InitTick+0xec>)
 800126a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800126c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800126e:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <HAL_InitTick+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <HAL_InitTick+0xec>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <HAL_InitTick+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001280:	4817      	ldr	r0, [pc, #92]	@ (80012e0 <HAL_InitTick+0xec>)
 8001282:	f004 fc86 	bl	8005b92 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800128c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11b      	bne.n	80012cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001294:	4812      	ldr	r0, [pc, #72]	@ (80012e0 <HAL_InitTick+0xec>)
 8001296:	f004 fccb 	bl	8005c30 <HAL_TIM_Base_Start_IT>
 800129a:	4603      	mov	r3, r0
 800129c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d111      	bne.n	80012cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012a8:	2036      	movs	r0, #54	@ 0x36
 80012aa:	f000 faf3 	bl	8001894 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d808      	bhi.n	80012c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	2036      	movs	r0, #54	@ 0x36
 80012ba:	f000 facf 	bl	800185c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <HAL_InitTick+0xf4>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e002      	b.n	80012cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3738      	adds	r7, #56	@ 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	431bde83 	.word	0x431bde83
 80012e0:	200004cc 	.word	0x200004cc
 80012e4:	40001000 	.word	0x40001000
 80012e8:	20000004 	.word	0x20000004

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <NMI_Handler+0x4>

080012f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <MemManage_Handler+0x4>

08001304 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <UsageFault_Handler+0x4>

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <TIM6_DAC_IRQHandler+0x10>)
 800132a:	f004 fcf1 	bl	8005d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200004cc 	.word	0x200004cc

08001338 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <OTG_HS_IRQHandler+0x10>)
 800133e:	f001 f965 	bl	800260c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20008ae8 	.word	0x20008ae8

0800134c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <LTDC_IRQHandler+0x10>)
 8001352:	f003 fa3f 	bl	80047d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200003cc 	.word	0x200003cc

08001360 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001364:	4802      	ldr	r0, [pc, #8]	@ (8001370 <DMA2D_IRQHandler+0x10>)
 8001366:	f000 fb08 	bl	800197a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200000a4 	.word	0x200000a4

08001374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800137c:	4a14      	ldr	r2, [pc, #80]	@ (80013d0 <_sbrk+0x5c>)
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <_sbrk+0x60>)
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001388:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <_sbrk+0x64>)
 8001392:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <_sbrk+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d207      	bcs.n	80013b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a4:	f00b fef4 	bl	800d190 <__errno>
 80013a8:	4603      	mov	r3, r0
 80013aa:	220c      	movs	r2, #12
 80013ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	e009      	b.n	80013c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ba:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a05      	ldr	r2, [pc, #20]	@ (80013d8 <_sbrk+0x64>)
 80013c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20030000 	.word	0x20030000
 80013d4:	00000400 	.word	0x00000400
 80013d8:	20000514 	.word	0x20000514
 80013dc:	20009010 	.word	0x20009010

080013e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <SystemInit+0x20>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <SystemInit+0x20>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001420:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <MX_TIM1_Init+0x98>)
 8001422:	4a1f      	ldr	r2, [pc, #124]	@ (80014a0 <MX_TIM1_Init+0x9c>)
 8001424:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001426:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <MX_TIM1_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_TIM1_Init+0x98>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_TIM1_Init+0x98>)
 8001434:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001438:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_TIM1_Init+0x98>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <MX_TIM1_Init+0x98>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_TIM1_Init+0x98>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800144c:	4813      	ldr	r0, [pc, #76]	@ (800149c <MX_TIM1_Init+0x98>)
 800144e:	f004 fba0 	bl	8005b92 <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001458:	f7ff fe1c 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001460:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <MX_TIM1_Init+0x98>)
 800146a:	f004 fd41 	bl	8005ef0 <HAL_TIM_ConfigClockSource>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001474:	f7ff fe0e 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_TIM1_Init+0x98>)
 8001486:	f004 ff69 	bl	800635c <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001490:	f7ff fe00 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000518 	.word	0x20000518
 80014a0:	40010000 	.word	0x40010000

080014a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0b      	ldr	r2, [pc, #44]	@ (80014e0 <HAL_TIM_Base_MspInit+0x3c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d10d      	bne.n	80014d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_TIM_Base_MspInit+0x40>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <HAL_TIM_Base_MspInit+0x40>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <HAL_TIM_Base_MspInit+0x40>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40010000 	.word	0x40010000
 80014e4:	40023800 	.word	0x40023800

080014e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_USART1_UART_Init+0x4c>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <MX_USART1_UART_Init+0x50>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <MX_USART1_UART_Init+0x4c>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <MX_USART1_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <MX_USART1_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_USART1_UART_Init+0x4c>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <MX_USART1_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_USART1_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_USART1_UART_Init+0x4c>)
 8001520:	f004 ffac 	bl	800647c <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800152a:	f7ff fdb3 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000560 	.word	0x20000560
 8001538:	40011000 	.word	0x40011000

0800153c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	@ (80015c0 <HAL_UART_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12c      	bne.n	80015b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <HAL_UART_MspInit+0x88>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a17      	ldr	r2, [pc, #92]	@ (80015c4 <HAL_UART_MspInit+0x88>)
 8001568:	f043 0310 	orr.w	r3, r3, #16
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_UART_MspInit+0x88>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <HAL_UART_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a10      	ldr	r2, [pc, #64]	@ (80015c4 <HAL_UART_MspInit+0x88>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <HAL_UART_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001596:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015a8:	2307      	movs	r3, #7
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <HAL_UART_MspInit+0x8c>)
 80015b4:	f000 fb84 	bl	8001cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	@ 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001604 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015d0:	f7ff ff06 	bl	80013e0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d4:	480c      	ldr	r0, [pc, #48]	@ (8001608 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015d6:	490d      	ldr	r1, [pc, #52]	@ (800160c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001618 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f00b fdcf 	bl	800d19c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fe:	f7ff fcaf 	bl	8000f60 <main>
  bx  lr    
 8001602:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001604:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001610:	0800d344 	.word	0x0800d344
  ldr r2, =_sbss
 8001614:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001618:	20009010 	.word	0x20009010

0800161c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0d      	ldr	r2, [pc, #52]	@ (8001660 <HAL_Init+0x40>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800162e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <HAL_Init+0x40>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800163a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	@ (8001660 <HAL_Init+0x40>)
 8001642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f8fc 	bl	8001846 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff fdd0 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fda2 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023c00 	.word	0x40023c00

08001664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_IncTick+0x20>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_IncTick+0x24>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <HAL_IncTick+0x24>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000008 	.word	0x20000008
 8001688:	200005a8 	.word	0x200005a8

0800168c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b03      	ldr	r3, [pc, #12]	@ (80016a0 <HAL_GetTick+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	200005a8 	.word	0x200005a8

080016a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff ffee 	bl	800168c <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d005      	beq.n	80016ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016be:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <HAL_Delay+0x44>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ca:	bf00      	nop
 80016cc:	f7ff ffde 	bl	800168c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d8f7      	bhi.n	80016cc <HAL_Delay+0x28>
  {
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	@ (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	@ (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	@ (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	@ 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ff4c 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186e:	f7ff ff61 	bl	8001734 <__NVIC_GetPriorityGrouping>
 8001872:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	6978      	ldr	r0, [r7, #20]
 800187a:	f7ff ffb1 	bl	80017e0 <NVIC_EncodePriority>
 800187e:	4602      	mov	r2, r0
 8001880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff80 	bl	800178c <__NVIC_SetPriority>
}
 800188c:	bf00      	nop
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff54 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	795b      	ldrb	r3, [r3, #5]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d105      	bne.n	80018d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7fe fe18 	bl	8000508 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e03b      	b.n	8001972 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7fe fe4e 	bl	80005b0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001938:	f023 0107 	bic.w	r1, r3, #7
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001952:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68d1      	ldr	r1, [r2, #12]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	430b      	orrs	r3, r1
 8001960:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d026      	beq.n	80019ea <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d021      	beq.n	80019ea <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019b4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2201      	movs	r2, #1
 80019c8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2204      	movs	r2, #4
 80019ce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f003 0320 	and.w	r3, r3, #32
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d026      	beq.n	8001a42 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d021      	beq.n	8001a42 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a0c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2220      	movs	r2, #32
 8001a14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a1a:	f043 0202 	orr.w	r2, r3, #2
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2204      	movs	r2, #4
 8001a26:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d026      	beq.n	8001a9a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d021      	beq.n	8001a9a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a64:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a72:	f043 0204 	orr.w	r2, r3, #4
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00e      	beq.n	8001acc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001abc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f853 	bl	8001b72 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d024      	beq.n	8001b20 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01f      	beq.n	8001b20 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001aee:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2202      	movs	r2, #2
 8001af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01f      	beq.n	8001b6a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01a      	beq.n	8001b6a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b42:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2210      	movs	r2, #16
 8001b4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f80e 	bl	8001b86 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_DMA2D_ConfigLayer+0x20>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e079      	b.n	8001cb0 <HAL_DMA2D_ConfigLayer+0x114>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	3318      	adds	r3, #24
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	041b      	lsls	r3, r3, #16
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001be6:	4b35      	ldr	r3, [pc, #212]	@ (8001cbc <HAL_DMA2D_ConfigLayer+0x120>)
 8001be8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b0a      	cmp	r3, #10
 8001bf0:	d003      	beq.n	8001bfa <HAL_DMA2D_ConfigLayer+0x5e>
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b09      	cmp	r3, #9
 8001bf8:	d107      	bne.n	8001c0a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e005      	b.n	8001c16 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	061b      	lsls	r3, r3, #24
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d120      	bne.n	8001c5e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	ea02 0103 	and.w	r1, r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b0a      	cmp	r3, #10
 8001c44:	d003      	beq.n	8001c4e <HAL_DMA2D_ConfigLayer+0xb2>
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b09      	cmp	r3, #9
 8001c4c:	d127      	bne.n	8001c9e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001c5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c5c:	e01f      	b.n	8001c9e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69da      	ldr	r2, [r3, #28]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	ea02 0103 	and.w	r1, r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b0a      	cmp	r3, #10
 8001c86:	d003      	beq.n	8001c90 <HAL_DMA2D_ConfigLayer+0xf4>
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	d106      	bne.n	8001c9e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001c9c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	ff03000f 	.word	0xff03000f

08001cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	@ 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e177      	b.n	8001fcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	f040 8166 	bne.w	8001fc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d005      	beq.n	8001d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d130      	bne.n	8001d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 0201 	and.w	r2, r3, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d017      	beq.n	8001db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d123      	bne.n	8001e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	08da      	lsrs	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3208      	adds	r2, #8
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	08da      	lsrs	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3208      	adds	r2, #8
 8001dfe:	69b9      	ldr	r1, [r7, #24]
 8001e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0203 	and.w	r2, r3, #3
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80c0 	beq.w	8001fc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b66      	ldr	r3, [pc, #408]	@ (8001fe4 <HAL_GPIO_Init+0x324>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	4a65      	ldr	r2, [pc, #404]	@ (8001fe4 <HAL_GPIO_Init+0x324>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e56:	4b63      	ldr	r3, [pc, #396]	@ (8001fe4 <HAL_GPIO_Init+0x324>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e62:	4a61      	ldr	r2, [pc, #388]	@ (8001fe8 <HAL_GPIO_Init+0x328>)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	3302      	adds	r3, #2
 8001e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	220f      	movs	r2, #15
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a58      	ldr	r2, [pc, #352]	@ (8001fec <HAL_GPIO_Init+0x32c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d037      	beq.n	8001efe <HAL_GPIO_Init+0x23e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a57      	ldr	r2, [pc, #348]	@ (8001ff0 <HAL_GPIO_Init+0x330>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d031      	beq.n	8001efa <HAL_GPIO_Init+0x23a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a56      	ldr	r2, [pc, #344]	@ (8001ff4 <HAL_GPIO_Init+0x334>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d02b      	beq.n	8001ef6 <HAL_GPIO_Init+0x236>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a55      	ldr	r2, [pc, #340]	@ (8001ff8 <HAL_GPIO_Init+0x338>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d025      	beq.n	8001ef2 <HAL_GPIO_Init+0x232>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a54      	ldr	r2, [pc, #336]	@ (8001ffc <HAL_GPIO_Init+0x33c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01f      	beq.n	8001eee <HAL_GPIO_Init+0x22e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a53      	ldr	r2, [pc, #332]	@ (8002000 <HAL_GPIO_Init+0x340>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d019      	beq.n	8001eea <HAL_GPIO_Init+0x22a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a52      	ldr	r2, [pc, #328]	@ (8002004 <HAL_GPIO_Init+0x344>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0x226>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a51      	ldr	r2, [pc, #324]	@ (8002008 <HAL_GPIO_Init+0x348>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_GPIO_Init+0x222>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a50      	ldr	r2, [pc, #320]	@ (800200c <HAL_GPIO_Init+0x34c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <HAL_GPIO_Init+0x21e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8002010 <HAL_GPIO_Init+0x350>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_GPIO_Init+0x21a>
 8001ed6:	2309      	movs	r3, #9
 8001ed8:	e012      	b.n	8001f00 <HAL_GPIO_Init+0x240>
 8001eda:	230a      	movs	r3, #10
 8001edc:	e010      	b.n	8001f00 <HAL_GPIO_Init+0x240>
 8001ede:	2308      	movs	r3, #8
 8001ee0:	e00e      	b.n	8001f00 <HAL_GPIO_Init+0x240>
 8001ee2:	2307      	movs	r3, #7
 8001ee4:	e00c      	b.n	8001f00 <HAL_GPIO_Init+0x240>
 8001ee6:	2306      	movs	r3, #6
 8001ee8:	e00a      	b.n	8001f00 <HAL_GPIO_Init+0x240>
 8001eea:	2305      	movs	r3, #5
 8001eec:	e008      	b.n	8001f00 <HAL_GPIO_Init+0x240>
 8001eee:	2304      	movs	r3, #4
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x240>
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e004      	b.n	8001f00 <HAL_GPIO_Init+0x240>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_Init+0x240>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x240>
 8001efe:	2300      	movs	r3, #0
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f002 0203 	and.w	r2, r2, #3
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	4093      	lsls	r3, r2
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f10:	4935      	ldr	r1, [pc, #212]	@ (8001fe8 <HAL_GPIO_Init+0x328>)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002014 <HAL_GPIO_Init+0x354>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f42:	4a34      	ldr	r2, [pc, #208]	@ (8002014 <HAL_GPIO_Init+0x354>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f48:	4b32      	ldr	r3, [pc, #200]	@ (8002014 <HAL_GPIO_Init+0x354>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f6c:	4a29      	ldr	r2, [pc, #164]	@ (8002014 <HAL_GPIO_Init+0x354>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f72:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <HAL_GPIO_Init+0x354>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f96:	4a1f      	ldr	r2, [pc, #124]	@ (8002014 <HAL_GPIO_Init+0x354>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <HAL_GPIO_Init+0x354>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc0:	4a14      	ldr	r2, [pc, #80]	@ (8002014 <HAL_GPIO_Init+0x354>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	f67f ae84 	bls.w	8001cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3724      	adds	r7, #36	@ 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40021400 	.word	0x40021400
 8002004:	40021800 	.word	0x40021800
 8002008:	40021c00 	.word	0x40021c00
 800200c:	40022000 	.word	0x40022000
 8002010:	40022400 	.word	0x40022400
 8002014:	40013c00 	.word	0x40013c00

08002018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002034:	e003      	b.n	800203e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	041a      	lsls	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	619a      	str	r2, [r3, #24]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af02      	add	r7, sp, #8
 8002050:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e059      	b.n	8002110 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f00a fcfe 	bl	800ca78 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2203      	movs	r2, #3
 8002080:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800208a:	d102      	bne.n	8002092 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 fdef 	bl	8006c7a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7c1a      	ldrb	r2, [r3, #16]
 80020a4:	f88d 2000 	strb.w	r2, [sp]
 80020a8:	3304      	adds	r3, #4
 80020aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ac:	f004 fd70 	bl	8006b90 <USB_CoreInit>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e026      	b.n	8002110 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2101      	movs	r1, #1
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 fde7 	bl	8006c9c <USB_SetCurrentMode>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e017      	b.n	8002110 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7c1a      	ldrb	r2, [r3, #16]
 80020e8:	f88d 2000 	strb.w	r2, [sp]
 80020ec:	3304      	adds	r3, #4
 80020ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f0:	f004 ff8a 	bl	8007008 <USB_HostInit>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e004      	b.n	8002110 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b08b      	sub	sp, #44	@ 0x2c
 800211c:	af04      	add	r7, sp, #16
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	4608      	mov	r0, r1
 8002122:	4611      	mov	r1, r2
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	70fb      	strb	r3, [r7, #3]
 800212a:	460b      	mov	r3, r1
 800212c:	70bb      	strb	r3, [r7, #2]
 800212e:	4613      	mov	r3, r2
 8002130:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002132:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002134:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_HCD_HC_Init+0x2c>
 8002140:	2302      	movs	r3, #2
 8002142:	e09d      	b.n	8002280 <HAL_HCD_HC_Init+0x168>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3319      	adds	r3, #25
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002160:	78fa      	ldrb	r2, [r7, #3]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3314      	adds	r3, #20
 8002170:	787a      	ldrb	r2, [r7, #1]
 8002172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	3315      	adds	r3, #21
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	3326      	adds	r3, #38	@ 0x26
 8002198:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800219c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	78bb      	ldrb	r3, [r7, #2]
 80021a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021a6:	b2d8      	uxtb	r0, r3
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3316      	adds	r3, #22
 80021b6:	4602      	mov	r2, r0
 80021b8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	4619      	mov	r1, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fbc8 	bl	8002954 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80021c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da0a      	bge.n	80021e2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3317      	adds	r3, #23
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e009      	b.n	80021f6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	3317      	adds	r3, #23
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f005 f868 	bl	80072d0 <USB_GetHostSpeed>
 8002200:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002202:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002206:	2b01      	cmp	r3, #1
 8002208:	d10b      	bne.n	8002222 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800220a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_HCD_HC_Init+0x10a>
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d104      	bne.n	8002222 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2bbc      	cmp	r3, #188	@ 0xbc
 800221c:	d901      	bls.n	8002222 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800221e:	23bc      	movs	r3, #188	@ 0xbc
 8002220:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	3318      	adds	r3, #24
 8002232:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002236:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	b298      	uxth	r0, r3
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	3328      	adds	r3, #40	@ 0x28
 800224c:	4602      	mov	r2, r0
 800224e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	b29b      	uxth	r3, r3
 8002258:	787c      	ldrb	r4, [r7, #1]
 800225a:	78ba      	ldrb	r2, [r7, #2]
 800225c:	78f9      	ldrb	r1, [r7, #3]
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	4623      	mov	r3, r4
 800226e:	f005 f857 	bl	8007320 <USB_HC_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd90      	pop	{r4, r7, pc}

08002288 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_HCD_HC_Halt+0x1e>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e00f      	b.n	80022c6 <HAL_HCD_HC_Halt+0x3e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f005 fbe9 	bl	8007a8e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	4608      	mov	r0, r1
 80022da:	4611      	mov	r1, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	4603      	mov	r3, r0
 80022e0:	70fb      	strb	r3, [r7, #3]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70bb      	strb	r3, [r7, #2]
 80022e6:	4613      	mov	r3, r2
 80022e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	3317      	adds	r3, #23
 80022fa:	78ba      	ldrb	r2, [r7, #2]
 80022fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	3326      	adds	r3, #38	@ 0x26
 800230e:	787a      	ldrb	r2, [r7, #1]
 8002310:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002312:	7c3b      	ldrb	r3, [r7, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d114      	bne.n	8002342 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	332a      	adds	r3, #42	@ 0x2a
 8002328:	2203      	movs	r2, #3
 800232a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800232c:	78fa      	ldrb	r2, [r7, #3]
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	3319      	adds	r3, #25
 800233c:	7f3a      	ldrb	r2, [r7, #28]
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e009      	b.n	8002356 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	332a      	adds	r3, #42	@ 0x2a
 8002352:	2202      	movs	r2, #2
 8002354:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002356:	787b      	ldrb	r3, [r7, #1]
 8002358:	2b03      	cmp	r3, #3
 800235a:	f200 8102 	bhi.w	8002562 <HAL_HCD_HC_SubmitRequest+0x292>
 800235e:	a201      	add	r2, pc, #4	@ (adr r2, 8002364 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	08002375 	.word	0x08002375
 8002368:	0800254d 	.word	0x0800254d
 800236c:	08002439 	.word	0x08002439
 8002370:	080024c3 	.word	0x080024c3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002374:	7c3b      	ldrb	r3, [r7, #16]
 8002376:	2b01      	cmp	r3, #1
 8002378:	f040 80f5 	bne.w	8002566 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800237c:	78bb      	ldrb	r3, [r7, #2]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12d      	bne.n	80023de <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002382:	8b3b      	ldrh	r3, [r7, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	333d      	adds	r3, #61	@ 0x3d
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	333d      	adds	r3, #61	@ 0x3d
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	332a      	adds	r3, #42	@ 0x2a
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80023c6:	e0ce      	b.n	8002566 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	332a      	adds	r3, #42	@ 0x2a
 80023d8:	2202      	movs	r2, #2
 80023da:	701a      	strb	r2, [r3, #0]
      break;
 80023dc:	e0c3      	b.n	8002566 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	331a      	adds	r3, #26
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	f040 80b8 	bne.w	8002566 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	333c      	adds	r3, #60	@ 0x3c
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	332a      	adds	r3, #42	@ 0x2a
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
      break;
 8002420:	e0a1      	b.n	8002566 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	332a      	adds	r3, #42	@ 0x2a
 8002432:	2202      	movs	r2, #2
 8002434:	701a      	strb	r2, [r3, #0]
      break;
 8002436:	e096      	b.n	8002566 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002438:	78bb      	ldrb	r3, [r7, #2]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d120      	bne.n	8002480 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	333d      	adds	r3, #61	@ 0x3d
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10a      	bne.n	800246a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	332a      	adds	r3, #42	@ 0x2a
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002468:	e07e      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	332a      	adds	r3, #42	@ 0x2a
 800247a:	2202      	movs	r2, #2
 800247c:	701a      	strb	r2, [r3, #0]
      break;
 800247e:	e073      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	333c      	adds	r3, #60	@ 0x3c
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	332a      	adds	r3, #42	@ 0x2a
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
      break;
 80024aa:	e05d      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	332a      	adds	r3, #42	@ 0x2a
 80024bc:	2202      	movs	r2, #2
 80024be:	701a      	strb	r2, [r3, #0]
      break;
 80024c0:	e052      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80024c2:	78bb      	ldrb	r3, [r7, #2]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d120      	bne.n	800250a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	333d      	adds	r3, #61	@ 0x3d
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10a      	bne.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	332a      	adds	r3, #42	@ 0x2a
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024f2:	e039      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	332a      	adds	r3, #42	@ 0x2a
 8002504:	2202      	movs	r2, #2
 8002506:	701a      	strb	r2, [r3, #0]
      break;
 8002508:	e02e      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	333c      	adds	r3, #60	@ 0x3c
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10a      	bne.n	8002536 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	332a      	adds	r3, #42	@ 0x2a
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
      break;
 8002534:	e018      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	332a      	adds	r3, #42	@ 0x2a
 8002546:	2202      	movs	r2, #2
 8002548:	701a      	strb	r2, [r3, #0]
      break;
 800254a:	e00d      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	332a      	adds	r3, #42	@ 0x2a
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
      break;
 8002560:	e002      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002562:	bf00      	nop
 8002564:	e000      	b.n	8002568 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002566:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	332c      	adds	r3, #44	@ 0x2c
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	8b39      	ldrh	r1, [r7, #24]
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4403      	add	r3, r0
 800258c:	3334      	adds	r3, #52	@ 0x34
 800258e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	334c      	adds	r3, #76	@ 0x4c
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	3338      	adds	r3, #56	@ 0x38
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3315      	adds	r3, #21
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	334d      	adds	r3, #77	@ 0x4d
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	3310      	adds	r3, #16
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	1d19      	adds	r1, r3, #4
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	799b      	ldrb	r3, [r3, #6]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f004 ffbc 	bl	8007578 <USB_HC_StartXfer>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop

0800260c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f004 fcb0 	bl	8006f88 <USB_GetMode>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	f040 80fb 	bne.w	8002826 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f004 fc73 	bl	8006f20 <USB_ReadInterrupts>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80f1 	beq.w	8002824 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f004 fc6a 	bl	8006f20 <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002652:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002656:	d104      	bne.n	8002662 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002660:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f004 fc5a 	bl	8006f20 <USB_ReadInterrupts>
 800266c:	4603      	mov	r3, r0
 800266e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002676:	d104      	bne.n	8002682 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002680:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fc4a 	bl	8006f20 <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002692:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002696:	d104      	bne.n	80026a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80026a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fc3a 	bl	8006f20 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d103      	bne.n	80026be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2202      	movs	r2, #2
 80026bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f004 fc2c 	bl	8006f20 <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026d2:	d120      	bne.n	8002716 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80026dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d113      	bne.n	8002716 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80026ee:	2110      	movs	r1, #16
 80026f0:	6938      	ldr	r0, [r7, #16]
 80026f2:	f004 fb1f 	bl	8006d34 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80026f6:	6938      	ldr	r0, [r7, #16]
 80026f8:	f004 fb4e 	bl	8006d98 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7a5b      	ldrb	r3, [r3, #9]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d105      	bne.n	8002710 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	4618      	mov	r0, r3
 800270c:	f004 fd40 	bl	8007190 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f00a fa2b 	bl	800cb6c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f004 fc00 	bl	8006f20 <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002726:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800272a:	d102      	bne.n	8002732 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f001 fd4d 	bl	80041cc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f004 fbf2 	bl	8006f20 <USB_ReadInterrupts>
 800273c:	4603      	mov	r3, r0
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b08      	cmp	r3, #8
 8002744:	d106      	bne.n	8002754 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f00a f9f4 	bl	800cb34 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2208      	movs	r2, #8
 8002752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f004 fbe1 	bl	8006f20 <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002764:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002768:	d139      	bne.n	80027de <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f005 f97c 	bl	8007a6c <USB_HC_ReadInterrupt>
 8002774:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e025      	b.n	80027c8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d018      	beq.n	80027c2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027a6:	d106      	bne.n	80027b6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	4619      	mov	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f905 	bl	80029be <HCD_HC_IN_IRQHandler>
 80027b4:	e005      	b.n	80027c2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 ff67 	bl	8003690 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	795b      	ldrb	r3, [r3, #5]
 80027cc:	461a      	mov	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d3d3      	bcc.n	800277c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 fb9c 	bl	8006f20 <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d101      	bne.n	80027f6 <HAL_HCD_IRQHandler+0x1ea>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_HCD_IRQHandler+0x1ec>
 80027f6:	2300      	movs	r3, #0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d014      	beq.n	8002826 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0210 	bic.w	r2, r2, #16
 800280a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f001 fbfe 	bl	800400e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0210 	orr.w	r2, r2, #16
 8002820:	619a      	str	r2, [r3, #24]
 8002822:	e000      	b.n	8002826 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002824:	bf00      	nop
    }
  }
}
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_HCD_Start+0x16>
 800283e:	2302      	movs	r3, #2
 8002840:	e013      	b.n	800286a <HAL_HCD_Start+0x3e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2101      	movs	r1, #1
 8002850:	4618      	mov	r0, r3
 8002852:	f004 fd04 	bl	800725e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f004 f9fc 	bl	8006c58 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_HCD_Stop+0x16>
 8002884:	2302      	movs	r3, #2
 8002886:	e00d      	b.n	80028a4 <HAL_HCD_Stop+0x32>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f005 fa57 	bl	8007d48 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f004 fca6 	bl	800720a <USB_ResetPort>
 80028be:	4603      	mov	r3, r0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334c      	adds	r3, #76	@ 0x4c
 80028e4:	781b      	ldrb	r3, [r3, #0]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3338      	adds	r3, #56	@ 0x38
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f004 fce8 	bl	80072fe <USB_GetCurrentFrame>
 800292e:	4603      	mov	r3, r0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f004 fcc3 	bl	80072d0 <USB_GetHostSpeed>
 800294a:	4603      	mov	r3, r0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	331a      	adds	r3, #26
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	331b      	adds	r3, #27
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	3325      	adds	r3, #37	@ 0x25
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3324      	adds	r3, #36	@ 0x24
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 fab2 	bl	8006f46 <USB_ReadChInterrupts>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d11a      	bne.n	8002a22 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f8:	461a      	mov	r2, r3
 80029fa:	2304      	movs	r3, #4
 80029fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	334d      	adds	r3, #77	@ 0x4d
 8002a0e:	2207      	movs	r2, #7
 8002a10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f005 f837 	bl	8007a8e <USB_HC_Halt>
 8002a20:	e09e      	b.n	8002b60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 fa8b 	bl	8006f46 <USB_ReadChInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a3a:	d11b      	bne.n	8002a74 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	334d      	adds	r3, #77	@ 0x4d
 8002a60:	2208      	movs	r2, #8
 8002a62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f005 f80e 	bl	8007a8e <USB_HC_Halt>
 8002a72:	e075      	b.n	8002b60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f004 fa62 	bl	8006f46 <USB_ReadChInterrupts>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d11a      	bne.n	8002ac2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a8c:	78fb      	ldrb	r3, [r7, #3]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2308      	movs	r3, #8
 8002a9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	334d      	adds	r3, #77	@ 0x4d
 8002aae:	2206      	movs	r2, #6
 8002ab0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 ffe7 	bl	8007a8e <USB_HC_Halt>
 8002ac0:	e04e      	b.n	8002b60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 fa3b 	bl	8006f46 <USB_ReadChInterrupts>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ada:	d11b      	bne.n	8002b14 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334d      	adds	r3, #77	@ 0x4d
 8002b00:	2209      	movs	r2, #9
 8002b02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 ffbe 	bl	8007a8e <USB_HC_Halt>
 8002b12:	e025      	b.n	8002b60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f004 fa12 	bl	8006f46 <USB_ReadChInterrupts>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b28:	2b80      	cmp	r3, #128	@ 0x80
 8002b2a:	d119      	bne.n	8002b60 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	334d      	adds	r3, #77	@ 0x4d
 8002b4e:	2207      	movs	r2, #7
 8002b50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f004 ff97 	bl	8007a8e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 f9ec 	bl	8006f46 <USB_ReadChInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b78:	d112      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 ff83 	bl	8007a8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b9a:	6093      	str	r3, [r2, #8]
 8002b9c:	f000 bd75 	b.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 f9cc 	bl	8006f46 <USB_ReadChInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 8128 	bne.w	8002e0a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2320      	movs	r3, #32
 8002bca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	331b      	adds	r3, #27
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d119      	bne.n	8002c16 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	331b      	adds	r3, #27
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	0151      	lsls	r1, r2, #5
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	440a      	add	r2, r1
 8002c0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c14:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	799b      	ldrb	r3, [r3, #6]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01b      	beq.n	8002c56 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3330      	adds	r3, #48	@ 0x30
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	1ac9      	subs	r1, r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4403      	add	r3, r0
 8002c52:	3338      	adds	r3, #56	@ 0x38
 8002c54:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	334d      	adds	r3, #77	@ 0x4d
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3344      	adds	r3, #68	@ 0x44
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3326      	adds	r3, #38	@ 0x26
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3326      	adds	r3, #38	@ 0x26
 8002cb6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d110      	bne.n	8002cde <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 fee2 	bl	8007a8e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2310      	movs	r3, #16
 8002cda:	6093      	str	r3, [r2, #8]
 8002cdc:	e03d      	b.n	8002d5a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	3326      	adds	r3, #38	@ 0x26
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d00a      	beq.n	8002d0a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	3326      	adds	r3, #38	@ 0x26
 8002d04:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d127      	bne.n	8002d5a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	0151      	lsls	r1, r2, #5
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	440a      	add	r2, r1
 8002d20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d28:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	334c      	adds	r3, #76	@ 0x4c
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	334c      	adds	r3, #76	@ 0x4c
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	4619      	mov	r1, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f009 ff17 	bl	800cb88 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	799b      	ldrb	r3, [r3, #6]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d13b      	bne.n	8002dda <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3338      	adds	r3, #56	@ 0x38
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4403      	add	r3, r0
 8002d82:	3328      	adds	r3, #40	@ 0x28
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	440b      	add	r3, r1
 8002d88:	1e59      	subs	r1, r3, #1
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4403      	add	r3, r0
 8002d98:	3328      	adds	r3, #40	@ 0x28
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8470 	beq.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	333c      	adds	r3, #60	@ 0x3c
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	f083 0301 	eor.w	r3, r3, #1
 8002dc2:	b2d8      	uxtb	r0, r3
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	333c      	adds	r3, #60	@ 0x3c
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	f000 bc58 	b.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	333c      	adds	r3, #60	@ 0x3c
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	f083 0301 	eor.w	r3, r3, #1
 8002df2:	b2d8      	uxtb	r0, r3
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	333c      	adds	r3, #60	@ 0x3c
 8002e02:	4602      	mov	r2, r0
 8002e04:	701a      	strb	r2, [r3, #0]
 8002e06:	f000 bc40 	b.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f004 f897 	bl	8006f46 <USB_ReadChInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d131      	bne.n	8002e86 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2320      	movs	r3, #32
 8002e32:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	331a      	adds	r3, #26
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f040 841f 	bne.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	331b      	adds	r3, #27
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	334d      	adds	r3, #77	@ 0x4d
 8002e70:	2203      	movs	r2, #3
 8002e72:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f004 fe06 	bl	8007a8e <USB_HC_Halt>
 8002e82:	f000 bc02 	b.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 f859 	bl	8006f46 <USB_ReadChInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	f040 8305 	bne.w	80034aa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eac:	461a      	mov	r2, r3
 8002eae:	2302      	movs	r3, #2
 8002eb0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	334d      	adds	r3, #77	@ 0x4d
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d114      	bne.n	8002ef2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	334d      	adds	r3, #77	@ 0x4d
 8002ed8:	2202      	movs	r2, #2
 8002eda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	334c      	adds	r3, #76	@ 0x4c
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e2cc      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	334d      	adds	r3, #77	@ 0x4d
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b06      	cmp	r3, #6
 8002f06:	d114      	bne.n	8002f32 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	334d      	adds	r3, #77	@ 0x4d
 8002f18:	2202      	movs	r2, #2
 8002f1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	334c      	adds	r3, #76	@ 0x4c
 8002f2c:	2205      	movs	r2, #5
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e2ac      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	334d      	adds	r3, #77	@ 0x4d
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b07      	cmp	r3, #7
 8002f46:	d00b      	beq.n	8002f60 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	334d      	adds	r3, #77	@ 0x4d
 8002f58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f5a:	2b09      	cmp	r3, #9
 8002f5c:	f040 80a6 	bne.w	80030ac <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	334d      	adds	r3, #77	@ 0x4d
 8002f70:	2202      	movs	r2, #2
 8002f72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3344      	adds	r3, #68	@ 0x44
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4403      	add	r3, r0
 8002f94:	3344      	adds	r3, #68	@ 0x44
 8002f96:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3344      	adds	r3, #68	@ 0x44
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d943      	bls.n	8003036 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3344      	adds	r3, #68	@ 0x44
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	331a      	adds	r3, #26
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d123      	bne.n	8003020 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	331b      	adds	r3, #27
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	331c      	adds	r3, #28
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	0151      	lsls	r1, r2, #5
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	440a      	add	r2, r1
 8003016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800301a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800301e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334c      	adds	r3, #76	@ 0x4c
 8003030:	2204      	movs	r2, #4
 8003032:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003034:	e229      	b.n	800348a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	334c      	adds	r3, #76	@ 0x4c
 8003046:	2202      	movs	r2, #2
 8003048:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3326      	adds	r3, #38	@ 0x26
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00b      	beq.n	8003078 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3326      	adds	r3, #38	@ 0x26
 8003070:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003072:	2b02      	cmp	r3, #2
 8003074:	f040 8209 	bne.w	800348a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800308e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003096:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030aa:	e1ee      	b.n	800348a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	334d      	adds	r3, #77	@ 0x4d
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b05      	cmp	r3, #5
 80030c0:	f040 80c8 	bne.w	8003254 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	334d      	adds	r3, #77	@ 0x4d
 80030d4:	2202      	movs	r2, #2
 80030d6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	331b      	adds	r3, #27
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	f040 81ce 	bne.w	800348c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3326      	adds	r3, #38	@ 0x26
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d16b      	bne.n	80031de <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3348      	adds	r3, #72	@ 0x48
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1c59      	adds	r1, r3, #1
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4403      	add	r3, r0
 8003126:	3348      	adds	r3, #72	@ 0x48
 8003128:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	3348      	adds	r3, #72	@ 0x48
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d943      	bls.n	80031c8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3348      	adds	r3, #72	@ 0x48
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	331b      	adds	r3, #27
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3344      	adds	r3, #68	@ 0x44
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d809      	bhi.n	8003192 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	331c      	adds	r3, #28
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4413      	add	r3, r2
 800319a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	0151      	lsls	r1, r2, #5
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	440a      	add	r2, r1
 80031a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	334c      	adds	r3, #76	@ 0x4c
 80031c2:	2204      	movs	r2, #4
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e014      	b.n	80031f2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	334c      	adds	r3, #76	@ 0x4c
 80031d8:	2202      	movs	r2, #2
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	e009      	b.n	80031f2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	334c      	adds	r3, #76	@ 0x4c
 80031ee:	2202      	movs	r2, #2
 80031f0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3326      	adds	r3, #38	@ 0x26
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3326      	adds	r3, #38	@ 0x26
 8003218:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800321a:	2b02      	cmp	r3, #2
 800321c:	f040 8136 	bne.w	800348c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003236:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800323e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800324c:	461a      	mov	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e11b      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	334d      	adds	r3, #77	@ 0x4d
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b03      	cmp	r3, #3
 8003268:	f040 8081 	bne.w	800336e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	334d      	adds	r3, #77	@ 0x4d
 800327c:	2202      	movs	r2, #2
 800327e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	331b      	adds	r3, #27
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b01      	cmp	r3, #1
 8003294:	f040 80fa 	bne.w	800348c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	334c      	adds	r3, #76	@ 0x4c
 80032a8:	2202      	movs	r2, #2
 80032aa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	0151      	lsls	r1, r2, #5
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	440a      	add	r2, r1
 80032c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ca:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	0151      	lsls	r1, r2, #5
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	440a      	add	r2, r1
 80032e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032ea:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	0151      	lsls	r1, r2, #5
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	440a      	add	r2, r1
 8003302:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003306:	f023 0320 	bic.w	r3, r3, #32
 800330a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	3326      	adds	r3, #38	@ 0x26
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3326      	adds	r3, #38	@ 0x26
 8003332:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003334:	2b02      	cmp	r3, #2
 8003336:	f040 80a9 	bne.w	800348c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003350:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003358:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4413      	add	r3, r2
 8003362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003366:	461a      	mov	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e08e      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	334d      	adds	r3, #77	@ 0x4d
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d143      	bne.n	800340c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	334d      	adds	r3, #77	@ 0x4d
 8003394:	2202      	movs	r2, #2
 8003396:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	334c      	adds	r3, #76	@ 0x4c
 80033a8:	2202      	movs	r2, #2
 80033aa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3326      	adds	r3, #38	@ 0x26
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3326      	adds	r3, #38	@ 0x26
 80033d2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d159      	bne.n	800348c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003404:	461a      	mov	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e03f      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	334d      	adds	r3, #77	@ 0x4d
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b08      	cmp	r3, #8
 8003420:	d126      	bne.n	8003470 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	334d      	adds	r3, #77	@ 0x4d
 8003432:	2202      	movs	r2, #2
 8003434:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3344      	adds	r3, #68	@ 0x44
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	1c59      	adds	r1, r3, #1
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4403      	add	r3, r0
 8003456:	3344      	adds	r3, #68	@ 0x44
 8003458:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334c      	adds	r3, #76	@ 0x4c
 800346a:	2204      	movs	r2, #4
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e00d      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334d      	adds	r3, #77	@ 0x4d
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b02      	cmp	r3, #2
 8003484:	f000 8100 	beq.w	8003688 <HCD_HC_IN_IRQHandler+0xcca>
 8003488:	e000      	b.n	800348c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800348a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	334c      	adds	r3, #76	@ 0x4c
 800349c:	781a      	ldrb	r2, [r3, #0]
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f009 fb70 	bl	800cb88 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034a8:	e0ef      	b.n	800368a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 fd47 	bl	8006f46 <USB_ReadChInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b40      	cmp	r3, #64	@ 0x40
 80034c0:	d12f      	bne.n	8003522 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ce:	461a      	mov	r2, r3
 80034d0:	2340      	movs	r3, #64	@ 0x40
 80034d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	334d      	adds	r3, #77	@ 0x4d
 80034e4:	2205      	movs	r2, #5
 80034e6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	331a      	adds	r3, #26
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3344      	adds	r3, #68	@ 0x44
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f004 fab7 	bl	8007a8e <USB_HC_Halt>
 8003520:	e0b3      	b.n	800368a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	4611      	mov	r1, r2
 800352a:	4618      	mov	r0, r3
 800352c:	f003 fd0b 	bl	8006f46 <USB_ReadChInterrupts>
 8003530:	4603      	mov	r3, r0
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b10      	cmp	r3, #16
 8003538:	f040 80a7 	bne.w	800368a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3326      	adds	r3, #38	@ 0x26
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d11b      	bne.n	800358a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3344      	adds	r3, #68	@ 0x44
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	334d      	adds	r3, #77	@ 0x4d
 8003576:	2204      	movs	r2, #4
 8003578:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f004 fa83 	bl	8007a8e <USB_HC_Halt>
 8003588:	e03f      	b.n	800360a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	3326      	adds	r3, #38	@ 0x26
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	3326      	adds	r3, #38	@ 0x26
 80035b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d129      	bne.n	800360a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3344      	adds	r3, #68	@ 0x44
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	799b      	ldrb	r3, [r3, #6]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HCD_HC_IN_IRQHandler+0xc2a>
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	331b      	adds	r3, #27
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d110      	bne.n	800360a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	334d      	adds	r3, #77	@ 0x4d
 80035f8:	2204      	movs	r2, #4
 80035fa:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f004 fa42 	bl	8007a8e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	331b      	adds	r3, #27
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d129      	bne.n	8003674 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	331b      	adds	r3, #27
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4413      	add	r3, r2
 800363c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	0151      	lsls	r1, r2, #5
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	440a      	add	r2, r1
 800364a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800364e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003652:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4413      	add	r3, r2
 800365c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	0151      	lsls	r1, r2, #5
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	440a      	add	r2, r1
 800366a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800366e:	f043 0320 	orr.w	r3, r3, #32
 8003672:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003680:	461a      	mov	r2, r3
 8003682:	2310      	movs	r3, #16
 8003684:	6093      	str	r3, [r2, #8]
 8003686:	e000      	b.n	800368a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003688:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	4611      	mov	r1, r2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 fc49 	bl	8006f46 <USB_ReadChInterrupts>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d11b      	bne.n	80036f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ca:	461a      	mov	r2, r3
 80036cc:	2304      	movs	r3, #4
 80036ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036d0:	78fa      	ldrb	r2, [r7, #3]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	334d      	adds	r3, #77	@ 0x4d
 80036e0:	2207      	movs	r2, #7
 80036e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f004 f9ce 	bl	8007a8e <USB_HC_Halt>
 80036f2:	f000 bc89 	b.w	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f003 fc21 	bl	8006f46 <USB_ReadChInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b20      	cmp	r3, #32
 800370c:	f040 8082 	bne.w	8003814 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800371c:	461a      	mov	r2, r3
 800371e:	2320      	movs	r3, #32
 8003720:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	3319      	adds	r3, #25
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d124      	bne.n	8003782 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3319      	adds	r3, #25
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	334c      	adds	r3, #76	@ 0x4c
 800375c:	2202      	movs	r2, #2
 800375e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	334d      	adds	r3, #77	@ 0x4d
 8003770:	2203      	movs	r2, #3
 8003772:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f004 f986 	bl	8007a8e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	331a      	adds	r3, #26
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	f040 8437 	bne.w	8004008 <HCD_HC_OUT_IRQHandler+0x978>
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	331b      	adds	r3, #27
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f040 842b 	bne.w	8004008 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	3326      	adds	r3, #38	@ 0x26
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d009      	beq.n	80037dc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	331b      	adds	r3, #27
 80037d8:	2201      	movs	r2, #1
 80037da:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	334d      	adds	r3, #77	@ 0x4d
 80037ec:	2203      	movs	r2, #3
 80037ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 f948 	bl	8007a8e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3344      	adds	r3, #68	@ 0x44
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	e3f9      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f003 fb92 	bl	8006f46 <USB_ReadChInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800382c:	d111      	bne.n	8003852 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383a:	461a      	mov	r2, r3
 800383c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003840:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f004 f91f 	bl	8007a8e <USB_HC_Halt>
 8003850:	e3da      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f003 fb73 	bl	8006f46 <USB_ReadChInterrupts>
 8003860:	4603      	mov	r3, r0
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d168      	bne.n	800393c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	3344      	adds	r3, #68	@ 0x44
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f003 fb5d 	bl	8006f46 <USB_ReadChInterrupts>
 800388c:	4603      	mov	r3, r0
 800388e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003892:	2b40      	cmp	r3, #64	@ 0x40
 8003894:	d112      	bne.n	80038bc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3319      	adds	r3, #25
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b6:	461a      	mov	r2, r3
 80038b8:	2340      	movs	r3, #64	@ 0x40
 80038ba:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	331b      	adds	r3, #27
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d019      	beq.n	8003906 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	331b      	adds	r3, #27
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	0151      	lsls	r1, r2, #5
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	440a      	add	r2, r1
 80038fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003904:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4413      	add	r3, r2
 800390e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003912:	461a      	mov	r2, r3
 8003914:	2301      	movs	r3, #1
 8003916:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	334d      	adds	r3, #77	@ 0x4d
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f004 f8aa 	bl	8007a8e <USB_HC_Halt>
 800393a:	e365      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f003 fafe 	bl	8006f46 <USB_ReadChInterrupts>
 800394a:	4603      	mov	r3, r0
 800394c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003950:	2b40      	cmp	r3, #64	@ 0x40
 8003952:	d139      	bne.n	80039c8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	334d      	adds	r3, #77	@ 0x4d
 8003964:	2205      	movs	r2, #5
 8003966:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	331a      	adds	r3, #26
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3319      	adds	r3, #25
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	3344      	adds	r3, #68	@ 0x44
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f004 f86d 	bl	8007a8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c0:	461a      	mov	r2, r3
 80039c2:	2340      	movs	r3, #64	@ 0x40
 80039c4:	6093      	str	r3, [r2, #8]
 80039c6:	e31f      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 fab8 	bl	8006f46 <USB_ReadChInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d11a      	bne.n	8003a16 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ec:	461a      	mov	r2, r3
 80039ee:	2308      	movs	r3, #8
 80039f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	334d      	adds	r3, #77	@ 0x4d
 8003a02:	2206      	movs	r2, #6
 8003a04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 f83d 	bl	8007a8e <USB_HC_Halt>
 8003a14:	e2f8      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f003 fa91 	bl	8006f46 <USB_ReadChInterrupts>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d144      	bne.n	8003ab8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3344      	adds	r3, #68	@ 0x44
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	334d      	adds	r3, #77	@ 0x4d
 8003a52:	2204      	movs	r2, #4
 8003a54:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	3319      	adds	r3, #25
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d114      	bne.n	8003a96 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3318      	adds	r3, #24
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	3319      	adds	r3, #25
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f003 fff5 	bl	8007a8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	6093      	str	r3, [r2, #8]
 8003ab6:	e2a7      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f003 fa40 	bl	8006f46 <USB_ReadChInterrupts>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003acc:	2b80      	cmp	r3, #128	@ 0x80
 8003ace:	f040 8083 	bne.w	8003bd8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	799b      	ldrb	r3, [r3, #6]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d111      	bne.n	8003afe <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	334d      	adds	r3, #77	@ 0x4d
 8003aea:	2207      	movs	r2, #7
 8003aec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f003 ffc9 	bl	8007a8e <USB_HC_Halt>
 8003afc:	e062      	b.n	8003bc4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3344      	adds	r3, #68	@ 0x44
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	1c59      	adds	r1, r3, #1
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4403      	add	r3, r0
 8003b1e:	3344      	adds	r3, #68	@ 0x44
 8003b20:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	3344      	adds	r3, #68	@ 0x44
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d922      	bls.n	8003b7e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	3344      	adds	r3, #68	@ 0x44
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	334c      	adds	r3, #76	@ 0x4c
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	334c      	adds	r3, #76	@ 0x4c
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	4619      	mov	r1, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f009 f806 	bl	800cb88 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b7c:	e022      	b.n	8003bc4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	334c      	adds	r3, #76	@ 0x4c
 8003b8e:	2202      	movs	r2, #2
 8003b90:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ba8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bb0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2380      	movs	r3, #128	@ 0x80
 8003bd4:	6093      	str	r3, [r2, #8]
 8003bd6:	e217      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f003 f9b0 	bl	8006f46 <USB_ReadChInterrupts>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf0:	d11b      	bne.n	8003c2a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	334d      	adds	r3, #77	@ 0x4d
 8003c02:	2209      	movs	r2, #9
 8003c04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f003 ff3d 	bl	8007a8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c20:	461a      	mov	r2, r3
 8003c22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c26:	6093      	str	r3, [r2, #8]
 8003c28:	e1ee      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f003 f987 	bl	8006f46 <USB_ReadChInterrupts>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	f040 81df 	bne.w	8004002 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c50:	461a      	mov	r2, r3
 8003c52:	2302      	movs	r3, #2
 8003c54:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	334d      	adds	r3, #77	@ 0x4d
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	f040 8093 	bne.w	8003d94 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	334d      	adds	r3, #77	@ 0x4d
 8003c7e:	2202      	movs	r2, #2
 8003c80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	334c      	adds	r3, #76	@ 0x4c
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	3326      	adds	r3, #38	@ 0x26
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d00b      	beq.n	8003cc4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3326      	adds	r3, #38	@ 0x26
 8003cbc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	f040 8190 	bne.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	799b      	ldrb	r3, [r3, #6]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d115      	bne.n	8003cf8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	333d      	adds	r3, #61	@ 0x3d
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	f083 0301 	eor.w	r3, r3, #1
 8003ce4:	b2d8      	uxtb	r0, r3
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	333d      	adds	r3, #61	@ 0x3d
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	799b      	ldrb	r3, [r3, #6]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	f040 8171 	bne.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3334      	adds	r3, #52	@ 0x34
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8165 	beq.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3334      	adds	r3, #52	@ 0x34
 8003d2a:	6819      	ldr	r1, [r3, #0]
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4403      	add	r3, r0
 8003d3a:	3328      	adds	r3, #40	@ 0x28
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	440b      	add	r3, r1
 8003d40:	1e59      	subs	r1, r3, #1
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4403      	add	r3, r0
 8003d50:	3328      	adds	r3, #40	@ 0x28
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d58:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 813f 	beq.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	333d      	adds	r3, #61	@ 0x3d
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	f083 0301 	eor.w	r3, r3, #1
 8003d7e:	b2d8      	uxtb	r0, r3
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	333d      	adds	r3, #61	@ 0x3d
 8003d8e:	4602      	mov	r2, r0
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e127      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	334d      	adds	r3, #77	@ 0x4d
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d120      	bne.n	8003dec <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	334d      	adds	r3, #77	@ 0x4d
 8003dba:	2202      	movs	r2, #2
 8003dbc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	331b      	adds	r3, #27
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f040 8107 	bne.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	334c      	adds	r3, #76	@ 0x4c
 8003de6:	2202      	movs	r2, #2
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e0fb      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	334d      	adds	r3, #77	@ 0x4d
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d13a      	bne.n	8003e78 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	334d      	adds	r3, #77	@ 0x4d
 8003e12:	2202      	movs	r2, #2
 8003e14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	334c      	adds	r3, #76	@ 0x4c
 8003e26:	2202      	movs	r2, #2
 8003e28:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	331b      	adds	r3, #27
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	f040 80d1 	bne.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	331b      	adds	r3, #27
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e74:	6053      	str	r3, [r2, #4]
 8003e76:	e0b5      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	334d      	adds	r3, #77	@ 0x4d
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d114      	bne.n	8003eb8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	334d      	adds	r3, #77	@ 0x4d
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	334c      	adds	r3, #76	@ 0x4c
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e095      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	334d      	adds	r3, #77	@ 0x4d
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b06      	cmp	r3, #6
 8003ecc:	d114      	bne.n	8003ef8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	334d      	adds	r3, #77	@ 0x4d
 8003ede:	2202      	movs	r2, #2
 8003ee0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	334c      	adds	r3, #76	@ 0x4c
 8003ef2:	2205      	movs	r2, #5
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e075      	b.n	8003fe4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	334d      	adds	r3, #77	@ 0x4d
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b07      	cmp	r3, #7
 8003f0c:	d00a      	beq.n	8003f24 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	334d      	adds	r3, #77	@ 0x4d
 8003f1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f20:	2b09      	cmp	r3, #9
 8003f22:	d170      	bne.n	8004006 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	334d      	adds	r3, #77	@ 0x4d
 8003f34:	2202      	movs	r2, #2
 8003f36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	3344      	adds	r3, #68	@ 0x44
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1c59      	adds	r1, r3, #1
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4403      	add	r3, r0
 8003f58:	3344      	adds	r3, #68	@ 0x44
 8003f5a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	3344      	adds	r3, #68	@ 0x44
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d914      	bls.n	8003f9c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	3344      	adds	r3, #68	@ 0x44
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	334c      	adds	r3, #76	@ 0x4c
 8003f96:	2204      	movs	r2, #4
 8003f98:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f9a:	e022      	b.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	334c      	adds	r3, #76	@ 0x4c
 8003fac:	2202      	movs	r2, #2
 8003fae:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fc6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fce:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fe2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	334c      	adds	r3, #76	@ 0x4c
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f008 fdc4 	bl	800cb88 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004000:	e002      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004006:	bf00      	nop
  }
}
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b08a      	sub	sp, #40	@ 0x28
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	0c5b      	lsrs	r3, r3, #17
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004042:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d004      	beq.n	8004054 <HCD_RXQLVL_IRQHandler+0x46>
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b05      	cmp	r3, #5
 800404e:	f000 80b6 	beq.w	80041be <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004052:	e0b7      	b.n	80041c4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80b3 	beq.w	80041c2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4613      	mov	r3, r2
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	332c      	adds	r3, #44	@ 0x2c
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80a7 	beq.w	80041c2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	3338      	adds	r3, #56	@ 0x38
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	18d1      	adds	r1, r2, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4403      	add	r3, r0
 8004098:	3334      	adds	r3, #52	@ 0x34
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4299      	cmp	r1, r3
 800409e:	f200 8083 	bhi.w	80041a8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	332c      	adds	r3, #44	@ 0x2c
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	b292      	uxth	r2, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	f002 fed7 	bl	8006e70 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4613      	mov	r3, r2
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	332c      	adds	r3, #44	@ 0x2c
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	18d1      	adds	r1, r2, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4403      	add	r3, r0
 80040e6:	332c      	adds	r3, #44	@ 0x2c
 80040e8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	3338      	adds	r3, #56	@ 0x38
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	18d1      	adds	r1, r2, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4403      	add	r3, r0
 800410e:	3338      	adds	r3, #56	@ 0x38
 8004110:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	4413      	add	r3, r2
 800411a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	0cdb      	lsrs	r3, r3, #19
 8004122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004126:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	3328      	adds	r3, #40	@ 0x28
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4293      	cmp	r3, r2
 8004140:	d13f      	bne.n	80041c2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d03c      	beq.n	80041c2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	4413      	add	r3, r2
 8004150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800415e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004166:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	4413      	add	r3, r2
 8004170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004174:	461a      	mov	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	333c      	adds	r3, #60	@ 0x3c
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	f083 0301 	eor.w	r3, r3, #1
 8004190:	b2d8      	uxtb	r0, r3
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4613      	mov	r3, r2
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	333c      	adds	r3, #60	@ 0x3c
 80041a2:	4602      	mov	r2, r0
 80041a4:	701a      	strb	r2, [r3, #0]
      break;
 80041a6:	e00c      	b.n	80041c2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4613      	mov	r3, r2
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	334c      	adds	r3, #76	@ 0x4c
 80041b8:	2204      	movs	r2, #4
 80041ba:	701a      	strb	r2, [r3, #0]
      break;
 80041bc:	e001      	b.n	80041c2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80041be:	bf00      	nop
 80041c0:	e000      	b.n	80041c4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80041c2:	bf00      	nop
  }
}
 80041c4:	bf00      	nop
 80041c6:	3728      	adds	r7, #40	@ 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80041f8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b02      	cmp	r3, #2
 8004202:	d10b      	bne.n	800421c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d102      	bne.n	8004214 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f008 fc9e 	bl	800cb50 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f043 0302 	orr.w	r3, r3, #2
 800421a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b08      	cmp	r3, #8
 8004224:	d132      	bne.n	800428c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f043 0308 	orr.w	r3, r3, #8
 800422c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b04      	cmp	r3, #4
 8004236:	d126      	bne.n	8004286 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	7a5b      	ldrb	r3, [r3, #9]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d113      	bne.n	8004268 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004246:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800424a:	d106      	bne.n	800425a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f002 ff9c 	bl	8007190 <USB_InitFSLSPClkSel>
 8004258:	e011      	b.n	800427e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2101      	movs	r1, #1
 8004260:	4618      	mov	r0, r3
 8004262:	f002 ff95 	bl	8007190 <USB_InitFSLSPClkSel>
 8004266:	e00a      	b.n	800427e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	79db      	ldrb	r3, [r3, #7]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d106      	bne.n	800427e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004276:	461a      	mov	r2, r3
 8004278:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800427c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f008 fc94 	bl	800cbac <HAL_HCD_PortEnabled_Callback>
 8004284:	e002      	b.n	800428c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f008 fc9e 	bl	800cbc8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b20      	cmp	r3, #32
 8004294:	d103      	bne.n	800429e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f043 0320 	orr.w	r3, r3, #32
 800429c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042a4:	461a      	mov	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6013      	str	r3, [r2, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e12b      	b.n	800451e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fc fc26 	bl	8000b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2224      	movs	r2, #36	@ 0x24
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004318:	f001 f964 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 800431c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4a81      	ldr	r2, [pc, #516]	@ (8004528 <HAL_I2C_Init+0x274>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d807      	bhi.n	8004338 <HAL_I2C_Init+0x84>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a80      	ldr	r2, [pc, #512]	@ (800452c <HAL_I2C_Init+0x278>)
 800432c:	4293      	cmp	r3, r2
 800432e:	bf94      	ite	ls
 8004330:	2301      	movls	r3, #1
 8004332:	2300      	movhi	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e006      	b.n	8004346 <HAL_I2C_Init+0x92>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a7d      	ldr	r2, [pc, #500]	@ (8004530 <HAL_I2C_Init+0x27c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	bf94      	ite	ls
 8004340:	2301      	movls	r3, #1
 8004342:	2300      	movhi	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0e7      	b.n	800451e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a78      	ldr	r2, [pc, #480]	@ (8004534 <HAL_I2C_Init+0x280>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	0c9b      	lsrs	r3, r3, #18
 8004358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4a6a      	ldr	r2, [pc, #424]	@ (8004528 <HAL_I2C_Init+0x274>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d802      	bhi.n	8004388 <HAL_I2C_Init+0xd4>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3301      	adds	r3, #1
 8004386:	e009      	b.n	800439c <HAL_I2C_Init+0xe8>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	4a69      	ldr	r2, [pc, #420]	@ (8004538 <HAL_I2C_Init+0x284>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	099b      	lsrs	r3, r3, #6
 800439a:	3301      	adds	r3, #1
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80043ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	495c      	ldr	r1, [pc, #368]	@ (8004528 <HAL_I2C_Init+0x274>)
 80043b8:	428b      	cmp	r3, r1
 80043ba:	d819      	bhi.n	80043f0 <HAL_I2C_Init+0x13c>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1e59      	subs	r1, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ca:	1c59      	adds	r1, r3, #1
 80043cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043d0:	400b      	ands	r3, r1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_I2C_Init+0x138>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1e59      	subs	r1, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e4:	3301      	adds	r3, #1
 80043e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ea:	e051      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 80043ec:	2304      	movs	r3, #4
 80043ee:	e04f      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d111      	bne.n	800441c <HAL_I2C_Init+0x168>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1e58      	subs	r0, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	440b      	add	r3, r1
 8004406:	fbb0 f3f3 	udiv	r3, r0, r3
 800440a:	3301      	adds	r3, #1
 800440c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e012      	b.n	8004442 <HAL_I2C_Init+0x18e>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e58      	subs	r0, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	0099      	lsls	r1, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004432:	3301      	adds	r3, #1
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_I2C_Init+0x196>
 8004446:	2301      	movs	r3, #1
 8004448:	e022      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10e      	bne.n	8004470 <HAL_I2C_Init+0x1bc>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1e58      	subs	r0, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6859      	ldr	r1, [r3, #4]
 800445a:	460b      	mov	r3, r1
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	440b      	add	r3, r1
 8004460:	fbb0 f3f3 	udiv	r3, r0, r3
 8004464:	3301      	adds	r3, #1
 8004466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800446e:	e00f      	b.n	8004490 <HAL_I2C_Init+0x1dc>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1e58      	subs	r0, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	0099      	lsls	r1, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	fbb0 f3f3 	udiv	r3, r0, r3
 8004486:	3301      	adds	r3, #1
 8004488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	6809      	ldr	r1, [r1, #0]
 8004494:	4313      	orrs	r3, r2
 8004496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6911      	ldr	r1, [r2, #16]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68d2      	ldr	r2, [r2, #12]
 80044ca:	4311      	orrs	r1, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	000186a0 	.word	0x000186a0
 800452c:	001e847f 	.word	0x001e847f
 8004530:	003d08ff 	.word	0x003d08ff
 8004534:	431bde83 	.word	0x431bde83
 8004538:	10624dd3 	.word	0x10624dd3

0800453c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b20      	cmp	r3, #32
 8004550:	d129      	bne.n	80045a6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2224      	movs	r2, #36	@ 0x24
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0210 	bic.w	r2, r2, #16
 8004578:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d12a      	bne.n	8004624 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2224      	movs	r2, #36	@ 0x24
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80045ee:	89fb      	ldrh	r3, [r7, #14]
 80045f0:	f023 030f 	bic.w	r3, r3, #15
 80045f4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	89fb      	ldrh	r3, [r7, #14]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	89fa      	ldrh	r2, [r7, #14]
 8004606:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	e000      	b.n	8004626 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004624:	2302      	movs	r3, #2
  }
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0bf      	b.n	80047c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fc fb50 	bl	8000d00 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004676:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6999      	ldr	r1, [r3, #24]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800468c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6899      	ldr	r1, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4b4a      	ldr	r3, [pc, #296]	@ (80047d0 <HAL_LTDC_Init+0x19c>)
 80046a8:	400b      	ands	r3, r1
 80046aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	041b      	lsls	r3, r3, #16
 80046b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6899      	ldr	r1, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68d9      	ldr	r1, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b3e      	ldr	r3, [pc, #248]	@ (80047d0 <HAL_LTDC_Init+0x19c>)
 80046d6:	400b      	ands	r3, r1
 80046d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	041b      	lsls	r3, r3, #16
 80046e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68d9      	ldr	r1, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1a      	ldr	r2, [r3, #32]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6919      	ldr	r1, [r3, #16]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4b33      	ldr	r3, [pc, #204]	@ (80047d0 <HAL_LTDC_Init+0x19c>)
 8004704:	400b      	ands	r3, r1
 8004706:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6919      	ldr	r1, [r3, #16]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6959      	ldr	r1, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b27      	ldr	r3, [pc, #156]	@ (80047d0 <HAL_LTDC_Init+0x19c>)
 8004732:	400b      	ands	r3, r1
 8004734:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6959      	ldr	r1, [r3, #20]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004764:	041b      	lsls	r3, r3, #16
 8004766:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0206 	orr.w	r2, r2, #6
 80047a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	f000f800 	.word	0xf000f800

080047d4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d023      	beq.n	800483e <HAL_LTDC_IRQHandler+0x6a>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01e      	beq.n	800483e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0204 	bic.w	r2, r2, #4
 800480e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2204      	movs	r2, #4
 8004816:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800481e:	f043 0201 	orr.w	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2204      	movs	r2, #4
 800482c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f86f 	bl	800491c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d023      	beq.n	8004890 <HAL_LTDC_IRQHandler+0xbc>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01e      	beq.n	8004890 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0202 	bic.w	r2, r2, #2
 8004860:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2202      	movs	r2, #2
 8004868:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004870:	f043 0202 	orr.w	r2, r3, #2
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2204      	movs	r2, #4
 800487e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f846 	bl	800491c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01b      	beq.n	80048d2 <HAL_LTDC_IRQHandler+0xfe>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d016      	beq.n	80048d2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2201      	movs	r2, #1
 80048ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f82f 	bl	8004930 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01b      	beq.n	8004914 <HAL_LTDC_IRQHandler+0x140>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0208 	bic.w	r2, r2, #8
 80048f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2208      	movs	r2, #8
 80048fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f818 	bl	8004944 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004958:	b5b0      	push	{r4, r5, r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_LTDC_ConfigLayer+0x1a>
 800496e:	2302      	movs	r3, #2
 8004970:	e02c      	b.n	80049cc <HAL_LTDC_ConfigLayer+0x74>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2134      	movs	r1, #52	@ 0x34
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	4614      	mov	r4, r2
 8004996:	461d      	mov	r5, r3
 8004998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800499a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800499c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800499e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f811 	bl	80049d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2201      	movs	r2, #1
 80049b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bdb0      	pop	{r4, r5, r7, pc}

080049d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	@ 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	0c1b      	lsrs	r3, r3, #16
 80049ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f0:	4413      	add	r3, r2
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	01db      	lsls	r3, r3, #7
 8004a00:	4413      	add	r3, r2
 8004a02:	3384      	adds	r3, #132	@ 0x84
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	01d2      	lsls	r2, r2, #7
 8004a10:	440a      	add	r2, r1
 8004a12:	3284      	adds	r2, #132	@ 0x84
 8004a14:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a18:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a2a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a2c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4619      	mov	r1, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	01db      	lsls	r3, r3, #7
 8004a38:	440b      	add	r3, r1
 8004a3a:	3384      	adds	r3, #132	@ 0x84
 8004a3c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a42:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a52:	4413      	add	r3, r2
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	01db      	lsls	r3, r3, #7
 8004a62:	4413      	add	r3, r2
 8004a64:	3384      	adds	r3, #132	@ 0x84
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	01d2      	lsls	r2, r2, #7
 8004a72:	440a      	add	r2, r1
 8004a74:	3284      	adds	r2, #132	@ 0x84
 8004a76:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a7a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a8a:	4413      	add	r3, r2
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4619      	mov	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	01db      	lsls	r3, r3, #7
 8004a98:	440b      	add	r3, r1
 8004a9a:	3384      	adds	r3, #132	@ 0x84
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	01db      	lsls	r3, r3, #7
 8004aae:	4413      	add	r3, r2
 8004ab0:	3384      	adds	r3, #132	@ 0x84
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	4611      	mov	r1, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	01d2      	lsls	r2, r2, #7
 8004abe:	440a      	add	r2, r1
 8004ac0:	3284      	adds	r2, #132	@ 0x84
 8004ac2:	f023 0307 	bic.w	r3, r3, #7
 8004ac6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	01db      	lsls	r3, r3, #7
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3384      	adds	r3, #132	@ 0x84
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004aee:	041b      	lsls	r3, r3, #16
 8004af0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	061b      	lsls	r3, r3, #24
 8004af8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	01db      	lsls	r3, r3, #7
 8004b04:	4413      	add	r3, r2
 8004b06:	3384      	adds	r3, #132	@ 0x84
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	01db      	lsls	r3, r3, #7
 8004b14:	4413      	add	r3, r2
 8004b16:	3384      	adds	r3, #132	@ 0x84
 8004b18:	461a      	mov	r2, r3
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b24:	461a      	mov	r2, r3
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4619      	mov	r1, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	01db      	lsls	r3, r3, #7
 8004b38:	440b      	add	r3, r1
 8004b3a:	3384      	adds	r3, #132	@ 0x84
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	01db      	lsls	r3, r3, #7
 8004b4e:	4413      	add	r3, r2
 8004b50:	3384      	adds	r3, #132	@ 0x84
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	4611      	mov	r1, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	01d2      	lsls	r2, r2, #7
 8004b5e:	440a      	add	r2, r1
 8004b60:	3284      	adds	r2, #132	@ 0x84
 8004b62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b66:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	01db      	lsls	r3, r3, #7
 8004b72:	4413      	add	r3, r2
 8004b74:	3384      	adds	r3, #132	@ 0x84
 8004b76:	461a      	mov	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	01db      	lsls	r3, r3, #7
 8004b88:	4413      	add	r3, r2
 8004b8a:	3384      	adds	r3, #132	@ 0x84
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	6812      	ldr	r2, [r2, #0]
 8004b92:	4611      	mov	r1, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	01d2      	lsls	r2, r2, #7
 8004b98:	440a      	add	r2, r1
 8004b9a:	3284      	adds	r2, #132	@ 0x84
 8004b9c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004ba0:	f023 0307 	bic.w	r3, r3, #7
 8004ba4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	69da      	ldr	r2, [r3, #28]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	68f9      	ldr	r1, [r7, #12]
 8004bb0:	6809      	ldr	r1, [r1, #0]
 8004bb2:	4608      	mov	r0, r1
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	01c9      	lsls	r1, r1, #7
 8004bb8:	4401      	add	r1, r0
 8004bba:	3184      	adds	r1, #132	@ 0x84
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	01db      	lsls	r3, r3, #7
 8004bca:	4413      	add	r3, r2
 8004bcc:	3384      	adds	r3, #132	@ 0x84
 8004bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	01db      	lsls	r3, r3, #7
 8004bda:	4413      	add	r3, r2
 8004bdc:	3384      	adds	r3, #132	@ 0x84
 8004bde:	461a      	mov	r2, r3
 8004be0:	2300      	movs	r3, #0
 8004be2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	01db      	lsls	r3, r3, #7
 8004bee:	4413      	add	r3, r2
 8004bf0:	3384      	adds	r3, #132	@ 0x84
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004c02:	2304      	movs	r3, #4
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	e01b      	b.n	8004c40 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d102      	bne.n	8004c16 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004c10:	2303      	movs	r3, #3
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	e014      	b.n	8004c40 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d00b      	beq.n	8004c36 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d007      	beq.n	8004c36 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d003      	beq.n	8004c36 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c32:	2b07      	cmp	r3, #7
 8004c34:	d102      	bne.n	8004c3c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004c36:	2302      	movs	r3, #2
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	e001      	b.n	8004c40 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	01db      	lsls	r3, r3, #7
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3384      	adds	r3, #132	@ 0x84
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	4611      	mov	r1, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	01d2      	lsls	r2, r2, #7
 8004c5a:	440a      	add	r2, r1
 8004c5c:	3284      	adds	r2, #132	@ 0x84
 8004c5e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6859      	ldr	r1, [r3, #4]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	1acb      	subs	r3, r1, r3
 8004c7a:	69f9      	ldr	r1, [r7, #28]
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	6809      	ldr	r1, [r1, #0]
 8004c86:	4608      	mov	r0, r1
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	01c9      	lsls	r1, r1, #7
 8004c8c:	4401      	add	r1, r0
 8004c8e:	3184      	adds	r1, #132	@ 0x84
 8004c90:	4313      	orrs	r3, r2
 8004c92:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	01db      	lsls	r3, r3, #7
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3384      	adds	r3, #132	@ 0x84
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	4611      	mov	r1, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	01d2      	lsls	r2, r2, #7
 8004cae:	440a      	add	r2, r1
 8004cb0:	3284      	adds	r2, #132	@ 0x84
 8004cb2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	01db      	lsls	r3, r3, #7
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3384      	adds	r3, #132	@ 0x84
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	01db      	lsls	r3, r3, #7
 8004cdc:	4413      	add	r3, r2
 8004cde:	3384      	adds	r3, #132	@ 0x84
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	01d2      	lsls	r2, r2, #7
 8004cec:	440a      	add	r2, r1
 8004cee:	3284      	adds	r2, #132	@ 0x84
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	6013      	str	r3, [r2, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	3724      	adds	r7, #36	@ 0x24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
	...

08004d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e267      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d075      	beq.n	8004e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d22:	4b88      	ldr	r3, [pc, #544]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d00c      	beq.n	8004d48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d2e:	4b85      	ldr	r3, [pc, #532]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d112      	bne.n	8004d60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d3a:	4b82      	ldr	r3, [pc, #520]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d46:	d10b      	bne.n	8004d60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d48:	4b7e      	ldr	r3, [pc, #504]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d05b      	beq.n	8004e0c <HAL_RCC_OscConfig+0x108>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d157      	bne.n	8004e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e242      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d68:	d106      	bne.n	8004d78 <HAL_RCC_OscConfig+0x74>
 8004d6a:	4b76      	ldr	r3, [pc, #472]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a75      	ldr	r2, [pc, #468]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	e01d      	b.n	8004db4 <HAL_RCC_OscConfig+0xb0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d80:	d10c      	bne.n	8004d9c <HAL_RCC_OscConfig+0x98>
 8004d82:	4b70      	ldr	r3, [pc, #448]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a6f      	ldr	r2, [pc, #444]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a6c      	ldr	r2, [pc, #432]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	e00b      	b.n	8004db4 <HAL_RCC_OscConfig+0xb0>
 8004d9c:	4b69      	ldr	r3, [pc, #420]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a68      	ldr	r2, [pc, #416]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	4b66      	ldr	r3, [pc, #408]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a65      	ldr	r2, [pc, #404]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d013      	beq.n	8004de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbc:	f7fc fc66 	bl	800168c <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc4:	f7fc fc62 	bl	800168c <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b64      	cmp	r3, #100	@ 0x64
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e207      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0xc0>
 8004de2:	e014      	b.n	8004e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7fc fc52 	bl	800168c <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dec:	f7fc fc4e 	bl	800168c <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	@ 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e1f3      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dfe:	4b51      	ldr	r3, [pc, #324]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0xe8>
 8004e0a:	e000      	b.n	8004e0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d063      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 030c 	and.w	r3, r3, #12
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00b      	beq.n	8004e3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e26:	4b47      	ldr	r3, [pc, #284]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d11c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e32:	4b44      	ldr	r3, [pc, #272]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d116      	bne.n	8004e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e3e:	4b41      	ldr	r3, [pc, #260]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_RCC_OscConfig+0x152>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d001      	beq.n	8004e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e1c7      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e56:	4b3b      	ldr	r3, [pc, #236]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4937      	ldr	r1, [pc, #220]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e6a:	e03a      	b.n	8004ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d020      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e74:	4b34      	ldr	r3, [pc, #208]	@ (8004f48 <HAL_RCC_OscConfig+0x244>)
 8004e76:	2201      	movs	r2, #1
 8004e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7a:	f7fc fc07 	bl	800168c <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e82:	f7fc fc03 	bl	800168c <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e1a8      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e94:	4b2b      	ldr	r3, [pc, #172]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0f0      	beq.n	8004e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea0:	4b28      	ldr	r3, [pc, #160]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4925      	ldr	r1, [pc, #148]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	600b      	str	r3, [r1, #0]
 8004eb4:	e015      	b.n	8004ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb6:	4b24      	ldr	r3, [pc, #144]	@ (8004f48 <HAL_RCC_OscConfig+0x244>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fc fbe6 	bl	800168c <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec4:	f7fc fbe2 	bl	800168c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e187      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d036      	beq.n	8004f5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d016      	beq.n	8004f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ef6:	4b15      	ldr	r3, [pc, #84]	@ (8004f4c <HAL_RCC_OscConfig+0x248>)
 8004ef8:	2201      	movs	r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efc:	f7fc fbc6 	bl	800168c <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f04:	f7fc fbc2 	bl	800168c <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e167      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f16:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <HAL_RCC_OscConfig+0x240>)
 8004f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0x200>
 8004f22:	e01b      	b.n	8004f5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f24:	4b09      	ldr	r3, [pc, #36]	@ (8004f4c <HAL_RCC_OscConfig+0x248>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f2a:	f7fc fbaf 	bl	800168c <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f30:	e00e      	b.n	8004f50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f32:	f7fc fbab 	bl	800168c <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d907      	bls.n	8004f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e150      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
 8004f44:	40023800 	.word	0x40023800
 8004f48:	42470000 	.word	0x42470000
 8004f4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f50:	4b88      	ldr	r3, [pc, #544]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8004f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1ea      	bne.n	8004f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8097 	beq.w	8005098 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f6e:	4b81      	ldr	r3, [pc, #516]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10f      	bne.n	8004f9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	4b7d      	ldr	r3, [pc, #500]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f82:	4a7c      	ldr	r2, [pc, #496]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8004f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f8a:	4b7a      	ldr	r3, [pc, #488]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f92:	60bb      	str	r3, [r7, #8]
 8004f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f96:	2301      	movs	r3, #1
 8004f98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9a:	4b77      	ldr	r3, [pc, #476]	@ (8005178 <HAL_RCC_OscConfig+0x474>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d118      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fa6:	4b74      	ldr	r3, [pc, #464]	@ (8005178 <HAL_RCC_OscConfig+0x474>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a73      	ldr	r2, [pc, #460]	@ (8005178 <HAL_RCC_OscConfig+0x474>)
 8004fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fb2:	f7fc fb6b 	bl	800168c <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fba:	f7fc fb67 	bl	800168c <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e10c      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8005178 <HAL_RCC_OscConfig+0x474>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d106      	bne.n	8004fee <HAL_RCC_OscConfig+0x2ea>
 8004fe0:	4b64      	ldr	r3, [pc, #400]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8004fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe4:	4a63      	ldr	r2, [pc, #396]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fec:	e01c      	b.n	8005028 <HAL_RCC_OscConfig+0x324>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b05      	cmp	r3, #5
 8004ff4:	d10c      	bne.n	8005010 <HAL_RCC_OscConfig+0x30c>
 8004ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	f043 0304 	orr.w	r3, r3, #4
 8005000:	6713      	str	r3, [r2, #112]	@ 0x70
 8005002:	4b5c      	ldr	r3, [pc, #368]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	4a5b      	ldr	r2, [pc, #364]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	6713      	str	r3, [r2, #112]	@ 0x70
 800500e:	e00b      	b.n	8005028 <HAL_RCC_OscConfig+0x324>
 8005010:	4b58      	ldr	r3, [pc, #352]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8005012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005014:	4a57      	ldr	r2, [pc, #348]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8005016:	f023 0301 	bic.w	r3, r3, #1
 800501a:	6713      	str	r3, [r2, #112]	@ 0x70
 800501c:	4b55      	ldr	r3, [pc, #340]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005020:	4a54      	ldr	r2, [pc, #336]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8005022:	f023 0304 	bic.w	r3, r3, #4
 8005026:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d015      	beq.n	800505c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005030:	f7fc fb2c 	bl	800168c <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005036:	e00a      	b.n	800504e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005038:	f7fc fb28 	bl	800168c <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e0cb      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504e:	4b49      	ldr	r3, [pc, #292]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0ee      	beq.n	8005038 <HAL_RCC_OscConfig+0x334>
 800505a:	e014      	b.n	8005086 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505c:	f7fc fb16 	bl	800168c <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005062:	e00a      	b.n	800507a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005064:	f7fc fb12 	bl	800168c <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005072:	4293      	cmp	r3, r2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e0b5      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800507a:	4b3e      	ldr	r3, [pc, #248]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1ee      	bne.n	8005064 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005086:	7dfb      	ldrb	r3, [r7, #23]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d105      	bne.n	8005098 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800508c:	4b39      	ldr	r3, [pc, #228]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 800508e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005090:	4a38      	ldr	r2, [pc, #224]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8005092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005096:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 80a1 	beq.w	80051e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050a2:	4b34      	ldr	r3, [pc, #208]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d05c      	beq.n	8005168 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d141      	bne.n	800513a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b6:	4b31      	ldr	r3, [pc, #196]	@ (800517c <HAL_RCC_OscConfig+0x478>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050bc:	f7fc fae6 	bl	800168c <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fc fae2 	bl	800168c <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e087      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d6:	4b27      	ldr	r3, [pc, #156]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69da      	ldr	r2, [r3, #28]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f0:	019b      	lsls	r3, r3, #6
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f8:	085b      	lsrs	r3, r3, #1
 80050fa:	3b01      	subs	r3, #1
 80050fc:	041b      	lsls	r3, r3, #16
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	061b      	lsls	r3, r3, #24
 8005106:	491b      	ldr	r1, [pc, #108]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 8005108:	4313      	orrs	r3, r2
 800510a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800510c:	4b1b      	ldr	r3, [pc, #108]	@ (800517c <HAL_RCC_OscConfig+0x478>)
 800510e:	2201      	movs	r2, #1
 8005110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005112:	f7fc fabb 	bl	800168c <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511a:	f7fc fab7 	bl	800168c <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e05c      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800512c:	4b11      	ldr	r3, [pc, #68]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x416>
 8005138:	e054      	b.n	80051e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800513a:	4b10      	ldr	r3, [pc, #64]	@ (800517c <HAL_RCC_OscConfig+0x478>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005140:	f7fc faa4 	bl	800168c <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005148:	f7fc faa0 	bl	800168c <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e045      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515a:	4b06      	ldr	r3, [pc, #24]	@ (8005174 <HAL_RCC_OscConfig+0x470>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x444>
 8005166:	e03d      	b.n	80051e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d107      	bne.n	8005180 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e038      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
 8005174:	40023800 	.word	0x40023800
 8005178:	40007000 	.word	0x40007000
 800517c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005180:	4b1b      	ldr	r3, [pc, #108]	@ (80051f0 <HAL_RCC_OscConfig+0x4ec>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d028      	beq.n	80051e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005198:	429a      	cmp	r2, r3
 800519a:	d121      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d11a      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051b0:	4013      	ands	r3, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d111      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	3b01      	subs	r3, #1
 80051ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d107      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051dc:	429a      	cmp	r2, r3
 80051de:	d001      	beq.n	80051e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40023800 	.word	0x40023800

080051f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0cc      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005208:	4b68      	ldr	r3, [pc, #416]	@ (80053ac <HAL_RCC_ClockConfig+0x1b8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d90c      	bls.n	8005230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005216:	4b65      	ldr	r3, [pc, #404]	@ (80053ac <HAL_RCC_ClockConfig+0x1b8>)
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800521e:	4b63      	ldr	r3, [pc, #396]	@ (80053ac <HAL_RCC_ClockConfig+0x1b8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d001      	beq.n	8005230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0b8      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d020      	beq.n	800527e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005248:	4b59      	ldr	r3, [pc, #356]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	4a58      	ldr	r2, [pc, #352]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005252:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005260:	4b53      	ldr	r3, [pc, #332]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	4a52      	ldr	r2, [pc, #328]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800526a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800526c:	4b50      	ldr	r3, [pc, #320]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	494d      	ldr	r1, [pc, #308]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d044      	beq.n	8005314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d107      	bne.n	80052a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005292:	4b47      	ldr	r3, [pc, #284]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d119      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e07f      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d003      	beq.n	80052b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d107      	bne.n	80052c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b2:	4b3f      	ldr	r3, [pc, #252]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e06f      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c2:	4b3b      	ldr	r3, [pc, #236]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e067      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052d2:	4b37      	ldr	r3, [pc, #220]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f023 0203 	bic.w	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4934      	ldr	r1, [pc, #208]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052e4:	f7fc f9d2 	bl	800168c <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ea:	e00a      	b.n	8005302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ec:	f7fc f9ce 	bl	800168c <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e04f      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005302:	4b2b      	ldr	r3, [pc, #172]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 020c 	and.w	r2, r3, #12
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	429a      	cmp	r2, r3
 8005312:	d1eb      	bne.n	80052ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005314:	4b25      	ldr	r3, [pc, #148]	@ (80053ac <HAL_RCC_ClockConfig+0x1b8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d20c      	bcs.n	800533c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b22      	ldr	r3, [pc, #136]	@ (80053ac <HAL_RCC_ClockConfig+0x1b8>)
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b20      	ldr	r3, [pc, #128]	@ (80053ac <HAL_RCC_ClockConfig+0x1b8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e032      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005348:	4b19      	ldr	r3, [pc, #100]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4916      	ldr	r1, [pc, #88]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	4313      	orrs	r3, r2
 8005358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005366:	4b12      	ldr	r3, [pc, #72]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	490e      	ldr	r1, [pc, #56]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	4313      	orrs	r3, r2
 8005378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800537a:	f000 f821 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
 800537e:	4602      	mov	r2, r0
 8005380:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	490a      	ldr	r1, [pc, #40]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 800538c:	5ccb      	ldrb	r3, [r1, r3]
 800538e:	fa22 f303 	lsr.w	r3, r2, r3
 8005392:	4a09      	ldr	r2, [pc, #36]	@ (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005396:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <HAL_RCC_ClockConfig+0x1c8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fb ff2a 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40023c00 	.word	0x40023c00
 80053b0:	40023800 	.word	0x40023800
 80053b4:	0800d31c 	.word	0x0800d31c
 80053b8:	20000000 	.word	0x20000000
 80053bc:	20000004 	.word	0x20000004

080053c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053c4:	b094      	sub	sp, #80	@ 0x50
 80053c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053d8:	4b79      	ldr	r3, [pc, #484]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f003 030c 	and.w	r3, r3, #12
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d00d      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0x40>
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	f200 80e1 	bhi.w	80055ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_RCC_GetSysClockFreq+0x34>
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d003      	beq.n	80053fa <HAL_RCC_GetSysClockFreq+0x3a>
 80053f2:	e0db      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053f4:	4b73      	ldr	r3, [pc, #460]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80053f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053f8:	e0db      	b.n	80055b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053fa:	4b73      	ldr	r3, [pc, #460]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80053fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053fe:	e0d8      	b.n	80055b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005400:	4b6f      	ldr	r3, [pc, #444]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005408:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800540a:	4b6d      	ldr	r3, [pc, #436]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d063      	beq.n	80054de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005416:	4b6a      	ldr	r3, [pc, #424]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	099b      	lsrs	r3, r3, #6
 800541c:	2200      	movs	r2, #0
 800541e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005420:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005428:	633b      	str	r3, [r7, #48]	@ 0x30
 800542a:	2300      	movs	r3, #0
 800542c:	637b      	str	r3, [r7, #52]	@ 0x34
 800542e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005432:	4622      	mov	r2, r4
 8005434:	462b      	mov	r3, r5
 8005436:	f04f 0000 	mov.w	r0, #0
 800543a:	f04f 0100 	mov.w	r1, #0
 800543e:	0159      	lsls	r1, r3, #5
 8005440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005444:	0150      	lsls	r0, r2, #5
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4621      	mov	r1, r4
 800544c:	1a51      	subs	r1, r2, r1
 800544e:	6139      	str	r1, [r7, #16]
 8005450:	4629      	mov	r1, r5
 8005452:	eb63 0301 	sbc.w	r3, r3, r1
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005464:	4659      	mov	r1, fp
 8005466:	018b      	lsls	r3, r1, #6
 8005468:	4651      	mov	r1, sl
 800546a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800546e:	4651      	mov	r1, sl
 8005470:	018a      	lsls	r2, r1, #6
 8005472:	4651      	mov	r1, sl
 8005474:	ebb2 0801 	subs.w	r8, r2, r1
 8005478:	4659      	mov	r1, fp
 800547a:	eb63 0901 	sbc.w	r9, r3, r1
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800548a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800548e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005492:	4690      	mov	r8, r2
 8005494:	4699      	mov	r9, r3
 8005496:	4623      	mov	r3, r4
 8005498:	eb18 0303 	adds.w	r3, r8, r3
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	462b      	mov	r3, r5
 80054a0:	eb49 0303 	adc.w	r3, r9, r3
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054b2:	4629      	mov	r1, r5
 80054b4:	024b      	lsls	r3, r1, #9
 80054b6:	4621      	mov	r1, r4
 80054b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054bc:	4621      	mov	r1, r4
 80054be:	024a      	lsls	r2, r1, #9
 80054c0:	4610      	mov	r0, r2
 80054c2:	4619      	mov	r1, r3
 80054c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c6:	2200      	movs	r2, #0
 80054c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054d0:	f7fa fe8e 	bl	80001f0 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4613      	mov	r3, r2
 80054da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054dc:	e058      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054de:	4b38      	ldr	r3, [pc, #224]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	099b      	lsrs	r3, r3, #6
 80054e4:	2200      	movs	r2, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	4611      	mov	r1, r2
 80054ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054ee:	623b      	str	r3, [r7, #32]
 80054f0:	2300      	movs	r3, #0
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	f04f 0000 	mov.w	r0, #0
 8005500:	f04f 0100 	mov.w	r1, #0
 8005504:	0159      	lsls	r1, r3, #5
 8005506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800550a:	0150      	lsls	r0, r2, #5
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4641      	mov	r1, r8
 8005512:	ebb2 0a01 	subs.w	sl, r2, r1
 8005516:	4649      	mov	r1, r9
 8005518:	eb63 0b01 	sbc.w	fp, r3, r1
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800552c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005530:	ebb2 040a 	subs.w	r4, r2, sl
 8005534:	eb63 050b 	sbc.w	r5, r3, fp
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	00eb      	lsls	r3, r5, #3
 8005542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005546:	00e2      	lsls	r2, r4, #3
 8005548:	4614      	mov	r4, r2
 800554a:	461d      	mov	r5, r3
 800554c:	4643      	mov	r3, r8
 800554e:	18e3      	adds	r3, r4, r3
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	464b      	mov	r3, r9
 8005554:	eb45 0303 	adc.w	r3, r5, r3
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005566:	4629      	mov	r1, r5
 8005568:	028b      	lsls	r3, r1, #10
 800556a:	4621      	mov	r1, r4
 800556c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005570:	4621      	mov	r1, r4
 8005572:	028a      	lsls	r2, r1, #10
 8005574:	4610      	mov	r0, r2
 8005576:	4619      	mov	r1, r3
 8005578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800557a:	2200      	movs	r2, #0
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	61fa      	str	r2, [r7, #28]
 8005580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005584:	f7fa fe34 	bl	80001f0 <__aeabi_uldivmod>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4613      	mov	r3, r2
 800558e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005590:	4b0b      	ldr	r3, [pc, #44]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	0c1b      	lsrs	r3, r3, #16
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	3301      	adds	r3, #1
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80055a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055aa:	e002      	b.n	80055b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055ac:	4b05      	ldr	r3, [pc, #20]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80055ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3750      	adds	r7, #80	@ 0x50
 80055b8:	46bd      	mov	sp, r7
 80055ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	00f42400 	.word	0x00f42400
 80055c8:	007a1200 	.word	0x007a1200

080055cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055d0:	4b03      	ldr	r3, [pc, #12]	@ (80055e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055d2:	681b      	ldr	r3, [r3, #0]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000000 	.word	0x20000000

080055e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055e8:	f7ff fff0 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 80055ec:	4602      	mov	r2, r0
 80055ee:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	0a9b      	lsrs	r3, r3, #10
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	4903      	ldr	r1, [pc, #12]	@ (8005608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055fa:	5ccb      	ldrb	r3, [r1, r3]
 80055fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005600:	4618      	mov	r0, r3
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40023800 	.word	0x40023800
 8005608:	0800d32c 	.word	0x0800d32c

0800560c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005610:	f7ff ffdc 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 8005614:	4602      	mov	r2, r0
 8005616:	4b05      	ldr	r3, [pc, #20]	@ (800562c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	0b5b      	lsrs	r3, r3, #13
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	4903      	ldr	r1, [pc, #12]	@ (8005630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005622:	5ccb      	ldrb	r3, [r1, r3]
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40023800 	.word	0x40023800
 8005630:	0800d32c 	.word	0x0800d32c

08005634 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	220f      	movs	r2, #15
 8005642:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005644:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <HAL_RCC_GetClockConfig+0x5c>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0203 	and.w	r2, r3, #3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005650:	4b0f      	ldr	r3, [pc, #60]	@ (8005690 <HAL_RCC_GetClockConfig+0x5c>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800565c:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <HAL_RCC_GetClockConfig+0x5c>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005668:	4b09      	ldr	r3, [pc, #36]	@ (8005690 <HAL_RCC_GetClockConfig+0x5c>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	08db      	lsrs	r3, r3, #3
 800566e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005676:	4b07      	ldr	r3, [pc, #28]	@ (8005694 <HAL_RCC_GetClockConfig+0x60>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 020f 	and.w	r2, r3, #15
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	601a      	str	r2, [r3, #0]
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40023800 	.word	0x40023800
 8005694:	40023c00 	.word	0x40023c00

08005698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d075      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056cc:	4b91      	ldr	r3, [pc, #580]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056d2:	f7fb ffdb 	bl	800168c <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056d8:	e008      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056da:	f7fb ffd7 	bl	800168c <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e189      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056ec:	4b8a      	ldr	r3, [pc, #552]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f0      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d009      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	019a      	lsls	r2, r3, #6
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	071b      	lsls	r3, r3, #28
 8005710:	4981      	ldr	r1, [pc, #516]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01f      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005724:	4b7c      	ldr	r3, [pc, #496]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800572a:	0f1b      	lsrs	r3, r3, #28
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	019a      	lsls	r2, r3, #6
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	061b      	lsls	r3, r3, #24
 800573e:	431a      	orrs	r2, r3
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	071b      	lsls	r3, r3, #28
 8005744:	4974      	ldr	r1, [pc, #464]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800574c:	4b72      	ldr	r3, [pc, #456]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800574e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005752:	f023 021f 	bic.w	r2, r3, #31
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	3b01      	subs	r3, #1
 800575c:	496e      	ldr	r1, [pc, #440]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	019a      	lsls	r2, r3, #6
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	071b      	lsls	r3, r3, #28
 8005784:	4964      	ldr	r1, [pc, #400]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800578c:	4b61      	ldr	r3, [pc, #388]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005792:	f7fb ff7b 	bl	800168c <HAL_GetTick>
 8005796:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005798:	e008      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800579a:	f7fb ff77 	bl	800168c <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e129      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d079      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057d0:	4b52      	ldr	r3, [pc, #328]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057d6:	f7fb ff59 	bl	800168c <HAL_GetTick>
 80057da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057dc:	e008      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057de:	f7fb ff55 	bl	800168c <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e107      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057f0:	4b49      	ldr	r3, [pc, #292]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057fc:	d0ef      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	d020      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800580a:	4b43      	ldr	r3, [pc, #268]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005810:	0f1b      	lsrs	r3, r3, #28
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	019a      	lsls	r2, r3, #6
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	061b      	lsls	r3, r3, #24
 8005824:	431a      	orrs	r2, r3
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	071b      	lsls	r3, r3, #28
 800582a:	493b      	ldr	r1, [pc, #236]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005832:	4b39      	ldr	r3, [pc, #228]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005838:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	3b01      	subs	r3, #1
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	4934      	ldr	r1, [pc, #208]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01e      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005858:	4b2f      	ldr	r3, [pc, #188]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585e:	0e1b      	lsrs	r3, r3, #24
 8005860:	f003 030f 	and.w	r3, r3, #15
 8005864:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	019a      	lsls	r2, r3, #6
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	061b      	lsls	r3, r3, #24
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	071b      	lsls	r3, r3, #28
 8005878:	4927      	ldr	r1, [pc, #156]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005880:	4b25      	ldr	r3, [pc, #148]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005886:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	4922      	ldr	r1, [pc, #136]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005896:	4b21      	ldr	r3, [pc, #132]	@ (800591c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800589c:	f7fb fef6 	bl	800168c <HAL_GetTick>
 80058a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058a4:	f7fb fef2 	bl	800168c <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e0a4      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058b6:	4b18      	ldr	r3, [pc, #96]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058c2:	d1ef      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 808b 	beq.w	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	4b10      	ldr	r3, [pc, #64]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058da:	4a0f      	ldr	r2, [pc, #60]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80058e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058fa:	f7fb fec7 	bl	800168c <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005900:	e010      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005902:	f7fb fec3 	bl	800168c <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d909      	bls.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e075      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005914:	42470068 	.word	0x42470068
 8005918:	40023800 	.word	0x40023800
 800591c:	42470070 	.word	0x42470070
 8005920:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005924:	4b38      	ldr	r3, [pc, #224]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0e8      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005930:	4b36      	ldr	r3, [pc, #216]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005934:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005938:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d02f      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005944:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	429a      	cmp	r2, r3
 800594c:	d028      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800594e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005956:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005958:	4b2d      	ldr	r3, [pc, #180]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800595a:	2201      	movs	r2, #1
 800595c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800595e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005964:	4a29      	ldr	r2, [pc, #164]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800596a:	4b28      	ldr	r3, [pc, #160]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b01      	cmp	r3, #1
 8005974:	d114      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005976:	f7fb fe89 	bl	800168c <HAL_GetTick>
 800597a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597c:	e00a      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fb fe85 	bl	800168c <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e035      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005994:	4b1d      	ldr	r3, [pc, #116]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0ee      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ac:	d10d      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x332>
 80059ae:	4b17      	ldr	r3, [pc, #92]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80059be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059c2:	4912      	ldr	r1, [pc, #72]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	608b      	str	r3, [r1, #8]
 80059c8:	e005      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80059ca:	4b10      	ldr	r3, [pc, #64]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	4a0f      	ldr	r2, [pc, #60]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059d0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80059d4:	6093      	str	r3, [r2, #8]
 80059d6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e2:	490a      	ldr	r1, [pc, #40]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d004      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80059fa:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80059fc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40007000 	.word	0x40007000
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	42470e40 	.word	0x42470e40
 8005a14:	424711e0 	.word	0x424711e0

08005a18 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e025      	b.n	8005a78 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fa febf 	bl	80007c4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3304      	adds	r3, #4
 8005a56:	4619      	mov	r1, r3
 8005a58:	4610      	mov	r0, r2
 8005a5a:	f000 ffd3 	bl	8006a04 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	461a      	mov	r2, r3
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	f001 f828 	bl	8006abe <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e07b      	b.n	8005b8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d108      	bne.n	8005aac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005aa2:	d009      	beq.n	8005ab8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	61da      	str	r2, [r3, #28]
 8005aaa:	e005      	b.n	8005ab8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fb fb1a 	bl	800110c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b00:	431a      	orrs	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b3c:	ea42 0103 	orr.w	r1, r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	0c1b      	lsrs	r3, r3, #16
 8005b56:	f003 0104 	and.w	r1, r3, #4
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	f003 0210 	and.w	r2, r3, #16
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e041      	b.n	8005c28 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d106      	bne.n	8005bbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fb fc73 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f000 fa7d 	bl	80060d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d001      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e04e      	b.n	8005ce6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a23      	ldr	r2, [pc, #140]	@ (8005cf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d022      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c72:	d01d      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d018      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1e      	ldr	r2, [pc, #120]	@ (8005cfc <HAL_TIM_Base_Start_IT+0xcc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d013      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00e      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a19      	ldr	r2, [pc, #100]	@ (8005d08 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x80>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a18      	ldr	r2, [pc, #96]	@ (8005d0c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d111      	bne.n	8005cd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b06      	cmp	r3, #6
 8005cc0:	d010      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0201 	orr.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd2:	e007      	b.n	8005ce4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800
 8005d00:	40000c00 	.word	0x40000c00
 8005d04:	40010400 	.word	0x40010400
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40001800 	.word	0x40001800

08005d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d020      	beq.n	8005d74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01b      	beq.n	8005d74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0202 	mvn.w	r2, #2
 8005d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f999 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005d60:	e005      	b.n	8005d6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f98b 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f99c 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d020      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0204 	mvn.w	r2, #4
 8005d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2202      	movs	r2, #2
 8005d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f973 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f965 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f976 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d020      	beq.n	8005e0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01b      	beq.n	8005e0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0208 	mvn.w	r2, #8
 8005ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2204      	movs	r2, #4
 8005de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f94d 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005df8:	e005      	b.n	8005e06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f93f 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f950 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d020      	beq.n	8005e58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01b      	beq.n	8005e58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0210 	mvn.w	r2, #16
 8005e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f927 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f919 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f92a 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00c      	beq.n	8005e7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0201 	mvn.w	r2, #1
 8005e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7fb f8fa 	bl	8001070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00c      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d007      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fae4 	bl	8006468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00c      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d007      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8fb 	bl	80060ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00c      	beq.n	8005ee8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0220 	mvn.w	r2, #32
 8005ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fab6 	bl	8006454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_TIM_ConfigClockSource+0x1c>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e0b4      	b.n	8006076 <HAL_TIM_ConfigClockSource+0x186>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f44:	d03e      	beq.n	8005fc4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f4a:	f200 8087 	bhi.w	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f52:	f000 8086 	beq.w	8006062 <HAL_TIM_ConfigClockSource+0x172>
 8005f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5a:	d87f      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f5c:	2b70      	cmp	r3, #112	@ 0x70
 8005f5e:	d01a      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0xa6>
 8005f60:	2b70      	cmp	r3, #112	@ 0x70
 8005f62:	d87b      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f64:	2b60      	cmp	r3, #96	@ 0x60
 8005f66:	d050      	beq.n	800600a <HAL_TIM_ConfigClockSource+0x11a>
 8005f68:	2b60      	cmp	r3, #96	@ 0x60
 8005f6a:	d877      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b50      	cmp	r3, #80	@ 0x50
 8005f6e:	d03c      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0xfa>
 8005f70:	2b50      	cmp	r3, #80	@ 0x50
 8005f72:	d873      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b40      	cmp	r3, #64	@ 0x40
 8005f76:	d058      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x13a>
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d86f      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b30      	cmp	r3, #48	@ 0x30
 8005f7e:	d064      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x15a>
 8005f80:	2b30      	cmp	r3, #48	@ 0x30
 8005f82:	d86b      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d060      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x15a>
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d867      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d05c      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x15a>
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d05a      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x15a>
 8005f94:	e062      	b.n	800605c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fa6:	f000 f9b9 	bl	800631c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	609a      	str	r2, [r3, #8]
      break;
 8005fc2:	e04f      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fd4:	f000 f9a2 	bl	800631c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689a      	ldr	r2, [r3, #8]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fe6:	609a      	str	r2, [r3, #8]
      break;
 8005fe8:	e03c      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f000 f916 	bl	8006228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2150      	movs	r1, #80	@ 0x50
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f96f 	bl	80062e6 <TIM_ITRx_SetConfig>
      break;
 8006008:	e02c      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006016:	461a      	mov	r2, r3
 8006018:	f000 f935 	bl	8006286 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2160      	movs	r1, #96	@ 0x60
 8006022:	4618      	mov	r0, r3
 8006024:	f000 f95f 	bl	80062e6 <TIM_ITRx_SetConfig>
      break;
 8006028:	e01c      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006036:	461a      	mov	r2, r3
 8006038:	f000 f8f6 	bl	8006228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2140      	movs	r1, #64	@ 0x40
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f94f 	bl	80062e6 <TIM_ITRx_SetConfig>
      break;
 8006048:	e00c      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f000 f946 	bl	80062e6 <TIM_ITRx_SetConfig>
      break;
 800605a:	e003      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
      break;
 8006060:	e000      	b.n	8006064 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a46      	ldr	r2, [pc, #280]	@ (80061fc <TIM_Base_SetConfig+0x12c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d013      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ee:	d00f      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a43      	ldr	r2, [pc, #268]	@ (8006200 <TIM_Base_SetConfig+0x130>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00b      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a42      	ldr	r2, [pc, #264]	@ (8006204 <TIM_Base_SetConfig+0x134>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d007      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a41      	ldr	r2, [pc, #260]	@ (8006208 <TIM_Base_SetConfig+0x138>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_Base_SetConfig+0x40>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a40      	ldr	r2, [pc, #256]	@ (800620c <TIM_Base_SetConfig+0x13c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d108      	bne.n	8006122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a35      	ldr	r2, [pc, #212]	@ (80061fc <TIM_Base_SetConfig+0x12c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d02b      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006130:	d027      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a32      	ldr	r2, [pc, #200]	@ (8006200 <TIM_Base_SetConfig+0x130>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d023      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a31      	ldr	r2, [pc, #196]	@ (8006204 <TIM_Base_SetConfig+0x134>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01f      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a30      	ldr	r2, [pc, #192]	@ (8006208 <TIM_Base_SetConfig+0x138>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01b      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2f      	ldr	r2, [pc, #188]	@ (800620c <TIM_Base_SetConfig+0x13c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d017      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2e      	ldr	r2, [pc, #184]	@ (8006210 <TIM_Base_SetConfig+0x140>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d013      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a2d      	ldr	r2, [pc, #180]	@ (8006214 <TIM_Base_SetConfig+0x144>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00f      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a2c      	ldr	r2, [pc, #176]	@ (8006218 <TIM_Base_SetConfig+0x148>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00b      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a2b      	ldr	r2, [pc, #172]	@ (800621c <TIM_Base_SetConfig+0x14c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d007      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a2a      	ldr	r2, [pc, #168]	@ (8006220 <TIM_Base_SetConfig+0x150>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d003      	beq.n	8006182 <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a29      	ldr	r2, [pc, #164]	@ (8006224 <TIM_Base_SetConfig+0x154>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d108      	bne.n	8006194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a10      	ldr	r2, [pc, #64]	@ (80061fc <TIM_Base_SetConfig+0x12c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_Base_SetConfig+0xf8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a12      	ldr	r2, [pc, #72]	@ (800620c <TIM_Base_SetConfig+0x13c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d103      	bne.n	80061d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d105      	bne.n	80061ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f023 0201 	bic.w	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	611a      	str	r2, [r3, #16]
  }
}
 80061ee:	bf00      	nop
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40010000 	.word	0x40010000
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40010400 	.word	0x40010400
 8006210:	40014000 	.word	0x40014000
 8006214:	40014400 	.word	0x40014400
 8006218:	40014800 	.word	0x40014800
 800621c:	40001800 	.word	0x40001800
 8006220:	40001c00 	.word	0x40001c00
 8006224:	40002000 	.word	0x40002000

08006228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f023 0201 	bic.w	r2, r3, #1
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f023 030a 	bic.w	r3, r3, #10
 8006264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	621a      	str	r2, [r3, #32]
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006286:	b480      	push	{r7}
 8006288:	b087      	sub	sp, #28
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f023 0210 	bic.w	r2, r3, #16
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	031b      	lsls	r3, r3, #12
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	621a      	str	r2, [r3, #32]
}
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	f043 0307 	orr.w	r3, r3, #7
 8006308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	609a      	str	r2, [r3, #8]
}
 8006310:	bf00      	nop
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	021a      	lsls	r2, r3, #8
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	431a      	orrs	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4313      	orrs	r3, r2
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	609a      	str	r2, [r3, #8]
}
 8006350:	bf00      	nop
 8006352:	371c      	adds	r7, #28
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006370:	2302      	movs	r3, #2
 8006372:	e05a      	b.n	800642a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a21      	ldr	r2, [pc, #132]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d022      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c0:	d01d      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1d      	ldr	r2, [pc, #116]	@ (800643c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d018      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006440 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1a      	ldr	r2, [pc, #104]	@ (8006444 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00e      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a18      	ldr	r2, [pc, #96]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a17      	ldr	r2, [pc, #92]	@ (800644c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a15      	ldr	r2, [pc, #84]	@ (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d10c      	bne.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4313      	orrs	r3, r2
 800640e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40010000 	.word	0x40010000
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40010400 	.word	0x40010400
 800644c:	40014000 	.word	0x40014000
 8006450:	40001800 	.word	0x40001800

08006454 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e042      	b.n	8006514 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d106      	bne.n	80064a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fb f84a 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2224      	movs	r2, #36	@ 0x24
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f82b 	bl	800651c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2220      	movs	r2, #32
 8006508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800651c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006520:	b0c0      	sub	sp, #256	@ 0x100
 8006522:	af00      	add	r7, sp, #0
 8006524:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006538:	68d9      	ldr	r1, [r3, #12]
 800653a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	ea40 0301 	orr.w	r3, r0, r1
 8006544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	431a      	orrs	r2, r3
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	431a      	orrs	r2, r3
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006574:	f021 010c 	bic.w	r1, r1, #12
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006582:	430b      	orrs	r3, r1
 8006584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006596:	6999      	ldr	r1, [r3, #24]
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	ea40 0301 	orr.w	r3, r0, r1
 80065a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4b8f      	ldr	r3, [pc, #572]	@ (80067e8 <UART_SetConfig+0x2cc>)
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d005      	beq.n	80065bc <UART_SetConfig+0xa0>
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	4b8d      	ldr	r3, [pc, #564]	@ (80067ec <UART_SetConfig+0x2d0>)
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d104      	bne.n	80065c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065bc:	f7ff f826 	bl	800560c <HAL_RCC_GetPCLK2Freq>
 80065c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065c4:	e003      	b.n	80065ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065c6:	f7ff f80d 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 80065ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065d8:	f040 810c 	bne.w	80067f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065ee:	4622      	mov	r2, r4
 80065f0:	462b      	mov	r3, r5
 80065f2:	1891      	adds	r1, r2, r2
 80065f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065f6:	415b      	adcs	r3, r3
 80065f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065fe:	4621      	mov	r1, r4
 8006600:	eb12 0801 	adds.w	r8, r2, r1
 8006604:	4629      	mov	r1, r5
 8006606:	eb43 0901 	adc.w	r9, r3, r1
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800661a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800661e:	4690      	mov	r8, r2
 8006620:	4699      	mov	r9, r3
 8006622:	4623      	mov	r3, r4
 8006624:	eb18 0303 	adds.w	r3, r8, r3
 8006628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800662c:	462b      	mov	r3, r5
 800662e:	eb49 0303 	adc.w	r3, r9, r3
 8006632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006642:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006646:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800664a:	460b      	mov	r3, r1
 800664c:	18db      	adds	r3, r3, r3
 800664e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006650:	4613      	mov	r3, r2
 8006652:	eb42 0303 	adc.w	r3, r2, r3
 8006656:	657b      	str	r3, [r7, #84]	@ 0x54
 8006658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800665c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006660:	f7f9 fdc6 	bl	80001f0 <__aeabi_uldivmod>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4b61      	ldr	r3, [pc, #388]	@ (80067f0 <UART_SetConfig+0x2d4>)
 800666a:	fba3 2302 	umull	r2, r3, r3, r2
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	011c      	lsls	r4, r3, #4
 8006672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006676:	2200      	movs	r2, #0
 8006678:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800667c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006680:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006684:	4642      	mov	r2, r8
 8006686:	464b      	mov	r3, r9
 8006688:	1891      	adds	r1, r2, r2
 800668a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800668c:	415b      	adcs	r3, r3
 800668e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006690:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006694:	4641      	mov	r1, r8
 8006696:	eb12 0a01 	adds.w	sl, r2, r1
 800669a:	4649      	mov	r1, r9
 800669c:	eb43 0b01 	adc.w	fp, r3, r1
 80066a0:	f04f 0200 	mov.w	r2, #0
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066b4:	4692      	mov	sl, r2
 80066b6:	469b      	mov	fp, r3
 80066b8:	4643      	mov	r3, r8
 80066ba:	eb1a 0303 	adds.w	r3, sl, r3
 80066be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066c2:	464b      	mov	r3, r9
 80066c4:	eb4b 0303 	adc.w	r3, fp, r3
 80066c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066e0:	460b      	mov	r3, r1
 80066e2:	18db      	adds	r3, r3, r3
 80066e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066e6:	4613      	mov	r3, r2
 80066e8:	eb42 0303 	adc.w	r3, r2, r3
 80066ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066f6:	f7f9 fd7b 	bl	80001f0 <__aeabi_uldivmod>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4611      	mov	r1, r2
 8006700:	4b3b      	ldr	r3, [pc, #236]	@ (80067f0 <UART_SetConfig+0x2d4>)
 8006702:	fba3 2301 	umull	r2, r3, r3, r1
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	2264      	movs	r2, #100	@ 0x64
 800670a:	fb02 f303 	mul.w	r3, r2, r3
 800670e:	1acb      	subs	r3, r1, r3
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006716:	4b36      	ldr	r3, [pc, #216]	@ (80067f0 <UART_SetConfig+0x2d4>)
 8006718:	fba3 2302 	umull	r2, r3, r3, r2
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006724:	441c      	add	r4, r3
 8006726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800672a:	2200      	movs	r2, #0
 800672c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006730:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006734:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006738:	4642      	mov	r2, r8
 800673a:	464b      	mov	r3, r9
 800673c:	1891      	adds	r1, r2, r2
 800673e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006740:	415b      	adcs	r3, r3
 8006742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006744:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006748:	4641      	mov	r1, r8
 800674a:	1851      	adds	r1, r2, r1
 800674c:	6339      	str	r1, [r7, #48]	@ 0x30
 800674e:	4649      	mov	r1, r9
 8006750:	414b      	adcs	r3, r1
 8006752:	637b      	str	r3, [r7, #52]	@ 0x34
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006760:	4659      	mov	r1, fp
 8006762:	00cb      	lsls	r3, r1, #3
 8006764:	4651      	mov	r1, sl
 8006766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800676a:	4651      	mov	r1, sl
 800676c:	00ca      	lsls	r2, r1, #3
 800676e:	4610      	mov	r0, r2
 8006770:	4619      	mov	r1, r3
 8006772:	4603      	mov	r3, r0
 8006774:	4642      	mov	r2, r8
 8006776:	189b      	adds	r3, r3, r2
 8006778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800677c:	464b      	mov	r3, r9
 800677e:	460a      	mov	r2, r1
 8006780:	eb42 0303 	adc.w	r3, r2, r3
 8006784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006794:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800679c:	460b      	mov	r3, r1
 800679e:	18db      	adds	r3, r3, r3
 80067a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067a2:	4613      	mov	r3, r2
 80067a4:	eb42 0303 	adc.w	r3, r2, r3
 80067a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067b2:	f7f9 fd1d 	bl	80001f0 <__aeabi_uldivmod>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	4b0d      	ldr	r3, [pc, #52]	@ (80067f0 <UART_SetConfig+0x2d4>)
 80067bc:	fba3 1302 	umull	r1, r3, r3, r2
 80067c0:	095b      	lsrs	r3, r3, #5
 80067c2:	2164      	movs	r1, #100	@ 0x64
 80067c4:	fb01 f303 	mul.w	r3, r1, r3
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	3332      	adds	r3, #50	@ 0x32
 80067ce:	4a08      	ldr	r2, [pc, #32]	@ (80067f0 <UART_SetConfig+0x2d4>)
 80067d0:	fba2 2303 	umull	r2, r3, r2, r3
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	f003 0207 	and.w	r2, r3, #7
 80067da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4422      	add	r2, r4
 80067e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067e4:	e106      	b.n	80069f4 <UART_SetConfig+0x4d8>
 80067e6:	bf00      	nop
 80067e8:	40011000 	.word	0x40011000
 80067ec:	40011400 	.word	0x40011400
 80067f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067f8:	2200      	movs	r2, #0
 80067fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006802:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006806:	4642      	mov	r2, r8
 8006808:	464b      	mov	r3, r9
 800680a:	1891      	adds	r1, r2, r2
 800680c:	6239      	str	r1, [r7, #32]
 800680e:	415b      	adcs	r3, r3
 8006810:	627b      	str	r3, [r7, #36]	@ 0x24
 8006812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006816:	4641      	mov	r1, r8
 8006818:	1854      	adds	r4, r2, r1
 800681a:	4649      	mov	r1, r9
 800681c:	eb43 0501 	adc.w	r5, r3, r1
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	00eb      	lsls	r3, r5, #3
 800682a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800682e:	00e2      	lsls	r2, r4, #3
 8006830:	4614      	mov	r4, r2
 8006832:	461d      	mov	r5, r3
 8006834:	4643      	mov	r3, r8
 8006836:	18e3      	adds	r3, r4, r3
 8006838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800683c:	464b      	mov	r3, r9
 800683e:	eb45 0303 	adc.w	r3, r5, r3
 8006842:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006852:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	f04f 0300 	mov.w	r3, #0
 800685e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006862:	4629      	mov	r1, r5
 8006864:	008b      	lsls	r3, r1, #2
 8006866:	4621      	mov	r1, r4
 8006868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800686c:	4621      	mov	r1, r4
 800686e:	008a      	lsls	r2, r1, #2
 8006870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006874:	f7f9 fcbc 	bl	80001f0 <__aeabi_uldivmod>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4b60      	ldr	r3, [pc, #384]	@ (8006a00 <UART_SetConfig+0x4e4>)
 800687e:	fba3 2302 	umull	r2, r3, r3, r2
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	011c      	lsls	r4, r3, #4
 8006886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800688a:	2200      	movs	r2, #0
 800688c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006890:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006894:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006898:	4642      	mov	r2, r8
 800689a:	464b      	mov	r3, r9
 800689c:	1891      	adds	r1, r2, r2
 800689e:	61b9      	str	r1, [r7, #24]
 80068a0:	415b      	adcs	r3, r3
 80068a2:	61fb      	str	r3, [r7, #28]
 80068a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068a8:	4641      	mov	r1, r8
 80068aa:	1851      	adds	r1, r2, r1
 80068ac:	6139      	str	r1, [r7, #16]
 80068ae:	4649      	mov	r1, r9
 80068b0:	414b      	adcs	r3, r1
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068c0:	4659      	mov	r1, fp
 80068c2:	00cb      	lsls	r3, r1, #3
 80068c4:	4651      	mov	r1, sl
 80068c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ca:	4651      	mov	r1, sl
 80068cc:	00ca      	lsls	r2, r1, #3
 80068ce:	4610      	mov	r0, r2
 80068d0:	4619      	mov	r1, r3
 80068d2:	4603      	mov	r3, r0
 80068d4:	4642      	mov	r2, r8
 80068d6:	189b      	adds	r3, r3, r2
 80068d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068dc:	464b      	mov	r3, r9
 80068de:	460a      	mov	r2, r1
 80068e0:	eb42 0303 	adc.w	r3, r2, r3
 80068e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006900:	4649      	mov	r1, r9
 8006902:	008b      	lsls	r3, r1, #2
 8006904:	4641      	mov	r1, r8
 8006906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800690a:	4641      	mov	r1, r8
 800690c:	008a      	lsls	r2, r1, #2
 800690e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006912:	f7f9 fc6d 	bl	80001f0 <__aeabi_uldivmod>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4611      	mov	r1, r2
 800691c:	4b38      	ldr	r3, [pc, #224]	@ (8006a00 <UART_SetConfig+0x4e4>)
 800691e:	fba3 2301 	umull	r2, r3, r3, r1
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	2264      	movs	r2, #100	@ 0x64
 8006926:	fb02 f303 	mul.w	r3, r2, r3
 800692a:	1acb      	subs	r3, r1, r3
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	3332      	adds	r3, #50	@ 0x32
 8006930:	4a33      	ldr	r2, [pc, #204]	@ (8006a00 <UART_SetConfig+0x4e4>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800693c:	441c      	add	r4, r3
 800693e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006942:	2200      	movs	r2, #0
 8006944:	673b      	str	r3, [r7, #112]	@ 0x70
 8006946:	677a      	str	r2, [r7, #116]	@ 0x74
 8006948:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800694c:	4642      	mov	r2, r8
 800694e:	464b      	mov	r3, r9
 8006950:	1891      	adds	r1, r2, r2
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	415b      	adcs	r3, r3
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800695c:	4641      	mov	r1, r8
 800695e:	1851      	adds	r1, r2, r1
 8006960:	6039      	str	r1, [r7, #0]
 8006962:	4649      	mov	r1, r9
 8006964:	414b      	adcs	r3, r1
 8006966:	607b      	str	r3, [r7, #4]
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006974:	4659      	mov	r1, fp
 8006976:	00cb      	lsls	r3, r1, #3
 8006978:	4651      	mov	r1, sl
 800697a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800697e:	4651      	mov	r1, sl
 8006980:	00ca      	lsls	r2, r1, #3
 8006982:	4610      	mov	r0, r2
 8006984:	4619      	mov	r1, r3
 8006986:	4603      	mov	r3, r0
 8006988:	4642      	mov	r2, r8
 800698a:	189b      	adds	r3, r3, r2
 800698c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800698e:	464b      	mov	r3, r9
 8006990:	460a      	mov	r2, r1
 8006992:	eb42 0303 	adc.w	r3, r2, r3
 8006996:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80069a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069b0:	4649      	mov	r1, r9
 80069b2:	008b      	lsls	r3, r1, #2
 80069b4:	4641      	mov	r1, r8
 80069b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ba:	4641      	mov	r1, r8
 80069bc:	008a      	lsls	r2, r1, #2
 80069be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069c2:	f7f9 fc15 	bl	80001f0 <__aeabi_uldivmod>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006a00 <UART_SetConfig+0x4e4>)
 80069cc:	fba3 1302 	umull	r1, r3, r3, r2
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	2164      	movs	r1, #100	@ 0x64
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	3332      	adds	r3, #50	@ 0x32
 80069de:	4a08      	ldr	r2, [pc, #32]	@ (8006a00 <UART_SetConfig+0x4e4>)
 80069e0:	fba2 2303 	umull	r2, r3, r2, r3
 80069e4:	095b      	lsrs	r3, r3, #5
 80069e6:	f003 020f 	and.w	r2, r3, #15
 80069ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4422      	add	r2, r4
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069fa:	46bd      	mov	sp, r7
 80069fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a00:	51eb851f 	.word	0x51eb851f

08006a04 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d123      	bne.n	8006a5e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006a1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	6851      	ldr	r1, [r2, #4]
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	6892      	ldr	r2, [r2, #8]
 8006a2a:	4311      	orrs	r1, r2
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	68d2      	ldr	r2, [r2, #12]
 8006a30:	4311      	orrs	r1, r2
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	6912      	ldr	r2, [r2, #16]
 8006a36:	4311      	orrs	r1, r2
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	6952      	ldr	r2, [r2, #20]
 8006a3c:	4311      	orrs	r1, r2
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	6992      	ldr	r2, [r2, #24]
 8006a42:	4311      	orrs	r1, r2
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	69d2      	ldr	r2, [r2, #28]
 8006a48:	4311      	orrs	r1, r2
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	6a12      	ldr	r2, [r2, #32]
 8006a4e:	4311      	orrs	r1, r2
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a54:	430a      	orrs	r2, r1
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	e028      	b.n	8006ab0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	69d9      	ldr	r1, [r3, #28]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	4319      	orrs	r1, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a74:	430b      	orrs	r3, r1
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006a84:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	6851      	ldr	r1, [r2, #4]
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	6892      	ldr	r2, [r2, #8]
 8006a90:	4311      	orrs	r1, r2
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	68d2      	ldr	r2, [r2, #12]
 8006a96:	4311      	orrs	r1, r2
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	6912      	ldr	r2, [r2, #16]
 8006a9c:	4311      	orrs	r1, r2
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	6952      	ldr	r2, [r2, #20]
 8006aa2:	4311      	orrs	r1, r2
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	6992      	ldr	r2, [r2, #24]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d128      	bne.n	8006b22 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	1e59      	subs	r1, r3, #1
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	011b      	lsls	r3, r3, #4
 8006ae6:	4319      	orrs	r1, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	021b      	lsls	r3, r3, #8
 8006af0:	4319      	orrs	r1, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	031b      	lsls	r3, r3, #12
 8006afa:	4319      	orrs	r1, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	041b      	lsls	r3, r3, #16
 8006b04:	4319      	orrs	r1, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	051b      	lsls	r3, r3, #20
 8006b0e:	4319      	orrs	r1, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	061b      	lsls	r3, r3, #24
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	609a      	str	r2, [r3, #8]
 8006b20:	e02f      	b.n	8006b82 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	68d2      	ldr	r2, [r2, #12]
 8006b32:	3a01      	subs	r2, #1
 8006b34:	0311      	lsls	r1, r2, #12
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	6952      	ldr	r2, [r2, #20]
 8006b3a:	3a01      	subs	r2, #1
 8006b3c:	0512      	lsls	r2, r2, #20
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	431a      	orrs	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	1e59      	subs	r1, r3, #1
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	4319      	orrs	r1, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	4319      	orrs	r1, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	041b      	lsls	r3, r3, #16
 8006b70:	4319      	orrs	r1, r3
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	061b      	lsls	r3, r3, #24
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b90:	b084      	sub	sp, #16
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	f107 001c 	add.w	r0, r7, #28
 8006b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ba2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d123      	bne.n	8006bf2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d105      	bne.n	8006be6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f9dc 	bl	8006fa4 <USB_CoreReset>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73fb      	strb	r3, [r7, #15]
 8006bf0:	e01b      	b.n	8006c2a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f9d0 	bl	8006fa4 <USB_CoreReset>
 8006c04:	4603      	mov	r3, r0
 8006c06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c08:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c1c:	e005      	b.n	8006c2a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c2a:	7fbb      	ldrb	r3, [r7, #30]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d10b      	bne.n	8006c48 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f043 0206 	orr.w	r2, r3, #6
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f043 0220 	orr.w	r2, r3, #32
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c54:	b004      	add	sp, #16
 8006c56:	4770      	bx	lr

08006c58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f043 0201 	orr.w	r2, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f023 0201 	bic.w	r2, r3, #1
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d115      	bne.n	8006cea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cca:	200a      	movs	r0, #10
 8006ccc:	f7fa fcea 	bl	80016a4 <HAL_Delay>
      ms += 10U;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	330a      	adds	r3, #10
 8006cd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f956 	bl	8006f88 <USB_GetMode>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d01e      	beq.n	8006d20 <USB_SetCurrentMode+0x84>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ce6:	d9f0      	bls.n	8006cca <USB_SetCurrentMode+0x2e>
 8006ce8:	e01a      	b.n	8006d20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d115      	bne.n	8006d1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cfc:	200a      	movs	r0, #10
 8006cfe:	f7fa fcd1 	bl	80016a4 <HAL_Delay>
      ms += 10U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	330a      	adds	r3, #10
 8006d06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f93d 	bl	8006f88 <USB_GetMode>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <USB_SetCurrentMode+0x84>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d18:	d9f0      	bls.n	8006cfc <USB_SetCurrentMode+0x60>
 8006d1a:	e001      	b.n	8006d20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e005      	b.n	8006d2c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d24:	d101      	bne.n	8006d2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e000      	b.n	8006d2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3301      	adds	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d4e:	d901      	bls.n	8006d54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e01b      	b.n	8006d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	daf2      	bge.n	8006d42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	019b      	lsls	r3, r3, #6
 8006d64:	f043 0220 	orr.w	r2, r3, #32
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d78:	d901      	bls.n	8006d7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e006      	b.n	8006d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d0f0      	beq.n	8006d6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3301      	adds	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006db0:	d901      	bls.n	8006db6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e018      	b.n	8006de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	daf2      	bge.n	8006da4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2210      	movs	r2, #16
 8006dc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dd4:	d901      	bls.n	8006dda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e006      	b.n	8006de8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f003 0310 	and.w	r3, r3, #16
 8006de2:	2b10      	cmp	r3, #16
 8006de4:	d0f0      	beq.n	8006dc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b089      	sub	sp, #36	@ 0x24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	4611      	mov	r1, r2
 8006e00:	461a      	mov	r2, r3
 8006e02:	460b      	mov	r3, r1
 8006e04:	71fb      	strb	r3, [r7, #7]
 8006e06:	4613      	mov	r3, r2
 8006e08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d123      	bne.n	8006e62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e1a:	88bb      	ldrh	r3, [r7, #4]
 8006e1c:	3303      	adds	r3, #3
 8006e1e:	089b      	lsrs	r3, r3, #2
 8006e20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	e018      	b.n	8006e5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	031a      	lsls	r2, r3, #12
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e34:	461a      	mov	r2, r3
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	3301      	adds	r3, #1
 8006e46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	3301      	adds	r3, #1
 8006e52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	3301      	adds	r3, #1
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d3e2      	bcc.n	8006e28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3724      	adds	r7, #36	@ 0x24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b08b      	sub	sp, #44	@ 0x2c
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	089b      	lsrs	r3, r3, #2
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e8e:	88fb      	ldrh	r3, [r7, #6]
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e96:	2300      	movs	r3, #0
 8006e98:	623b      	str	r3, [r7, #32]
 8006e9a:	e014      	b.n	8006ec6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	3301      	adds	r3, #1
 8006eac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	623b      	str	r3, [r7, #32]
 8006ec6:	6a3a      	ldr	r2, [r7, #32]
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d3e6      	bcc.n	8006e9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ece:	8bfb      	ldrh	r3, [r7, #30]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01e      	beq.n	8006f12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f107 0310 	add.w	r3, r7, #16
 8006ee4:	6812      	ldr	r2, [r2, #0]
 8006ee6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	701a      	strb	r2, [r3, #0]
      i++;
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	3301      	adds	r3, #1
 8006efe:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	3301      	adds	r3, #1
 8006f04:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006f06:	8bfb      	ldrh	r3, [r7, #30]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f0c:	8bfb      	ldrh	r3, [r7, #30]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1ea      	bne.n	8006ee8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	372c      	adds	r7, #44	@ 0x2c
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4013      	ands	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f38:	68fb      	ldr	r3, [r7, #12]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006f56:	78fb      	ldrb	r3, [r7, #3]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006f66:	78fb      	ldrb	r3, [r7, #3]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	4013      	ands	r3, r2
 8006f78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	f003 0301 	and.w	r3, r3, #1
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fbc:	d901      	bls.n	8006fc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e01b      	b.n	8006ffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	daf2      	bge.n	8006fb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f043 0201 	orr.w	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fe6:	d901      	bls.n	8006fec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e006      	b.n	8006ffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d0f0      	beq.n	8006fda <USB_CoreReset+0x36>

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
	...

08007008 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007008:	b084      	sub	sp, #16
 800700a:	b580      	push	{r7, lr}
 800700c:	b086      	sub	sp, #24
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007028:	461a      	mov	r2, r3
 800702a:	2300      	movs	r3, #0
 800702c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007032:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	d119      	bne.n	8007092 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800705e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007062:	2b01      	cmp	r3, #1
 8007064:	d10a      	bne.n	800707c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007074:	f043 0304 	orr.w	r3, r3, #4
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	e014      	b.n	80070a6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800708a:	f023 0304 	bic.w	r3, r3, #4
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	e009      	b.n	80070a6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070a0:	f023 0304 	bic.w	r3, r3, #4
 80070a4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070a6:	2110      	movs	r1, #16
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff fe43 	bl	8006d34 <USB_FlushTxFifo>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff fe6d 	bl	8006d98 <USB_FlushRxFifo>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80070c8:	2300      	movs	r3, #0
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	e015      	b.n	80070fa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070da:	461a      	mov	r2, r3
 80070dc:	f04f 33ff 	mov.w	r3, #4294967295
 80070e0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070ee:	461a      	mov	r2, r3
 80070f0:	2300      	movs	r3, #0
 80070f2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	3301      	adds	r3, #1
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070fe:	461a      	mov	r2, r3
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	4293      	cmp	r3, r2
 8007104:	d3e3      	bcc.n	80070ce <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f04f 32ff 	mov.w	r2, #4294967295
 8007112:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a18      	ldr	r2, [pc, #96]	@ (8007178 <USB_HostInit+0x170>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d10b      	bne.n	8007134 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007122:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a15      	ldr	r2, [pc, #84]	@ (800717c <USB_HostInit+0x174>)
 8007128:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a14      	ldr	r2, [pc, #80]	@ (8007180 <USB_HostInit+0x178>)
 800712e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007132:	e009      	b.n	8007148 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2280      	movs	r2, #128	@ 0x80
 8007138:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a11      	ldr	r2, [pc, #68]	@ (8007184 <USB_HostInit+0x17c>)
 800713e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a11      	ldr	r2, [pc, #68]	@ (8007188 <USB_HostInit+0x180>)
 8007144:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007148:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800714c:	2b00      	cmp	r3, #0
 800714e:	d105      	bne.n	800715c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	f043 0210 	orr.w	r2, r3, #16
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	699a      	ldr	r2, [r3, #24]
 8007160:	4b0a      	ldr	r3, [pc, #40]	@ (800718c <USB_HostInit+0x184>)
 8007162:	4313      	orrs	r3, r2
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007174:	b004      	add	sp, #16
 8007176:	4770      	bx	lr
 8007178:	40040000 	.word	0x40040000
 800717c:	01000200 	.word	0x01000200
 8007180:	00e00300 	.word	0x00e00300
 8007184:	00600080 	.word	0x00600080
 8007188:	004000e0 	.word	0x004000e0
 800718c:	a3200008 	.word	0xa3200008

08007190 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80071ae:	f023 0303 	bic.w	r3, r3, #3
 80071b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	68f9      	ldr	r1, [r7, #12]
 80071c4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80071c8:	4313      	orrs	r3, r2
 80071ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d107      	bne.n	80071e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071d8:	461a      	mov	r2, r3
 80071da:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80071de:	6053      	str	r3, [r2, #4]
 80071e0:	e00c      	b.n	80071fc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d107      	bne.n	80071f8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071ee:	461a      	mov	r2, r3
 80071f0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80071f4:	6053      	str	r3, [r2, #4]
 80071f6:	e001      	b.n	80071fc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e000      	b.n	80071fe <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800722a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007238:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800723a:	2064      	movs	r0, #100	@ 0x64
 800723c:	f7fa fa32 	bl	80016a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800724c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800724e:	200a      	movs	r0, #10
 8007250:	f7fa fa28 	bl	80016a4 <HAL_Delay>

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	460b      	mov	r3, r1
 8007268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007282:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d109      	bne.n	80072a2 <USB_DriveVbus+0x44>
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d106      	bne.n	80072a2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800729c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80072a0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ac:	d109      	bne.n	80072c2 <USB_DriveVbus+0x64>
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d106      	bne.n	80072c2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80072bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072c0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	0c5b      	lsrs	r3, r3, #17
 80072ee:	f003 0303 	and.w	r3, r3, #3
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80072fe:	b480      	push	{r7}
 8007300:	b085      	sub	sp, #20
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	b29b      	uxth	r3, r3
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	4608      	mov	r0, r1
 800732a:	4611      	mov	r1, r2
 800732c:	461a      	mov	r2, r3
 800732e:	4603      	mov	r3, r0
 8007330:	70fb      	strb	r3, [r7, #3]
 8007332:	460b      	mov	r3, r1
 8007334:	70bb      	strb	r3, [r7, #2]
 8007336:	4613      	mov	r3, r2
 8007338:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	4413      	add	r3, r2
 800734a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800734e:	461a      	mov	r2, r3
 8007350:	f04f 33ff 	mov.w	r3, #4294967295
 8007354:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007356:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800735a:	2b03      	cmp	r3, #3
 800735c:	d87c      	bhi.n	8007458 <USB_HC_Init+0x138>
 800735e:	a201      	add	r2, pc, #4	@ (adr r2, 8007364 <USB_HC_Init+0x44>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	08007375 	.word	0x08007375
 8007368:	0800741b 	.word	0x0800741b
 800736c:	08007375 	.word	0x08007375
 8007370:	080073dd 	.word	0x080073dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	4413      	add	r3, r2
 800737c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007380:	461a      	mov	r2, r3
 8007382:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007386:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007388:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800738c:	2b00      	cmp	r3, #0
 800738e:	da10      	bge.n	80073b2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	78fa      	ldrb	r2, [r7, #3]
 80073a0:	0151      	lsls	r1, r2, #5
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	440a      	add	r2, r1
 80073a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073ae:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80073b0:	e055      	b.n	800745e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a6f      	ldr	r2, [pc, #444]	@ (8007574 <USB_HC_Init+0x254>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d151      	bne.n	800745e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	78fa      	ldrb	r2, [r7, #3]
 80073ca:	0151      	lsls	r1, r2, #5
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	440a      	add	r2, r1
 80073d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80073d8:	60d3      	str	r3, [r2, #12]
      break;
 80073da:	e040      	b.n	800745e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073e8:	461a      	mov	r2, r3
 80073ea:	f240 639d 	movw	r3, #1693	@ 0x69d
 80073ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	da34      	bge.n	8007462 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	0151      	lsls	r1, r2, #5
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	440a      	add	r2, r1
 800740e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007416:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007418:	e023      	b.n	8007462 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4413      	add	r3, r2
 8007422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007426:	461a      	mov	r2, r3
 8007428:	f240 2325 	movw	r3, #549	@ 0x225
 800742c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800742e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007432:	2b00      	cmp	r3, #0
 8007434:	da17      	bge.n	8007466 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	4413      	add	r3, r2
 800743e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	0151      	lsls	r1, r2, #5
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	440a      	add	r2, r1
 800744c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007450:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007454:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007456:	e006      	b.n	8007466 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	77fb      	strb	r3, [r7, #31]
      break;
 800745c:	e004      	b.n	8007468 <USB_HC_Init+0x148>
      break;
 800745e:	bf00      	nop
 8007460:	e002      	b.n	8007468 <USB_HC_Init+0x148>
      break;
 8007462:	bf00      	nop
 8007464:	e000      	b.n	8007468 <USB_HC_Init+0x148>
      break;
 8007466:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007468:	78fb      	ldrb	r3, [r7, #3]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	4413      	add	r3, r2
 8007470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007474:	461a      	mov	r2, r3
 8007476:	2300      	movs	r3, #0
 8007478:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	4413      	add	r3, r2
 8007482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	78fa      	ldrb	r2, [r7, #3]
 800748a:	0151      	lsls	r1, r2, #5
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	440a      	add	r2, r1
 8007490:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007494:	f043 0302 	orr.w	r3, r3, #2
 8007498:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074a0:	699a      	ldr	r2, [r3, #24]
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	f003 030f 	and.w	r3, r3, #15
 80074a8:	2101      	movs	r1, #1
 80074aa:	fa01 f303 	lsl.w	r3, r1, r3
 80074ae:	6939      	ldr	r1, [r7, #16]
 80074b0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80074b4:	4313      	orrs	r3, r2
 80074b6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80074c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	da03      	bge.n	80074d4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80074cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074d0:	61bb      	str	r3, [r7, #24]
 80074d2:	e001      	b.n	80074d8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff fef9 	bl	80072d0 <USB_GetHostSpeed>
 80074de:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80074e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d106      	bne.n	80074f6 <USB_HC_Init+0x1d6>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d003      	beq.n	80074f6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80074ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e001      	b.n	80074fa <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074fa:	787b      	ldrb	r3, [r7, #1]
 80074fc:	059b      	lsls	r3, r3, #22
 80074fe:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007502:	78bb      	ldrb	r3, [r7, #2]
 8007504:	02db      	lsls	r3, r3, #11
 8007506:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800750a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800750c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007510:	049b      	lsls	r3, r3, #18
 8007512:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007516:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007518:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800751a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800751e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	431a      	orrs	r2, r3
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	440a      	add	r2, r1
 8007530:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007538:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800753a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800753e:	2b03      	cmp	r3, #3
 8007540:	d003      	beq.n	800754a <USB_HC_Init+0x22a>
 8007542:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007546:	2b01      	cmp	r3, #1
 8007548:	d10f      	bne.n	800756a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	4413      	add	r3, r2
 8007552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	78fa      	ldrb	r2, [r7, #3]
 800755a:	0151      	lsls	r1, r2, #5
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	440a      	add	r2, r1
 8007560:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007564:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007568:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800756a:	7ffb      	ldrb	r3, [r7, #31]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3720      	adds	r7, #32
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	40040000 	.word	0x40040000

08007578 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08c      	sub	sp, #48	@ 0x30
 800757c:	af02      	add	r7, sp, #8
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	785b      	ldrb	r3, [r3, #1]
 800758e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007594:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4a5d      	ldr	r2, [pc, #372]	@ (8007710 <USB_HC_StartXfer+0x198>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d12f      	bne.n	80075fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d11c      	bne.n	80075de <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	7c9b      	ldrb	r3, [r3, #18]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <USB_HC_StartXfer+0x3c>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	7c9b      	ldrb	r3, [r3, #18]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d124      	bne.n	80075fe <USB_HC_StartXfer+0x86>
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	799b      	ldrb	r3, [r3, #6]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d120      	bne.n	80075fe <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	69fa      	ldr	r2, [r7, #28]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	6a3a      	ldr	r2, [r7, #32]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075da:	60d3      	str	r3, [r2, #12]
 80075dc:	e00f      	b.n	80075fe <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	791b      	ldrb	r3, [r3, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10b      	bne.n	80075fe <USB_HC_StartXfer+0x86>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	795b      	ldrb	r3, [r3, #5]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d107      	bne.n	80075fe <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	4619      	mov	r1, r3
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fb6b 	bl	8007cd0 <USB_DoPing>
        return HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	e232      	b.n	8007a64 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	799b      	ldrb	r3, [r3, #6]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d158      	bne.n	80076b8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007606:	2301      	movs	r3, #1
 8007608:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	78db      	ldrb	r3, [r3, #3]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d007      	beq.n	8007622 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007612:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	8a92      	ldrh	r2, [r2, #20]
 8007618:	fb03 f202 	mul.w	r2, r3, r2
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	61da      	str	r2, [r3, #28]
 8007620:	e07c      	b.n	800771c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	7c9b      	ldrb	r3, [r3, #18]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d130      	bne.n	800768c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	2bbc      	cmp	r3, #188	@ 0xbc
 8007630:	d918      	bls.n	8007664 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	8a9b      	ldrh	r3, [r3, #20]
 8007636:	461a      	mov	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	69da      	ldr	r2, [r3, #28]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d003      	beq.n	8007654 <USB_HC_StartXfer+0xdc>
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	2b02      	cmp	r3, #2
 8007652:	d103      	bne.n	800765c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2202      	movs	r2, #2
 8007658:	60da      	str	r2, [r3, #12]
 800765a:	e05f      	b.n	800771c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2201      	movs	r2, #1
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	e05b      	b.n	800771c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	6a1a      	ldr	r2, [r3, #32]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d007      	beq.n	8007684 <USB_HC_StartXfer+0x10c>
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	2b02      	cmp	r3, #2
 800767a:	d003      	beq.n	8007684 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2204      	movs	r2, #4
 8007680:	60da      	str	r2, [r3, #12]
 8007682:	e04b      	b.n	800771c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2203      	movs	r2, #3
 8007688:	60da      	str	r2, [r3, #12]
 800768a:	e047      	b.n	800771c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d10d      	bne.n	80076ae <USB_HC_StartXfer+0x136>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	8a92      	ldrh	r2, [r2, #20]
 800769a:	4293      	cmp	r3, r2
 800769c:	d907      	bls.n	80076ae <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800769e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	8a92      	ldrh	r2, [r2, #20]
 80076a4:	fb03 f202 	mul.w	r2, r3, r2
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	61da      	str	r2, [r3, #28]
 80076ac:	e036      	b.n	800771c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6a1a      	ldr	r2, [r3, #32]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	61da      	str	r2, [r3, #28]
 80076b6:	e031      	b.n	800771c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d018      	beq.n	80076f2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	8a92      	ldrh	r2, [r2, #20]
 80076c8:	4413      	add	r3, r2
 80076ca:	3b01      	subs	r3, #1
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	8a92      	ldrh	r2, [r2, #20]
 80076d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80076d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80076d6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80076d8:	8b7b      	ldrh	r3, [r7, #26]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d90b      	bls.n	80076f6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80076de:	8b7b      	ldrh	r3, [r7, #26]
 80076e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	8a92      	ldrh	r2, [r2, #20]
 80076e8:	fb03 f202 	mul.w	r2, r3, r2
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	61da      	str	r2, [r3, #28]
 80076f0:	e001      	b.n	80076f6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80076f2:	2301      	movs	r3, #1
 80076f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	78db      	ldrb	r3, [r3, #3]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	8a92      	ldrh	r2, [r2, #20]
 8007704:	fb03 f202 	mul.w	r2, r3, r2
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	61da      	str	r2, [r3, #28]
 800770c:	e006      	b.n	800771c <USB_HC_StartXfer+0x1a4>
 800770e:	bf00      	nop
 8007710:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	6a1a      	ldr	r2, [r3, #32]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007724:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007726:	04d9      	lsls	r1, r3, #19
 8007728:	4ba3      	ldr	r3, [pc, #652]	@ (80079b8 <USB_HC_StartXfer+0x440>)
 800772a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800772c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	7d9b      	ldrb	r3, [r3, #22]
 8007732:	075b      	lsls	r3, r3, #29
 8007734:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007738:	69f9      	ldr	r1, [r7, #28]
 800773a:	0148      	lsls	r0, r1, #5
 800773c:	6a39      	ldr	r1, [r7, #32]
 800773e:	4401      	add	r1, r0
 8007740:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007744:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007746:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007748:	79fb      	ldrb	r3, [r7, #7]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d009      	beq.n	8007762 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	6999      	ldr	r1, [r3, #24]
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	4413      	add	r3, r2
 800775a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800775e:	460a      	mov	r2, r1
 8007760:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	bf0c      	ite	eq
 8007772:	2301      	moveq	r3, #1
 8007774:	2300      	movne	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	4413      	add	r3, r2
 8007782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	69fa      	ldr	r2, [r7, #28]
 800778a:	0151      	lsls	r1, r2, #5
 800778c:	6a3a      	ldr	r2, [r7, #32]
 800778e:	440a      	add	r2, r1
 8007790:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007794:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007798:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	7e7b      	ldrb	r3, [r7, #25]
 80077aa:	075b      	lsls	r3, r3, #29
 80077ac:	69f9      	ldr	r1, [r7, #28]
 80077ae:	0148      	lsls	r0, r1, #5
 80077b0:	6a39      	ldr	r1, [r7, #32]
 80077b2:	4401      	add	r1, r0
 80077b4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80077b8:	4313      	orrs	r3, r2
 80077ba:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	799b      	ldrb	r3, [r3, #6]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	f040 80c3 	bne.w	800794c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	7c5b      	ldrb	r3, [r3, #17]
 80077ca:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80077d0:	4313      	orrs	r3, r2
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	0151      	lsls	r1, r2, #5
 80077d6:	6a3a      	ldr	r2, [r7, #32]
 80077d8:	440a      	add	r2, r1
 80077da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80077de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80077e2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	0151      	lsls	r1, r2, #5
 80077f6:	6a3a      	ldr	r2, [r7, #32]
 80077f8:	440a      	add	r2, r1
 80077fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077fe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007802:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	79db      	ldrb	r3, [r3, #7]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d123      	bne.n	8007854 <USB_HC_StartXfer+0x2dc>
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	78db      	ldrb	r3, [r3, #3]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d11f      	bne.n	8007854 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	4413      	add	r3, r2
 800781c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	0151      	lsls	r1, r2, #5
 8007826:	6a3a      	ldr	r2, [r7, #32]
 8007828:	440a      	add	r2, r1
 800782a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800782e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007832:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	4413      	add	r3, r2
 800783c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	0151      	lsls	r1, r2, #5
 8007846:	6a3a      	ldr	r2, [r7, #32]
 8007848:	440a      	add	r2, r1
 800784a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800784e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007852:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	7c9b      	ldrb	r3, [r3, #18]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d003      	beq.n	8007864 <USB_HC_StartXfer+0x2ec>
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	7c9b      	ldrb	r3, [r3, #18]
 8007860:	2b03      	cmp	r3, #3
 8007862:	d117      	bne.n	8007894 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007868:	2b01      	cmp	r3, #1
 800786a:	d113      	bne.n	8007894 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	78db      	ldrb	r3, [r3, #3]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d10f      	bne.n	8007894 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	4413      	add	r3, r2
 800787c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	0151      	lsls	r1, r2, #5
 8007886:	6a3a      	ldr	r2, [r7, #32]
 8007888:	440a      	add	r2, r1
 800788a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800788e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007892:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	7c9b      	ldrb	r3, [r3, #18]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d162      	bne.n	8007962 <USB_HC_StartXfer+0x3ea>
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	78db      	ldrb	r3, [r3, #3]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d15e      	bne.n	8007962 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d858      	bhi.n	8007960 <USB_HC_StartXfer+0x3e8>
 80078ae:	a201      	add	r2, pc, #4	@ (adr r2, 80078b4 <USB_HC_StartXfer+0x33c>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	080078c5 	.word	0x080078c5
 80078b8:	080078e7 	.word	0x080078e7
 80078bc:	08007909 	.word	0x08007909
 80078c0:	0800792b 	.word	0x0800792b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	69fa      	ldr	r2, [r7, #28]
 80078d4:	0151      	lsls	r1, r2, #5
 80078d6:	6a3a      	ldr	r2, [r7, #32]
 80078d8:	440a      	add	r2, r1
 80078da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078e2:	6053      	str	r3, [r2, #4]
          break;
 80078e4:	e03d      	b.n	8007962 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	0151      	lsls	r1, r2, #5
 80078f8:	6a3a      	ldr	r2, [r7, #32]
 80078fa:	440a      	add	r2, r1
 80078fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007900:	f043 030e 	orr.w	r3, r3, #14
 8007904:	6053      	str	r3, [r2, #4]
          break;
 8007906:	e02c      	b.n	8007962 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	4413      	add	r3, r2
 8007910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	69fa      	ldr	r2, [r7, #28]
 8007918:	0151      	lsls	r1, r2, #5
 800791a:	6a3a      	ldr	r2, [r7, #32]
 800791c:	440a      	add	r2, r1
 800791e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007922:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007926:	6053      	str	r3, [r2, #4]
          break;
 8007928:	e01b      	b.n	8007962 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	4413      	add	r3, r2
 8007932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	69fa      	ldr	r2, [r7, #28]
 800793a:	0151      	lsls	r1, r2, #5
 800793c:	6a3a      	ldr	r2, [r7, #32]
 800793e:	440a      	add	r2, r1
 8007940:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007944:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007948:	6053      	str	r3, [r2, #4]
          break;
 800794a:	e00a      	b.n	8007962 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	4413      	add	r3, r2
 8007954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007958:	461a      	mov	r2, r3
 800795a:	2300      	movs	r3, #0
 800795c:	6053      	str	r3, [r2, #4]
 800795e:	e000      	b.n	8007962 <USB_HC_StartXfer+0x3ea>
          break;
 8007960:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	4413      	add	r3, r2
 800796a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007978:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	78db      	ldrb	r3, [r3, #3]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d004      	beq.n	800798c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	e003      	b.n	8007994 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007992:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800799a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079a8:	461a      	mov	r2, r3
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	e055      	b.n	8007a64 <USB_HC_StartXfer+0x4ec>
 80079b8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	78db      	ldrb	r3, [r3, #3]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d14e      	bne.n	8007a62 <USB_HC_StartXfer+0x4ea>
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d04a      	beq.n	8007a62 <USB_HC_StartXfer+0x4ea>
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	79db      	ldrb	r3, [r3, #7]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d146      	bne.n	8007a62 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	7c9b      	ldrb	r3, [r3, #18]
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d831      	bhi.n	8007a40 <USB_HC_StartXfer+0x4c8>
 80079dc:	a201      	add	r2, pc, #4	@ (adr r2, 80079e4 <USB_HC_StartXfer+0x46c>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	080079f5 	.word	0x080079f5
 80079e8:	08007a19 	.word	0x08007a19
 80079ec:	080079f5 	.word	0x080079f5
 80079f0:	08007a19 	.word	0x08007a19
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	3303      	adds	r3, #3
 80079fa:	089b      	lsrs	r3, r3, #2
 80079fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80079fe:	8afa      	ldrh	r2, [r7, #22]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d91c      	bls.n	8007a44 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	f043 0220 	orr.w	r2, r3, #32
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a16:	e015      	b.n	8007a44 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	3303      	adds	r3, #3
 8007a1e:	089b      	lsrs	r3, r3, #2
 8007a20:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007a22:	8afa      	ldrh	r2, [r7, #22]
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d90a      	bls.n	8007a48 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a3e:	e003      	b.n	8007a48 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007a40:	bf00      	nop
 8007a42:	e002      	b.n	8007a4a <USB_HC_StartXfer+0x4d2>
        break;
 8007a44:	bf00      	nop
 8007a46:	e000      	b.n	8007a4a <USB_HC_StartXfer+0x4d2>
        break;
 8007a48:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	6999      	ldr	r1, [r3, #24]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	785a      	ldrb	r2, [r3, #1]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2000      	movs	r0, #0
 8007a5a:	9000      	str	r0, [sp, #0]
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f7ff f9c9 	bl	8006df4 <USB_WritePacket>
  }

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3728      	adds	r7, #40	@ 0x28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	b29b      	uxth	r3, r3
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b089      	sub	sp, #36	@ 0x24
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	460b      	mov	r3, r1
 8007a98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	0c9b      	lsrs	r3, r3, #18
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	0fdb      	lsrs	r3, r3, #31
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	0fdb      	lsrs	r3, r3, #31
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d10d      	bne.n	8007b10 <USB_HC_Halt+0x82>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10a      	bne.n	8007b10 <USB_HC_Halt+0x82>
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d005      	beq.n	8007b0c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d002      	beq.n	8007b0c <USB_HC_Halt+0x7e>
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d101      	bne.n	8007b10 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e0d8      	b.n	8007cc2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <USB_HC_Halt+0x8e>
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d173      	bne.n	8007c04 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	0151      	lsls	r1, r2, #5
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	440a      	add	r2, r1
 8007b32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b3a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d14a      	bne.n	8007bde <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d133      	bne.n	8007bbc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	0151      	lsls	r1, r2, #5
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	440a      	add	r2, r1
 8007b6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b72:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69ba      	ldr	r2, [r7, #24]
 8007b84:	0151      	lsls	r1, r2, #5
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	440a      	add	r2, r1
 8007b8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b92:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	3301      	adds	r3, #1
 8007b98:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ba0:	d82e      	bhi.n	8007c00 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bb8:	d0ec      	beq.n	8007b94 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bba:	e081      	b.n	8007cc0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	0151      	lsls	r1, r2, #5
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	440a      	add	r2, r1
 8007bd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bda:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bdc:	e070      	b.n	8007cc0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	0151      	lsls	r1, r2, #5
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	440a      	add	r2, r1
 8007bf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bf8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bfc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bfe:	e05f      	b.n	8007cc0 <USB_HC_Halt+0x232>
            break;
 8007c00:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c02:	e05d      	b.n	8007cc0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	0151      	lsls	r1, r2, #5
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	440a      	add	r2, r1
 8007c1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c22:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d133      	bne.n	8007c9c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	0151      	lsls	r1, r2, #5
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	440a      	add	r2, r1
 8007c4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	0151      	lsls	r1, r2, #5
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	440a      	add	r2, r1
 8007c6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c72:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c80:	d81d      	bhi.n	8007cbe <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c98:	d0ec      	beq.n	8007c74 <USB_HC_Halt+0x1e6>
 8007c9a:	e011      	b.n	8007cc0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	e000      	b.n	8007cc0 <USB_HC_Halt+0x232>
          break;
 8007cbe:	bf00      	nop
    }
  }

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3724      	adds	r7, #36	@ 0x24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	04da      	lsls	r2, r3, #19
 8007cec:	4b15      	ldr	r3, [pc, #84]	@ (8007d44 <USB_DoPing+0x74>)
 8007cee:	4013      	ands	r3, r2
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	0151      	lsls	r1, r2, #5
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	440a      	add	r2, r1
 8007cf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d00:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d18:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d20:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d2e:	461a      	mov	r2, r3
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	1ff80000 	.word	0x1ff80000

08007d48 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7fe ff8c 	bl	8006c7a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d62:	2110      	movs	r1, #16
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7fe ffe5 	bl	8006d34 <USB_FlushTxFifo>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff f80f 	bl	8006d98 <USB_FlushRxFifo>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007d84:	2300      	movs	r3, #0
 8007d86:	61bb      	str	r3, [r7, #24]
 8007d88:	e01f      	b.n	8007dca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007da0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007da8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007db0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	61bb      	str	r3, [r7, #24]
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	2b0f      	cmp	r3, #15
 8007dce:	d9dc      	bls.n	8007d8a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61bb      	str	r3, [r7, #24]
 8007dd4:	e034      	b.n	8007e40 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007df4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007dfc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e1c:	d80c      	bhi.n	8007e38 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e34:	d0ec      	beq.n	8007e10 <USB_StopHost+0xc8>
 8007e36:	e000      	b.n	8007e3a <USB_StopHost+0xf2>
        break;
 8007e38:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	61bb      	str	r3, [r7, #24]
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	2b0f      	cmp	r3, #15
 8007e44:	d9c7      	bls.n	8007dd6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e52:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7fe fefb 	bl	8006c58 <USB_EnableGlobalInt>

  return ret;
 8007e62:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3720      	adds	r7, #32
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e7e:	2b84      	cmp	r3, #132	@ 0x84
 8007e80:	d005      	beq.n	8007e8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007e82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4413      	add	r3, r2
 8007e8a:	3303      	adds	r3, #3
 8007e8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ea2:	f3ef 8305 	mrs	r3, IPSR
 8007ea6:	607b      	str	r3, [r7, #4]
  return(result);
 8007ea8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bf14      	ite	ne
 8007eae:	2301      	movne	r3, #1
 8007eb0:	2300      	moveq	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007ec4:	f001 fd68 	bl	8009998 <vTaskStartScheduler>
  
  return osOK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007ece:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ed0:	b089      	sub	sp, #36	@ 0x24
 8007ed2:	af04      	add	r7, sp, #16
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d020      	beq.n	8007f22 <osThreadCreate+0x54>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01c      	beq.n	8007f22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685c      	ldr	r4, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691e      	ldr	r6, [r3, #16]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff ffb6 	bl	8007e6c <makeFreeRtosPriority>
 8007f00:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f0a:	9202      	str	r2, [sp, #8]
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	9100      	str	r1, [sp, #0]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	4632      	mov	r2, r6
 8007f14:	4629      	mov	r1, r5
 8007f16:	4620      	mov	r0, r4
 8007f18:	f001 fb66 	bl	80095e8 <xTaskCreateStatic>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	e01c      	b.n	8007f5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685c      	ldr	r4, [r3, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f2e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff ff98 	bl	8007e6c <makeFreeRtosPriority>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	f107 030c 	add.w	r3, r7, #12
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	9200      	str	r2, [sp, #0]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	4632      	mov	r2, r6
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f001 fbab 	bl	80096a8 <xTaskCreate>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d001      	beq.n	8007f5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	e000      	b.n	8007f5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <osDelay+0x16>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	e000      	b.n	8007f7e <osDelay+0x18>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f001 fcd4 	bl	800992c <vTaskDelay>
  
  return osOK;
 8007f84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007f8e:	b590      	push	{r4, r7, lr}
 8007f90:	b085      	sub	sp, #20
 8007f92:	af02      	add	r7, sp, #8
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d011      	beq.n	8007fc4 <osMessageCreate+0x36>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00d      	beq.n	8007fc4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6859      	ldr	r1, [r3, #4]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	2400      	movs	r4, #0
 8007fba:	9400      	str	r4, [sp, #0]
 8007fbc:	f000 fe28 	bl	8008c10 <xQueueGenericCreateStatic>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	e008      	b.n	8007fd6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6818      	ldr	r0, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4619      	mov	r1, r3
 8007fd0:	f000 fe9b 	bl	8008d0a <xQueueGenericCreate>
 8007fd4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd90      	pop	{r4, r7, pc}
	...

08007fe0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007fec:	2300      	movs	r3, #0
 8007fee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <osMessagePut+0x1e>
    ticks = 1;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007ffe:	f7ff ff4d 	bl	8007e9c <inHandlerMode>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d018      	beq.n	800803a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008008:	f107 0210 	add.w	r2, r7, #16
 800800c:	f107 0108 	add.w	r1, r7, #8
 8008010:	2300      	movs	r3, #0
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 ffd6 	bl	8008fc4 <xQueueGenericSendFromISR>
 8008018:	4603      	mov	r3, r0
 800801a:	2b01      	cmp	r3, #1
 800801c:	d001      	beq.n	8008022 <osMessagePut+0x42>
      return osErrorOS;
 800801e:	23ff      	movs	r3, #255	@ 0xff
 8008020:	e018      	b.n	8008054 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d014      	beq.n	8008052 <osMessagePut+0x72>
 8008028:	4b0c      	ldr	r3, [pc, #48]	@ (800805c <osMessagePut+0x7c>)
 800802a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	e00b      	b.n	8008052 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800803a:	f107 0108 	add.w	r1, r7, #8
 800803e:	2300      	movs	r3, #0
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 febc 	bl	8008dc0 <xQueueGenericSend>
 8008048:	4603      	mov	r3, r0
 800804a:	2b01      	cmp	r3, #1
 800804c:	d001      	beq.n	8008052 <osMessagePut+0x72>
      return osErrorOS;
 800804e:	23ff      	movs	r3, #255	@ 0xff
 8008050:	e000      	b.n	8008054 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	e000ed04 	.word	0xe000ed04

08008060 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008060:	b590      	push	{r4, r7, lr}
 8008062:	b08b      	sub	sp, #44	@ 0x2c
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10a      	bne.n	8008090 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800807a:	2380      	movs	r3, #128	@ 0x80
 800807c:	617b      	str	r3, [r7, #20]
    return event;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	461c      	mov	r4, r3
 8008082:	f107 0314 	add.w	r3, r7, #20
 8008086:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800808a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800808e:	e054      	b.n	800813a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008090:	2300      	movs	r3, #0
 8008092:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809e:	d103      	bne.n	80080a8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80080a0:	f04f 33ff 	mov.w	r3, #4294967295
 80080a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080a6:	e009      	b.n	80080bc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d006      	beq.n	80080bc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <osMessageGet+0x5c>
      ticks = 1;
 80080b8:	2301      	movs	r3, #1
 80080ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80080bc:	f7ff feee 	bl	8007e9c <inHandlerMode>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d01c      	beq.n	8008100 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80080c6:	f107 0220 	add.w	r2, r7, #32
 80080ca:	f107 0314 	add.w	r3, r7, #20
 80080ce:	3304      	adds	r3, #4
 80080d0:	4619      	mov	r1, r3
 80080d2:	68b8      	ldr	r0, [r7, #8]
 80080d4:	f001 f8f6 	bl	80092c4 <xQueueReceiveFromISR>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d102      	bne.n	80080e4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80080de:	2310      	movs	r3, #16
 80080e0:	617b      	str	r3, [r7, #20]
 80080e2:	e001      	b.n	80080e8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d01d      	beq.n	800812a <osMessageGet+0xca>
 80080ee:	4b15      	ldr	r3, [pc, #84]	@ (8008144 <osMessageGet+0xe4>)
 80080f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	e014      	b.n	800812a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008100:	f107 0314 	add.w	r3, r7, #20
 8008104:	3304      	adds	r3, #4
 8008106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008108:	4619      	mov	r1, r3
 800810a:	68b8      	ldr	r0, [r7, #8]
 800810c:	f000 fff8 	bl	8009100 <xQueueReceive>
 8008110:	4603      	mov	r3, r0
 8008112:	2b01      	cmp	r3, #1
 8008114:	d102      	bne.n	800811c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008116:	2310      	movs	r3, #16
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	e006      	b.n	800812a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800811c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <osMessageGet+0xc6>
 8008122:	2300      	movs	r3, #0
 8008124:	e000      	b.n	8008128 <osMessageGet+0xc8>
 8008126:	2340      	movs	r3, #64	@ 0x40
 8008128:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	461c      	mov	r4, r3
 800812e:	f107 0314 	add.w	r3, r7, #20
 8008132:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008136:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	372c      	adds	r7, #44	@ 0x2c
 800813e:	46bd      	mov	sp, r7
 8008140:	bd90      	pop	{r4, r7, pc}
 8008142:	bf00      	nop
 8008144:	e000ed04 	.word	0xe000ed04

08008148 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b08a      	sub	sp, #40	@ 0x28
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008150:	2300      	movs	r3, #0
 8008152:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008154:	f001 fc82 	bl	8009a5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008158:	4b5f      	ldr	r3, [pc, #380]	@ (80082d8 <pvPortMalloc+0x190>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008160:	f000 f92a 	bl	80083b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008164:	4b5d      	ldr	r3, [pc, #372]	@ (80082dc <pvPortMalloc+0x194>)
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4013      	ands	r3, r2
 800816c:	2b00      	cmp	r3, #0
 800816e:	f040 8095 	bne.w	800829c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d01e      	beq.n	80081b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008178:	2208      	movs	r2, #8
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4413      	add	r3, r2
 800817e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f003 0307 	and.w	r3, r3, #7
 8008186:	2b00      	cmp	r3, #0
 8008188:	d015      	beq.n	80081b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f023 0307 	bic.w	r3, r3, #7
 8008190:	3308      	adds	r3, #8
 8008192:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00b      	beq.n	80081b6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081b0:	bf00      	nop
 80081b2:	bf00      	nop
 80081b4:	e7fd      	b.n	80081b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d06f      	beq.n	800829c <pvPortMalloc+0x154>
 80081bc:	4b48      	ldr	r3, [pc, #288]	@ (80082e0 <pvPortMalloc+0x198>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d86a      	bhi.n	800829c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081c6:	4b47      	ldr	r3, [pc, #284]	@ (80082e4 <pvPortMalloc+0x19c>)
 80081c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081ca:	4b46      	ldr	r3, [pc, #280]	@ (80082e4 <pvPortMalloc+0x19c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081d0:	e004      	b.n	80081dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d903      	bls.n	80081ee <pvPortMalloc+0xa6>
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f1      	bne.n	80081d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081ee:	4b3a      	ldr	r3, [pc, #232]	@ (80082d8 <pvPortMalloc+0x190>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d051      	beq.n	800829c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2208      	movs	r2, #8
 80081fe:	4413      	add	r3, r2
 8008200:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	1ad2      	subs	r2, r2, r3
 8008212:	2308      	movs	r3, #8
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	429a      	cmp	r2, r3
 8008218:	d920      	bls.n	800825c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800821a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4413      	add	r3, r2
 8008220:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <pvPortMalloc+0xfc>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	613b      	str	r3, [r7, #16]
}
 800823e:	bf00      	nop
 8008240:	bf00      	nop
 8008242:	e7fd      	b.n	8008240 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	1ad2      	subs	r2, r2, r3
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008256:	69b8      	ldr	r0, [r7, #24]
 8008258:	f000 f910 	bl	800847c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800825c:	4b20      	ldr	r3, [pc, #128]	@ (80082e0 <pvPortMalloc+0x198>)
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	4a1e      	ldr	r2, [pc, #120]	@ (80082e0 <pvPortMalloc+0x198>)
 8008268:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800826a:	4b1d      	ldr	r3, [pc, #116]	@ (80082e0 <pvPortMalloc+0x198>)
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4b1e      	ldr	r3, [pc, #120]	@ (80082e8 <pvPortMalloc+0x1a0>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	429a      	cmp	r2, r3
 8008274:	d203      	bcs.n	800827e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008276:	4b1a      	ldr	r3, [pc, #104]	@ (80082e0 <pvPortMalloc+0x198>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a1b      	ldr	r2, [pc, #108]	@ (80082e8 <pvPortMalloc+0x1a0>)
 800827c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	4b16      	ldr	r3, [pc, #88]	@ (80082dc <pvPortMalloc+0x194>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	431a      	orrs	r2, r3
 8008288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800828c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008292:	4b16      	ldr	r3, [pc, #88]	@ (80082ec <pvPortMalloc+0x1a4>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3301      	adds	r3, #1
 8008298:	4a14      	ldr	r2, [pc, #80]	@ (80082ec <pvPortMalloc+0x1a4>)
 800829a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800829c:	f001 fbec 	bl	8009a78 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80082a6:	f7f8 faa9 	bl	80007fc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	f003 0307 	and.w	r3, r3, #7
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00b      	beq.n	80082cc <pvPortMalloc+0x184>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	60fb      	str	r3, [r7, #12]
}
 80082c6:	bf00      	nop
 80082c8:	bf00      	nop
 80082ca:	e7fd      	b.n	80082c8 <pvPortMalloc+0x180>
	return pvReturn;
 80082cc:	69fb      	ldr	r3, [r7, #28]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3728      	adds	r7, #40	@ 0x28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	200085b4 	.word	0x200085b4
 80082dc:	200085c8 	.word	0x200085c8
 80082e0:	200085b8 	.word	0x200085b8
 80082e4:	200085ac 	.word	0x200085ac
 80082e8:	200085bc 	.word	0x200085bc
 80082ec:	200085c0 	.word	0x200085c0

080082f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d04f      	beq.n	80083a2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008302:	2308      	movs	r3, #8
 8008304:	425b      	negs	r3, r3
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	4413      	add	r3, r2
 800830a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	4b25      	ldr	r3, [pc, #148]	@ (80083ac <vPortFree+0xbc>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4013      	ands	r3, r2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10b      	bne.n	8008336 <vPortFree+0x46>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	60fb      	str	r3, [r7, #12]
}
 8008330:	bf00      	nop
 8008332:	bf00      	nop
 8008334:	e7fd      	b.n	8008332 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00b      	beq.n	8008356 <vPortFree+0x66>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	60bb      	str	r3, [r7, #8]
}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	e7fd      	b.n	8008352 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	4b14      	ldr	r3, [pc, #80]	@ (80083ac <vPortFree+0xbc>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4013      	ands	r3, r2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d01e      	beq.n	80083a2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d11a      	bne.n	80083a2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	4b0e      	ldr	r3, [pc, #56]	@ (80083ac <vPortFree+0xbc>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	43db      	mvns	r3, r3
 8008376:	401a      	ands	r2, r3
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800837c:	f001 fb6e 	bl	8009a5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	4b0a      	ldr	r3, [pc, #40]	@ (80083b0 <vPortFree+0xc0>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4413      	add	r3, r2
 800838a:	4a09      	ldr	r2, [pc, #36]	@ (80083b0 <vPortFree+0xc0>)
 800838c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800838e:	6938      	ldr	r0, [r7, #16]
 8008390:	f000 f874 	bl	800847c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008394:	4b07      	ldr	r3, [pc, #28]	@ (80083b4 <vPortFree+0xc4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3301      	adds	r3, #1
 800839a:	4a06      	ldr	r2, [pc, #24]	@ (80083b4 <vPortFree+0xc4>)
 800839c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800839e:	f001 fb6b 	bl	8009a78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083a2:	bf00      	nop
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	200085c8 	.word	0x200085c8
 80083b0:	200085b8 	.word	0x200085b8
 80083b4:	200085c4 	.word	0x200085c4

080083b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083c4:	4b27      	ldr	r3, [pc, #156]	@ (8008464 <prvHeapInit+0xac>)
 80083c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00c      	beq.n	80083ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3307      	adds	r3, #7
 80083d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 0307 	bic.w	r3, r3, #7
 80083de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	4a1f      	ldr	r2, [pc, #124]	@ (8008464 <prvHeapInit+0xac>)
 80083e8:	4413      	add	r3, r2
 80083ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008468 <prvHeapInit+0xb0>)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083f6:	4b1c      	ldr	r3, [pc, #112]	@ (8008468 <prvHeapInit+0xb0>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	4413      	add	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008404:	2208      	movs	r2, #8
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	1a9b      	subs	r3, r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 0307 	bic.w	r3, r3, #7
 8008412:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4a15      	ldr	r2, [pc, #84]	@ (800846c <prvHeapInit+0xb4>)
 8008418:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800841a:	4b14      	ldr	r3, [pc, #80]	@ (800846c <prvHeapInit+0xb4>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2200      	movs	r2, #0
 8008420:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008422:	4b12      	ldr	r3, [pc, #72]	@ (800846c <prvHeapInit+0xb4>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	1ad2      	subs	r2, r2, r3
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008438:	4b0c      	ldr	r3, [pc, #48]	@ (800846c <prvHeapInit+0xb4>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	4a0a      	ldr	r2, [pc, #40]	@ (8008470 <prvHeapInit+0xb8>)
 8008446:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	4a09      	ldr	r2, [pc, #36]	@ (8008474 <prvHeapInit+0xbc>)
 800844e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008450:	4b09      	ldr	r3, [pc, #36]	@ (8008478 <prvHeapInit+0xc0>)
 8008452:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008456:	601a      	str	r2, [r3, #0]
}
 8008458:	bf00      	nop
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	200005ac 	.word	0x200005ac
 8008468:	200085ac 	.word	0x200085ac
 800846c:	200085b4 	.word	0x200085b4
 8008470:	200085bc 	.word	0x200085bc
 8008474:	200085b8 	.word	0x200085b8
 8008478:	200085c8 	.word	0x200085c8

0800847c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008484:	4b28      	ldr	r3, [pc, #160]	@ (8008528 <prvInsertBlockIntoFreeList+0xac>)
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e002      	b.n	8008490 <prvInsertBlockIntoFreeList+0x14>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	429a      	cmp	r2, r3
 8008498:	d8f7      	bhi.n	800848a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	4413      	add	r3, r2
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d108      	bne.n	80084be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	441a      	add	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	441a      	add	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d118      	bne.n	8008504 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	4b15      	ldr	r3, [pc, #84]	@ (800852c <prvInsertBlockIntoFreeList+0xb0>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d00d      	beq.n	80084fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	441a      	add	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	e008      	b.n	800850c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084fa:	4b0c      	ldr	r3, [pc, #48]	@ (800852c <prvInsertBlockIntoFreeList+0xb0>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	e003      	b.n	800850c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	429a      	cmp	r2, r3
 8008512:	d002      	beq.n	800851a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800851a:	bf00      	nop
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	200085ac 	.word	0x200085ac
 800852c:	200085b4 	.word	0x200085b4

08008530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f103 0208 	add.w	r2, r3, #8
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f04f 32ff 	mov.w	r2, #4294967295
 8008548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f103 0208 	add.w	r2, r3, #8
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f103 0208 	add.w	r2, r3, #8
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	601a      	str	r2, [r3, #0]
}
 80085c6:	bf00      	nop
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085d2:	b480      	push	{r7}
 80085d4:	b085      	sub	sp, #20
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d103      	bne.n	80085f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	60fb      	str	r3, [r7, #12]
 80085f0:	e00c      	b.n	800860c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3308      	adds	r3, #8
 80085f6:	60fb      	str	r3, [r7, #12]
 80085f8:	e002      	b.n	8008600 <vListInsert+0x2e>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	429a      	cmp	r2, r3
 800860a:	d2f6      	bcs.n	80085fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	1c5a      	adds	r2, r3, #1
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	601a      	str	r2, [r3, #0]
}
 8008638:	bf00      	nop
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	6892      	ldr	r2, [r2, #8]
 800865a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6852      	ldr	r2, [r2, #4]
 8008664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	429a      	cmp	r2, r3
 800866e:	d103      	bne.n	8008678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	1e5a      	subs	r2, r3, #1
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3b04      	subs	r3, #4
 80086a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80086b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3b04      	subs	r3, #4
 80086b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f023 0201 	bic.w	r2, r3, #1
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3b04      	subs	r3, #4
 80086c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086c8:	4a0c      	ldr	r2, [pc, #48]	@ (80086fc <pxPortInitialiseStack+0x64>)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3b14      	subs	r3, #20
 80086d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3b04      	subs	r3, #4
 80086de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f06f 0202 	mvn.w	r2, #2
 80086e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3b20      	subs	r3, #32
 80086ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086ee:	68fb      	ldr	r3, [r7, #12]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	08008701 	.word	0x08008701

08008700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800870a:	4b13      	ldr	r3, [pc, #76]	@ (8008758 <prvTaskExitError+0x58>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008712:	d00b      	beq.n	800872c <prvTaskExitError+0x2c>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	60fb      	str	r3, [r7, #12]
}
 8008726:	bf00      	nop
 8008728:	bf00      	nop
 800872a:	e7fd      	b.n	8008728 <prvTaskExitError+0x28>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	60bb      	str	r3, [r7, #8]
}
 800873e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008740:	bf00      	nop
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d0fc      	beq.n	8008742 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	2000000c 	.word	0x2000000c
 800875c:	00000000 	.word	0x00000000

08008760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008760:	4b07      	ldr	r3, [pc, #28]	@ (8008780 <pxCurrentTCBConst2>)
 8008762:	6819      	ldr	r1, [r3, #0]
 8008764:	6808      	ldr	r0, [r1, #0]
 8008766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	f380 8809 	msr	PSP, r0
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f04f 0000 	mov.w	r0, #0
 8008776:	f380 8811 	msr	BASEPRI, r0
 800877a:	4770      	bx	lr
 800877c:	f3af 8000 	nop.w

08008780 <pxCurrentTCBConst2>:
 8008780:	200085d4 	.word	0x200085d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop

08008788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008788:	4808      	ldr	r0, [pc, #32]	@ (80087ac <prvPortStartFirstTask+0x24>)
 800878a:	6800      	ldr	r0, [r0, #0]
 800878c:	6800      	ldr	r0, [r0, #0]
 800878e:	f380 8808 	msr	MSP, r0
 8008792:	f04f 0000 	mov.w	r0, #0
 8008796:	f380 8814 	msr	CONTROL, r0
 800879a:	b662      	cpsie	i
 800879c:	b661      	cpsie	f
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	df00      	svc	0
 80087a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087aa:	bf00      	nop
 80087ac:	e000ed08 	.word	0xe000ed08

080087b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087b6:	4b47      	ldr	r3, [pc, #284]	@ (80088d4 <xPortStartScheduler+0x124>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a47      	ldr	r2, [pc, #284]	@ (80088d8 <xPortStartScheduler+0x128>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d10b      	bne.n	80087d8 <xPortStartScheduler+0x28>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	613b      	str	r3, [r7, #16]
}
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	e7fd      	b.n	80087d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087d8:	4b3e      	ldr	r3, [pc, #248]	@ (80088d4 <xPortStartScheduler+0x124>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a3f      	ldr	r2, [pc, #252]	@ (80088dc <xPortStartScheduler+0x12c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d10b      	bne.n	80087fa <xPortStartScheduler+0x4a>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	60fb      	str	r3, [r7, #12]
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop
 80087f8:	e7fd      	b.n	80087f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087fa:	4b39      	ldr	r3, [pc, #228]	@ (80088e0 <xPortStartScheduler+0x130>)
 80087fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	22ff      	movs	r2, #255	@ 0xff
 800880a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800881c:	b2da      	uxtb	r2, r3
 800881e:	4b31      	ldr	r3, [pc, #196]	@ (80088e4 <xPortStartScheduler+0x134>)
 8008820:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008822:	4b31      	ldr	r3, [pc, #196]	@ (80088e8 <xPortStartScheduler+0x138>)
 8008824:	2207      	movs	r2, #7
 8008826:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008828:	e009      	b.n	800883e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800882a:	4b2f      	ldr	r3, [pc, #188]	@ (80088e8 <xPortStartScheduler+0x138>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3b01      	subs	r3, #1
 8008830:	4a2d      	ldr	r2, [pc, #180]	@ (80088e8 <xPortStartScheduler+0x138>)
 8008832:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	b2db      	uxtb	r3, r3
 800883c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800883e:	78fb      	ldrb	r3, [r7, #3]
 8008840:	b2db      	uxtb	r3, r3
 8008842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008846:	2b80      	cmp	r3, #128	@ 0x80
 8008848:	d0ef      	beq.n	800882a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800884a:	4b27      	ldr	r3, [pc, #156]	@ (80088e8 <xPortStartScheduler+0x138>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f1c3 0307 	rsb	r3, r3, #7
 8008852:	2b04      	cmp	r3, #4
 8008854:	d00b      	beq.n	800886e <xPortStartScheduler+0xbe>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	60bb      	str	r3, [r7, #8]
}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	e7fd      	b.n	800886a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800886e:	4b1e      	ldr	r3, [pc, #120]	@ (80088e8 <xPortStartScheduler+0x138>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	021b      	lsls	r3, r3, #8
 8008874:	4a1c      	ldr	r2, [pc, #112]	@ (80088e8 <xPortStartScheduler+0x138>)
 8008876:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008878:	4b1b      	ldr	r3, [pc, #108]	@ (80088e8 <xPortStartScheduler+0x138>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008880:	4a19      	ldr	r2, [pc, #100]	@ (80088e8 <xPortStartScheduler+0x138>)
 8008882:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	b2da      	uxtb	r2, r3
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800888c:	4b17      	ldr	r3, [pc, #92]	@ (80088ec <xPortStartScheduler+0x13c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a16      	ldr	r2, [pc, #88]	@ (80088ec <xPortStartScheduler+0x13c>)
 8008892:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008898:	4b14      	ldr	r3, [pc, #80]	@ (80088ec <xPortStartScheduler+0x13c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a13      	ldr	r2, [pc, #76]	@ (80088ec <xPortStartScheduler+0x13c>)
 800889e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80088a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088a4:	f000 f8da 	bl	8008a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088a8:	4b11      	ldr	r3, [pc, #68]	@ (80088f0 <xPortStartScheduler+0x140>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80088ae:	f000 f8f9 	bl	8008aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088b2:	4b10      	ldr	r3, [pc, #64]	@ (80088f4 <xPortStartScheduler+0x144>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a0f      	ldr	r2, [pc, #60]	@ (80088f4 <xPortStartScheduler+0x144>)
 80088b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80088bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088be:	f7ff ff63 	bl	8008788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088c2:	f001 fa31 	bl	8009d28 <vTaskSwitchContext>
	prvTaskExitError();
 80088c6:	f7ff ff1b 	bl	8008700 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	e000ed00 	.word	0xe000ed00
 80088d8:	410fc271 	.word	0x410fc271
 80088dc:	410fc270 	.word	0x410fc270
 80088e0:	e000e400 	.word	0xe000e400
 80088e4:	200085cc 	.word	0x200085cc
 80088e8:	200085d0 	.word	0x200085d0
 80088ec:	e000ed20 	.word	0xe000ed20
 80088f0:	2000000c 	.word	0x2000000c
 80088f4:	e000ef34 	.word	0xe000ef34

080088f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	607b      	str	r3, [r7, #4]
}
 8008910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008912:	4b10      	ldr	r3, [pc, #64]	@ (8008954 <vPortEnterCritical+0x5c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3301      	adds	r3, #1
 8008918:	4a0e      	ldr	r2, [pc, #56]	@ (8008954 <vPortEnterCritical+0x5c>)
 800891a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800891c:	4b0d      	ldr	r3, [pc, #52]	@ (8008954 <vPortEnterCritical+0x5c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d110      	bne.n	8008946 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008924:	4b0c      	ldr	r3, [pc, #48]	@ (8008958 <vPortEnterCritical+0x60>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00b      	beq.n	8008946 <vPortEnterCritical+0x4e>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	603b      	str	r3, [r7, #0]
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop
 8008944:	e7fd      	b.n	8008942 <vPortEnterCritical+0x4a>
	}
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	2000000c 	.word	0x2000000c
 8008958:	e000ed04 	.word	0xe000ed04

0800895c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008962:	4b12      	ldr	r3, [pc, #72]	@ (80089ac <vPortExitCritical+0x50>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10b      	bne.n	8008982 <vPortExitCritical+0x26>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	607b      	str	r3, [r7, #4]
}
 800897c:	bf00      	nop
 800897e:	bf00      	nop
 8008980:	e7fd      	b.n	800897e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008982:	4b0a      	ldr	r3, [pc, #40]	@ (80089ac <vPortExitCritical+0x50>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3b01      	subs	r3, #1
 8008988:	4a08      	ldr	r2, [pc, #32]	@ (80089ac <vPortExitCritical+0x50>)
 800898a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800898c:	4b07      	ldr	r3, [pc, #28]	@ (80089ac <vPortExitCritical+0x50>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d105      	bne.n	80089a0 <vPortExitCritical+0x44>
 8008994:	2300      	movs	r3, #0
 8008996:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800899e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	2000000c 	.word	0x2000000c

080089b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089b0:	f3ef 8009 	mrs	r0, PSP
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	4b15      	ldr	r3, [pc, #84]	@ (8008a10 <pxCurrentTCBConst>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	f01e 0f10 	tst.w	lr, #16
 80089c0:	bf08      	it	eq
 80089c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ca:	6010      	str	r0, [r2, #0]
 80089cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80089d4:	f380 8811 	msr	BASEPRI, r0
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f001 f9a2 	bl	8009d28 <vTaskSwitchContext>
 80089e4:	f04f 0000 	mov.w	r0, #0
 80089e8:	f380 8811 	msr	BASEPRI, r0
 80089ec:	bc09      	pop	{r0, r3}
 80089ee:	6819      	ldr	r1, [r3, #0]
 80089f0:	6808      	ldr	r0, [r1, #0]
 80089f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f6:	f01e 0f10 	tst.w	lr, #16
 80089fa:	bf08      	it	eq
 80089fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a00:	f380 8809 	msr	PSP, r0
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	f3af 8000 	nop.w

08008a10 <pxCurrentTCBConst>:
 8008a10:	200085d4 	.word	0x200085d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop

08008a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	607b      	str	r3, [r7, #4]
}
 8008a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a32:	f001 f8bf 	bl	8009bb4 <xTaskIncrementTick>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a3c:	4b06      	ldr	r3, [pc, #24]	@ (8008a58 <SysTick_Handler+0x40>)
 8008a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	2300      	movs	r3, #0
 8008a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	f383 8811 	msr	BASEPRI, r3
}
 8008a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a50:	bf00      	nop
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a60:	4b0b      	ldr	r3, [pc, #44]	@ (8008a90 <vPortSetupTimerInterrupt+0x34>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a66:	4b0b      	ldr	r3, [pc, #44]	@ (8008a94 <vPortSetupTimerInterrupt+0x38>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a98 <vPortSetupTimerInterrupt+0x3c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a0a      	ldr	r2, [pc, #40]	@ (8008a9c <vPortSetupTimerInterrupt+0x40>)
 8008a72:	fba2 2303 	umull	r2, r3, r2, r3
 8008a76:	099b      	lsrs	r3, r3, #6
 8008a78:	4a09      	ldr	r2, [pc, #36]	@ (8008aa0 <vPortSetupTimerInterrupt+0x44>)
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a7e:	4b04      	ldr	r3, [pc, #16]	@ (8008a90 <vPortSetupTimerInterrupt+0x34>)
 8008a80:	2207      	movs	r2, #7
 8008a82:	601a      	str	r2, [r3, #0]
}
 8008a84:	bf00      	nop
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	e000e010 	.word	0xe000e010
 8008a94:	e000e018 	.word	0xe000e018
 8008a98:	20000000 	.word	0x20000000
 8008a9c:	10624dd3 	.word	0x10624dd3
 8008aa0:	e000e014 	.word	0xe000e014

08008aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ab4 <vPortEnableVFP+0x10>
 8008aa8:	6801      	ldr	r1, [r0, #0]
 8008aaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008aae:	6001      	str	r1, [r0, #0]
 8008ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ab2:	bf00      	nop
 8008ab4:	e000ed88 	.word	0xe000ed88

08008ab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008abe:	f3ef 8305 	mrs	r3, IPSR
 8008ac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b0f      	cmp	r3, #15
 8008ac8:	d915      	bls.n	8008af6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008aca:	4a18      	ldr	r2, [pc, #96]	@ (8008b2c <vPortValidateInterruptPriority+0x74>)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4413      	add	r3, r2
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ad4:	4b16      	ldr	r3, [pc, #88]	@ (8008b30 <vPortValidateInterruptPriority+0x78>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	7afa      	ldrb	r2, [r7, #11]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d20b      	bcs.n	8008af6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	607b      	str	r3, [r7, #4]
}
 8008af0:	bf00      	nop
 8008af2:	bf00      	nop
 8008af4:	e7fd      	b.n	8008af2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008af6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b34 <vPortValidateInterruptPriority+0x7c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008afe:	4b0e      	ldr	r3, [pc, #56]	@ (8008b38 <vPortValidateInterruptPriority+0x80>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d90b      	bls.n	8008b1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	603b      	str	r3, [r7, #0]
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	e7fd      	b.n	8008b1a <vPortValidateInterruptPriority+0x62>
	}
 8008b1e:	bf00      	nop
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	e000e3f0 	.word	0xe000e3f0
 8008b30:	200085cc 	.word	0x200085cc
 8008b34:	e000ed0c 	.word	0xe000ed0c
 8008b38:	200085d0 	.word	0x200085d0

08008b3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10b      	bne.n	8008b68 <xQueueGenericReset+0x2c>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	60bb      	str	r3, [r7, #8]
}
 8008b62:	bf00      	nop
 8008b64:	bf00      	nop
 8008b66:	e7fd      	b.n	8008b64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b68:	f7ff fec6 	bl	80088f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b74:	68f9      	ldr	r1, [r7, #12]
 8008b76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008b78:	fb01 f303 	mul.w	r3, r1, r3
 8008b7c:	441a      	add	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	68f9      	ldr	r1, [r7, #12]
 8008b9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008b9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ba2:	441a      	add	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	22ff      	movs	r2, #255	@ 0xff
 8008bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	22ff      	movs	r2, #255	@ 0xff
 8008bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d114      	bne.n	8008be8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d01a      	beq.n	8008bfc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3310      	adds	r3, #16
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f001 f954 	bl	8009e78 <xTaskRemoveFromEventList>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d012      	beq.n	8008bfc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8008c0c <xQueueGenericReset+0xd0>)
 8008bd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	e009      	b.n	8008bfc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3310      	adds	r3, #16
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7ff fc9f 	bl	8008530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3324      	adds	r3, #36	@ 0x24
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff fc9a 	bl	8008530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008bfc:	f7ff feae 	bl	800895c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c00:	2301      	movs	r3, #1
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	e000ed04 	.word	0xe000ed04

08008c10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08e      	sub	sp, #56	@ 0x38
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10b      	bne.n	8008c3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	e7fd      	b.n	8008c38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10b      	bne.n	8008c5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop
 8008c58:	e7fd      	b.n	8008c56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d002      	beq.n	8008c66 <xQueueGenericCreateStatic+0x56>
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <xQueueGenericCreateStatic+0x5a>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <xQueueGenericCreateStatic+0x5c>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10b      	bne.n	8008c88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	623b      	str	r3, [r7, #32]
}
 8008c82:	bf00      	nop
 8008c84:	bf00      	nop
 8008c86:	e7fd      	b.n	8008c84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d102      	bne.n	8008c94 <xQueueGenericCreateStatic+0x84>
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <xQueueGenericCreateStatic+0x88>
 8008c94:	2301      	movs	r3, #1
 8008c96:	e000      	b.n	8008c9a <xQueueGenericCreateStatic+0x8a>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10b      	bne.n	8008cb6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	61fb      	str	r3, [r7, #28]
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	e7fd      	b.n	8008cb2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008cb6:	2348      	movs	r3, #72	@ 0x48
 8008cb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b48      	cmp	r3, #72	@ 0x48
 8008cbe:	d00b      	beq.n	8008cd8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	61bb      	str	r3, [r7, #24]
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	e7fd      	b.n	8008cd4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008cd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00d      	beq.n	8008d00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	68b9      	ldr	r1, [r7, #8]
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 f840 	bl	8008d80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3730      	adds	r7, #48	@ 0x30
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b08a      	sub	sp, #40	@ 0x28
 8008d0e:	af02      	add	r7, sp, #8
 8008d10:	60f8      	str	r0, [r7, #12]
 8008d12:	60b9      	str	r1, [r7, #8]
 8008d14:	4613      	mov	r3, r2
 8008d16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10b      	bne.n	8008d36 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	613b      	str	r3, [r7, #16]
}
 8008d30:	bf00      	nop
 8008d32:	bf00      	nop
 8008d34:	e7fd      	b.n	8008d32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	fb02 f303 	mul.w	r3, r2, r3
 8008d3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	3348      	adds	r3, #72	@ 0x48
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7ff f9ff 	bl	8008148 <pvPortMalloc>
 8008d4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d011      	beq.n	8008d76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	3348      	adds	r3, #72	@ 0x48
 8008d5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d64:	79fa      	ldrb	r2, [r7, #7]
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 f805 	bl	8008d80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d76:	69bb      	ldr	r3, [r7, #24]
	}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3720      	adds	r7, #32
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d103      	bne.n	8008d9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	e002      	b.n	8008da2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008dae:	2101      	movs	r1, #1
 8008db0:	69b8      	ldr	r0, [r7, #24]
 8008db2:	f7ff fec3 	bl	8008b3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008db6:	bf00      	nop
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
	...

08008dc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08e      	sub	sp, #56	@ 0x38
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10b      	bne.n	8008df4 <xQueueGenericSend+0x34>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008dee:	bf00      	nop
 8008df0:	bf00      	nop
 8008df2:	e7fd      	b.n	8008df0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d103      	bne.n	8008e02 <xQueueGenericSend+0x42>
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <xQueueGenericSend+0x46>
 8008e02:	2301      	movs	r3, #1
 8008e04:	e000      	b.n	8008e08 <xQueueGenericSend+0x48>
 8008e06:	2300      	movs	r3, #0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10b      	bne.n	8008e24 <xQueueGenericSend+0x64>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e1e:	bf00      	nop
 8008e20:	bf00      	nop
 8008e22:	e7fd      	b.n	8008e20 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d103      	bne.n	8008e32 <xQueueGenericSend+0x72>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d101      	bne.n	8008e36 <xQueueGenericSend+0x76>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e000      	b.n	8008e38 <xQueueGenericSend+0x78>
 8008e36:	2300      	movs	r3, #0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10b      	bne.n	8008e54 <xQueueGenericSend+0x94>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	623b      	str	r3, [r7, #32]
}
 8008e4e:	bf00      	nop
 8008e50:	bf00      	nop
 8008e52:	e7fd      	b.n	8008e50 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e54:	f001 f9d2 	bl	800a1fc <xTaskGetSchedulerState>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d102      	bne.n	8008e64 <xQueueGenericSend+0xa4>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <xQueueGenericSend+0xa8>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e000      	b.n	8008e6a <xQueueGenericSend+0xaa>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10b      	bne.n	8008e86 <xQueueGenericSend+0xc6>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	61fb      	str	r3, [r7, #28]
}
 8008e80:	bf00      	nop
 8008e82:	bf00      	nop
 8008e84:	e7fd      	b.n	8008e82 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e86:	f7ff fd37 	bl	80088f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d302      	bcc.n	8008e9c <xQueueGenericSend+0xdc>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d129      	bne.n	8008ef0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	68b9      	ldr	r1, [r7, #8]
 8008ea0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ea2:	f000 fa91 	bl	80093c8 <prvCopyDataToQueue>
 8008ea6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d010      	beq.n	8008ed2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	3324      	adds	r3, #36	@ 0x24
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 ffdf 	bl	8009e78 <xTaskRemoveFromEventList>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d013      	beq.n	8008ee8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8008fc0 <xQueueGenericSend+0x200>)
 8008ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	e00a      	b.n	8008ee8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ed8:	4b39      	ldr	r3, [pc, #228]	@ (8008fc0 <xQueueGenericSend+0x200>)
 8008eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ee8:	f7ff fd38 	bl	800895c <vPortExitCritical>
				return pdPASS;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e063      	b.n	8008fb8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d103      	bne.n	8008efe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ef6:	f7ff fd31 	bl	800895c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	e05c      	b.n	8008fb8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d106      	bne.n	8008f12 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f04:	f107 0314 	add.w	r3, r7, #20
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f001 f819 	bl	8009f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f12:	f7ff fd23 	bl	800895c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f16:	f000 fda1 	bl	8009a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f1a:	f7ff fced 	bl	80088f8 <vPortEnterCritical>
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f24:	b25b      	sxtb	r3, r3
 8008f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2a:	d103      	bne.n	8008f34 <xQueueGenericSend+0x174>
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f3a:	b25b      	sxtb	r3, r3
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d103      	bne.n	8008f4a <xQueueGenericSend+0x18a>
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f4a:	f7ff fd07 	bl	800895c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f4e:	1d3a      	adds	r2, r7, #4
 8008f50:	f107 0314 	add.w	r3, r7, #20
 8008f54:	4611      	mov	r1, r2
 8008f56:	4618      	mov	r0, r3
 8008f58:	f001 f808 	bl	8009f6c <xTaskCheckForTimeOut>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d124      	bne.n	8008fac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f64:	f000 fb28 	bl	80095b8 <prvIsQueueFull>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d018      	beq.n	8008fa0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	3310      	adds	r3, #16
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 ff58 	bl	8009e2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f7e:	f000 fab3 	bl	80094e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f82:	f000 fd79 	bl	8009a78 <xTaskResumeAll>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f47f af7c 	bne.w	8008e86 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc0 <xQueueGenericSend+0x200>)
 8008f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	e772      	b.n	8008e86 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fa2:	f000 faa1 	bl	80094e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fa6:	f000 fd67 	bl	8009a78 <xTaskResumeAll>
 8008faa:	e76c      	b.n	8008e86 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fae:	f000 fa9b 	bl	80094e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fb2:	f000 fd61 	bl	8009a78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008fb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3738      	adds	r7, #56	@ 0x38
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b090      	sub	sp, #64	@ 0x40
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10b      	bne.n	8008ff4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008fee:	bf00      	nop
 8008ff0:	bf00      	nop
 8008ff2:	e7fd      	b.n	8008ff0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d103      	bne.n	8009002 <xQueueGenericSendFromISR+0x3e>
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <xQueueGenericSendFromISR+0x42>
 8009002:	2301      	movs	r3, #1
 8009004:	e000      	b.n	8009008 <xQueueGenericSendFromISR+0x44>
 8009006:	2300      	movs	r3, #0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10b      	bne.n	8009024 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800901e:	bf00      	nop
 8009020:	bf00      	nop
 8009022:	e7fd      	b.n	8009020 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d103      	bne.n	8009032 <xQueueGenericSendFromISR+0x6e>
 800902a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <xQueueGenericSendFromISR+0x72>
 8009032:	2301      	movs	r3, #1
 8009034:	e000      	b.n	8009038 <xQueueGenericSendFromISR+0x74>
 8009036:	2300      	movs	r3, #0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10b      	bne.n	8009054 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	623b      	str	r3, [r7, #32]
}
 800904e:	bf00      	nop
 8009050:	bf00      	nop
 8009052:	e7fd      	b.n	8009050 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009054:	f7ff fd30 	bl	8008ab8 <vPortValidateInterruptPriority>
	__asm volatile
 8009058:	f3ef 8211 	mrs	r2, BASEPRI
 800905c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	61fa      	str	r2, [r7, #28]
 800906e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009070:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009072:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800907c:	429a      	cmp	r2, r3
 800907e:	d302      	bcc.n	8009086 <xQueueGenericSendFromISR+0xc2>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b02      	cmp	r3, #2
 8009084:	d12f      	bne.n	80090e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009088:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800908c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009094:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	68b9      	ldr	r1, [r7, #8]
 800909a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800909c:	f000 f994 	bl	80093c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80090a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a8:	d112      	bne.n	80090d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d016      	beq.n	80090e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b4:	3324      	adds	r3, #36	@ 0x24
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 fede 	bl	8009e78 <xTaskRemoveFromEventList>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00e      	beq.n	80090e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	e007      	b.n	80090e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80090d4:	3301      	adds	r3, #1
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	b25a      	sxtb	r2, r3
 80090da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80090e0:	2301      	movs	r3, #1
 80090e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80090e4:	e001      	b.n	80090ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090e6:	2300      	movs	r3, #0
 80090e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ec:	617b      	str	r3, [r7, #20]
	__asm volatile
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f383 8811 	msr	BASEPRI, r3
}
 80090f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3740      	adds	r7, #64	@ 0x40
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08c      	sub	sp, #48	@ 0x30
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800910c:	2300      	movs	r3, #0
 800910e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10b      	bne.n	8009132 <xQueueReceive+0x32>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	623b      	str	r3, [r7, #32]
}
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	e7fd      	b.n	800912e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d103      	bne.n	8009140 <xQueueReceive+0x40>
 8009138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <xQueueReceive+0x44>
 8009140:	2301      	movs	r3, #1
 8009142:	e000      	b.n	8009146 <xQueueReceive+0x46>
 8009144:	2300      	movs	r3, #0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10b      	bne.n	8009162 <xQueueReceive+0x62>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	61fb      	str	r3, [r7, #28]
}
 800915c:	bf00      	nop
 800915e:	bf00      	nop
 8009160:	e7fd      	b.n	800915e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009162:	f001 f84b 	bl	800a1fc <xTaskGetSchedulerState>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d102      	bne.n	8009172 <xQueueReceive+0x72>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <xQueueReceive+0x76>
 8009172:	2301      	movs	r3, #1
 8009174:	e000      	b.n	8009178 <xQueueReceive+0x78>
 8009176:	2300      	movs	r3, #0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10b      	bne.n	8009194 <xQueueReceive+0x94>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	61bb      	str	r3, [r7, #24]
}
 800918e:	bf00      	nop
 8009190:	bf00      	nop
 8009192:	e7fd      	b.n	8009190 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009194:	f7ff fbb0 	bl	80088f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800919e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01f      	beq.n	80091e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091a4:	68b9      	ldr	r1, [r7, #8]
 80091a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091a8:	f000 f978 	bl	800949c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ae:	1e5a      	subs	r2, r3, #1
 80091b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00f      	beq.n	80091dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091be:	3310      	adds	r3, #16
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 fe59 	bl	8009e78 <xTaskRemoveFromEventList>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d007      	beq.n	80091dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091cc:	4b3c      	ldr	r3, [pc, #240]	@ (80092c0 <xQueueReceive+0x1c0>)
 80091ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091dc:	f7ff fbbe 	bl	800895c <vPortExitCritical>
				return pdPASS;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e069      	b.n	80092b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d103      	bne.n	80091f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091ea:	f7ff fbb7 	bl	800895c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091ee:	2300      	movs	r3, #0
 80091f0:	e062      	b.n	80092b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d106      	bne.n	8009206 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091f8:	f107 0310 	add.w	r3, r7, #16
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fe9f 	bl	8009f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009202:	2301      	movs	r3, #1
 8009204:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009206:	f7ff fba9 	bl	800895c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800920a:	f000 fc27 	bl	8009a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800920e:	f7ff fb73 	bl	80088f8 <vPortEnterCritical>
 8009212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009214:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009218:	b25b      	sxtb	r3, r3
 800921a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921e:	d103      	bne.n	8009228 <xQueueReceive+0x128>
 8009220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009222:	2200      	movs	r2, #0
 8009224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800922e:	b25b      	sxtb	r3, r3
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009234:	d103      	bne.n	800923e <xQueueReceive+0x13e>
 8009236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800923e:	f7ff fb8d 	bl	800895c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009242:	1d3a      	adds	r2, r7, #4
 8009244:	f107 0310 	add.w	r3, r7, #16
 8009248:	4611      	mov	r1, r2
 800924a:	4618      	mov	r0, r3
 800924c:	f000 fe8e 	bl	8009f6c <xTaskCheckForTimeOut>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d123      	bne.n	800929e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009258:	f000 f998 	bl	800958c <prvIsQueueEmpty>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d017      	beq.n	8009292 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009264:	3324      	adds	r3, #36	@ 0x24
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fdde 	bl	8009e2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009272:	f000 f939 	bl	80094e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009276:	f000 fbff 	bl	8009a78 <xTaskResumeAll>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d189      	bne.n	8009194 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009280:	4b0f      	ldr	r3, [pc, #60]	@ (80092c0 <xQueueReceive+0x1c0>)
 8009282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	e780      	b.n	8009194 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009294:	f000 f928 	bl	80094e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009298:	f000 fbee 	bl	8009a78 <xTaskResumeAll>
 800929c:	e77a      	b.n	8009194 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800929e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092a0:	f000 f922 	bl	80094e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092a4:	f000 fbe8 	bl	8009a78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092aa:	f000 f96f 	bl	800958c <prvIsQueueEmpty>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f43f af6f 	beq.w	8009194 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80092b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3730      	adds	r7, #48	@ 0x30
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	e000ed04 	.word	0xe000ed04

080092c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08e      	sub	sp, #56	@ 0x38
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80092d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10b      	bne.n	80092f2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	623b      	str	r3, [r7, #32]
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	e7fd      	b.n	80092ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d103      	bne.n	8009300 <xQueueReceiveFromISR+0x3c>
 80092f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <xQueueReceiveFromISR+0x40>
 8009300:	2301      	movs	r3, #1
 8009302:	e000      	b.n	8009306 <xQueueReceiveFromISR+0x42>
 8009304:	2300      	movs	r3, #0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10b      	bne.n	8009322 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	61fb      	str	r3, [r7, #28]
}
 800931c:	bf00      	nop
 800931e:	bf00      	nop
 8009320:	e7fd      	b.n	800931e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009322:	f7ff fbc9 	bl	8008ab8 <vPortValidateInterruptPriority>
	__asm volatile
 8009326:	f3ef 8211 	mrs	r2, BASEPRI
 800932a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	61ba      	str	r2, [r7, #24]
 800933c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800933e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009340:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009346:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934a:	2b00      	cmp	r3, #0
 800934c:	d02f      	beq.n	80093ae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009358:	68b9      	ldr	r1, [r7, #8]
 800935a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800935c:	f000 f89e 	bl	800949c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009362:	1e5a      	subs	r2, r3, #1
 8009364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009366:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009368:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800936c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009370:	d112      	bne.n	8009398 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d016      	beq.n	80093a8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	3310      	adds	r3, #16
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fd7a 	bl	8009e78 <xTaskRemoveFromEventList>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00e      	beq.n	80093a8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00b      	beq.n	80093a8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	e007      	b.n	80093a8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800939c:	3301      	adds	r3, #1
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	b25a      	sxtb	r2, r3
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80093a8:	2301      	movs	r3, #1
 80093aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ac:	e001      	b.n	80093b2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f383 8811 	msr	BASEPRI, r3
}
 80093bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3738      	adds	r7, #56	@ 0x38
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80093d4:	2300      	movs	r3, #0
 80093d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10d      	bne.n	8009402 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d14d      	bne.n	800948a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 ff20 	bl	800a238 <xTaskPriorityDisinherit>
 80093f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	609a      	str	r2, [r3, #8]
 8009400:	e043      	b.n	800948a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d119      	bne.n	800943c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6858      	ldr	r0, [r3, #4]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009410:	461a      	mov	r2, r3
 8009412:	68b9      	ldr	r1, [r7, #8]
 8009414:	f003 fee8 	bl	800d1e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009420:	441a      	add	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	685a      	ldr	r2, [r3, #4]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	429a      	cmp	r2, r3
 8009430:	d32b      	bcc.n	800948a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	605a      	str	r2, [r3, #4]
 800943a:	e026      	b.n	800948a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	68d8      	ldr	r0, [r3, #12]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009444:	461a      	mov	r2, r3
 8009446:	68b9      	ldr	r1, [r7, #8]
 8009448:	f003 fece 	bl	800d1e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	68da      	ldr	r2, [r3, #12]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009454:	425b      	negs	r3, r3
 8009456:	441a      	add	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	429a      	cmp	r2, r3
 8009466:	d207      	bcs.n	8009478 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009470:	425b      	negs	r3, r3
 8009472:	441a      	add	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b02      	cmp	r3, #2
 800947c:	d105      	bne.n	800948a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	3b01      	subs	r3, #1
 8009488:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009492:	697b      	ldr	r3, [r7, #20]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d018      	beq.n	80094e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	68da      	ldr	r2, [r3, #12]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b6:	441a      	add	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d303      	bcc.n	80094d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68d9      	ldr	r1, [r3, #12]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d8:	461a      	mov	r2, r3
 80094da:	6838      	ldr	r0, [r7, #0]
 80094dc:	f003 fe84 	bl	800d1e8 <memcpy>
	}
}
 80094e0:	bf00      	nop
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80094f0:	f7ff fa02 	bl	80088f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094fc:	e011      	b.n	8009522 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009502:	2b00      	cmp	r3, #0
 8009504:	d012      	beq.n	800952c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3324      	adds	r3, #36	@ 0x24
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fcb4 	bl	8009e78 <xTaskRemoveFromEventList>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009516:	f000 fd8d 	bl	800a034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	3b01      	subs	r3, #1
 800951e:	b2db      	uxtb	r3, r3
 8009520:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009526:	2b00      	cmp	r3, #0
 8009528:	dce9      	bgt.n	80094fe <prvUnlockQueue+0x16>
 800952a:	e000      	b.n	800952e <prvUnlockQueue+0x46>
					break;
 800952c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	22ff      	movs	r2, #255	@ 0xff
 8009532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009536:	f7ff fa11 	bl	800895c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800953a:	f7ff f9dd 	bl	80088f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009544:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009546:	e011      	b.n	800956c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d012      	beq.n	8009576 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	3310      	adds	r3, #16
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fc8f 	bl	8009e78 <xTaskRemoveFromEventList>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009560:	f000 fd68 	bl	800a034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	3b01      	subs	r3, #1
 8009568:	b2db      	uxtb	r3, r3
 800956a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800956c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009570:	2b00      	cmp	r3, #0
 8009572:	dce9      	bgt.n	8009548 <prvUnlockQueue+0x60>
 8009574:	e000      	b.n	8009578 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009576:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	22ff      	movs	r2, #255	@ 0xff
 800957c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009580:	f7ff f9ec 	bl	800895c <vPortExitCritical>
}
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009594:	f7ff f9b0 	bl	80088f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800959c:	2b00      	cmp	r3, #0
 800959e:	d102      	bne.n	80095a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095a0:	2301      	movs	r3, #1
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	e001      	b.n	80095aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095a6:	2300      	movs	r3, #0
 80095a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095aa:	f7ff f9d7 	bl	800895c <vPortExitCritical>

	return xReturn;
 80095ae:	68fb      	ldr	r3, [r7, #12]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095c0:	f7ff f99a 	bl	80088f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d102      	bne.n	80095d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80095d0:	2301      	movs	r3, #1
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	e001      	b.n	80095da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095da:	f7ff f9bf 	bl	800895c <vPortExitCritical>

	return xReturn;
 80095de:	68fb      	ldr	r3, [r7, #12]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08e      	sub	sp, #56	@ 0x38
 80095ec:	af04      	add	r7, sp, #16
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10b      	bne.n	8009614 <xTaskCreateStatic+0x2c>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	623b      	str	r3, [r7, #32]
}
 800960e:	bf00      	nop
 8009610:	bf00      	nop
 8009612:	e7fd      	b.n	8009610 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10b      	bne.n	8009632 <xTaskCreateStatic+0x4a>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	61fb      	str	r3, [r7, #28]
}
 800962c:	bf00      	nop
 800962e:	bf00      	nop
 8009630:	e7fd      	b.n	800962e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009632:	2358      	movs	r3, #88	@ 0x58
 8009634:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	2b58      	cmp	r3, #88	@ 0x58
 800963a:	d00b      	beq.n	8009654 <xTaskCreateStatic+0x6c>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	61bb      	str	r3, [r7, #24]
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	e7fd      	b.n	8009650 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009654:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009658:	2b00      	cmp	r3, #0
 800965a:	d01e      	beq.n	800969a <xTaskCreateStatic+0xb2>
 800965c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800965e:	2b00      	cmp	r3, #0
 8009660:	d01b      	beq.n	800969a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009664:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009668:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800966a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800966c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966e:	2202      	movs	r2, #2
 8009670:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009674:	2300      	movs	r3, #0
 8009676:	9303      	str	r3, [sp, #12]
 8009678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967a:	9302      	str	r3, [sp, #8]
 800967c:	f107 0314 	add.w	r3, r7, #20
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	68b9      	ldr	r1, [r7, #8]
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 f850 	bl	8009732 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009692:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009694:	f000 f8e0 	bl	8009858 <prvAddNewTaskToReadyList>
 8009698:	e001      	b.n	800969e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800969a:	2300      	movs	r3, #0
 800969c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800969e:	697b      	ldr	r3, [r7, #20]
	}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3728      	adds	r7, #40	@ 0x28
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08c      	sub	sp, #48	@ 0x30
 80096ac:	af04      	add	r7, sp, #16
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	4613      	mov	r3, r2
 80096b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096b8:	88fb      	ldrh	r3, [r7, #6]
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fe fd43 	bl	8008148 <pvPortMalloc>
 80096c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00e      	beq.n	80096e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096ca:	2058      	movs	r0, #88	@ 0x58
 80096cc:	f7fe fd3c 	bl	8008148 <pvPortMalloc>
 80096d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d003      	beq.n	80096e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80096de:	e005      	b.n	80096ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096e0:	6978      	ldr	r0, [r7, #20]
 80096e2:	f7fe fe05 	bl	80082f0 <vPortFree>
 80096e6:	e001      	b.n	80096ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096e8:	2300      	movs	r3, #0
 80096ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d017      	beq.n	8009722 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096fa:	88fa      	ldrh	r2, [r7, #6]
 80096fc:	2300      	movs	r3, #0
 80096fe:	9303      	str	r3, [sp, #12]
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	9302      	str	r3, [sp, #8]
 8009704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009706:	9301      	str	r3, [sp, #4]
 8009708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	68b9      	ldr	r1, [r7, #8]
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f000 f80e 	bl	8009732 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009716:	69f8      	ldr	r0, [r7, #28]
 8009718:	f000 f89e 	bl	8009858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800971c:	2301      	movs	r3, #1
 800971e:	61bb      	str	r3, [r7, #24]
 8009720:	e002      	b.n	8009728 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009722:	f04f 33ff 	mov.w	r3, #4294967295
 8009726:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009728:	69bb      	ldr	r3, [r7, #24]
	}
 800972a:	4618      	mov	r0, r3
 800972c:	3720      	adds	r7, #32
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b088      	sub	sp, #32
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	607a      	str	r2, [r7, #4]
 800973e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009742:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	461a      	mov	r2, r3
 800974a:	21a5      	movs	r1, #165	@ 0xa5
 800974c:	f003 fd08 	bl	800d160 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800975a:	3b01      	subs	r3, #1
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	f023 0307 	bic.w	r3, r3, #7
 8009768:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00b      	beq.n	800978c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	617b      	str	r3, [r7, #20]
}
 8009786:	bf00      	nop
 8009788:	bf00      	nop
 800978a:	e7fd      	b.n	8009788 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d01f      	beq.n	80097d2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009792:	2300      	movs	r3, #0
 8009794:	61fb      	str	r3, [r7, #28]
 8009796:	e012      	b.n	80097be <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	4413      	add	r3, r2
 800979e:	7819      	ldrb	r1, [r3, #0]
 80097a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	4413      	add	r3, r2
 80097a6:	3334      	adds	r3, #52	@ 0x34
 80097a8:	460a      	mov	r2, r1
 80097aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	4413      	add	r3, r2
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d006      	beq.n	80097c6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	3301      	adds	r3, #1
 80097bc:	61fb      	str	r3, [r7, #28]
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	2b0f      	cmp	r3, #15
 80097c2:	d9e9      	bls.n	8009798 <prvInitialiseNewTask+0x66>
 80097c4:	e000      	b.n	80097c8 <prvInitialiseNewTask+0x96>
			{
				break;
 80097c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80097d0:	e003      	b.n	80097da <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80097d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097dc:	2b06      	cmp	r3, #6
 80097de:	d901      	bls.n	80097e4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097e0:	2306      	movs	r3, #6
 80097e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80097e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097ee:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	2200      	movs	r2, #0
 80097f4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f8:	3304      	adds	r3, #4
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe feb8 	bl	8008570 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009802:	3318      	adds	r3, #24
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe feb3 	bl	8008570 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800980a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800980e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009812:	f1c3 0207 	rsb	r2, r3, #7
 8009816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009818:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800981a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800981e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8009820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009822:	2200      	movs	r2, #0
 8009824:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009828:	2200      	movs	r2, #0
 800982a:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800982c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	68f9      	ldr	r1, [r7, #12]
 8009838:	69b8      	ldr	r0, [r7, #24]
 800983a:	f7fe ff2d 	bl	8008698 <pxPortInitialiseStack>
 800983e:	4602      	mov	r2, r0
 8009840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009842:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009846:	2b00      	cmp	r3, #0
 8009848:	d002      	beq.n	8009850 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800984a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800984c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800984e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009850:	bf00      	nop
 8009852:	3720      	adds	r7, #32
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009860:	f7ff f84a 	bl	80088f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009864:	4b2a      	ldr	r3, [pc, #168]	@ (8009910 <prvAddNewTaskToReadyList+0xb8>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	3301      	adds	r3, #1
 800986a:	4a29      	ldr	r2, [pc, #164]	@ (8009910 <prvAddNewTaskToReadyList+0xb8>)
 800986c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800986e:	4b29      	ldr	r3, [pc, #164]	@ (8009914 <prvAddNewTaskToReadyList+0xbc>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d109      	bne.n	800988a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009876:	4a27      	ldr	r2, [pc, #156]	@ (8009914 <prvAddNewTaskToReadyList+0xbc>)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800987c:	4b24      	ldr	r3, [pc, #144]	@ (8009910 <prvAddNewTaskToReadyList+0xb8>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d110      	bne.n	80098a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009884:	f000 fbfc 	bl	800a080 <prvInitialiseTaskLists>
 8009888:	e00d      	b.n	80098a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800988a:	4b23      	ldr	r3, [pc, #140]	@ (8009918 <prvAddNewTaskToReadyList+0xc0>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d109      	bne.n	80098a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009892:	4b20      	ldr	r3, [pc, #128]	@ (8009914 <prvAddNewTaskToReadyList+0xbc>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989c:	429a      	cmp	r2, r3
 800989e:	d802      	bhi.n	80098a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80098a0:	4a1c      	ldr	r2, [pc, #112]	@ (8009914 <prvAddNewTaskToReadyList+0xbc>)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80098a6:	4b1d      	ldr	r3, [pc, #116]	@ (800991c <prvAddNewTaskToReadyList+0xc4>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3301      	adds	r3, #1
 80098ac:	4a1b      	ldr	r2, [pc, #108]	@ (800991c <prvAddNewTaskToReadyList+0xc4>)
 80098ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b4:	2201      	movs	r2, #1
 80098b6:	409a      	lsls	r2, r3
 80098b8:	4b19      	ldr	r3, [pc, #100]	@ (8009920 <prvAddNewTaskToReadyList+0xc8>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4313      	orrs	r3, r2
 80098be:	4a18      	ldr	r2, [pc, #96]	@ (8009920 <prvAddNewTaskToReadyList+0xc8>)
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c6:	4613      	mov	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4a15      	ldr	r2, [pc, #84]	@ (8009924 <prvAddNewTaskToReadyList+0xcc>)
 80098d0:	441a      	add	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3304      	adds	r3, #4
 80098d6:	4619      	mov	r1, r3
 80098d8:	4610      	mov	r0, r2
 80098da:	f7fe fe56 	bl	800858a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098de:	f7ff f83d 	bl	800895c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009918 <prvAddNewTaskToReadyList+0xc0>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00e      	beq.n	8009908 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009914 <prvAddNewTaskToReadyList+0xbc>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d207      	bcs.n	8009908 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009928 <prvAddNewTaskToReadyList+0xd0>)
 80098fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009908:	bf00      	nop
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	200086d4 	.word	0x200086d4
 8009914:	200085d4 	.word	0x200085d4
 8009918:	200086e0 	.word	0x200086e0
 800991c:	200086f0 	.word	0x200086f0
 8009920:	200086dc 	.word	0x200086dc
 8009924:	200085d8 	.word	0x200085d8
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d018      	beq.n	8009970 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800993e:	4b14      	ldr	r3, [pc, #80]	@ (8009990 <vTaskDelay+0x64>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00b      	beq.n	800995e <vTaskDelay+0x32>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	60bb      	str	r3, [r7, #8]
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	e7fd      	b.n	800995a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800995e:	f000 f87d 	bl	8009a5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009962:	2100      	movs	r1, #0
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fcef 	bl	800a348 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800996a:	f000 f885 	bl	8009a78 <xTaskResumeAll>
 800996e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d107      	bne.n	8009986 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009976:	4b07      	ldr	r3, [pc, #28]	@ (8009994 <vTaskDelay+0x68>)
 8009978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	200086fc 	.word	0x200086fc
 8009994:	e000ed04 	.word	0xe000ed04

08009998 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b08a      	sub	sp, #40	@ 0x28
 800999c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800999e:	2300      	movs	r3, #0
 80099a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80099a2:	2300      	movs	r3, #0
 80099a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80099a6:	463a      	mov	r2, r7
 80099a8:	1d39      	adds	r1, r7, #4
 80099aa:	f107 0308 	add.w	r3, r7, #8
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7f6 ff2c 	bl	800080c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	9202      	str	r2, [sp, #8]
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	2300      	movs	r3, #0
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	2300      	movs	r3, #0
 80099c4:	460a      	mov	r2, r1
 80099c6:	491f      	ldr	r1, [pc, #124]	@ (8009a44 <vTaskStartScheduler+0xac>)
 80099c8:	481f      	ldr	r0, [pc, #124]	@ (8009a48 <vTaskStartScheduler+0xb0>)
 80099ca:	f7ff fe0d 	bl	80095e8 <xTaskCreateStatic>
 80099ce:	4603      	mov	r3, r0
 80099d0:	4a1e      	ldr	r2, [pc, #120]	@ (8009a4c <vTaskStartScheduler+0xb4>)
 80099d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099d4:	4b1d      	ldr	r3, [pc, #116]	@ (8009a4c <vTaskStartScheduler+0xb4>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d002      	beq.n	80099e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099dc:	2301      	movs	r3, #1
 80099de:	617b      	str	r3, [r7, #20]
 80099e0:	e001      	b.n	80099e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099e2:	2300      	movs	r3, #0
 80099e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d116      	bne.n	8009a1a <vTaskStartScheduler+0x82>
	__asm volatile
 80099ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	613b      	str	r3, [r7, #16]
}
 80099fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a00:	4b13      	ldr	r3, [pc, #76]	@ (8009a50 <vTaskStartScheduler+0xb8>)
 8009a02:	f04f 32ff 	mov.w	r2, #4294967295
 8009a06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a08:	4b12      	ldr	r3, [pc, #72]	@ (8009a54 <vTaskStartScheduler+0xbc>)
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a0e:	4b12      	ldr	r3, [pc, #72]	@ (8009a58 <vTaskStartScheduler+0xc0>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a14:	f7fe fecc 	bl	80087b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a18:	e00f      	b.n	8009a3a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a20:	d10b      	bne.n	8009a3a <vTaskStartScheduler+0xa2>
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a26:	f383 8811 	msr	BASEPRI, r3
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	60fb      	str	r3, [r7, #12]
}
 8009a34:	bf00      	nop
 8009a36:	bf00      	nop
 8009a38:	e7fd      	b.n	8009a36 <vTaskStartScheduler+0x9e>
}
 8009a3a:	bf00      	nop
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	0800d2d8 	.word	0x0800d2d8
 8009a48:	0800a04d 	.word	0x0800a04d
 8009a4c:	200086f8 	.word	0x200086f8
 8009a50:	200086f4 	.word	0x200086f4
 8009a54:	200086e0 	.word	0x200086e0
 8009a58:	200086d8 	.word	0x200086d8

08009a5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a60:	4b04      	ldr	r3, [pc, #16]	@ (8009a74 <vTaskSuspendAll+0x18>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3301      	adds	r3, #1
 8009a66:	4a03      	ldr	r2, [pc, #12]	@ (8009a74 <vTaskSuspendAll+0x18>)
 8009a68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a6a:	bf00      	nop
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	200086fc 	.word	0x200086fc

08009a78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a82:	2300      	movs	r3, #0
 8009a84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a86:	4b42      	ldr	r3, [pc, #264]	@ (8009b90 <xTaskResumeAll+0x118>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10b      	bne.n	8009aa6 <xTaskResumeAll+0x2e>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	603b      	str	r3, [r7, #0]
}
 8009aa0:	bf00      	nop
 8009aa2:	bf00      	nop
 8009aa4:	e7fd      	b.n	8009aa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009aa6:	f7fe ff27 	bl	80088f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009aaa:	4b39      	ldr	r3, [pc, #228]	@ (8009b90 <xTaskResumeAll+0x118>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	4a37      	ldr	r2, [pc, #220]	@ (8009b90 <xTaskResumeAll+0x118>)
 8009ab2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ab4:	4b36      	ldr	r3, [pc, #216]	@ (8009b90 <xTaskResumeAll+0x118>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d161      	bne.n	8009b80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009abc:	4b35      	ldr	r3, [pc, #212]	@ (8009b94 <xTaskResumeAll+0x11c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d05d      	beq.n	8009b80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ac4:	e02e      	b.n	8009b24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ac6:	4b34      	ldr	r3, [pc, #208]	@ (8009b98 <xTaskResumeAll+0x120>)
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	3318      	adds	r3, #24
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fe fdb6 	bl	8008644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fe fdb1 	bl	8008644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	409a      	lsls	r2, r3
 8009aea:	4b2c      	ldr	r3, [pc, #176]	@ (8009b9c <xTaskResumeAll+0x124>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	4a2a      	ldr	r2, [pc, #168]	@ (8009b9c <xTaskResumeAll+0x124>)
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af8:	4613      	mov	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4a27      	ldr	r2, [pc, #156]	@ (8009ba0 <xTaskResumeAll+0x128>)
 8009b02:	441a      	add	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	3304      	adds	r3, #4
 8009b08:	4619      	mov	r1, r3
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	f7fe fd3d 	bl	800858a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b14:	4b23      	ldr	r3, [pc, #140]	@ (8009ba4 <xTaskResumeAll+0x12c>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d302      	bcc.n	8009b24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009b1e:	4b22      	ldr	r3, [pc, #136]	@ (8009ba8 <xTaskResumeAll+0x130>)
 8009b20:	2201      	movs	r2, #1
 8009b22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b24:	4b1c      	ldr	r3, [pc, #112]	@ (8009b98 <xTaskResumeAll+0x120>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1cc      	bne.n	8009ac6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b32:	f000 fb43 	bl	800a1bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b36:	4b1d      	ldr	r3, [pc, #116]	@ (8009bac <xTaskResumeAll+0x134>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d010      	beq.n	8009b64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b42:	f000 f837 	bl	8009bb4 <xTaskIncrementTick>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b4c:	4b16      	ldr	r3, [pc, #88]	@ (8009ba8 <xTaskResumeAll+0x130>)
 8009b4e:	2201      	movs	r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f1      	bne.n	8009b42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b5e:	4b13      	ldr	r3, [pc, #76]	@ (8009bac <xTaskResumeAll+0x134>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b64:	4b10      	ldr	r3, [pc, #64]	@ (8009ba8 <xTaskResumeAll+0x130>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d009      	beq.n	8009b80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b70:	4b0f      	ldr	r3, [pc, #60]	@ (8009bb0 <xTaskResumeAll+0x138>)
 8009b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b80:	f7fe feec 	bl	800895c <vPortExitCritical>

	return xAlreadyYielded;
 8009b84:	68bb      	ldr	r3, [r7, #8]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	200086fc 	.word	0x200086fc
 8009b94:	200086d4 	.word	0x200086d4
 8009b98:	20008694 	.word	0x20008694
 8009b9c:	200086dc 	.word	0x200086dc
 8009ba0:	200085d8 	.word	0x200085d8
 8009ba4:	200085d4 	.word	0x200085d4
 8009ba8:	200086e8 	.word	0x200086e8
 8009bac:	200086e4 	.word	0x200086e4
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bbe:	4b4f      	ldr	r3, [pc, #316]	@ (8009cfc <xTaskIncrementTick+0x148>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f040 808f 	bne.w	8009ce6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8009d00 <xTaskIncrementTick+0x14c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bd0:	4a4b      	ldr	r2, [pc, #300]	@ (8009d00 <xTaskIncrementTick+0x14c>)
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d121      	bne.n	8009c20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bdc:	4b49      	ldr	r3, [pc, #292]	@ (8009d04 <xTaskIncrementTick+0x150>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00b      	beq.n	8009bfe <xTaskIncrementTick+0x4a>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	603b      	str	r3, [r7, #0]
}
 8009bf8:	bf00      	nop
 8009bfa:	bf00      	nop
 8009bfc:	e7fd      	b.n	8009bfa <xTaskIncrementTick+0x46>
 8009bfe:	4b41      	ldr	r3, [pc, #260]	@ (8009d04 <xTaskIncrementTick+0x150>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	4b40      	ldr	r3, [pc, #256]	@ (8009d08 <xTaskIncrementTick+0x154>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a3e      	ldr	r2, [pc, #248]	@ (8009d04 <xTaskIncrementTick+0x150>)
 8009c0a:	6013      	str	r3, [r2, #0]
 8009c0c:	4a3e      	ldr	r2, [pc, #248]	@ (8009d08 <xTaskIncrementTick+0x154>)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6013      	str	r3, [r2, #0]
 8009c12:	4b3e      	ldr	r3, [pc, #248]	@ (8009d0c <xTaskIncrementTick+0x158>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3301      	adds	r3, #1
 8009c18:	4a3c      	ldr	r2, [pc, #240]	@ (8009d0c <xTaskIncrementTick+0x158>)
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	f000 face 	bl	800a1bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c20:	4b3b      	ldr	r3, [pc, #236]	@ (8009d10 <xTaskIncrementTick+0x15c>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d348      	bcc.n	8009cbc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c2a:	4b36      	ldr	r3, [pc, #216]	@ (8009d04 <xTaskIncrementTick+0x150>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d104      	bne.n	8009c3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c34:	4b36      	ldr	r3, [pc, #216]	@ (8009d10 <xTaskIncrementTick+0x15c>)
 8009c36:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3a:	601a      	str	r2, [r3, #0]
					break;
 8009c3c:	e03e      	b.n	8009cbc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c3e:	4b31      	ldr	r3, [pc, #196]	@ (8009d04 <xTaskIncrementTick+0x150>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d203      	bcs.n	8009c5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c56:	4a2e      	ldr	r2, [pc, #184]	@ (8009d10 <xTaskIncrementTick+0x15c>)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c5c:	e02e      	b.n	8009cbc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	3304      	adds	r3, #4
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe fcee 	bl	8008644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d004      	beq.n	8009c7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	3318      	adds	r3, #24
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe fce5 	bl	8008644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7e:	2201      	movs	r2, #1
 8009c80:	409a      	lsls	r2, r3
 8009c82:	4b24      	ldr	r3, [pc, #144]	@ (8009d14 <xTaskIncrementTick+0x160>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	4a22      	ldr	r2, [pc, #136]	@ (8009d14 <xTaskIncrementTick+0x160>)
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c90:	4613      	mov	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4a1f      	ldr	r2, [pc, #124]	@ (8009d18 <xTaskIncrementTick+0x164>)
 8009c9a:	441a      	add	r2, r3
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	f7fe fc71 	bl	800858a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cac:	4b1b      	ldr	r3, [pc, #108]	@ (8009d1c <xTaskIncrementTick+0x168>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d3b9      	bcc.n	8009c2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cba:	e7b6      	b.n	8009c2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009cbc:	4b17      	ldr	r3, [pc, #92]	@ (8009d1c <xTaskIncrementTick+0x168>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc2:	4915      	ldr	r1, [pc, #84]	@ (8009d18 <xTaskIncrementTick+0x164>)
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	440b      	add	r3, r1
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d901      	bls.n	8009cd8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009cd8:	4b11      	ldr	r3, [pc, #68]	@ (8009d20 <xTaskIncrementTick+0x16c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d007      	beq.n	8009cf0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	617b      	str	r3, [r7, #20]
 8009ce4:	e004      	b.n	8009cf0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8009d24 <xTaskIncrementTick+0x170>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3301      	adds	r3, #1
 8009cec:	4a0d      	ldr	r2, [pc, #52]	@ (8009d24 <xTaskIncrementTick+0x170>)
 8009cee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009cf0:	697b      	ldr	r3, [r7, #20]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3718      	adds	r7, #24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	200086fc 	.word	0x200086fc
 8009d00:	200086d8 	.word	0x200086d8
 8009d04:	2000868c 	.word	0x2000868c
 8009d08:	20008690 	.word	0x20008690
 8009d0c:	200086ec 	.word	0x200086ec
 8009d10:	200086f4 	.word	0x200086f4
 8009d14:	200086dc 	.word	0x200086dc
 8009d18:	200085d8 	.word	0x200085d8
 8009d1c:	200085d4 	.word	0x200085d4
 8009d20:	200086e8 	.word	0x200086e8
 8009d24:	200086e4 	.word	0x200086e4

08009d28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b088      	sub	sp, #32
 8009d2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8009e18 <vTaskSwitchContext+0xf0>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d36:	4b39      	ldr	r3, [pc, #228]	@ (8009e1c <vTaskSwitchContext+0xf4>)
 8009d38:	2201      	movs	r2, #1
 8009d3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d3c:	e067      	b.n	8009e0e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8009d3e:	4b37      	ldr	r3, [pc, #220]	@ (8009e1c <vTaskSwitchContext+0xf4>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009d44:	4b36      	ldr	r3, [pc, #216]	@ (8009e20 <vTaskSwitchContext+0xf8>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d4a:	61fb      	str	r3, [r7, #28]
 8009d4c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8009d50:	61bb      	str	r3, [r7, #24]
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d111      	bne.n	8009d80 <vTaskSwitchContext+0x58>
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	3304      	adds	r3, #4
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d10b      	bne.n	8009d80 <vTaskSwitchContext+0x58>
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	3308      	adds	r3, #8
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	69ba      	ldr	r2, [r7, #24]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d105      	bne.n	8009d80 <vTaskSwitchContext+0x58>
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	330c      	adds	r3, #12
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d008      	beq.n	8009d92 <vTaskSwitchContext+0x6a>
 8009d80:	4b27      	ldr	r3, [pc, #156]	@ (8009e20 <vTaskSwitchContext+0xf8>)
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	4b26      	ldr	r3, [pc, #152]	@ (8009e20 <vTaskSwitchContext+0xf8>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3334      	adds	r3, #52	@ 0x34
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	f7f6 fd2a 	bl	80007e6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d92:	4b24      	ldr	r3, [pc, #144]	@ (8009e24 <vTaskSwitchContext+0xfc>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	fab3 f383 	clz	r3, r3
 8009d9e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009da0:	7afb      	ldrb	r3, [r7, #11]
 8009da2:	f1c3 031f 	rsb	r3, r3, #31
 8009da6:	617b      	str	r3, [r7, #20]
 8009da8:	491f      	ldr	r1, [pc, #124]	@ (8009e28 <vTaskSwitchContext+0x100>)
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	440b      	add	r3, r1
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10b      	bne.n	8009dd4 <vTaskSwitchContext+0xac>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	607b      	str	r3, [r7, #4]
}
 8009dce:	bf00      	nop
 8009dd0:	bf00      	nop
 8009dd2:	e7fd      	b.n	8009dd0 <vTaskSwitchContext+0xa8>
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4a12      	ldr	r2, [pc, #72]	@ (8009e28 <vTaskSwitchContext+0x100>)
 8009de0:	4413      	add	r3, r2
 8009de2:	613b      	str	r3, [r7, #16]
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	685a      	ldr	r2, [r3, #4]
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	605a      	str	r2, [r3, #4]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	3308      	adds	r3, #8
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d104      	bne.n	8009e04 <vTaskSwitchContext+0xdc>
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	605a      	str	r2, [r3, #4]
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	4a05      	ldr	r2, [pc, #20]	@ (8009e20 <vTaskSwitchContext+0xf8>)
 8009e0c:	6013      	str	r3, [r2, #0]
}
 8009e0e:	bf00      	nop
 8009e10:	3720      	adds	r7, #32
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	200086fc 	.word	0x200086fc
 8009e1c:	200086e8 	.word	0x200086e8
 8009e20:	200085d4 	.word	0x200085d4
 8009e24:	200086dc 	.word	0x200086dc
 8009e28:	200085d8 	.word	0x200085d8

08009e2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10b      	bne.n	8009e54 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	60fb      	str	r3, [r7, #12]
}
 8009e4e:	bf00      	nop
 8009e50:	bf00      	nop
 8009e52:	e7fd      	b.n	8009e50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e54:	4b07      	ldr	r3, [pc, #28]	@ (8009e74 <vTaskPlaceOnEventList+0x48>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3318      	adds	r3, #24
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7fe fbb8 	bl	80085d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e62:	2101      	movs	r1, #1
 8009e64:	6838      	ldr	r0, [r7, #0]
 8009e66:	f000 fa6f 	bl	800a348 <prvAddCurrentTaskToDelayedList>
}
 8009e6a:	bf00      	nop
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	200085d4 	.word	0x200085d4

08009e78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10b      	bne.n	8009ea6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	60fb      	str	r3, [r7, #12]
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	e7fd      	b.n	8009ea2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	3318      	adds	r3, #24
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fe fbca 	bl	8008644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8009f28 <xTaskRemoveFromEventList+0xb0>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d11c      	bne.n	8009ef2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fe fbc1 	bl	8008644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	409a      	lsls	r2, r3
 8009eca:	4b18      	ldr	r3, [pc, #96]	@ (8009f2c <xTaskRemoveFromEventList+0xb4>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	4a16      	ldr	r2, [pc, #88]	@ (8009f2c <xTaskRemoveFromEventList+0xb4>)
 8009ed2:	6013      	str	r3, [r2, #0]
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed8:	4613      	mov	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	4a13      	ldr	r2, [pc, #76]	@ (8009f30 <xTaskRemoveFromEventList+0xb8>)
 8009ee2:	441a      	add	r2, r3
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	3304      	adds	r3, #4
 8009ee8:	4619      	mov	r1, r3
 8009eea:	4610      	mov	r0, r2
 8009eec:	f7fe fb4d 	bl	800858a <vListInsertEnd>
 8009ef0:	e005      	b.n	8009efe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	3318      	adds	r3, #24
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	480e      	ldr	r0, [pc, #56]	@ (8009f34 <xTaskRemoveFromEventList+0xbc>)
 8009efa:	f7fe fb46 	bl	800858a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f02:	4b0d      	ldr	r3, [pc, #52]	@ (8009f38 <xTaskRemoveFromEventList+0xc0>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d905      	bls.n	8009f18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f10:	4b0a      	ldr	r3, [pc, #40]	@ (8009f3c <xTaskRemoveFromEventList+0xc4>)
 8009f12:	2201      	movs	r2, #1
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	e001      	b.n	8009f1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f1c:	697b      	ldr	r3, [r7, #20]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	200086fc 	.word	0x200086fc
 8009f2c:	200086dc 	.word	0x200086dc
 8009f30:	200085d8 	.word	0x200085d8
 8009f34:	20008694 	.word	0x20008694
 8009f38:	200085d4 	.word	0x200085d4
 8009f3c:	200086e8 	.word	0x200086e8

08009f40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f48:	4b06      	ldr	r3, [pc, #24]	@ (8009f64 <vTaskInternalSetTimeOutState+0x24>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f50:	4b05      	ldr	r3, [pc, #20]	@ (8009f68 <vTaskInternalSetTimeOutState+0x28>)
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	605a      	str	r2, [r3, #4]
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	200086ec 	.word	0x200086ec
 8009f68:	200086d8 	.word	0x200086d8

08009f6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10b      	bne.n	8009f94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	613b      	str	r3, [r7, #16]
}
 8009f8e:	bf00      	nop
 8009f90:	bf00      	nop
 8009f92:	e7fd      	b.n	8009f90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10b      	bne.n	8009fb2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	60fb      	str	r3, [r7, #12]
}
 8009fac:	bf00      	nop
 8009fae:	bf00      	nop
 8009fb0:	e7fd      	b.n	8009fae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009fb2:	f7fe fca1 	bl	80088f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800a02c <xTaskCheckForTimeOut+0xc0>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	69ba      	ldr	r2, [r7, #24]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fce:	d102      	bne.n	8009fd6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	61fb      	str	r3, [r7, #28]
 8009fd4:	e023      	b.n	800a01e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	4b15      	ldr	r3, [pc, #84]	@ (800a030 <xTaskCheckForTimeOut+0xc4>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d007      	beq.n	8009ff2 <xTaskCheckForTimeOut+0x86>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d302      	bcc.n	8009ff2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fec:	2301      	movs	r3, #1
 8009fee:	61fb      	str	r3, [r7, #28]
 8009ff0:	e015      	b.n	800a01e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d20b      	bcs.n	800a014 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	1ad2      	subs	r2, r2, r3
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff ff99 	bl	8009f40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a00e:	2300      	movs	r3, #0
 800a010:	61fb      	str	r3, [r7, #28]
 800a012:	e004      	b.n	800a01e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	2200      	movs	r2, #0
 800a018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a01a:	2301      	movs	r3, #1
 800a01c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a01e:	f7fe fc9d 	bl	800895c <vPortExitCritical>

	return xReturn;
 800a022:	69fb      	ldr	r3, [r7, #28]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3720      	adds	r7, #32
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	200086d8 	.word	0x200086d8
 800a030:	200086ec 	.word	0x200086ec

0800a034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a034:	b480      	push	{r7}
 800a036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a038:	4b03      	ldr	r3, [pc, #12]	@ (800a048 <vTaskMissedYield+0x14>)
 800a03a:	2201      	movs	r2, #1
 800a03c:	601a      	str	r2, [r3, #0]
}
 800a03e:	bf00      	nop
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	200086e8 	.word	0x200086e8

0800a04c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a054:	f000 f854 	bl	800a100 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a058:	4b07      	ldr	r3, [pc, #28]	@ (800a078 <prvIdleTask+0x2c>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d907      	bls.n	800a070 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a060:	4b06      	ldr	r3, [pc, #24]	@ (800a07c <prvIdleTask+0x30>)
 800a062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a066:	601a      	str	r2, [r3, #0]
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a070:	f7f6 fbb2 	bl	80007d8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a074:	e7ee      	b.n	800a054 <prvIdleTask+0x8>
 800a076:	bf00      	nop
 800a078:	200085d8 	.word	0x200085d8
 800a07c:	e000ed04 	.word	0xe000ed04

0800a080 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a086:	2300      	movs	r3, #0
 800a088:	607b      	str	r3, [r7, #4]
 800a08a:	e00c      	b.n	800a0a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4a12      	ldr	r2, [pc, #72]	@ (800a0e0 <prvInitialiseTaskLists+0x60>)
 800a098:	4413      	add	r3, r2
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fe fa48 	bl	8008530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	607b      	str	r3, [r7, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b06      	cmp	r3, #6
 800a0aa:	d9ef      	bls.n	800a08c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0ac:	480d      	ldr	r0, [pc, #52]	@ (800a0e4 <prvInitialiseTaskLists+0x64>)
 800a0ae:	f7fe fa3f 	bl	8008530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0b2:	480d      	ldr	r0, [pc, #52]	@ (800a0e8 <prvInitialiseTaskLists+0x68>)
 800a0b4:	f7fe fa3c 	bl	8008530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0b8:	480c      	ldr	r0, [pc, #48]	@ (800a0ec <prvInitialiseTaskLists+0x6c>)
 800a0ba:	f7fe fa39 	bl	8008530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0be:	480c      	ldr	r0, [pc, #48]	@ (800a0f0 <prvInitialiseTaskLists+0x70>)
 800a0c0:	f7fe fa36 	bl	8008530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0c4:	480b      	ldr	r0, [pc, #44]	@ (800a0f4 <prvInitialiseTaskLists+0x74>)
 800a0c6:	f7fe fa33 	bl	8008530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a0f8 <prvInitialiseTaskLists+0x78>)
 800a0cc:	4a05      	ldr	r2, [pc, #20]	@ (800a0e4 <prvInitialiseTaskLists+0x64>)
 800a0ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a0fc <prvInitialiseTaskLists+0x7c>)
 800a0d2:	4a05      	ldr	r2, [pc, #20]	@ (800a0e8 <prvInitialiseTaskLists+0x68>)
 800a0d4:	601a      	str	r2, [r3, #0]
}
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	200085d8 	.word	0x200085d8
 800a0e4:	20008664 	.word	0x20008664
 800a0e8:	20008678 	.word	0x20008678
 800a0ec:	20008694 	.word	0x20008694
 800a0f0:	200086a8 	.word	0x200086a8
 800a0f4:	200086c0 	.word	0x200086c0
 800a0f8:	2000868c 	.word	0x2000868c
 800a0fc:	20008690 	.word	0x20008690

0800a100 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a106:	e019      	b.n	800a13c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a108:	f7fe fbf6 	bl	80088f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a10c:	4b10      	ldr	r3, [pc, #64]	@ (800a150 <prvCheckTasksWaitingTermination+0x50>)
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3304      	adds	r3, #4
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fe fa93 	bl	8008644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a11e:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <prvCheckTasksWaitingTermination+0x54>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3b01      	subs	r3, #1
 800a124:	4a0b      	ldr	r2, [pc, #44]	@ (800a154 <prvCheckTasksWaitingTermination+0x54>)
 800a126:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a128:	4b0b      	ldr	r3, [pc, #44]	@ (800a158 <prvCheckTasksWaitingTermination+0x58>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	4a0a      	ldr	r2, [pc, #40]	@ (800a158 <prvCheckTasksWaitingTermination+0x58>)
 800a130:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a132:	f7fe fc13 	bl	800895c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f810 	bl	800a15c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a13c:	4b06      	ldr	r3, [pc, #24]	@ (800a158 <prvCheckTasksWaitingTermination+0x58>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1e1      	bne.n	800a108 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	200086a8 	.word	0x200086a8
 800a154:	200086d4 	.word	0x200086d4
 800a158:	200086bc 	.word	0x200086bc

0800a15c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d108      	bne.n	800a180 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a172:	4618      	mov	r0, r3
 800a174:	f7fe f8bc 	bl	80082f0 <vPortFree>
				vPortFree( pxTCB );
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7fe f8b9 	bl	80082f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a17e:	e019      	b.n	800a1b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800a186:	2b01      	cmp	r3, #1
 800a188:	d103      	bne.n	800a192 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7fe f8b0 	bl	80082f0 <vPortFree>
	}
 800a190:	e010      	b.n	800a1b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d00b      	beq.n	800a1b4 <prvDeleteTCB+0x58>
	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	60fb      	str	r3, [r7, #12]
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	e7fd      	b.n	800a1b0 <prvDeleteTCB+0x54>
	}
 800a1b4:	bf00      	nop
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f4 <prvResetNextTaskUnblockTime+0x38>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a1f8 <prvResetNextTaskUnblockTime+0x3c>)
 800a1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1d4:	e008      	b.n	800a1e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1d6:	4b07      	ldr	r3, [pc, #28]	@ (800a1f4 <prvResetNextTaskUnblockTime+0x38>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	4a04      	ldr	r2, [pc, #16]	@ (800a1f8 <prvResetNextTaskUnblockTime+0x3c>)
 800a1e6:	6013      	str	r3, [r2, #0]
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	2000868c 	.word	0x2000868c
 800a1f8:	200086f4 	.word	0x200086f4

0800a1fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a202:	4b0b      	ldr	r3, [pc, #44]	@ (800a230 <xTaskGetSchedulerState+0x34>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d102      	bne.n	800a210 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a20a:	2301      	movs	r3, #1
 800a20c:	607b      	str	r3, [r7, #4]
 800a20e:	e008      	b.n	800a222 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a210:	4b08      	ldr	r3, [pc, #32]	@ (800a234 <xTaskGetSchedulerState+0x38>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d102      	bne.n	800a21e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a218:	2302      	movs	r3, #2
 800a21a:	607b      	str	r3, [r7, #4]
 800a21c:	e001      	b.n	800a222 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a21e:	2300      	movs	r3, #0
 800a220:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a222:	687b      	ldr	r3, [r7, #4]
	}
 800a224:	4618      	mov	r0, r3
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	200086e0 	.word	0x200086e0
 800a234:	200086fc 	.word	0x200086fc

0800a238 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a244:	2300      	movs	r3, #0
 800a246:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d070      	beq.n	800a330 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a24e:	4b3b      	ldr	r3, [pc, #236]	@ (800a33c <xTaskPriorityDisinherit+0x104>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	429a      	cmp	r2, r3
 800a256:	d00b      	beq.n	800a270 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	60fb      	str	r3, [r7, #12]
}
 800a26a:	bf00      	nop
 800a26c:	bf00      	nop
 800a26e:	e7fd      	b.n	800a26c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10b      	bne.n	800a290 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	60bb      	str	r3, [r7, #8]
}
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
 800a28e:	e7fd      	b.n	800a28c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a294:	1e5a      	subs	r2, r3, #1
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d044      	beq.n	800a330 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d140      	bne.n	800a330 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe f9c6 	bl	8008644 <uxListRemove>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d115      	bne.n	800a2ea <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2c2:	491f      	ldr	r1, [pc, #124]	@ (800a340 <xTaskPriorityDisinherit+0x108>)
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	440b      	add	r3, r1
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10a      	bne.n	800a2ea <xTaskPriorityDisinherit+0xb2>
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d8:	2201      	movs	r2, #1
 800a2da:	fa02 f303 	lsl.w	r3, r2, r3
 800a2de:	43da      	mvns	r2, r3
 800a2e0:	4b18      	ldr	r3, [pc, #96]	@ (800a344 <xTaskPriorityDisinherit+0x10c>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	4a17      	ldr	r2, [pc, #92]	@ (800a344 <xTaskPriorityDisinherit+0x10c>)
 800a2e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f6:	f1c3 0207 	rsb	r2, r3, #7
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a302:	2201      	movs	r2, #1
 800a304:	409a      	lsls	r2, r3
 800a306:	4b0f      	ldr	r3, [pc, #60]	@ (800a344 <xTaskPriorityDisinherit+0x10c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	4a0d      	ldr	r2, [pc, #52]	@ (800a344 <xTaskPriorityDisinherit+0x10c>)
 800a30e:	6013      	str	r3, [r2, #0]
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a314:	4613      	mov	r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4413      	add	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4a08      	ldr	r2, [pc, #32]	@ (800a340 <xTaskPriorityDisinherit+0x108>)
 800a31e:	441a      	add	r2, r3
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	3304      	adds	r3, #4
 800a324:	4619      	mov	r1, r3
 800a326:	4610      	mov	r0, r2
 800a328:	f7fe f92f 	bl	800858a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a32c:	2301      	movs	r3, #1
 800a32e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a330:	697b      	ldr	r3, [r7, #20]
	}
 800a332:	4618      	mov	r0, r3
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	200085d4 	.word	0x200085d4
 800a340:	200085d8 	.word	0x200085d8
 800a344:	200086dc 	.word	0x200086dc

0800a348 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a352:	4b29      	ldr	r3, [pc, #164]	@ (800a3f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a358:	4b28      	ldr	r3, [pc, #160]	@ (800a3fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3304      	adds	r3, #4
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe f970 	bl	8008644 <uxListRemove>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10b      	bne.n	800a382 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a36a:	4b24      	ldr	r3, [pc, #144]	@ (800a3fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a370:	2201      	movs	r2, #1
 800a372:	fa02 f303 	lsl.w	r3, r2, r3
 800a376:	43da      	mvns	r2, r3
 800a378:	4b21      	ldr	r3, [pc, #132]	@ (800a400 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4013      	ands	r3, r2
 800a37e:	4a20      	ldr	r2, [pc, #128]	@ (800a400 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a380:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a388:	d10a      	bne.n	800a3a0 <prvAddCurrentTaskToDelayedList+0x58>
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d007      	beq.n	800a3a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a390:	4b1a      	ldr	r3, [pc, #104]	@ (800a3fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3304      	adds	r3, #4
 800a396:	4619      	mov	r1, r3
 800a398:	481a      	ldr	r0, [pc, #104]	@ (800a404 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a39a:	f7fe f8f6 	bl	800858a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a39e:	e026      	b.n	800a3ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3a8:	4b14      	ldr	r3, [pc, #80]	@ (800a3fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d209      	bcs.n	800a3cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3b8:	4b13      	ldr	r3, [pc, #76]	@ (800a408 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	4b0f      	ldr	r3, [pc, #60]	@ (800a3fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	f7fe f904 	bl	80085d2 <vListInsert>
}
 800a3ca:	e010      	b.n	800a3ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a40c <prvAddCurrentTaskToDelayedList+0xc4>)
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a3fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4610      	mov	r0, r2
 800a3da:	f7fe f8fa 	bl	80085d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3de:	4b0c      	ldr	r3, [pc, #48]	@ (800a410 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d202      	bcs.n	800a3ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a3e8:	4a09      	ldr	r2, [pc, #36]	@ (800a410 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	6013      	str	r3, [r2, #0]
}
 800a3ee:	bf00      	nop
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	200086d8 	.word	0x200086d8
 800a3fc:	200085d4 	.word	0x200085d4
 800a400:	200086dc 	.word	0x200086dc
 800a404:	200086c0 	.word	0x200086c0
 800a408:	20008690 	.word	0x20008690
 800a40c:	2000868c 	.word	0x2000868c
 800a410:	200086f4 	.word	0x200086f4

0800a414 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a414:	b590      	push	{r4, r7, lr}
 800a416:	b089      	sub	sp, #36	@ 0x24
 800a418:	af04      	add	r7, sp, #16
 800a41a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a41c:	2301      	movs	r3, #1
 800a41e:	2202      	movs	r2, #2
 800a420:	2102      	movs	r1, #2
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fcd7 	bl	800add6 <USBH_FindInterface>
 800a428:	4603      	mov	r3, r0
 800a42a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
 800a42e:	2bff      	cmp	r3, #255	@ 0xff
 800a430:	d002      	beq.n	800a438 <USBH_CDC_InterfaceInit+0x24>
 800a432:	7bfb      	ldrb	r3, [r7, #15]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d901      	bls.n	800a43c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a438:	2302      	movs	r3, #2
 800a43a:	e13d      	b.n	800a6b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fcac 	bl	800ad9e <USBH_SelectInterface>
 800a446:	4603      	mov	r3, r0
 800a448:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a450:	2302      	movs	r3, #2
 800a452:	e131      	b.n	800a6b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800a45a:	2050      	movs	r0, #80	@ 0x50
 800a45c:	f002 fdc2 	bl	800cfe4 <malloc>
 800a460:	4603      	mov	r3, r0
 800a462:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a46a:	69db      	ldr	r3, [r3, #28]
 800a46c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d101      	bne.n	800a478 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a474:	2302      	movs	r3, #2
 800a476:	e11f      	b.n	800a6b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a478:	2250      	movs	r2, #80	@ 0x50
 800a47a:	2100      	movs	r1, #0
 800a47c:	68b8      	ldr	r0, [r7, #8]
 800a47e:	f002 fe6f 	bl	800d160 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a482:	7bfb      	ldrb	r3, [r7, #15]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	211a      	movs	r1, #26
 800a488:	fb01 f303 	mul.w	r3, r1, r3
 800a48c:	4413      	add	r3, r2
 800a48e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	b25b      	sxtb	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	da15      	bge.n	800a4c6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	211a      	movs	r1, #26
 800a4a0:	fb01 f303 	mul.w	r3, r1, r3
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a4aa:	781a      	ldrb	r2, [r3, #0]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	211a      	movs	r1, #26
 800a4b6:	fb01 f303 	mul.w	r3, r1, r3
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a4c0:	881a      	ldrh	r2, [r3, #0]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	785b      	ldrb	r3, [r3, #1]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f002 fa1c 	bl	800c90a <USBH_AllocPipe>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	7819      	ldrb	r1, [r3, #0]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	7858      	ldrb	r0, [r3, #1]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	8952      	ldrh	r2, [r2, #10]
 800a4f2:	9202      	str	r2, [sp, #8]
 800a4f4:	2203      	movs	r2, #3
 800a4f6:	9201      	str	r2, [sp, #4]
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	4623      	mov	r3, r4
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f002 f9d4 	bl	800c8ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	2200      	movs	r2, #0
 800a50a:	4619      	mov	r1, r3
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f002 fce3 	bl	800ced8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a512:	2300      	movs	r3, #0
 800a514:	2200      	movs	r2, #0
 800a516:	210a      	movs	r1, #10
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fc5c 	bl	800add6 <USBH_FindInterface>
 800a51e:	4603      	mov	r3, r0
 800a520:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a522:	7bfb      	ldrb	r3, [r7, #15]
 800a524:	2bff      	cmp	r3, #255	@ 0xff
 800a526:	d002      	beq.n	800a52e <USBH_CDC_InterfaceInit+0x11a>
 800a528:	7bfb      	ldrb	r3, [r7, #15]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d901      	bls.n	800a532 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a52e:	2302      	movs	r3, #2
 800a530:	e0c2      	b.n	800a6b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	211a      	movs	r1, #26
 800a538:	fb01 f303 	mul.w	r3, r1, r3
 800a53c:	4413      	add	r3, r2
 800a53e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	b25b      	sxtb	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	da16      	bge.n	800a578 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	211a      	movs	r1, #26
 800a550:	fb01 f303 	mul.w	r3, r1, r3
 800a554:	4413      	add	r3, r2
 800a556:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a55a:	781a      	ldrb	r2, [r3, #0]
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	211a      	movs	r1, #26
 800a566:	fb01 f303 	mul.w	r3, r1, r3
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a570:	881a      	ldrh	r2, [r3, #0]
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	835a      	strh	r2, [r3, #26]
 800a576:	e015      	b.n	800a5a4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a578:	7bfb      	ldrb	r3, [r7, #15]
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	211a      	movs	r1, #26
 800a57e:	fb01 f303 	mul.w	r3, r1, r3
 800a582:	4413      	add	r3, r2
 800a584:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a588:	781a      	ldrb	r2, [r3, #0]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a58e:	7bfb      	ldrb	r3, [r7, #15]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	211a      	movs	r1, #26
 800a594:	fb01 f303 	mul.w	r3, r1, r3
 800a598:	4413      	add	r3, r2
 800a59a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a59e:	881a      	ldrh	r2, [r3, #0]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	211a      	movs	r1, #26
 800a5aa:	fb01 f303 	mul.w	r3, r1, r3
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	b25b      	sxtb	r3, r3
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	da16      	bge.n	800a5ea <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	211a      	movs	r1, #26
 800a5c2:	fb01 f303 	mul.w	r3, r1, r3
 800a5c6:	4413      	add	r3, r2
 800a5c8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a5cc:	781a      	ldrb	r2, [r3, #0]
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	211a      	movs	r1, #26
 800a5d8:	fb01 f303 	mul.w	r3, r1, r3
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a5e2:	881a      	ldrh	r2, [r3, #0]
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	835a      	strh	r2, [r3, #26]
 800a5e8:	e015      	b.n	800a616 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a5ea:	7bfb      	ldrb	r3, [r7, #15]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	211a      	movs	r1, #26
 800a5f0:	fb01 f303 	mul.w	r3, r1, r3
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a5fa:	781a      	ldrb	r2, [r3, #0]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a600:	7bfb      	ldrb	r3, [r7, #15]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	211a      	movs	r1, #26
 800a606:	fb01 f303 	mul.w	r3, r1, r3
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a610:	881a      	ldrh	r2, [r3, #0]
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	7b9b      	ldrb	r3, [r3, #14]
 800a61a:	4619      	mov	r1, r3
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f002 f974 	bl	800c90a <USBH_AllocPipe>
 800a622:	4603      	mov	r3, r0
 800a624:	461a      	mov	r2, r3
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	7bdb      	ldrb	r3, [r3, #15]
 800a62e:	4619      	mov	r1, r3
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f002 f96a 	bl	800c90a <USBH_AllocPipe>
 800a636:	4603      	mov	r3, r0
 800a638:	461a      	mov	r2, r3
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	7b59      	ldrb	r1, [r3, #13]
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	7b98      	ldrb	r0, [r3, #14]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	8b12      	ldrh	r2, [r2, #24]
 800a656:	9202      	str	r2, [sp, #8]
 800a658:	2202      	movs	r2, #2
 800a65a:	9201      	str	r2, [sp, #4]
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	4623      	mov	r3, r4
 800a660:	4602      	mov	r2, r0
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f002 f922 	bl	800c8ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	7b19      	ldrb	r1, [r3, #12]
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	7bd8      	ldrb	r0, [r3, #15]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	8b52      	ldrh	r2, [r2, #26]
 800a680:	9202      	str	r2, [sp, #8]
 800a682:	2202      	movs	r2, #2
 800a684:	9201      	str	r2, [sp, #4]
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	4623      	mov	r3, r4
 800a68a:	4602      	mov	r2, r0
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f002 f90d 	bl	800c8ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	7b5b      	ldrb	r3, [r3, #13]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f002 fc18 	bl	800ced8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	7b1b      	ldrb	r3, [r3, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f002 fc11 	bl	800ced8 <USBH_LL_SetToggle>

  return USBH_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd90      	pop	{r4, r7, pc}

0800a6c0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00e      	beq.n	800a6f8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f002 f902 	bl	800c8ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f002 f92d 	bl	800c94c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	7b1b      	ldrb	r3, [r3, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00e      	beq.n	800a71e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	7b1b      	ldrb	r3, [r3, #12]
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f002 f8ef 	bl	800c8ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	7b1b      	ldrb	r3, [r3, #12]
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f002 f91a 	bl	800c94c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	7b5b      	ldrb	r3, [r3, #13]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00e      	beq.n	800a744 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	7b5b      	ldrb	r3, [r3, #13]
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f002 f8dc 	bl	800c8ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	7b5b      	ldrb	r3, [r3, #13]
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f002 f907 	bl	800c94c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a74a:	69db      	ldr	r3, [r3, #28]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00b      	beq.n	800a768 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	4618      	mov	r0, r3
 800a75a:	f002 fc4b 	bl	800cff4 <free>
    phost->pActiveClass->pData = 0U;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a764:	2200      	movs	r2, #0
 800a766:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a780:	69db      	ldr	r3, [r3, #28]
 800a782:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	3340      	adds	r3, #64	@ 0x40
 800a788:	4619      	mov	r1, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f8b1 	bl	800a8f2 <GetLineCoding>
 800a790:	4603      	mov	r3, r0
 800a792:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a794:	7afb      	ldrb	r3, [r7, #11]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d105      	bne.n	800a7a6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a7a0:	2102      	movs	r1, #2
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a7a6:	7afb      	ldrb	r3, [r7, #11]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	d877      	bhi.n	800a8c4 <USBH_CDC_Process+0x114>
 800a7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a7dc <USBH_CDC_Process+0x2c>)
 800a7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7da:	bf00      	nop
 800a7dc:	0800a7f1 	.word	0x0800a7f1
 800a7e0:	0800a7f7 	.word	0x0800a7f7
 800a7e4:	0800a827 	.word	0x0800a827
 800a7e8:	0800a89b 	.word	0x0800a89b
 800a7ec:	0800a8a9 	.word	0x0800a8a9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f4:	e06d      	b.n	800a8d2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f897 	bl	800a930 <SetLineCoding>
 800a802:	4603      	mov	r3, r0
 800a804:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d104      	bne.n	800a816 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	2202      	movs	r2, #2
 800a810:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a814:	e058      	b.n	800a8c8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a816:	7bbb      	ldrb	r3, [r7, #14]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d055      	beq.n	800a8c8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	2204      	movs	r2, #4
 800a820:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a824:	e050      	b.n	800a8c8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	3340      	adds	r3, #64	@ 0x40
 800a82a:	4619      	mov	r1, r3
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f860 	bl	800a8f2 <GetLineCoding>
 800a832:	4603      	mov	r3, r0
 800a834:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a836:	7bbb      	ldrb	r3, [r7, #14]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d126      	bne.n	800a88a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a84e:	791b      	ldrb	r3, [r3, #4]
 800a850:	429a      	cmp	r2, r3
 800a852:	d13b      	bne.n	800a8cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a85e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a860:	429a      	cmp	r2, r3
 800a862:	d133      	bne.n	800a8cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a86e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a870:	429a      	cmp	r2, r3
 800a872:	d12b      	bne.n	800a8cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a87c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a87e:	429a      	cmp	r2, r3
 800a880:	d124      	bne.n	800a8cc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f982 	bl	800ab8c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a888:	e020      	b.n	800a8cc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a88a:	7bbb      	ldrb	r3, [r7, #14]
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d01d      	beq.n	800a8cc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	2204      	movs	r2, #4
 800a894:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800a898:	e018      	b.n	800a8cc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f867 	bl	800a96e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f8f6 	bl	800aa92 <CDC_ProcessReception>
      break;
 800a8a6:	e014      	b.n	800a8d2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f001 f988 	bl	800bbc0 <USBH_ClrFeature>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10a      	bne.n	800a8d0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800a8c2:	e005      	b.n	800a8d0 <USBH_CDC_Process+0x120>

    default:
      break;
 800a8c4:	bf00      	nop
 800a8c6:	e004      	b.n	800a8d2 <USBH_CDC_Process+0x122>
      break;
 800a8c8:	bf00      	nop
 800a8ca:	e002      	b.n	800a8d2 <USBH_CDC_Process+0x122>
      break;
 800a8cc:	bf00      	nop
 800a8ce:	e000      	b.n	800a8d2 <USBH_CDC_Process+0x122>
      break;
 800a8d0:	bf00      	nop

  }

  return status;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b082      	sub	sp, #8
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	22a1      	movs	r2, #161	@ 0xa1
 800a900:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2221      	movs	r2, #33	@ 0x21
 800a906:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2207      	movs	r2, #7
 800a918:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2207      	movs	r2, #7
 800a91e:	4619      	mov	r1, r3
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f001 fc82 	bl	800c22a <USBH_CtlReq>
 800a926:	4603      	mov	r3, r0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2221      	movs	r2, #33	@ 0x21
 800a93e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2220      	movs	r2, #32
 800a944:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2207      	movs	r2, #7
 800a956:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2207      	movs	r2, #7
 800a95c:	4619      	mov	r1, r3
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f001 fc63 	bl	800c22a <USBH_CtlReq>
 800a964:	4603      	mov	r3, r0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b086      	sub	sp, #24
 800a972:	af02      	add	r7, sp, #8
 800a974:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a980:	2300      	movs	r3, #0
 800a982:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d002      	beq.n	800a994 <CDC_ProcessTransmission+0x26>
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d023      	beq.n	800a9da <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a992:	e07a      	b.n	800aa8a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	8b12      	ldrh	r2, [r2, #24]
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d90b      	bls.n	800a9b8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	69d9      	ldr	r1, [r3, #28]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	8b1a      	ldrh	r2, [r3, #24]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	7b5b      	ldrb	r3, [r3, #13]
 800a9ac:	2001      	movs	r0, #1
 800a9ae:	9000      	str	r0, [sp, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f001 ff38 	bl	800c826 <USBH_BulkSendData>
 800a9b6:	e00b      	b.n	800a9d0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	7b5b      	ldrb	r3, [r3, #13]
 800a9c6:	2001      	movs	r0, #1
 800a9c8:	9000      	str	r0, [sp, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f001 ff2b 	bl	800c826 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a9d8:	e057      	b.n	800aa8a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	7b5b      	ldrb	r3, [r3, #13]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f002 fa4f 	bl	800ce84 <USBH_LL_GetURBState>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a9ea:	7afb      	ldrb	r3, [r7, #11]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d136      	bne.n	800aa5e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	8b12      	ldrh	r2, [r2, #24]
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d90e      	bls.n	800aa1a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	8b12      	ldrh	r2, [r2, #24]
 800aa04:	1a9a      	subs	r2, r3, r2
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	8b12      	ldrh	r2, [r2, #24]
 800aa12:	441a      	add	r2, r3
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	61da      	str	r2, [r3, #28]
 800aa18:	e002      	b.n	800aa20 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d004      	beq.n	800aa32 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800aa30:	e006      	b.n	800aa40 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f892 	bl	800ab64 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2204      	movs	r2, #4
 800aa44:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800aa54:	2200      	movs	r2, #0
 800aa56:	4619      	mov	r1, r3
 800aa58:	f7fd fac2 	bl	8007fe0 <osMessagePut>
      break;
 800aa5c:	e014      	b.n	800aa88 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800aa5e:	7afb      	ldrb	r3, [r7, #11]
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d111      	bne.n	800aa88 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2204      	movs	r2, #4
 800aa70:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800aa80:	2200      	movs	r2, #0
 800aa82:	4619      	mov	r1, r3
 800aa84:	f7fd faac 	bl	8007fe0 <osMessagePut>
      break;
 800aa88:	bf00      	nop
  }
}
 800aa8a:	bf00      	nop
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b086      	sub	sp, #24
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d002      	beq.n	800aab8 <CDC_ProcessReception+0x26>
 800aab2:	2b04      	cmp	r3, #4
 800aab4:	d00e      	beq.n	800aad4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800aab6:	e051      	b.n	800ab5c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	6a19      	ldr	r1, [r3, #32]
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	8b5a      	ldrh	r2, [r3, #26]
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	7b1b      	ldrb	r3, [r3, #12]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f001 fed3 	bl	800c870 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	2204      	movs	r2, #4
 800aace:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800aad2:	e043      	b.n	800ab5c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	7b1b      	ldrb	r3, [r3, #12]
 800aad8:	4619      	mov	r1, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f002 f9d2 	bl	800ce84 <USBH_LL_GetURBState>
 800aae0:	4603      	mov	r3, r0
 800aae2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800aae4:	7cfb      	ldrb	r3, [r7, #19]
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d137      	bne.n	800ab5a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	7b1b      	ldrb	r3, [r3, #12]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f002 f935 	bl	800cd60 <USBH_LL_GetLastXferSize>
 800aaf6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d016      	beq.n	800ab30 <CDC_ProcessReception+0x9e>
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	8b5b      	ldrh	r3, [r3, #26]
 800ab06:	461a      	mov	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d110      	bne.n	800ab30 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	1ad2      	subs	r2, r2, r3
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	6a1a      	ldr	r2, [r3, #32]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	441a      	add	r2, r3
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	2203      	movs	r2, #3
 800ab2a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800ab2e:	e006      	b.n	800ab3e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f81d 	bl	800ab78 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2204      	movs	r2, #4
 800ab42:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ab52:	2200      	movs	r2, #0
 800ab54:	4619      	mov	r1, r3
 800ab56:	f7fd fa43 	bl	8007fe0 <osMessagePut>
      break;
 800ab5a:	bf00      	nop
  }
}
 800ab5c:	bf00      	nop
 800ab5e:	3718      	adds	r7, #24
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ab6c:	bf00      	nop
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800aba0:	b5b0      	push	{r4, r5, r7, lr}
 800aba2:	b090      	sub	sp, #64	@ 0x40
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	4613      	mov	r3, r2
 800abac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800abb4:	2302      	movs	r3, #2
 800abb6:	e04d      	b.n	800ac54 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	79fa      	ldrb	r2, [r7, #7]
 800abbc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f000 f847 	bl	800ac64 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d003      	beq.n	800ac04 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ac04:	4b15      	ldr	r3, [pc, #84]	@ (800ac5c <USBH_Init+0xbc>)
 800ac06:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800ac0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ac0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800ac10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ac14:	2100      	movs	r1, #0
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fd f9b9 	bl	8007f8e <osMessageCreate>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800ac24:	4b0e      	ldr	r3, [pc, #56]	@ (800ac60 <USBH_Init+0xc0>)
 800ac26:	f107 0414 	add.w	r4, r7, #20
 800ac2a:	461d      	mov	r5, r3
 800ac2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ac34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800ac38:	f107 0314 	add.w	r3, r7, #20
 800ac3c:	68f9      	ldr	r1, [r7, #12]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fd f945 	bl	8007ece <osThreadCreate>
 800ac44:	4602      	mov	r2, r0
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f001 ffc9 	bl	800cbe4 <USBH_LL_Init>

  return USBH_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3740      	adds	r7, #64	@ 0x40
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bdb0      	pop	{r4, r5, r7, pc}
 800ac5c:	0800d2e4 	.word	0x0800d2e4
 800ac60:	0800d300 	.word	0x0800d300

0800ac64 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ac70:	2300      	movs	r3, #0
 800ac72:	60fb      	str	r3, [r7, #12]
 800ac74:	e009      	b.n	800ac8a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	33e0      	adds	r3, #224	@ 0xe0
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	2200      	movs	r2, #0
 800ac82:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	3301      	adds	r3, #1
 800ac88:	60fb      	str	r3, [r7, #12]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2b0f      	cmp	r3, #15
 800ac8e:	d9f2      	bls.n	800ac76 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ac90:	2300      	movs	r3, #0
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	e009      	b.n	800acaa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aca0:	2200      	movs	r2, #0
 800aca2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3301      	adds	r3, #1
 800aca8:	60fb      	str	r3, [r7, #12]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acb0:	d3f1      	bcc.n	800ac96 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2201      	movs	r2, #1
 800acc2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2240      	movs	r2, #64	@ 0x40
 800acd6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	331c      	adds	r3, #28
 800ad02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad06:	2100      	movs	r1, #0
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f002 fa29 	bl	800d160 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ad14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad18:	2100      	movs	r1, #0
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f002 fa20 	bl	800d160 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ad26:	2212      	movs	r2, #18
 800ad28:	2100      	movs	r1, #0
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f002 fa18 	bl	800d160 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ad36:	223e      	movs	r2, #62	@ 0x3e
 800ad38:	2100      	movs	r1, #0
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f002 fa10 	bl	800d160 <memset>

  return USBH_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b085      	sub	sp, #20
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d016      	beq.n	800ad8c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10e      	bne.n	800ad86 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ad6e:	1c59      	adds	r1, r3, #1
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	33de      	adds	r3, #222	@ 0xde
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	73fb      	strb	r3, [r7, #15]
 800ad84:	e004      	b.n	800ad90 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ad86:	2302      	movs	r3, #2
 800ad88:	73fb      	strb	r3, [r7, #15]
 800ad8a:	e001      	b.n	800ad90 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3714      	adds	r7, #20
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b085      	sub	sp, #20
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	460b      	mov	r3, r1
 800ada8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800adaa:	2300      	movs	r3, #0
 800adac:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800adb4:	78fa      	ldrb	r2, [r7, #3]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d204      	bcs.n	800adc4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	78fa      	ldrb	r2, [r7, #3]
 800adbe:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800adc2:	e001      	b.n	800adc8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800adc4:	2302      	movs	r3, #2
 800adc6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800add6:	b480      	push	{r7}
 800add8:	b087      	sub	sp, #28
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	4608      	mov	r0, r1
 800ade0:	4611      	mov	r1, r2
 800ade2:	461a      	mov	r2, r3
 800ade4:	4603      	mov	r3, r0
 800ade6:	70fb      	strb	r3, [r7, #3]
 800ade8:	460b      	mov	r3, r1
 800adea:	70bb      	strb	r3, [r7, #2]
 800adec:	4613      	mov	r3, r2
 800adee:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800adf0:	2300      	movs	r3, #0
 800adf2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800adf4:	2300      	movs	r3, #0
 800adf6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800adfe:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ae00:	e025      	b.n	800ae4e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ae02:	7dfb      	ldrb	r3, [r7, #23]
 800ae04:	221a      	movs	r2, #26
 800ae06:	fb02 f303 	mul.w	r3, r2, r3
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	4413      	add	r3, r2
 800ae10:	3302      	adds	r3, #2
 800ae12:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	795b      	ldrb	r3, [r3, #5]
 800ae18:	78fa      	ldrb	r2, [r7, #3]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d002      	beq.n	800ae24 <USBH_FindInterface+0x4e>
 800ae1e:	78fb      	ldrb	r3, [r7, #3]
 800ae20:	2bff      	cmp	r3, #255	@ 0xff
 800ae22:	d111      	bne.n	800ae48 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ae28:	78ba      	ldrb	r2, [r7, #2]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d002      	beq.n	800ae34 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ae2e:	78bb      	ldrb	r3, [r7, #2]
 800ae30:	2bff      	cmp	r3, #255	@ 0xff
 800ae32:	d109      	bne.n	800ae48 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ae38:	787a      	ldrb	r2, [r7, #1]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d002      	beq.n	800ae44 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ae3e:	787b      	ldrb	r3, [r7, #1]
 800ae40:	2bff      	cmp	r3, #255	@ 0xff
 800ae42:	d101      	bne.n	800ae48 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ae44:	7dfb      	ldrb	r3, [r7, #23]
 800ae46:	e006      	b.n	800ae56 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ae48:	7dfb      	ldrb	r3, [r7, #23]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ae4e:	7dfb      	ldrb	r3, [r7, #23]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d9d6      	bls.n	800ae02 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ae54:	23ff      	movs	r3, #255	@ 0xff
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	371c      	adds	r7, #28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b082      	sub	sp, #8
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f001 ff00 	bl	800cc70 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ae70:	2101      	movs	r1, #1
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f002 f819 	bl	800ceaa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
	...

0800ae84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af04      	add	r7, sp, #16
 800ae8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ae90:	2300      	movs	r3, #0
 800ae92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d102      	bne.n	800aea6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2203      	movs	r2, #3
 800aea4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b0b      	cmp	r3, #11
 800aeae:	f200 8244 	bhi.w	800b33a <USBH_Process+0x4b6>
 800aeb2:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb8 <USBH_Process+0x34>)
 800aeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb8:	0800aee9 	.word	0x0800aee9
 800aebc:	0800af37 	.word	0x0800af37
 800aec0:	0800afbb 	.word	0x0800afbb
 800aec4:	0800b2b9 	.word	0x0800b2b9
 800aec8:	0800b33b 	.word	0x0800b33b
 800aecc:	0800b077 	.word	0x0800b077
 800aed0:	0800b243 	.word	0x0800b243
 800aed4:	0800b0c9 	.word	0x0800b0c9
 800aed8:	0800b105 	.word	0x0800b105
 800aedc:	0800b13d 	.word	0x0800b13d
 800aee0:	0800b19b 	.word	0x0800b19b
 800aee4:	0800b2a1 	.word	0x0800b2a1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 8224 	beq.w	800b33e <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aefc:	20c8      	movs	r0, #200	@ 0xc8
 800aefe:	f002 f81e 	bl	800cf3e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f001 ff11 	bl	800cd2a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800af2c:	2200      	movs	r2, #0
 800af2e:	4619      	mov	r1, r3
 800af30:	f7fd f856 	bl	8007fe0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800af34:	e203      	b.n	800b33e <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d107      	bne.n	800af50 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2202      	movs	r2, #2
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	e025      	b.n	800af9c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800af56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af5a:	d914      	bls.n	800af86 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800af62:	3301      	adds	r3, #1
 800af64:	b2da      	uxtb	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800af72:	2b03      	cmp	r3, #3
 800af74:	d903      	bls.n	800af7e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	220d      	movs	r2, #13
 800af7a:	701a      	strb	r2, [r3, #0]
 800af7c:	e00e      	b.n	800af9c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	701a      	strb	r2, [r3, #0]
 800af84:	e00a      	b.n	800af9c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800af8c:	f103 020a 	add.w	r2, r3, #10
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800af96:	200a      	movs	r0, #10
 800af98:	f001 ffd1 	bl	800cf3e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800afb0:	2200      	movs	r2, #0
 800afb2:	4619      	mov	r1, r3
 800afb4:	f7fd f814 	bl	8007fe0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800afb8:	e1c8      	b.n	800b34c <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d005      	beq.n	800afd0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800afca:	2104      	movs	r1, #4
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800afd0:	2064      	movs	r0, #100	@ 0x64
 800afd2:	f001 ffb4 	bl	800cf3e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f001 fe80 	bl	800ccdc <USBH_LL_GetSpeed>
 800afdc:	4603      	mov	r3, r0
 800afde:	461a      	mov	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2205      	movs	r2, #5
 800afea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800afec:	2100      	movs	r1, #0
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f001 fc8b 	bl	800c90a <USBH_AllocPipe>
 800aff4:	4603      	mov	r3, r0
 800aff6:	461a      	mov	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800affc:	2180      	movs	r1, #128	@ 0x80
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f001 fc83 	bl	800c90a <USBH_AllocPipe>
 800b004:	4603      	mov	r3, r0
 800b006:	461a      	mov	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	7919      	ldrb	r1, [r3, #4]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b020:	9202      	str	r2, [sp, #8]
 800b022:	2200      	movs	r2, #0
 800b024:	9201      	str	r2, [sp, #4]
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	4603      	mov	r3, r0
 800b02a:	2280      	movs	r2, #128	@ 0x80
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f001 fc3d 	bl	800c8ac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	7959      	ldrb	r1, [r3, #5]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b046:	9202      	str	r2, [sp, #8]
 800b048:	2200      	movs	r2, #0
 800b04a:	9201      	str	r2, [sp, #4]
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	4603      	mov	r3, r0
 800b050:	2200      	movs	r2, #0
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f001 fc2a 	bl	800c8ac <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b06c:	2200      	movs	r2, #0
 800b06e:	4619      	mov	r1, r3
 800b070:	f7fc ffb6 	bl	8007fe0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b074:	e16a      	b.n	800b34c <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f96e 	bl	800b358 <USBH_HandleEnum>
 800b07c:	4603      	mov	r3, r0
 800b07e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b080:	7bbb      	ldrb	r3, [r7, #14]
 800b082:	b2db      	uxtb	r3, r3
 800b084:	2b00      	cmp	r3, #0
 800b086:	f040 815c 	bne.w	800b342 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d103      	bne.n	800b0a4 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2208      	movs	r2, #8
 800b0a0:	701a      	strb	r2, [r3, #0]
 800b0a2:	e002      	b.n	800b0aa <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2207      	movs	r2, #7
 800b0a8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2205      	movs	r2, #5
 800b0ae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b0be:	2200      	movs	r2, #0
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	f7fc ff8d 	bl	8007fe0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b0c6:	e13c      	b.n	800b342 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 8139 	beq.w	800b346 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b0da:	2101      	movs	r1, #1
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2208      	movs	r2, #8
 800b0e4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2205      	movs	r2, #5
 800b0ea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	f7fc ff6f 	bl	8007fe0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b102:	e120      	b.n	800b346 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800b10a:	4619      	mov	r1, r3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fd10 	bl	800bb32 <USBH_SetCfg>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d102      	bne.n	800b11e <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2209      	movs	r2, #9
 800b11c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b132:	2200      	movs	r2, #0
 800b134:	4619      	mov	r1, r3
 800b136:	f7fc ff53 	bl	8007fe0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b13a:	e107      	b.n	800b34c <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b142:	f003 0320 	and.w	r3, r3, #32
 800b146:	2b00      	cmp	r3, #0
 800b148:	d015      	beq.n	800b176 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b14a:	2101      	movs	r1, #1
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fd13 	bl	800bb78 <USBH_SetFeature>
 800b152:	4603      	mov	r3, r0
 800b154:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b156:	7bbb      	ldrb	r3, [r7, #14]
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d103      	bne.n	800b166 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	220a      	movs	r2, #10
 800b162:	701a      	strb	r2, [r3, #0]
 800b164:	e00a      	b.n	800b17c <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b166:	7bbb      	ldrb	r3, [r7, #14]
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d106      	bne.n	800b17c <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	220a      	movs	r2, #10
 800b172:	701a      	strb	r2, [r3, #0]
 800b174:	e002      	b.n	800b17c <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	220a      	movs	r2, #10
 800b17a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b190:	2200      	movs	r2, #0
 800b192:	4619      	mov	r1, r3
 800b194:	f7fc ff24 	bl	8007fe0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b198:	e0d8      	b.n	800b34c <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d03f      	beq.n	800b224 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	73fb      	strb	r3, [r7, #15]
 800b1b0:	e016      	b.n	800b1e0 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b1b2:	7bfa      	ldrb	r2, [r7, #15]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	32de      	adds	r2, #222	@ 0xde
 800b1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1bc:	791a      	ldrb	r2, [r3, #4]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d108      	bne.n	800b1da <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b1c8:	7bfa      	ldrb	r2, [r7, #15]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	32de      	adds	r2, #222	@ 0xde
 800b1ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b1d8:	e005      	b.n	800b1e6 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	73fb      	strb	r3, [r7, #15]
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0e5      	beq.n	800b1b2 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d016      	beq.n	800b21e <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	4798      	blx	r3
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d109      	bne.n	800b216 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2206      	movs	r2, #6
 800b206:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b20e:	2103      	movs	r1, #3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	4798      	blx	r3
 800b214:	e006      	b.n	800b224 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	220d      	movs	r2, #13
 800b21a:	701a      	strb	r2, [r3, #0]
 800b21c:	e002      	b.n	800b224 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	220d      	movs	r2, #13
 800b222:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2205      	movs	r2, #5
 800b228:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b238:	2200      	movs	r2, #0
 800b23a:	4619      	mov	r1, r3
 800b23c:	f7fc fed0 	bl	8007fe0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b240:	e084      	b.n	800b34c <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d017      	beq.n	800b27c <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	4798      	blx	r3
 800b258:	4603      	mov	r3, r0
 800b25a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b25c:	7bbb      	ldrb	r3, [r7, #14]
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	2b00      	cmp	r3, #0
 800b262:	d103      	bne.n	800b26c <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	220b      	movs	r2, #11
 800b268:	701a      	strb	r2, [r3, #0]
 800b26a:	e00a      	b.n	800b282 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800b26c:	7bbb      	ldrb	r3, [r7, #14]
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b02      	cmp	r3, #2
 800b272:	d106      	bne.n	800b282 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	220d      	movs	r2, #13
 800b278:	701a      	strb	r2, [r3, #0]
 800b27a:	e002      	b.n	800b282 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	220d      	movs	r2, #13
 800b280:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2205      	movs	r2, #5
 800b286:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b296:	2200      	movs	r2, #0
 800b298:	4619      	mov	r1, r3
 800b29a:	f7fc fea1 	bl	8007fe0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b29e:	e055      	b.n	800b34c <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d04f      	beq.n	800b34a <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b2b0:	695b      	ldr	r3, [r3, #20]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	4798      	blx	r3
      }
      break;
 800b2b6:	e048      	b.n	800b34a <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f7ff fccf 	bl	800ac64 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d009      	beq.n	800b2e4 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d005      	beq.n	800b2fa <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b2f4:	2105      	movs	r1, #5
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b300:	b2db      	uxtb	r3, r3
 800b302:	2b01      	cmp	r3, #1
 800b304:	d107      	bne.n	800b316 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7ff fda7 	bl	800ae62 <USBH_Start>
 800b314:	e002      	b.n	800b31c <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f001 fcaa 	bl	800cc70 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b330:	2200      	movs	r2, #0
 800b332:	4619      	mov	r1, r3
 800b334:	f7fc fe54 	bl	8007fe0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b338:	e008      	b.n	800b34c <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800b33a:	bf00      	nop
 800b33c:	e006      	b.n	800b34c <USBH_Process+0x4c8>
      break;
 800b33e:	bf00      	nop
 800b340:	e004      	b.n	800b34c <USBH_Process+0x4c8>
      break;
 800b342:	bf00      	nop
 800b344:	e002      	b.n	800b34c <USBH_Process+0x4c8>
    break;
 800b346:	bf00      	nop
 800b348:	e000      	b.n	800b34c <USBH_Process+0x4c8>
      break;
 800b34a:	bf00      	nop
  }
  return USBH_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop

0800b358 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b088      	sub	sp, #32
 800b35c:	af04      	add	r7, sp, #16
 800b35e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b360:	2301      	movs	r3, #1
 800b362:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b364:	2301      	movs	r3, #1
 800b366:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	785b      	ldrb	r3, [r3, #1]
 800b36c:	2b07      	cmp	r3, #7
 800b36e:	f200 8204 	bhi.w	800b77a <USBH_HandleEnum+0x422>
 800b372:	a201      	add	r2, pc, #4	@ (adr r2, 800b378 <USBH_HandleEnum+0x20>)
 800b374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b378:	0800b399 	.word	0x0800b399
 800b37c:	0800b453 	.word	0x0800b453
 800b380:	0800b4bd 	.word	0x0800b4bd
 800b384:	0800b547 	.word	0x0800b547
 800b388:	0800b5b1 	.word	0x0800b5b1
 800b38c:	0800b621 	.word	0x0800b621
 800b390:	0800b6bd 	.word	0x0800b6bd
 800b394:	0800b73b 	.word	0x0800b73b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b398:	2108      	movs	r1, #8
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 fae6 	bl	800b96c <USBH_Get_DevDesc>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b3a4:	7bbb      	ldrb	r3, [r7, #14]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d12e      	bne.n	800b408 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	7919      	ldrb	r1, [r3, #4]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b3ce:	9202      	str	r2, [sp, #8]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	9201      	str	r2, [sp, #4]
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2280      	movs	r2, #128	@ 0x80
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f001 fa66 	bl	800c8ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	7959      	ldrb	r1, [r3, #5]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b3f4:	9202      	str	r2, [sp, #8]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	9201      	str	r2, [sp, #4]
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2200      	movs	r2, #0
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f001 fa53 	bl	800c8ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b406:	e1ba      	b.n	800b77e <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b408:	7bbb      	ldrb	r3, [r7, #14]
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	f040 81b7 	bne.w	800b77e <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b416:	3301      	adds	r3, #1
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b426:	2b03      	cmp	r3, #3
 800b428:	d903      	bls.n	800b432 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	220d      	movs	r2, #13
 800b42e:	701a      	strb	r2, [r3, #0]
      break;
 800b430:	e1a5      	b.n	800b77e <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	795b      	ldrb	r3, [r3, #5]
 800b436:	4619      	mov	r1, r3
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f001 fa87 	bl	800c94c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	791b      	ldrb	r3, [r3, #4]
 800b442:	4619      	mov	r1, r3
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f001 fa81 	bl	800c94c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	701a      	strb	r2, [r3, #0]
      break;
 800b450:	e195      	b.n	800b77e <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b452:	2112      	movs	r1, #18
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 fa89 	bl	800b96c <USBH_Get_DevDesc>
 800b45a:	4603      	mov	r3, r0
 800b45c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d103      	bne.n	800b46c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2202      	movs	r2, #2
 800b468:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b46a:	e18a      	b.n	800b782 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b46c:	7bbb      	ldrb	r3, [r7, #14]
 800b46e:	2b03      	cmp	r3, #3
 800b470:	f040 8187 	bne.w	800b782 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b47a:	3301      	adds	r3, #1
 800b47c:	b2da      	uxtb	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b48a:	2b03      	cmp	r3, #3
 800b48c:	d903      	bls.n	800b496 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	220d      	movs	r2, #13
 800b492:	701a      	strb	r2, [r3, #0]
      break;
 800b494:	e175      	b.n	800b782 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	795b      	ldrb	r3, [r3, #5]
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f001 fa55 	bl	800c94c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	791b      	ldrb	r3, [r3, #4]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f001 fa4f 	bl	800c94c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	701a      	strb	r2, [r3, #0]
      break;
 800b4ba:	e162      	b.n	800b782 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b4bc:	2101      	movs	r1, #1
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fb13 	bl	800baea <USBH_SetAddress>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d130      	bne.n	800b530 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b4ce:	2002      	movs	r0, #2
 800b4d0:	f001 fd35 	bl	800cf3e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2203      	movs	r2, #3
 800b4e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	7919      	ldrb	r1, [r3, #4]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b4f6:	9202      	str	r2, [sp, #8]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	9201      	str	r2, [sp, #4]
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	4603      	mov	r3, r0
 800b500:	2280      	movs	r2, #128	@ 0x80
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f001 f9d2 	bl	800c8ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	7959      	ldrb	r1, [r3, #5]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b51c:	9202      	str	r2, [sp, #8]
 800b51e:	2200      	movs	r2, #0
 800b520:	9201      	str	r2, [sp, #4]
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	4603      	mov	r3, r0
 800b526:	2200      	movs	r2, #0
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f001 f9bf 	bl	800c8ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b52e:	e12a      	b.n	800b786 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b530:	7bbb      	ldrb	r3, [r7, #14]
 800b532:	2b03      	cmp	r3, #3
 800b534:	f040 8127 	bne.w	800b786 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	220d      	movs	r2, #13
 800b53c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	705a      	strb	r2, [r3, #1]
      break;
 800b544:	e11f      	b.n	800b786 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b546:	2109      	movs	r1, #9
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fa3b 	bl	800b9c4 <USBH_Get_CfgDesc>
 800b54e:	4603      	mov	r3, r0
 800b550:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b552:	7bbb      	ldrb	r3, [r7, #14]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d103      	bne.n	800b560 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2204      	movs	r2, #4
 800b55c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b55e:	e114      	b.n	800b78a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b560:	7bbb      	ldrb	r3, [r7, #14]
 800b562:	2b03      	cmp	r3, #3
 800b564:	f040 8111 	bne.w	800b78a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b56e:	3301      	adds	r3, #1
 800b570:	b2da      	uxtb	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b57e:	2b03      	cmp	r3, #3
 800b580:	d903      	bls.n	800b58a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	220d      	movs	r2, #13
 800b586:	701a      	strb	r2, [r3, #0]
      break;
 800b588:	e0ff      	b.n	800b78a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	795b      	ldrb	r3, [r3, #5]
 800b58e:	4619      	mov	r1, r3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f001 f9db 	bl	800c94c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	791b      	ldrb	r3, [r3, #4]
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f001 f9d5 	bl	800c94c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	701a      	strb	r2, [r3, #0]
      break;
 800b5ae:	e0ec      	b.n	800b78a <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 fa03 	bl	800b9c4 <USBH_Get_CfgDesc>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5c2:	7bbb      	ldrb	r3, [r7, #14]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d103      	bne.n	800b5d0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2205      	movs	r2, #5
 800b5cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b5ce:	e0de      	b.n	800b78e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5d0:	7bbb      	ldrb	r3, [r7, #14]
 800b5d2:	2b03      	cmp	r3, #3
 800b5d4:	f040 80db 	bne.w	800b78e <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b5de:	3301      	adds	r3, #1
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d903      	bls.n	800b5fa <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	220d      	movs	r2, #13
 800b5f6:	701a      	strb	r2, [r3, #0]
      break;
 800b5f8:	e0c9      	b.n	800b78e <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	795b      	ldrb	r3, [r3, #5]
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f001 f9a3 	bl	800c94c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	791b      	ldrb	r3, [r3, #4]
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f001 f99d 	bl	800c94c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	701a      	strb	r2, [r3, #0]
      break;
 800b61e:	e0b6      	b.n	800b78e <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b626:	2b00      	cmp	r3, #0
 800b628:	d036      	beq.n	800b698 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b636:	23ff      	movs	r3, #255	@ 0xff
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f9ed 	bl	800ba18 <USBH_Get_StringDesc>
 800b63e:	4603      	mov	r3, r0
 800b640:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b642:	7bbb      	ldrb	r3, [r7, #14]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d111      	bne.n	800b66c <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2206      	movs	r2, #6
 800b64c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2205      	movs	r2, #5
 800b652:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b662:	2200      	movs	r2, #0
 800b664:	4619      	mov	r1, r3
 800b666:	f7fc fcbb 	bl	8007fe0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b66a:	e092      	b.n	800b792 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b66c:	7bbb      	ldrb	r3, [r7, #14]
 800b66e:	2b03      	cmp	r3, #3
 800b670:	f040 808f 	bne.w	800b792 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2206      	movs	r2, #6
 800b678:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2205      	movs	r2, #5
 800b67e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b68e:	2200      	movs	r2, #0
 800b690:	4619      	mov	r1, r3
 800b692:	f7fc fca5 	bl	8007fe0 <osMessagePut>
      break;
 800b696:	e07c      	b.n	800b792 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2206      	movs	r2, #6
 800b69c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2205      	movs	r2, #5
 800b6a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	f7fc fc93 	bl	8007fe0 <osMessagePut>
      break;
 800b6ba:	e06a      	b.n	800b792 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d027      	beq.n	800b716 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b6d2:	23ff      	movs	r3, #255	@ 0xff
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f99f 	bl	800ba18 <USBH_Get_StringDesc>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b6de:	7bbb      	ldrb	r3, [r7, #14]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d103      	bne.n	800b6ec <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2207      	movs	r2, #7
 800b6e8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b6ea:	e054      	b.n	800b796 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d151      	bne.n	800b796 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2207      	movs	r2, #7
 800b6f6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2205      	movs	r2, #5
 800b6fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b70c:	2200      	movs	r2, #0
 800b70e:	4619      	mov	r1, r3
 800b710:	f7fc fc66 	bl	8007fe0 <osMessagePut>
      break;
 800b714:	e03f      	b.n	800b796 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2207      	movs	r2, #7
 800b71a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2205      	movs	r2, #5
 800b720:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b730:	2200      	movs	r2, #0
 800b732:	4619      	mov	r1, r3
 800b734:	f7fc fc54 	bl	8007fe0 <osMessagePut>
      break;
 800b738:	e02d      	b.n	800b796 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b740:	2b00      	cmp	r3, #0
 800b742:	d017      	beq.n	800b774 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b750:	23ff      	movs	r3, #255	@ 0xff
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f960 	bl	800ba18 <USBH_Get_StringDesc>
 800b758:	4603      	mov	r3, r0
 800b75a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d102      	bne.n	800b768 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b762:	2300      	movs	r3, #0
 800b764:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b766:	e018      	b.n	800b79a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d115      	bne.n	800b79a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]
      break;
 800b772:	e012      	b.n	800b79a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	73fb      	strb	r3, [r7, #15]
      break;
 800b778:	e00f      	b.n	800b79a <USBH_HandleEnum+0x442>

    default:
      break;
 800b77a:	bf00      	nop
 800b77c:	e00e      	b.n	800b79c <USBH_HandleEnum+0x444>
      break;
 800b77e:	bf00      	nop
 800b780:	e00c      	b.n	800b79c <USBH_HandleEnum+0x444>
      break;
 800b782:	bf00      	nop
 800b784:	e00a      	b.n	800b79c <USBH_HandleEnum+0x444>
      break;
 800b786:	bf00      	nop
 800b788:	e008      	b.n	800b79c <USBH_HandleEnum+0x444>
      break;
 800b78a:	bf00      	nop
 800b78c:	e006      	b.n	800b79c <USBH_HandleEnum+0x444>
      break;
 800b78e:	bf00      	nop
 800b790:	e004      	b.n	800b79c <USBH_HandleEnum+0x444>
      break;
 800b792:	bf00      	nop
 800b794:	e002      	b.n	800b79c <USBH_HandleEnum+0x444>
      break;
 800b796:	bf00      	nop
 800b798:	e000      	b.n	800b79c <USBH_HandleEnum+0x444>
      break;
 800b79a:	bf00      	nop
  }
  return Status;
 800b79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop

0800b7a8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b7ba:	bf00      	nop
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b082      	sub	sp, #8
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7d4:	1c5a      	adds	r2, r3, #1
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f804 	bl	800b7ea <USBH_HandleSof>
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b082      	sub	sp, #8
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b0b      	cmp	r3, #11
 800b7fa:	d10a      	bne.n	800b812 <USBH_HandleSof+0x28>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b802:	2b00      	cmp	r3, #0
 800b804:	d005      	beq.n	800b812 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	4798      	blx	r3
  }
}
 800b812:	bf00      	nop
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b082      	sub	sp, #8
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2201      	movs	r2, #1
 800b826:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b83e:	2200      	movs	r2, #0
 800b840:	4619      	mov	r1, r3
 800b842:	f7fc fbcd 	bl	8007fe0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b846:	bf00      	nop
}
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b84e:	b480      	push	{r7}
 800b850:	b083      	sub	sp, #12
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800b85e:	bf00      	nop
}
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2201      	movs	r2, #1
 800b88e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b89e:	2200      	movs	r2, #0
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	f7fc fb9d 	bl	8007fe0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f001 f9e8 	bl	800cca6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	791b      	ldrb	r3, [r3, #4]
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f001 f835 	bl	800c94c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	795b      	ldrb	r3, [r3, #5]
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f001 f82f 	bl	800c94c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b902:	2200      	movs	r2, #0
 800b904:	4619      	mov	r1, r3
 800b906:	f7fc fb6b 	bl	8007fe0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 800b922:	f107 030c 	add.w	r3, r7, #12
 800b926:	f04f 32ff 	mov.w	r2, #4294967295
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fc fb98 	bl	8008060 <osMessageGet>
    if (event.status == osEventMessage)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2b10      	cmp	r3, #16
 800b934:	d1f2      	bne.n	800b91c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff faa4 	bl	800ae84 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b93c:	e7ee      	b.n	800b91c <USBH_Process_OS+0x8>

0800b93e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b082      	sub	sp, #8
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b95a:	2200      	movs	r2, #0
 800b95c:	4619      	mov	r1, r3
 800b95e:	f7fc fb3f 	bl	8007fe0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af02      	add	r7, sp, #8
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b978:	887b      	ldrh	r3, [r7, #2]
 800b97a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b97e:	d901      	bls.n	800b984 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b980:	2303      	movs	r3, #3
 800b982:	e01b      	b.n	800b9bc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b98a:	887b      	ldrh	r3, [r7, #2]
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	4613      	mov	r3, r2
 800b990:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b994:	2100      	movs	r1, #0
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 f872 	bl	800ba80 <USBH_GetDescriptor>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d109      	bne.n	800b9ba <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b9ac:	887a      	ldrh	r2, [r7, #2]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f929 	bl	800bc08 <USBH_ParseDevDesc>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af02      	add	r7, sp, #8
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	331c      	adds	r3, #28
 800b9d4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b9d6:	887b      	ldrh	r3, [r7, #2]
 800b9d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9dc:	d901      	bls.n	800b9e2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	e016      	b.n	800ba10 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b9e2:	887b      	ldrh	r3, [r7, #2]
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f846 	bl	800ba80 <USBH_GetDescriptor>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d107      	bne.n	800ba0e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b9fe:	887b      	ldrh	r3, [r7, #2]
 800ba00:	461a      	mov	r2, r3
 800ba02:	68b9      	ldr	r1, [r7, #8]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f9af 	bl	800bd68 <USBH_ParseCfgDesc>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b088      	sub	sp, #32
 800ba1c:	af02      	add	r7, sp, #8
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	607a      	str	r2, [r7, #4]
 800ba22:	461a      	mov	r2, r3
 800ba24:	460b      	mov	r3, r1
 800ba26:	72fb      	strb	r3, [r7, #11]
 800ba28:	4613      	mov	r3, r2
 800ba2a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ba2c:	893b      	ldrh	r3, [r7, #8]
 800ba2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba32:	d802      	bhi.n	800ba3a <USBH_Get_StringDesc+0x22>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d101      	bne.n	800ba3e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	e01c      	b.n	800ba78 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ba3e:	7afb      	ldrb	r3, [r7, #11]
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ba46:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ba4e:	893b      	ldrh	r3, [r7, #8]
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	460b      	mov	r3, r1
 800ba54:	2100      	movs	r1, #0
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f000 f812 	bl	800ba80 <USBH_GetDescriptor>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ba60:	7dfb      	ldrb	r3, [r7, #23]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d107      	bne.n	800ba76 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ba6c:	893a      	ldrh	r2, [r7, #8]
 800ba6e:	6879      	ldr	r1, [r7, #4]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f000 fb8d 	bl	800c190 <USBH_ParseStringDesc>
  }

  return status;
 800ba76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3718      	adds	r7, #24
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	607b      	str	r3, [r7, #4]
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	72fb      	strb	r3, [r7, #11]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	789b      	ldrb	r3, [r3, #2]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d11c      	bne.n	800bad4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ba9a:	7afb      	ldrb	r3, [r7, #11]
 800ba9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2206      	movs	r2, #6
 800baaa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	893a      	ldrh	r2, [r7, #8]
 800bab0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bab2:	893b      	ldrh	r3, [r7, #8]
 800bab4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800babc:	d104      	bne.n	800bac8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f240 4209 	movw	r2, #1033	@ 0x409
 800bac4:	829a      	strh	r2, [r3, #20]
 800bac6:	e002      	b.n	800bace <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2200      	movs	r2, #0
 800bacc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	8b3a      	ldrh	r2, [r7, #24]
 800bad2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bad4:	8b3b      	ldrh	r3, [r7, #24]
 800bad6:	461a      	mov	r2, r3
 800bad8:	6879      	ldr	r1, [r7, #4]
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f000 fba5 	bl	800c22a <USBH_CtlReq>
 800bae0:	4603      	mov	r3, r0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b082      	sub	sp, #8
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	460b      	mov	r3, r1
 800baf4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	789b      	ldrb	r3, [r3, #2]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d10f      	bne.n	800bb1e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2205      	movs	r2, #5
 800bb08:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bb0a:	78fb      	ldrb	r3, [r7, #3]
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bb1e:	2200      	movs	r2, #0
 800bb20:	2100      	movs	r1, #0
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fb81 	bl	800c22a <USBH_CtlReq>
 800bb28:	4603      	mov	r3, r0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b082      	sub	sp, #8
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	789b      	ldrb	r3, [r3, #2]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d10e      	bne.n	800bb64 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2209      	movs	r2, #9
 800bb50:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	887a      	ldrh	r2, [r7, #2]
 800bb56:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bb64:	2200      	movs	r2, #0
 800bb66:	2100      	movs	r1, #0
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fb5e 	bl	800c22a <USBH_CtlReq>
 800bb6e:	4603      	mov	r3, r0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	789b      	ldrb	r3, [r3, #2]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d10f      	bne.n	800bbac <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2203      	movs	r2, #3
 800bb96:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bb98:	78fb      	ldrb	r3, [r7, #3]
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bbac:	2200      	movs	r2, #0
 800bbae:	2100      	movs	r1, #0
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fb3a 	bl	800c22a <USBH_CtlReq>
 800bbb6:	4603      	mov	r3, r0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	789b      	ldrb	r3, [r3, #2]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d10f      	bne.n	800bbf4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2202      	movs	r2, #2
 800bbd8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bbe6:	78fb      	ldrb	r3, [r7, #3]
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fb16 	bl	800c22a <USBH_CtlReq>
 800bbfe:	4603      	mov	r3, r0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b087      	sub	sp, #28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	4613      	mov	r3, r2
 800bc14:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800bc1c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800bc28:	2302      	movs	r3, #2
 800bc2a:	e094      	b.n	800bd56 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	781a      	ldrb	r2, [r3, #0]
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	785a      	ldrb	r2, [r3, #1]
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	3302      	adds	r3, #2
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	461a      	mov	r2, r3
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	3303      	adds	r3, #3
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	021b      	lsls	r3, r3, #8
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	791a      	ldrb	r2, [r3, #4]
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	795a      	ldrb	r2, [r3, #5]
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	799a      	ldrb	r2, [r3, #6]
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	79da      	ldrb	r2, [r3, #7]
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d004      	beq.n	800bc8a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d11b      	bne.n	800bcc2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	79db      	ldrb	r3, [r3, #7]
 800bc8e:	2b20      	cmp	r3, #32
 800bc90:	dc0f      	bgt.n	800bcb2 <USBH_ParseDevDesc+0xaa>
 800bc92:	2b08      	cmp	r3, #8
 800bc94:	db0f      	blt.n	800bcb6 <USBH_ParseDevDesc+0xae>
 800bc96:	3b08      	subs	r3, #8
 800bc98:	4a32      	ldr	r2, [pc, #200]	@ (800bd64 <USBH_ParseDevDesc+0x15c>)
 800bc9a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	bf14      	ite	ne
 800bca6:	2301      	movne	r3, #1
 800bca8:	2300      	moveq	r3, #0
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d106      	bne.n	800bcbe <USBH_ParseDevDesc+0xb6>
 800bcb0:	e001      	b.n	800bcb6 <USBH_ParseDevDesc+0xae>
 800bcb2:	2b40      	cmp	r3, #64	@ 0x40
 800bcb4:	d003      	beq.n	800bcbe <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	2208      	movs	r2, #8
 800bcba:	71da      	strb	r2, [r3, #7]
        break;
 800bcbc:	e000      	b.n	800bcc0 <USBH_ParseDevDesc+0xb8>
        break;
 800bcbe:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800bcc0:	e00e      	b.n	800bce0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d107      	bne.n	800bcdc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	79db      	ldrb	r3, [r3, #7]
 800bcd0:	2b08      	cmp	r3, #8
 800bcd2:	d005      	beq.n	800bce0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	2208      	movs	r2, #8
 800bcd8:	71da      	strb	r2, [r3, #7]
 800bcda:	e001      	b.n	800bce0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800bce0:	88fb      	ldrh	r3, [r7, #6]
 800bce2:	2b08      	cmp	r3, #8
 800bce4:	d936      	bls.n	800bd54 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	3308      	adds	r3, #8
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	461a      	mov	r2, r3
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	3309      	adds	r3, #9
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	021b      	lsls	r3, r3, #8
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	330a      	adds	r3, #10
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	461a      	mov	r2, r3
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	330b      	adds	r3, #11
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	021b      	lsls	r3, r3, #8
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	4313      	orrs	r3, r2
 800bd14:	b29a      	uxth	r2, r3
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	330c      	adds	r3, #12
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	461a      	mov	r2, r3
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	330d      	adds	r3, #13
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	021b      	lsls	r3, r3, #8
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	7b9a      	ldrb	r2, [r3, #14]
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	7bda      	ldrb	r2, [r3, #15]
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	7c1a      	ldrb	r2, [r3, #16]
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	7c5a      	ldrb	r2, [r3, #17]
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800bd54:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	01000101 	.word	0x01000101

0800bd68 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08c      	sub	sp, #48	@ 0x30
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	4613      	mov	r3, r2
 800bd74:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bd7c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bd84:	2300      	movs	r3, #0
 800bd86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d101      	bne.n	800bd9a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bd96:	2302      	movs	r3, #2
 800bd98:	e0da      	b.n	800bf50 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	2b09      	cmp	r3, #9
 800bda4:	d002      	beq.n	800bdac <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda8:	2209      	movs	r2, #9
 800bdaa:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	781a      	ldrb	r2, [r3, #0]
 800bdb0:	6a3b      	ldr	r3, [r7, #32]
 800bdb2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	785a      	ldrb	r2, [r3, #1]
 800bdb8:	6a3b      	ldr	r3, [r7, #32]
 800bdba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	3302      	adds	r3, #2
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	3303      	adds	r3, #3
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	021b      	lsls	r3, r3, #8
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdd6:	bf28      	it	cs
 800bdd8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	791a      	ldrb	r2, [r3, #4]
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	795a      	ldrb	r2, [r3, #5]
 800bdee:	6a3b      	ldr	r3, [r7, #32]
 800bdf0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	799a      	ldrb	r2, [r3, #6]
 800bdf6:	6a3b      	ldr	r3, [r7, #32]
 800bdf8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	79da      	ldrb	r2, [r3, #7]
 800bdfe:	6a3b      	ldr	r3, [r7, #32]
 800be00:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	7a1a      	ldrb	r2, [r3, #8]
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800be0a:	88fb      	ldrh	r3, [r7, #6]
 800be0c:	2b09      	cmp	r3, #9
 800be0e:	f240 809d 	bls.w	800bf4c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800be12:	2309      	movs	r3, #9
 800be14:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800be16:	2300      	movs	r3, #0
 800be18:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800be1a:	e081      	b.n	800bf20 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800be1c:	f107 0316 	add.w	r3, r7, #22
 800be20:	4619      	mov	r1, r3
 800be22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be24:	f000 f9e7 	bl	800c1f6 <USBH_GetNextDesc>
 800be28:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800be2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2c:	785b      	ldrb	r3, [r3, #1]
 800be2e:	2b04      	cmp	r3, #4
 800be30:	d176      	bne.n	800bf20 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800be32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	2b09      	cmp	r3, #9
 800be38:	d002      	beq.n	800be40 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800be3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3c:	2209      	movs	r2, #9
 800be3e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800be40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be44:	221a      	movs	r2, #26
 800be46:	fb02 f303 	mul.w	r3, r2, r3
 800be4a:	3308      	adds	r3, #8
 800be4c:	6a3a      	ldr	r2, [r7, #32]
 800be4e:	4413      	add	r3, r2
 800be50:	3302      	adds	r3, #2
 800be52:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800be54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be56:	69f8      	ldr	r0, [r7, #28]
 800be58:	f000 f87e 	bl	800bf58 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800be5c:	2300      	movs	r3, #0
 800be5e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800be62:	2300      	movs	r3, #0
 800be64:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800be66:	e043      	b.n	800bef0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800be68:	f107 0316 	add.w	r3, r7, #22
 800be6c:	4619      	mov	r1, r3
 800be6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be70:	f000 f9c1 	bl	800c1f6 <USBH_GetNextDesc>
 800be74:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800be76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be78:	785b      	ldrb	r3, [r3, #1]
 800be7a:	2b05      	cmp	r3, #5
 800be7c:	d138      	bne.n	800bef0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	795b      	ldrb	r3, [r3, #5]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d113      	bne.n	800beae <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d003      	beq.n	800be96 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	799b      	ldrb	r3, [r3, #6]
 800be92:	2b03      	cmp	r3, #3
 800be94:	d10b      	bne.n	800beae <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	79db      	ldrb	r3, [r3, #7]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10b      	bne.n	800beb6 <USBH_ParseCfgDesc+0x14e>
 800be9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	2b09      	cmp	r3, #9
 800bea4:	d007      	beq.n	800beb6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800bea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea8:	2209      	movs	r2, #9
 800beaa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800beac:	e003      	b.n	800beb6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800beae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb0:	2207      	movs	r2, #7
 800beb2:	701a      	strb	r2, [r3, #0]
 800beb4:	e000      	b.n	800beb8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800beb6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800beb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bebc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bec0:	3201      	adds	r2, #1
 800bec2:	00d2      	lsls	r2, r2, #3
 800bec4:	211a      	movs	r1, #26
 800bec6:	fb01 f303 	mul.w	r3, r1, r3
 800beca:	4413      	add	r3, r2
 800becc:	3308      	adds	r3, #8
 800bece:	6a3a      	ldr	r2, [r7, #32]
 800bed0:	4413      	add	r3, r2
 800bed2:	3304      	adds	r3, #4
 800bed4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800bed6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bed8:	69b9      	ldr	r1, [r7, #24]
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f000 f870 	bl	800bfc0 <USBH_ParseEPDesc>
 800bee0:	4603      	mov	r3, r0
 800bee2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800bee6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800beea:	3301      	adds	r3, #1
 800beec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	791b      	ldrb	r3, [r3, #4]
 800bef4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bef8:	429a      	cmp	r2, r3
 800befa:	d204      	bcs.n	800bf06 <USBH_ParseCfgDesc+0x19e>
 800befc:	6a3b      	ldr	r3, [r7, #32]
 800befe:	885a      	ldrh	r2, [r3, #2]
 800bf00:	8afb      	ldrh	r3, [r7, #22]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d8b0      	bhi.n	800be68 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	791b      	ldrb	r3, [r3, #4]
 800bf0a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d201      	bcs.n	800bf16 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e01c      	b.n	800bf50 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800bf16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bf20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d805      	bhi.n	800bf34 <USBH_ParseCfgDesc+0x1cc>
 800bf28:	6a3b      	ldr	r3, [r7, #32]
 800bf2a:	885a      	ldrh	r2, [r3, #2]
 800bf2c:	8afb      	ldrh	r3, [r7, #22]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	f63f af74 	bhi.w	800be1c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bf34:	6a3b      	ldr	r3, [r7, #32]
 800bf36:	791b      	ldrb	r3, [r3, #4]
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	bf28      	it	cs
 800bf3c:	2302      	movcs	r3, #2
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d201      	bcs.n	800bf4c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800bf48:	2303      	movs	r3, #3
 800bf4a:	e001      	b.n	800bf50 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800bf4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3730      	adds	r7, #48	@ 0x30
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	781a      	ldrb	r2, [r3, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	785a      	ldrb	r2, [r3, #1]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	789a      	ldrb	r2, [r3, #2]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	78da      	ldrb	r2, [r3, #3]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	3304      	adds	r3, #4
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	bf28      	it	cs
 800bf8c:	2302      	movcs	r3, #2
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	795a      	ldrb	r2, [r3, #5]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	799a      	ldrb	r2, [r3, #6]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	79da      	ldrb	r2, [r3, #7]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	7a1a      	ldrb	r2, [r3, #8]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	721a      	strb	r2, [r3, #8]
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b087      	sub	sp, #28
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	781a      	ldrb	r2, [r3, #0]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	785a      	ldrb	r2, [r3, #1]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	789a      	ldrb	r2, [r3, #2]
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	78da      	ldrb	r2, [r3, #3]
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	3304      	adds	r3, #4
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	461a      	mov	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3305      	adds	r3, #5
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	021b      	lsls	r3, r3, #8
 800c000:	b29b      	uxth	r3, r3
 800c002:	4313      	orrs	r3, r2
 800c004:	b29a      	uxth	r2, r3
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	799a      	ldrb	r2, [r3, #6]
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	889b      	ldrh	r3, [r3, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d009      	beq.n	800c02e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c01e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c022:	d804      	bhi.n	800c02e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c02c:	d901      	bls.n	800c032 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800c02e:	2303      	movs	r3, #3
 800c030:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d136      	bne.n	800c0aa <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	78db      	ldrb	r3, [r3, #3]
 800c040:	f003 0303 	and.w	r3, r3, #3
 800c044:	2b02      	cmp	r3, #2
 800c046:	d108      	bne.n	800c05a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	889b      	ldrh	r3, [r3, #4]
 800c04c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c050:	f240 8097 	bls.w	800c182 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c054:	2303      	movs	r3, #3
 800c056:	75fb      	strb	r3, [r7, #23]
 800c058:	e093      	b.n	800c182 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	78db      	ldrb	r3, [r3, #3]
 800c05e:	f003 0303 	and.w	r3, r3, #3
 800c062:	2b00      	cmp	r3, #0
 800c064:	d107      	bne.n	800c076 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	889b      	ldrh	r3, [r3, #4]
 800c06a:	2b40      	cmp	r3, #64	@ 0x40
 800c06c:	f240 8089 	bls.w	800c182 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c070:	2303      	movs	r3, #3
 800c072:	75fb      	strb	r3, [r7, #23]
 800c074:	e085      	b.n	800c182 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	78db      	ldrb	r3, [r3, #3]
 800c07a:	f003 0303 	and.w	r3, r3, #3
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d005      	beq.n	800c08e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	78db      	ldrb	r3, [r3, #3]
 800c086:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c08a:	2b03      	cmp	r3, #3
 800c08c:	d10a      	bne.n	800c0a4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	799b      	ldrb	r3, [r3, #6]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d003      	beq.n	800c09e <USBH_ParseEPDesc+0xde>
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	799b      	ldrb	r3, [r3, #6]
 800c09a:	2b10      	cmp	r3, #16
 800c09c:	d970      	bls.n	800c180 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c0a2:	e06d      	b.n	800c180 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	75fb      	strb	r3, [r7, #23]
 800c0a8:	e06b      	b.n	800c182 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d13c      	bne.n	800c12e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	78db      	ldrb	r3, [r3, #3]
 800c0b8:	f003 0303 	and.w	r3, r3, #3
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d005      	beq.n	800c0cc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	78db      	ldrb	r3, [r3, #3]
 800c0c4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d106      	bne.n	800c0da <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	889b      	ldrh	r3, [r3, #4]
 800c0d0:	2b40      	cmp	r3, #64	@ 0x40
 800c0d2:	d956      	bls.n	800c182 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c0d8:	e053      	b.n	800c182 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	78db      	ldrb	r3, [r3, #3]
 800c0de:	f003 0303 	and.w	r3, r3, #3
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d10e      	bne.n	800c104 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	799b      	ldrb	r3, [r3, #6]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d007      	beq.n	800c0fe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c0f2:	2b10      	cmp	r3, #16
 800c0f4:	d803      	bhi.n	800c0fe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c0fa:	2b40      	cmp	r3, #64	@ 0x40
 800c0fc:	d941      	bls.n	800c182 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c0fe:	2303      	movs	r3, #3
 800c100:	75fb      	strb	r3, [r7, #23]
 800c102:	e03e      	b.n	800c182 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	78db      	ldrb	r3, [r3, #3]
 800c108:	f003 0303 	and.w	r3, r3, #3
 800c10c:	2b03      	cmp	r3, #3
 800c10e:	d10b      	bne.n	800c128 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	799b      	ldrb	r3, [r3, #6]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d004      	beq.n	800c122 <USBH_ParseEPDesc+0x162>
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	889b      	ldrh	r3, [r3, #4]
 800c11c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c120:	d32f      	bcc.n	800c182 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c122:	2303      	movs	r3, #3
 800c124:	75fb      	strb	r3, [r7, #23]
 800c126:	e02c      	b.n	800c182 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c128:	2303      	movs	r3, #3
 800c12a:	75fb      	strb	r3, [r7, #23]
 800c12c:	e029      	b.n	800c182 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c134:	2b02      	cmp	r3, #2
 800c136:	d120      	bne.n	800c17a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	78db      	ldrb	r3, [r3, #3]
 800c13c:	f003 0303 	and.w	r3, r3, #3
 800c140:	2b00      	cmp	r3, #0
 800c142:	d106      	bne.n	800c152 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	889b      	ldrh	r3, [r3, #4]
 800c148:	2b08      	cmp	r3, #8
 800c14a:	d01a      	beq.n	800c182 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c14c:	2303      	movs	r3, #3
 800c14e:	75fb      	strb	r3, [r7, #23]
 800c150:	e017      	b.n	800c182 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	78db      	ldrb	r3, [r3, #3]
 800c156:	f003 0303 	and.w	r3, r3, #3
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	d10a      	bne.n	800c174 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	799b      	ldrb	r3, [r3, #6]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d003      	beq.n	800c16e <USBH_ParseEPDesc+0x1ae>
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	889b      	ldrh	r3, [r3, #4]
 800c16a:	2b08      	cmp	r3, #8
 800c16c:	d909      	bls.n	800c182 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c16e:	2303      	movs	r3, #3
 800c170:	75fb      	strb	r3, [r7, #23]
 800c172:	e006      	b.n	800c182 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c174:	2303      	movs	r3, #3
 800c176:	75fb      	strb	r3, [r7, #23]
 800c178:	e003      	b.n	800c182 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c17a:	2303      	movs	r3, #3
 800c17c:	75fb      	strb	r3, [r7, #23]
 800c17e:	e000      	b.n	800c182 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c180:	bf00      	nop
  }

  return status;
 800c182:	7dfb      	ldrb	r3, [r7, #23]
}
 800c184:	4618      	mov	r0, r3
 800c186:	371c      	adds	r7, #28
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c190:	b480      	push	{r7}
 800c192:	b087      	sub	sp, #28
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	4613      	mov	r3, r2
 800c19c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	2b03      	cmp	r3, #3
 800c1a6:	d120      	bne.n	800c1ea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	1e9a      	subs	r2, r3, #2
 800c1ae:	88fb      	ldrh	r3, [r7, #6]
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	bf28      	it	cs
 800c1b4:	4613      	movcs	r3, r2
 800c1b6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	3302      	adds	r3, #2
 800c1bc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c1be:	2300      	movs	r3, #0
 800c1c0:	82fb      	strh	r3, [r7, #22]
 800c1c2:	e00b      	b.n	800c1dc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c1c4:	8afb      	ldrh	r3, [r7, #22]
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	781a      	ldrb	r2, [r3, #0]
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c1d6:	8afb      	ldrh	r3, [r7, #22]
 800c1d8:	3302      	adds	r3, #2
 800c1da:	82fb      	strh	r3, [r7, #22]
 800c1dc:	8afa      	ldrh	r2, [r7, #22]
 800c1de:	8abb      	ldrh	r3, [r7, #20]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d3ef      	bcc.n	800c1c4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	701a      	strb	r2, [r3, #0]
  }
}
 800c1ea:	bf00      	nop
 800c1ec:	371c      	adds	r7, #28
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b085      	sub	sp, #20
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	881b      	ldrh	r3, [r3, #0]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	7812      	ldrb	r2, [r2, #0]
 800c208:	4413      	add	r3, r2
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4413      	add	r3, r2
 800c21a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c21c:	68fb      	ldr	r3, [r7, #12]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3714      	adds	r7, #20
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b086      	sub	sp, #24
 800c22e:	af00      	add	r7, sp, #0
 800c230:	60f8      	str	r0, [r7, #12]
 800c232:	60b9      	str	r1, [r7, #8]
 800c234:	4613      	mov	r3, r2
 800c236:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c238:	2301      	movs	r3, #1
 800c23a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	789b      	ldrb	r3, [r3, #2]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d002      	beq.n	800c24a <USBH_CtlReq+0x20>
 800c244:	2b02      	cmp	r3, #2
 800c246:	d01d      	beq.n	800c284 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800c248:	e043      	b.n	800c2d2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	88fa      	ldrh	r2, [r7, #6]
 800c254:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2201      	movs	r2, #1
 800c25a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2202      	movs	r2, #2
 800c260:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c262:	2301      	movs	r3, #1
 800c264:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2203      	movs	r2, #3
 800c26a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c27a:	2200      	movs	r2, #0
 800c27c:	4619      	mov	r1, r3
 800c27e:	f7fb feaf 	bl	8007fe0 <osMessagePut>
      break;
 800c282:	e026      	b.n	800c2d2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f000 f829 	bl	800c2dc <USBH_HandleControl>
 800c28a:	4603      	mov	r3, r0
 800c28c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c28e:	7dfb      	ldrb	r3, [r7, #23]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d002      	beq.n	800c29a <USBH_CtlReq+0x70>
 800c294:	7dfb      	ldrb	r3, [r7, #23]
 800c296:	2b03      	cmp	r3, #3
 800c298:	d106      	bne.n	800c2a8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2201      	movs	r2, #1
 800c29e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	761a      	strb	r2, [r3, #24]
 800c2a6:	e005      	b.n	800c2b4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800c2a8:	7dfb      	ldrb	r3, [r7, #23]
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d102      	bne.n	800c2b4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2203      	movs	r2, #3
 800c2b8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	f7fb fe88 	bl	8007fe0 <osMessagePut>
      break;
 800c2d0:	bf00      	nop
  }
  return status;
 800c2d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3718      	adds	r7, #24
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af02      	add	r7, sp, #8
 800c2e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	7e1b      	ldrb	r3, [r3, #24]
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	2b0a      	cmp	r3, #10
 800c2f4:	f200 8229 	bhi.w	800c74a <USBH_HandleControl+0x46e>
 800c2f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c300 <USBH_HandleControl+0x24>)
 800c2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fe:	bf00      	nop
 800c300:	0800c32d 	.word	0x0800c32d
 800c304:	0800c347 	.word	0x0800c347
 800c308:	0800c3e9 	.word	0x0800c3e9
 800c30c:	0800c40f 	.word	0x0800c40f
 800c310:	0800c49b 	.word	0x0800c49b
 800c314:	0800c4c5 	.word	0x0800c4c5
 800c318:	0800c587 	.word	0x0800c587
 800c31c:	0800c5a9 	.word	0x0800c5a9
 800c320:	0800c63b 	.word	0x0800c63b
 800c324:	0800c661 	.word	0x0800c661
 800c328:	0800c6f3 	.word	0x0800c6f3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f103 0110 	add.w	r1, r3, #16
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	795b      	ldrb	r3, [r3, #5]
 800c336:	461a      	mov	r2, r3
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fa17 	bl	800c76c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2202      	movs	r2, #2
 800c342:	761a      	strb	r2, [r3, #24]
      break;
 800c344:	e20c      	b.n	800c760 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	795b      	ldrb	r3, [r3, #5]
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fd99 	bl	800ce84 <USBH_LL_GetURBState>
 800c352:	4603      	mov	r3, r0
 800c354:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c356:	7bbb      	ldrb	r3, [r7, #14]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d12c      	bne.n	800c3b6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	7c1b      	ldrb	r3, [r3, #16]
 800c360:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c364:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	8adb      	ldrh	r3, [r3, #22]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00a      	beq.n	800c384 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c36e:	7b7b      	ldrb	r3, [r7, #13]
 800c370:	2b80      	cmp	r3, #128	@ 0x80
 800c372:	d103      	bne.n	800c37c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2203      	movs	r2, #3
 800c378:	761a      	strb	r2, [r3, #24]
 800c37a:	e00d      	b.n	800c398 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2205      	movs	r2, #5
 800c380:	761a      	strb	r2, [r3, #24]
 800c382:	e009      	b.n	800c398 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c384:	7b7b      	ldrb	r3, [r7, #13]
 800c386:	2b80      	cmp	r3, #128	@ 0x80
 800c388:	d103      	bne.n	800c392 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2209      	movs	r2, #9
 800c38e:	761a      	strb	r2, [r3, #24]
 800c390:	e002      	b.n	800c398 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2207      	movs	r2, #7
 800c396:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2203      	movs	r2, #3
 800c39c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	f7fb fe16 	bl	8007fe0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c3b4:	e1cb      	b.n	800c74e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c3b6:	7bbb      	ldrb	r3, [r7, #14]
 800c3b8:	2b04      	cmp	r3, #4
 800c3ba:	d003      	beq.n	800c3c4 <USBH_HandleControl+0xe8>
 800c3bc:	7bbb      	ldrb	r3, [r7, #14]
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	f040 81c5 	bne.w	800c74e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	220b      	movs	r2, #11
 800c3c8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2203      	movs	r2, #3
 800c3ce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c3de:	2200      	movs	r2, #0
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	f7fb fdfd 	bl	8007fe0 <osMessagePut>
      break;
 800c3e6:	e1b2      	b.n	800c74e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6899      	ldr	r1, [r3, #8]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	899a      	ldrh	r2, [r3, #12]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	791b      	ldrb	r3, [r3, #4]
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 f9f2 	bl	800c7ea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2204      	movs	r2, #4
 800c40a:	761a      	strb	r2, [r3, #24]
      break;
 800c40c:	e1a8      	b.n	800c760 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	791b      	ldrb	r3, [r3, #4]
 800c412:	4619      	mov	r1, r3
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fd35 	bl	800ce84 <USBH_LL_GetURBState>
 800c41a:	4603      	mov	r3, r0
 800c41c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c41e:	7bbb      	ldrb	r3, [r7, #14]
 800c420:	2b01      	cmp	r3, #1
 800c422:	d110      	bne.n	800c446 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2209      	movs	r2, #9
 800c428:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2203      	movs	r2, #3
 800c42e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c43e:	2200      	movs	r2, #0
 800c440:	4619      	mov	r1, r3
 800c442:	f7fb fdcd 	bl	8007fe0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c446:	7bbb      	ldrb	r3, [r7, #14]
 800c448:	2b05      	cmp	r3, #5
 800c44a:	d110      	bne.n	800c46e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c44c:	2303      	movs	r3, #3
 800c44e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2203      	movs	r2, #3
 800c454:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c464:	2200      	movs	r2, #0
 800c466:	4619      	mov	r1, r3
 800c468:	f7fb fdba 	bl	8007fe0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c46c:	e171      	b.n	800c752 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800c46e:	7bbb      	ldrb	r3, [r7, #14]
 800c470:	2b04      	cmp	r3, #4
 800c472:	f040 816e 	bne.w	800c752 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	220b      	movs	r2, #11
 800c47a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2203      	movs	r2, #3
 800c480:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c490:	2200      	movs	r2, #0
 800c492:	4619      	mov	r1, r3
 800c494:	f7fb fda4 	bl	8007fe0 <osMessagePut>
      break;
 800c498:	e15b      	b.n	800c752 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6899      	ldr	r1, [r3, #8]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	899a      	ldrh	r2, [r3, #12]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	795b      	ldrb	r3, [r3, #5]
 800c4a6:	2001      	movs	r0, #1
 800c4a8:	9000      	str	r0, [sp, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f978 	bl	800c7a0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2206      	movs	r2, #6
 800c4c0:	761a      	strb	r2, [r3, #24]
      break;
 800c4c2:	e14d      	b.n	800c760 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	795b      	ldrb	r3, [r3, #5]
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 fcda 	bl	800ce84 <USBH_LL_GetURBState>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c4d4:	7bbb      	ldrb	r3, [r7, #14]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d111      	bne.n	800c4fe <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2207      	movs	r2, #7
 800c4de:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2203      	movs	r2, #3
 800c4e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	f7fb fd72 	bl	8007fe0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c4fc:	e12b      	b.n	800c756 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800c4fe:	7bbb      	ldrb	r3, [r7, #14]
 800c500:	2b05      	cmp	r3, #5
 800c502:	d113      	bne.n	800c52c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	220c      	movs	r2, #12
 800c508:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c50a:	2303      	movs	r3, #3
 800c50c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2203      	movs	r2, #3
 800c512:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c522:	2200      	movs	r2, #0
 800c524:	4619      	mov	r1, r3
 800c526:	f7fb fd5b 	bl	8007fe0 <osMessagePut>
      break;
 800c52a:	e114      	b.n	800c756 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d111      	bne.n	800c556 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2205      	movs	r2, #5
 800c536:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2203      	movs	r2, #3
 800c53c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c54c:	2200      	movs	r2, #0
 800c54e:	4619      	mov	r1, r3
 800c550:	f7fb fd46 	bl	8007fe0 <osMessagePut>
      break;
 800c554:	e0ff      	b.n	800c756 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800c556:	7bbb      	ldrb	r3, [r7, #14]
 800c558:	2b04      	cmp	r3, #4
 800c55a:	f040 80fc 	bne.w	800c756 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	220b      	movs	r2, #11
 800c562:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c564:	2302      	movs	r3, #2
 800c566:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2203      	movs	r2, #3
 800c56c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c57c:	2200      	movs	r2, #0
 800c57e:	4619      	mov	r1, r3
 800c580:	f7fb fd2e 	bl	8007fe0 <osMessagePut>
      break;
 800c584:	e0e7      	b.n	800c756 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	791b      	ldrb	r3, [r3, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	2100      	movs	r1, #0
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 f92b 	bl	800c7ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2208      	movs	r2, #8
 800c5a4:	761a      	strb	r2, [r3, #24]

      break;
 800c5a6:	e0db      	b.n	800c760 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	791b      	ldrb	r3, [r3, #4]
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fc68 	bl	800ce84 <USBH_LL_GetURBState>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d113      	bne.n	800c5e6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	220d      	movs	r2, #13
 800c5c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2203      	movs	r2, #3
 800c5cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c5dc:	2200      	movs	r2, #0
 800c5de:	4619      	mov	r1, r3
 800c5e0:	f7fb fcfe 	bl	8007fe0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c5e4:	e0b9      	b.n	800c75a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800c5e6:	7bbb      	ldrb	r3, [r7, #14]
 800c5e8:	2b04      	cmp	r3, #4
 800c5ea:	d111      	bne.n	800c610 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	220b      	movs	r2, #11
 800c5f0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2203      	movs	r2, #3
 800c5f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c606:	2200      	movs	r2, #0
 800c608:	4619      	mov	r1, r3
 800c60a:	f7fb fce9 	bl	8007fe0 <osMessagePut>
      break;
 800c60e:	e0a4      	b.n	800c75a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800c610:	7bbb      	ldrb	r3, [r7, #14]
 800c612:	2b05      	cmp	r3, #5
 800c614:	f040 80a1 	bne.w	800c75a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800c618:	2303      	movs	r3, #3
 800c61a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2203      	movs	r2, #3
 800c620:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c630:	2200      	movs	r2, #0
 800c632:	4619      	mov	r1, r3
 800c634:	f7fb fcd4 	bl	8007fe0 <osMessagePut>
      break;
 800c638:	e08f      	b.n	800c75a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	795b      	ldrb	r3, [r3, #5]
 800c63e:	2201      	movs	r2, #1
 800c640:	9200      	str	r2, [sp, #0]
 800c642:	2200      	movs	r2, #0
 800c644:	2100      	movs	r1, #0
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 f8aa 	bl	800c7a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c652:	b29a      	uxth	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	220a      	movs	r2, #10
 800c65c:	761a      	strb	r2, [r3, #24]
      break;
 800c65e:	e07f      	b.n	800c760 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	795b      	ldrb	r3, [r3, #5]
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 fc0c 	bl	800ce84 <USBH_LL_GetURBState>
 800c66c:	4603      	mov	r3, r0
 800c66e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c670:	7bbb      	ldrb	r3, [r7, #14]
 800c672:	2b01      	cmp	r3, #1
 800c674:	d113      	bne.n	800c69e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	220d      	movs	r2, #13
 800c67e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2203      	movs	r2, #3
 800c684:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c694:	2200      	movs	r2, #0
 800c696:	4619      	mov	r1, r3
 800c698:	f7fb fca2 	bl	8007fe0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c69c:	e05f      	b.n	800c75e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c69e:	7bbb      	ldrb	r3, [r7, #14]
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	d111      	bne.n	800c6c8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2209      	movs	r2, #9
 800c6a8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2203      	movs	r2, #3
 800c6ae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c6be:	2200      	movs	r2, #0
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	f7fb fc8d 	bl	8007fe0 <osMessagePut>
      break;
 800c6c6:	e04a      	b.n	800c75e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800c6c8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ca:	2b04      	cmp	r3, #4
 800c6cc:	d147      	bne.n	800c75e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	220b      	movs	r2, #11
 800c6d2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2203      	movs	r2, #3
 800c6d8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	f7fb fc78 	bl	8007fe0 <osMessagePut>
      break;
 800c6f0:	e035      	b.n	800c75e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	7e5b      	ldrb	r3, [r3, #25]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	765a      	strb	r2, [r3, #25]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	7e5b      	ldrb	r3, [r3, #25]
 800c702:	2b02      	cmp	r3, #2
 800c704:	d806      	bhi.n	800c714 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2201      	movs	r2, #1
 800c70a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c712:	e025      	b.n	800c760 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c71a:	2106      	movs	r1, #6
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	795b      	ldrb	r3, [r3, #5]
 800c72a:	4619      	mov	r1, r3
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 f90d 	bl	800c94c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	791b      	ldrb	r3, [r3, #4]
 800c736:	4619      	mov	r1, r3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f907 	bl	800c94c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c744:	2302      	movs	r3, #2
 800c746:	73fb      	strb	r3, [r7, #15]
      break;
 800c748:	e00a      	b.n	800c760 <USBH_HandleControl+0x484>

    default:
      break;
 800c74a:	bf00      	nop
 800c74c:	e008      	b.n	800c760 <USBH_HandleControl+0x484>
      break;
 800c74e:	bf00      	nop
 800c750:	e006      	b.n	800c760 <USBH_HandleControl+0x484>
      break;
 800c752:	bf00      	nop
 800c754:	e004      	b.n	800c760 <USBH_HandleControl+0x484>
      break;
 800c756:	bf00      	nop
 800c758:	e002      	b.n	800c760 <USBH_HandleControl+0x484>
      break;
 800c75a:	bf00      	nop
 800c75c:	e000      	b.n	800c760 <USBH_HandleControl+0x484>
      break;
 800c75e:	bf00      	nop
  }

  return status;
 800c760:	7bfb      	ldrb	r3, [r7, #15]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop

0800c76c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b088      	sub	sp, #32
 800c770:	af04      	add	r7, sp, #16
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	4613      	mov	r3, r2
 800c778:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c77a:	79f9      	ldrb	r1, [r7, #7]
 800c77c:	2300      	movs	r3, #0
 800c77e:	9303      	str	r3, [sp, #12]
 800c780:	2308      	movs	r3, #8
 800c782:	9302      	str	r3, [sp, #8]
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	9301      	str	r3, [sp, #4]
 800c788:	2300      	movs	r3, #0
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	2300      	movs	r3, #0
 800c78e:	2200      	movs	r2, #0
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f000 fb46 	bl	800ce22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3710      	adds	r7, #16
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b088      	sub	sp, #32
 800c7a4:	af04      	add	r7, sp, #16
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	4611      	mov	r1, r2
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	80fb      	strh	r3, [r7, #6]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c7c4:	7979      	ldrb	r1, [r7, #5]
 800c7c6:	7e3b      	ldrb	r3, [r7, #24]
 800c7c8:	9303      	str	r3, [sp, #12]
 800c7ca:	88fb      	ldrh	r3, [r7, #6]
 800c7cc:	9302      	str	r3, [sp, #8]
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	9301      	str	r3, [sp, #4]
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	2200      	movs	r2, #0
 800c7da:	68f8      	ldr	r0, [r7, #12]
 800c7dc:	f000 fb21 	bl	800ce22 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b088      	sub	sp, #32
 800c7ee:	af04      	add	r7, sp, #16
 800c7f0:	60f8      	str	r0, [r7, #12]
 800c7f2:	60b9      	str	r1, [r7, #8]
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	80fb      	strh	r3, [r7, #6]
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c800:	7979      	ldrb	r1, [r7, #5]
 800c802:	2300      	movs	r3, #0
 800c804:	9303      	str	r3, [sp, #12]
 800c806:	88fb      	ldrh	r3, [r7, #6]
 800c808:	9302      	str	r3, [sp, #8]
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	9301      	str	r3, [sp, #4]
 800c80e:	2301      	movs	r3, #1
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	2300      	movs	r3, #0
 800c814:	2201      	movs	r2, #1
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f000 fb03 	bl	800ce22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c81c:	2300      	movs	r3, #0

}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c826:	b580      	push	{r7, lr}
 800c828:	b088      	sub	sp, #32
 800c82a:	af04      	add	r7, sp, #16
 800c82c:	60f8      	str	r0, [r7, #12]
 800c82e:	60b9      	str	r1, [r7, #8]
 800c830:	4611      	mov	r1, r2
 800c832:	461a      	mov	r2, r3
 800c834:	460b      	mov	r3, r1
 800c836:	80fb      	strh	r3, [r7, #6]
 800c838:	4613      	mov	r3, r2
 800c83a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c842:	2b00      	cmp	r3, #0
 800c844:	d001      	beq.n	800c84a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c846:	2300      	movs	r3, #0
 800c848:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c84a:	7979      	ldrb	r1, [r7, #5]
 800c84c:	7e3b      	ldrb	r3, [r7, #24]
 800c84e:	9303      	str	r3, [sp, #12]
 800c850:	88fb      	ldrh	r3, [r7, #6]
 800c852:	9302      	str	r3, [sp, #8]
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	9301      	str	r3, [sp, #4]
 800c858:	2301      	movs	r3, #1
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	2302      	movs	r3, #2
 800c85e:	2200      	movs	r2, #0
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f000 fade 	bl	800ce22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b088      	sub	sp, #32
 800c874:	af04      	add	r7, sp, #16
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	4611      	mov	r1, r2
 800c87c:	461a      	mov	r2, r3
 800c87e:	460b      	mov	r3, r1
 800c880:	80fb      	strh	r3, [r7, #6]
 800c882:	4613      	mov	r3, r2
 800c884:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c886:	7979      	ldrb	r1, [r7, #5]
 800c888:	2300      	movs	r3, #0
 800c88a:	9303      	str	r3, [sp, #12]
 800c88c:	88fb      	ldrh	r3, [r7, #6]
 800c88e:	9302      	str	r3, [sp, #8]
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	2301      	movs	r3, #1
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	2302      	movs	r3, #2
 800c89a:	2201      	movs	r2, #1
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	f000 fac0 	bl	800ce22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af04      	add	r7, sp, #16
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	70fb      	strb	r3, [r7, #3]
 800c8be:	460b      	mov	r3, r1
 800c8c0:	70bb      	strb	r3, [r7, #2]
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c8c6:	7878      	ldrb	r0, [r7, #1]
 800c8c8:	78ba      	ldrb	r2, [r7, #2]
 800c8ca:	78f9      	ldrb	r1, [r7, #3]
 800c8cc:	8b3b      	ldrh	r3, [r7, #24]
 800c8ce:	9302      	str	r3, [sp, #8]
 800c8d0:	7d3b      	ldrb	r3, [r7, #20]
 800c8d2:	9301      	str	r3, [sp, #4]
 800c8d4:	7c3b      	ldrb	r3, [r7, #16]
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	4603      	mov	r3, r0
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 fa53 	bl	800cd86 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c8e0:	2300      	movs	r3, #0
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c8f6:	78fb      	ldrb	r3, [r7, #3]
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 fa72 	bl	800cde4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b084      	sub	sp, #16
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	460b      	mov	r3, r1
 800c914:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f836 	bl	800c988 <USBH_GetFreePipe>
 800c91c:	4603      	mov	r3, r0
 800c91e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c920:	89fb      	ldrh	r3, [r7, #14]
 800c922:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c926:	4293      	cmp	r3, r2
 800c928:	d00a      	beq.n	800c940 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c92a:	78fa      	ldrb	r2, [r7, #3]
 800c92c:	89fb      	ldrh	r3, [r7, #14]
 800c92e:	f003 030f 	and.w	r3, r3, #15
 800c932:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c936:	6879      	ldr	r1, [r7, #4]
 800c938:	33e0      	adds	r3, #224	@ 0xe0
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	440b      	add	r3, r1
 800c93e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c940:	89fb      	ldrh	r3, [r7, #14]
 800c942:	b2db      	uxtb	r3, r3
}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	460b      	mov	r3, r1
 800c956:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c958:	78fb      	ldrb	r3, [r7, #3]
 800c95a:	2b0f      	cmp	r3, #15
 800c95c:	d80d      	bhi.n	800c97a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c95e:	78fb      	ldrb	r3, [r7, #3]
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	33e0      	adds	r3, #224	@ 0xe0
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	4413      	add	r3, r2
 800c968:	685a      	ldr	r2, [r3, #4]
 800c96a:	78fb      	ldrb	r3, [r7, #3]
 800c96c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c970:	6879      	ldr	r1, [r7, #4]
 800c972:	33e0      	adds	r3, #224	@ 0xe0
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	440b      	add	r3, r1
 800c978:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c990:	2300      	movs	r3, #0
 800c992:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c994:	2300      	movs	r3, #0
 800c996:	73fb      	strb	r3, [r7, #15]
 800c998:	e00f      	b.n	800c9ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c99a:	7bfb      	ldrb	r3, [r7, #15]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	33e0      	adds	r3, #224	@ 0xe0
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	4413      	add	r3, r2
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d102      	bne.n	800c9b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	e007      	b.n	800c9c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c9b4:	7bfb      	ldrb	r3, [r7, #15]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	73fb      	strb	r3, [r7, #15]
 800c9ba:	7bfb      	ldrb	r3, [r7, #15]
 800c9bc:	2b0f      	cmp	r3, #15
 800c9be:	d9ec      	bls.n	800c99a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c9c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3714      	adds	r7, #20
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr

0800c9d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	490e      	ldr	r1, [pc, #56]	@ (800ca10 <MX_USB_HOST_Init+0x40>)
 800c9d8:	480e      	ldr	r0, [pc, #56]	@ (800ca14 <MX_USB_HOST_Init+0x44>)
 800c9da:	f7fe f8e1 	bl	800aba0 <USBH_Init>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c9e4:	f7f4 fb56 	bl	8001094 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800c9e8:	490b      	ldr	r1, [pc, #44]	@ (800ca18 <MX_USB_HOST_Init+0x48>)
 800c9ea:	480a      	ldr	r0, [pc, #40]	@ (800ca14 <MX_USB_HOST_Init+0x44>)
 800c9ec:	f7fe f9ad 	bl	800ad4a <USBH_RegisterClass>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d001      	beq.n	800c9fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c9f6:	f7f4 fb4d 	bl	8001094 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800c9fa:	4806      	ldr	r0, [pc, #24]	@ (800ca14 <MX_USB_HOST_Init+0x44>)
 800c9fc:	f7fe fa31 	bl	800ae62 <USBH_Start>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ca06:	f7f4 fb45 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ca0a:	bf00      	nop
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	0800ca1d 	.word	0x0800ca1d
 800ca14:	20008700 	.word	0x20008700
 800ca18:	20000010 	.word	0x20000010

0800ca1c <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	460b      	mov	r3, r1
 800ca26:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ca28:	78fb      	ldrb	r3, [r7, #3]
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	2b04      	cmp	r3, #4
 800ca2e:	d819      	bhi.n	800ca64 <USBH_UserProcess+0x48>
 800ca30:	a201      	add	r2, pc, #4	@ (adr r2, 800ca38 <USBH_UserProcess+0x1c>)
 800ca32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca36:	bf00      	nop
 800ca38:	0800ca65 	.word	0x0800ca65
 800ca3c:	0800ca55 	.word	0x0800ca55
 800ca40:	0800ca65 	.word	0x0800ca65
 800ca44:	0800ca5d 	.word	0x0800ca5d
 800ca48:	0800ca4d 	.word	0x0800ca4d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ca4c:	4b09      	ldr	r3, [pc, #36]	@ (800ca74 <USBH_UserProcess+0x58>)
 800ca4e:	2203      	movs	r2, #3
 800ca50:	701a      	strb	r2, [r3, #0]
  break;
 800ca52:	e008      	b.n	800ca66 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ca54:	4b07      	ldr	r3, [pc, #28]	@ (800ca74 <USBH_UserProcess+0x58>)
 800ca56:	2202      	movs	r2, #2
 800ca58:	701a      	strb	r2, [r3, #0]
  break;
 800ca5a:	e004      	b.n	800ca66 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ca5c:	4b05      	ldr	r3, [pc, #20]	@ (800ca74 <USBH_UserProcess+0x58>)
 800ca5e:	2201      	movs	r2, #1
 800ca60:	701a      	strb	r2, [r3, #0]
  break;
 800ca62:	e000      	b.n	800ca66 <USBH_UserProcess+0x4a>

  default:
  break;
 800ca64:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ca66:	bf00      	nop
 800ca68:	370c      	adds	r7, #12
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	20008ae4 	.word	0x20008ae4

0800ca78 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b08a      	sub	sp, #40	@ 0x28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca80:	f107 0314 	add.w	r3, r7, #20
 800ca84:	2200      	movs	r2, #0
 800ca86:	601a      	str	r2, [r3, #0]
 800ca88:	605a      	str	r2, [r3, #4]
 800ca8a:	609a      	str	r2, [r3, #8]
 800ca8c:	60da      	str	r2, [r3, #12]
 800ca8e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a24      	ldr	r2, [pc, #144]	@ (800cb28 <HAL_HCD_MspInit+0xb0>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d141      	bne.n	800cb1e <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	613b      	str	r3, [r7, #16]
 800ca9e:	4b23      	ldr	r3, [pc, #140]	@ (800cb2c <HAL_HCD_MspInit+0xb4>)
 800caa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caa2:	4a22      	ldr	r2, [pc, #136]	@ (800cb2c <HAL_HCD_MspInit+0xb4>)
 800caa4:	f043 0302 	orr.w	r3, r3, #2
 800caa8:	6313      	str	r3, [r2, #48]	@ 0x30
 800caaa:	4b20      	ldr	r3, [pc, #128]	@ (800cb2c <HAL_HCD_MspInit+0xb4>)
 800caac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caae:	f003 0302 	and.w	r3, r3, #2
 800cab2:	613b      	str	r3, [r7, #16]
 800cab4:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800cab6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800caba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cabc:	2302      	movs	r3, #2
 800cabe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cac4:	2300      	movs	r3, #0
 800cac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cac8:	230c      	movs	r3, #12
 800caca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cacc:	f107 0314 	add.w	r3, r7, #20
 800cad0:	4619      	mov	r1, r3
 800cad2:	4817      	ldr	r0, [pc, #92]	@ (800cb30 <HAL_HCD_MspInit+0xb8>)
 800cad4:	f7f5 f8f4 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800cad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cadc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cade:	2300      	movs	r3, #0
 800cae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cae2:	2300      	movs	r3, #0
 800cae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800cae6:	f107 0314 	add.w	r3, r7, #20
 800caea:	4619      	mov	r1, r3
 800caec:	4810      	ldr	r0, [pc, #64]	@ (800cb30 <HAL_HCD_MspInit+0xb8>)
 800caee:	f7f5 f8e7 	bl	8001cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800caf2:	2300      	movs	r3, #0
 800caf4:	60fb      	str	r3, [r7, #12]
 800caf6:	4b0d      	ldr	r3, [pc, #52]	@ (800cb2c <HAL_HCD_MspInit+0xb4>)
 800caf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cafa:	4a0c      	ldr	r2, [pc, #48]	@ (800cb2c <HAL_HCD_MspInit+0xb4>)
 800cafc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cb00:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb02:	4b0a      	ldr	r3, [pc, #40]	@ (800cb2c <HAL_HCD_MspInit+0xb4>)
 800cb04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb0a:	60fb      	str	r3, [r7, #12]
 800cb0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800cb0e:	2200      	movs	r2, #0
 800cb10:	2105      	movs	r1, #5
 800cb12:	204d      	movs	r0, #77	@ 0x4d
 800cb14:	f7f4 fea2 	bl	800185c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cb18:	204d      	movs	r0, #77	@ 0x4d
 800cb1a:	f7f4 febb 	bl	8001894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cb1e:	bf00      	nop
 800cb20:	3728      	adds	r7, #40	@ 0x28
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	40040000 	.word	0x40040000
 800cb2c:	40023800 	.word	0x40023800
 800cb30:	40020400 	.word	0x40020400

0800cb34 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fe fe3f 	bl	800b7c6 <USBH_LL_IncTimer>
}
 800cb48:	bf00      	nop
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fe fe83 	bl	800b86a <USBH_LL_Connect>
}
 800cb64:	bf00      	nop
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe fe98 	bl	800b8b0 <USBH_LL_Disconnect>
}
 800cb80:	bf00      	nop
 800cb82:	3708      	adds	r7, #8
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	460b      	mov	r3, r1
 800cb92:	70fb      	strb	r3, [r7, #3]
 800cb94:	4613      	mov	r3, r2
 800cb96:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fe fecd 	bl	800b93e <USBH_LL_NotifyURBChange>
#endif
}
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fe fe2d 	bl	800b81a <USBH_LL_PortEnabled>
}
 800cbc0:	bf00      	nop
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7fe fe39 	bl	800b84e <USBH_LL_PortDisabled>
}
 800cbdc:	bf00      	nop
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d132      	bne.n	800cc5c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800cbf6:	4a1c      	ldr	r2, [pc, #112]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	4a19      	ldr	r2, [pc, #100]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cc02:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800cc06:	4b18      	ldr	r3, [pc, #96]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cc08:	4a18      	ldr	r2, [pc, #96]	@ (800cc6c <USBH_LL_Init+0x88>)
 800cc0a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800cc0c:	4b16      	ldr	r3, [pc, #88]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cc0e:	220c      	movs	r2, #12
 800cc10:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800cc12:	4b15      	ldr	r3, [pc, #84]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cc14:	2201      	movs	r2, #1
 800cc16:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800cc18:	4b13      	ldr	r3, [pc, #76]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800cc1e:	4b12      	ldr	r3, [pc, #72]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cc20:	2202      	movs	r2, #2
 800cc22:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800cc24:	4b10      	ldr	r3, [pc, #64]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cc26:	2200      	movs	r2, #0
 800cc28:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800cc2a:	4b0f      	ldr	r3, [pc, #60]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800cc30:	4b0d      	ldr	r3, [pc, #52]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800cc36:	4b0c      	ldr	r3, [pc, #48]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800cc3c:	480a      	ldr	r0, [pc, #40]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cc3e:	f7f5 fa04 	bl	800204a <HAL_HCD_Init>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d001      	beq.n	800cc4c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800cc48:	f7f4 fa24 	bl	8001094 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800cc4c:	4806      	ldr	r0, [pc, #24]	@ (800cc68 <USBH_LL_Init+0x84>)
 800cc4e:	f7f5 fe65 	bl	800291c <HAL_HCD_GetCurrentFrame>
 800cc52:	4603      	mov	r3, r0
 800cc54:	4619      	mov	r1, r3
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7fe fda6 	bl	800b7a8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3708      	adds	r7, #8
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	20008ae8 	.word	0x20008ae8
 800cc6c:	40040000 	.word	0x40040000

0800cc70 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7f5 fdd0 	bl	800282c <HAL_HCD_Start>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 f95e 	bl	800cf54 <USBH_Get_USB_Status>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b084      	sub	sp, #16
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7f5 fdd8 	bl	8002872 <HAL_HCD_Stop>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ccc6:	7bfb      	ldrb	r3, [r7, #15]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f000 f943 	bl	800cf54 <USBH_Get_USB_Status>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cce4:	2301      	movs	r3, #1
 800cce6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7f5 fe22 	bl	8002938 <HAL_HCD_GetCurrentSpeed>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b02      	cmp	r3, #2
 800ccf8:	d00c      	beq.n	800cd14 <USBH_LL_GetSpeed+0x38>
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	d80d      	bhi.n	800cd1a <USBH_LL_GetSpeed+0x3e>
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d002      	beq.n	800cd08 <USBH_LL_GetSpeed+0x2c>
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d003      	beq.n	800cd0e <USBH_LL_GetSpeed+0x32>
 800cd06:	e008      	b.n	800cd1a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd0c:	e008      	b.n	800cd20 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	73fb      	strb	r3, [r7, #15]
    break;
 800cd12:	e005      	b.n	800cd20 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cd14:	2302      	movs	r3, #2
 800cd16:	73fb      	strb	r3, [r7, #15]
    break;
 800cd18:	e002      	b.n	800cd20 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd1e:	bf00      	nop
  }
  return  speed;
 800cd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b084      	sub	sp, #16
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd36:	2300      	movs	r3, #0
 800cd38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7f5 fdb3 	bl	80028ac <HAL_HCD_ResetPort>
 800cd46:	4603      	mov	r3, r0
 800cd48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 f901 	bl	800cf54 <USBH_Get_USB_Status>
 800cd52:	4603      	mov	r3, r0
 800cd54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd56:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cd72:	78fa      	ldrb	r2, [r7, #3]
 800cd74:	4611      	mov	r1, r2
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7f5 fdbb 	bl	80028f2 <HAL_HCD_HC_GetXferCount>
 800cd7c:	4603      	mov	r3, r0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd86:	b590      	push	{r4, r7, lr}
 800cd88:	b089      	sub	sp, #36	@ 0x24
 800cd8a:	af04      	add	r7, sp, #16
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	4608      	mov	r0, r1
 800cd90:	4611      	mov	r1, r2
 800cd92:	461a      	mov	r2, r3
 800cd94:	4603      	mov	r3, r0
 800cd96:	70fb      	strb	r3, [r7, #3]
 800cd98:	460b      	mov	r3, r1
 800cd9a:	70bb      	strb	r3, [r7, #2]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cda0:	2300      	movs	r3, #0
 800cda2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cda4:	2300      	movs	r3, #0
 800cda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800cdae:	787c      	ldrb	r4, [r7, #1]
 800cdb0:	78ba      	ldrb	r2, [r7, #2]
 800cdb2:	78f9      	ldrb	r1, [r7, #3]
 800cdb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cdb6:	9302      	str	r3, [sp, #8]
 800cdb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	4623      	mov	r3, r4
 800cdc6:	f7f5 f9a7 	bl	8002118 <HAL_HCD_HC_Init>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f000 f8bf 	bl	800cf54 <USBH_Get_USB_Status>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdda:	7bbb      	ldrb	r3, [r7, #14]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd90      	pop	{r4, r7, pc}

0800cde4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	460b      	mov	r3, r1
 800cdee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cdfe:	78fa      	ldrb	r2, [r7, #3]
 800ce00:	4611      	mov	r1, r2
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7f5 fa40 	bl	8002288 <HAL_HCD_HC_Halt>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce0c:	7bfb      	ldrb	r3, [r7, #15]
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f000 f8a0 	bl	800cf54 <USBH_Get_USB_Status>
 800ce14:	4603      	mov	r3, r0
 800ce16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3710      	adds	r7, #16
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ce22:	b590      	push	{r4, r7, lr}
 800ce24:	b089      	sub	sp, #36	@ 0x24
 800ce26:	af04      	add	r7, sp, #16
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	4608      	mov	r0, r1
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	461a      	mov	r2, r3
 800ce30:	4603      	mov	r3, r0
 800ce32:	70fb      	strb	r3, [r7, #3]
 800ce34:	460b      	mov	r3, r1
 800ce36:	70bb      	strb	r3, [r7, #2]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ce4a:	787c      	ldrb	r4, [r7, #1]
 800ce4c:	78ba      	ldrb	r2, [r7, #2]
 800ce4e:	78f9      	ldrb	r1, [r7, #3]
 800ce50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ce54:	9303      	str	r3, [sp, #12]
 800ce56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ce58:	9302      	str	r3, [sp, #8]
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5c:	9301      	str	r3, [sp, #4]
 800ce5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce62:	9300      	str	r3, [sp, #0]
 800ce64:	4623      	mov	r3, r4
 800ce66:	f7f5 fa33 	bl	80022d0 <HAL_HCD_HC_SubmitRequest>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f000 f86f 	bl	800cf54 <USBH_Get_USB_Status>
 800ce76:	4603      	mov	r3, r0
 800ce78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3714      	adds	r7, #20
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd90      	pop	{r4, r7, pc}

0800ce84 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ce96:	78fa      	ldrb	r2, [r7, #3]
 800ce98:	4611      	mov	r1, r2
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7f5 fd14 	bl	80028c8 <HAL_HCD_HC_GetURBState>
 800cea0:	4603      	mov	r3, r0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b082      	sub	sp, #8
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d103      	bne.n	800cec8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800cec0:	78fb      	ldrb	r3, [r7, #3]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f000 f872 	bl	800cfac <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cec8:	20c8      	movs	r0, #200	@ 0xc8
 800ceca:	f7f4 fbeb 	bl	80016a4 <HAL_Delay>
  return USBH_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	460b      	mov	r3, r1
 800cee2:	70fb      	strb	r3, [r7, #3]
 800cee4:	4613      	mov	r3, r2
 800cee6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ceee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cef0:	78fa      	ldrb	r2, [r7, #3]
 800cef2:	68f9      	ldr	r1, [r7, #12]
 800cef4:	4613      	mov	r3, r2
 800cef6:	011b      	lsls	r3, r3, #4
 800cef8:	1a9b      	subs	r3, r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	440b      	add	r3, r1
 800cefe:	3317      	adds	r3, #23
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00a      	beq.n	800cf1c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cf06:	78fa      	ldrb	r2, [r7, #3]
 800cf08:	68f9      	ldr	r1, [r7, #12]
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	011b      	lsls	r3, r3, #4
 800cf0e:	1a9b      	subs	r3, r3, r2
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	440b      	add	r3, r1
 800cf14:	333c      	adds	r3, #60	@ 0x3c
 800cf16:	78ba      	ldrb	r2, [r7, #2]
 800cf18:	701a      	strb	r2, [r3, #0]
 800cf1a:	e009      	b.n	800cf30 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cf1c:	78fa      	ldrb	r2, [r7, #3]
 800cf1e:	68f9      	ldr	r1, [r7, #12]
 800cf20:	4613      	mov	r3, r2
 800cf22:	011b      	lsls	r3, r3, #4
 800cf24:	1a9b      	subs	r3, r3, r2
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	440b      	add	r3, r1
 800cf2a:	333d      	adds	r3, #61	@ 0x3d
 800cf2c:	78ba      	ldrb	r2, [r7, #2]
 800cf2e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3714      	adds	r7, #20
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b082      	sub	sp, #8
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7f4 fbac 	bl	80016a4 <HAL_Delay>
}
 800cf4c:	bf00      	nop
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	2b03      	cmp	r3, #3
 800cf66:	d817      	bhi.n	800cf98 <USBH_Get_USB_Status+0x44>
 800cf68:	a201      	add	r2, pc, #4	@ (adr r2, 800cf70 <USBH_Get_USB_Status+0x1c>)
 800cf6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6e:	bf00      	nop
 800cf70:	0800cf81 	.word	0x0800cf81
 800cf74:	0800cf87 	.word	0x0800cf87
 800cf78:	0800cf8d 	.word	0x0800cf8d
 800cf7c:	0800cf93 	.word	0x0800cf93
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cf80:	2300      	movs	r3, #0
 800cf82:	73fb      	strb	r3, [r7, #15]
    break;
 800cf84:	e00b      	b.n	800cf9e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cf86:	2302      	movs	r3, #2
 800cf88:	73fb      	strb	r3, [r7, #15]
    break;
 800cf8a:	e008      	b.n	800cf9e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf90:	e005      	b.n	800cf9e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cf92:	2302      	movs	r3, #2
 800cf94:	73fb      	strb	r3, [r7, #15]
    break;
 800cf96:	e002      	b.n	800cf9e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cf98:	2302      	movs	r3, #2
 800cf9a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf9c:	bf00      	nop
  }
  return usb_status;
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cfb6:	79fb      	ldrb	r3, [r7, #7]
 800cfb8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d102      	bne.n	800cfc6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	73fb      	strb	r3, [r7, #15]
 800cfc4:	e001      	b.n	800cfca <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800cfca:	7bfb      	ldrb	r3, [r7, #15]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	2110      	movs	r1, #16
 800cfd0:	4803      	ldr	r0, [pc, #12]	@ (800cfe0 <MX_DriverVbusHS+0x34>)
 800cfd2:	f7f5 f821 	bl	8002018 <HAL_GPIO_WritePin>
}
 800cfd6:	bf00      	nop
 800cfd8:	3710      	adds	r7, #16
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	40020800 	.word	0x40020800

0800cfe4 <malloc>:
 800cfe4:	4b02      	ldr	r3, [pc, #8]	@ (800cff0 <malloc+0xc>)
 800cfe6:	4601      	mov	r1, r0
 800cfe8:	6818      	ldr	r0, [r3, #0]
 800cfea:	f000 b82d 	b.w	800d048 <_malloc_r>
 800cfee:	bf00      	nop
 800cff0:	20000030 	.word	0x20000030

0800cff4 <free>:
 800cff4:	4b02      	ldr	r3, [pc, #8]	@ (800d000 <free+0xc>)
 800cff6:	4601      	mov	r1, r0
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	f000 b903 	b.w	800d204 <_free_r>
 800cffe:	bf00      	nop
 800d000:	20000030 	.word	0x20000030

0800d004 <sbrk_aligned>:
 800d004:	b570      	push	{r4, r5, r6, lr}
 800d006:	4e0f      	ldr	r6, [pc, #60]	@ (800d044 <sbrk_aligned+0x40>)
 800d008:	460c      	mov	r4, r1
 800d00a:	6831      	ldr	r1, [r6, #0]
 800d00c:	4605      	mov	r5, r0
 800d00e:	b911      	cbnz	r1, 800d016 <sbrk_aligned+0x12>
 800d010:	f000 f8ae 	bl	800d170 <_sbrk_r>
 800d014:	6030      	str	r0, [r6, #0]
 800d016:	4621      	mov	r1, r4
 800d018:	4628      	mov	r0, r5
 800d01a:	f000 f8a9 	bl	800d170 <_sbrk_r>
 800d01e:	1c43      	adds	r3, r0, #1
 800d020:	d103      	bne.n	800d02a <sbrk_aligned+0x26>
 800d022:	f04f 34ff 	mov.w	r4, #4294967295
 800d026:	4620      	mov	r0, r4
 800d028:	bd70      	pop	{r4, r5, r6, pc}
 800d02a:	1cc4      	adds	r4, r0, #3
 800d02c:	f024 0403 	bic.w	r4, r4, #3
 800d030:	42a0      	cmp	r0, r4
 800d032:	d0f8      	beq.n	800d026 <sbrk_aligned+0x22>
 800d034:	1a21      	subs	r1, r4, r0
 800d036:	4628      	mov	r0, r5
 800d038:	f000 f89a 	bl	800d170 <_sbrk_r>
 800d03c:	3001      	adds	r0, #1
 800d03e:	d1f2      	bne.n	800d026 <sbrk_aligned+0x22>
 800d040:	e7ef      	b.n	800d022 <sbrk_aligned+0x1e>
 800d042:	bf00      	nop
 800d044:	20008ec8 	.word	0x20008ec8

0800d048 <_malloc_r>:
 800d048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d04c:	1ccd      	adds	r5, r1, #3
 800d04e:	f025 0503 	bic.w	r5, r5, #3
 800d052:	3508      	adds	r5, #8
 800d054:	2d0c      	cmp	r5, #12
 800d056:	bf38      	it	cc
 800d058:	250c      	movcc	r5, #12
 800d05a:	2d00      	cmp	r5, #0
 800d05c:	4606      	mov	r6, r0
 800d05e:	db01      	blt.n	800d064 <_malloc_r+0x1c>
 800d060:	42a9      	cmp	r1, r5
 800d062:	d904      	bls.n	800d06e <_malloc_r+0x26>
 800d064:	230c      	movs	r3, #12
 800d066:	6033      	str	r3, [r6, #0]
 800d068:	2000      	movs	r0, #0
 800d06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d06e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d144 <_malloc_r+0xfc>
 800d072:	f000 f869 	bl	800d148 <__malloc_lock>
 800d076:	f8d8 3000 	ldr.w	r3, [r8]
 800d07a:	461c      	mov	r4, r3
 800d07c:	bb44      	cbnz	r4, 800d0d0 <_malloc_r+0x88>
 800d07e:	4629      	mov	r1, r5
 800d080:	4630      	mov	r0, r6
 800d082:	f7ff ffbf 	bl	800d004 <sbrk_aligned>
 800d086:	1c43      	adds	r3, r0, #1
 800d088:	4604      	mov	r4, r0
 800d08a:	d158      	bne.n	800d13e <_malloc_r+0xf6>
 800d08c:	f8d8 4000 	ldr.w	r4, [r8]
 800d090:	4627      	mov	r7, r4
 800d092:	2f00      	cmp	r7, #0
 800d094:	d143      	bne.n	800d11e <_malloc_r+0xd6>
 800d096:	2c00      	cmp	r4, #0
 800d098:	d04b      	beq.n	800d132 <_malloc_r+0xea>
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	4639      	mov	r1, r7
 800d09e:	4630      	mov	r0, r6
 800d0a0:	eb04 0903 	add.w	r9, r4, r3
 800d0a4:	f000 f864 	bl	800d170 <_sbrk_r>
 800d0a8:	4581      	cmp	r9, r0
 800d0aa:	d142      	bne.n	800d132 <_malloc_r+0xea>
 800d0ac:	6821      	ldr	r1, [r4, #0]
 800d0ae:	1a6d      	subs	r5, r5, r1
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	f7ff ffa6 	bl	800d004 <sbrk_aligned>
 800d0b8:	3001      	adds	r0, #1
 800d0ba:	d03a      	beq.n	800d132 <_malloc_r+0xea>
 800d0bc:	6823      	ldr	r3, [r4, #0]
 800d0be:	442b      	add	r3, r5
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	f8d8 3000 	ldr.w	r3, [r8]
 800d0c6:	685a      	ldr	r2, [r3, #4]
 800d0c8:	bb62      	cbnz	r2, 800d124 <_malloc_r+0xdc>
 800d0ca:	f8c8 7000 	str.w	r7, [r8]
 800d0ce:	e00f      	b.n	800d0f0 <_malloc_r+0xa8>
 800d0d0:	6822      	ldr	r2, [r4, #0]
 800d0d2:	1b52      	subs	r2, r2, r5
 800d0d4:	d420      	bmi.n	800d118 <_malloc_r+0xd0>
 800d0d6:	2a0b      	cmp	r2, #11
 800d0d8:	d917      	bls.n	800d10a <_malloc_r+0xc2>
 800d0da:	1961      	adds	r1, r4, r5
 800d0dc:	42a3      	cmp	r3, r4
 800d0de:	6025      	str	r5, [r4, #0]
 800d0e0:	bf18      	it	ne
 800d0e2:	6059      	strne	r1, [r3, #4]
 800d0e4:	6863      	ldr	r3, [r4, #4]
 800d0e6:	bf08      	it	eq
 800d0e8:	f8c8 1000 	streq.w	r1, [r8]
 800d0ec:	5162      	str	r2, [r4, r5]
 800d0ee:	604b      	str	r3, [r1, #4]
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	f000 f82f 	bl	800d154 <__malloc_unlock>
 800d0f6:	f104 000b 	add.w	r0, r4, #11
 800d0fa:	1d23      	adds	r3, r4, #4
 800d0fc:	f020 0007 	bic.w	r0, r0, #7
 800d100:	1ac2      	subs	r2, r0, r3
 800d102:	bf1c      	itt	ne
 800d104:	1a1b      	subne	r3, r3, r0
 800d106:	50a3      	strne	r3, [r4, r2]
 800d108:	e7af      	b.n	800d06a <_malloc_r+0x22>
 800d10a:	6862      	ldr	r2, [r4, #4]
 800d10c:	42a3      	cmp	r3, r4
 800d10e:	bf0c      	ite	eq
 800d110:	f8c8 2000 	streq.w	r2, [r8]
 800d114:	605a      	strne	r2, [r3, #4]
 800d116:	e7eb      	b.n	800d0f0 <_malloc_r+0xa8>
 800d118:	4623      	mov	r3, r4
 800d11a:	6864      	ldr	r4, [r4, #4]
 800d11c:	e7ae      	b.n	800d07c <_malloc_r+0x34>
 800d11e:	463c      	mov	r4, r7
 800d120:	687f      	ldr	r7, [r7, #4]
 800d122:	e7b6      	b.n	800d092 <_malloc_r+0x4a>
 800d124:	461a      	mov	r2, r3
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	42a3      	cmp	r3, r4
 800d12a:	d1fb      	bne.n	800d124 <_malloc_r+0xdc>
 800d12c:	2300      	movs	r3, #0
 800d12e:	6053      	str	r3, [r2, #4]
 800d130:	e7de      	b.n	800d0f0 <_malloc_r+0xa8>
 800d132:	230c      	movs	r3, #12
 800d134:	6033      	str	r3, [r6, #0]
 800d136:	4630      	mov	r0, r6
 800d138:	f000 f80c 	bl	800d154 <__malloc_unlock>
 800d13c:	e794      	b.n	800d068 <_malloc_r+0x20>
 800d13e:	6005      	str	r5, [r0, #0]
 800d140:	e7d6      	b.n	800d0f0 <_malloc_r+0xa8>
 800d142:	bf00      	nop
 800d144:	20008ecc 	.word	0x20008ecc

0800d148 <__malloc_lock>:
 800d148:	4801      	ldr	r0, [pc, #4]	@ (800d150 <__malloc_lock+0x8>)
 800d14a:	f000 b84b 	b.w	800d1e4 <__retarget_lock_acquire_recursive>
 800d14e:	bf00      	nop
 800d150:	2000900c 	.word	0x2000900c

0800d154 <__malloc_unlock>:
 800d154:	4801      	ldr	r0, [pc, #4]	@ (800d15c <__malloc_unlock+0x8>)
 800d156:	f000 b846 	b.w	800d1e6 <__retarget_lock_release_recursive>
 800d15a:	bf00      	nop
 800d15c:	2000900c 	.word	0x2000900c

0800d160 <memset>:
 800d160:	4402      	add	r2, r0
 800d162:	4603      	mov	r3, r0
 800d164:	4293      	cmp	r3, r2
 800d166:	d100      	bne.n	800d16a <memset+0xa>
 800d168:	4770      	bx	lr
 800d16a:	f803 1b01 	strb.w	r1, [r3], #1
 800d16e:	e7f9      	b.n	800d164 <memset+0x4>

0800d170 <_sbrk_r>:
 800d170:	b538      	push	{r3, r4, r5, lr}
 800d172:	4d06      	ldr	r5, [pc, #24]	@ (800d18c <_sbrk_r+0x1c>)
 800d174:	2300      	movs	r3, #0
 800d176:	4604      	mov	r4, r0
 800d178:	4608      	mov	r0, r1
 800d17a:	602b      	str	r3, [r5, #0]
 800d17c:	f7f4 f8fa 	bl	8001374 <_sbrk>
 800d180:	1c43      	adds	r3, r0, #1
 800d182:	d102      	bne.n	800d18a <_sbrk_r+0x1a>
 800d184:	682b      	ldr	r3, [r5, #0]
 800d186:	b103      	cbz	r3, 800d18a <_sbrk_r+0x1a>
 800d188:	6023      	str	r3, [r4, #0]
 800d18a:	bd38      	pop	{r3, r4, r5, pc}
 800d18c:	20009008 	.word	0x20009008

0800d190 <__errno>:
 800d190:	4b01      	ldr	r3, [pc, #4]	@ (800d198 <__errno+0x8>)
 800d192:	6818      	ldr	r0, [r3, #0]
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	20000030 	.word	0x20000030

0800d19c <__libc_init_array>:
 800d19c:	b570      	push	{r4, r5, r6, lr}
 800d19e:	4d0d      	ldr	r5, [pc, #52]	@ (800d1d4 <__libc_init_array+0x38>)
 800d1a0:	4c0d      	ldr	r4, [pc, #52]	@ (800d1d8 <__libc_init_array+0x3c>)
 800d1a2:	1b64      	subs	r4, r4, r5
 800d1a4:	10a4      	asrs	r4, r4, #2
 800d1a6:	2600      	movs	r6, #0
 800d1a8:	42a6      	cmp	r6, r4
 800d1aa:	d109      	bne.n	800d1c0 <__libc_init_array+0x24>
 800d1ac:	4d0b      	ldr	r5, [pc, #44]	@ (800d1dc <__libc_init_array+0x40>)
 800d1ae:	4c0c      	ldr	r4, [pc, #48]	@ (800d1e0 <__libc_init_array+0x44>)
 800d1b0:	f000 f872 	bl	800d298 <_init>
 800d1b4:	1b64      	subs	r4, r4, r5
 800d1b6:	10a4      	asrs	r4, r4, #2
 800d1b8:	2600      	movs	r6, #0
 800d1ba:	42a6      	cmp	r6, r4
 800d1bc:	d105      	bne.n	800d1ca <__libc_init_array+0x2e>
 800d1be:	bd70      	pop	{r4, r5, r6, pc}
 800d1c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1c4:	4798      	blx	r3
 800d1c6:	3601      	adds	r6, #1
 800d1c8:	e7ee      	b.n	800d1a8 <__libc_init_array+0xc>
 800d1ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ce:	4798      	blx	r3
 800d1d0:	3601      	adds	r6, #1
 800d1d2:	e7f2      	b.n	800d1ba <__libc_init_array+0x1e>
 800d1d4:	0800d33c 	.word	0x0800d33c
 800d1d8:	0800d33c 	.word	0x0800d33c
 800d1dc:	0800d33c 	.word	0x0800d33c
 800d1e0:	0800d340 	.word	0x0800d340

0800d1e4 <__retarget_lock_acquire_recursive>:
 800d1e4:	4770      	bx	lr

0800d1e6 <__retarget_lock_release_recursive>:
 800d1e6:	4770      	bx	lr

0800d1e8 <memcpy>:
 800d1e8:	440a      	add	r2, r1
 800d1ea:	4291      	cmp	r1, r2
 800d1ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1f0:	d100      	bne.n	800d1f4 <memcpy+0xc>
 800d1f2:	4770      	bx	lr
 800d1f4:	b510      	push	{r4, lr}
 800d1f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1fe:	4291      	cmp	r1, r2
 800d200:	d1f9      	bne.n	800d1f6 <memcpy+0xe>
 800d202:	bd10      	pop	{r4, pc}

0800d204 <_free_r>:
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	4605      	mov	r5, r0
 800d208:	2900      	cmp	r1, #0
 800d20a:	d041      	beq.n	800d290 <_free_r+0x8c>
 800d20c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d210:	1f0c      	subs	r4, r1, #4
 800d212:	2b00      	cmp	r3, #0
 800d214:	bfb8      	it	lt
 800d216:	18e4      	addlt	r4, r4, r3
 800d218:	f7ff ff96 	bl	800d148 <__malloc_lock>
 800d21c:	4a1d      	ldr	r2, [pc, #116]	@ (800d294 <_free_r+0x90>)
 800d21e:	6813      	ldr	r3, [r2, #0]
 800d220:	b933      	cbnz	r3, 800d230 <_free_r+0x2c>
 800d222:	6063      	str	r3, [r4, #4]
 800d224:	6014      	str	r4, [r2, #0]
 800d226:	4628      	mov	r0, r5
 800d228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d22c:	f7ff bf92 	b.w	800d154 <__malloc_unlock>
 800d230:	42a3      	cmp	r3, r4
 800d232:	d908      	bls.n	800d246 <_free_r+0x42>
 800d234:	6820      	ldr	r0, [r4, #0]
 800d236:	1821      	adds	r1, r4, r0
 800d238:	428b      	cmp	r3, r1
 800d23a:	bf01      	itttt	eq
 800d23c:	6819      	ldreq	r1, [r3, #0]
 800d23e:	685b      	ldreq	r3, [r3, #4]
 800d240:	1809      	addeq	r1, r1, r0
 800d242:	6021      	streq	r1, [r4, #0]
 800d244:	e7ed      	b.n	800d222 <_free_r+0x1e>
 800d246:	461a      	mov	r2, r3
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	b10b      	cbz	r3, 800d250 <_free_r+0x4c>
 800d24c:	42a3      	cmp	r3, r4
 800d24e:	d9fa      	bls.n	800d246 <_free_r+0x42>
 800d250:	6811      	ldr	r1, [r2, #0]
 800d252:	1850      	adds	r0, r2, r1
 800d254:	42a0      	cmp	r0, r4
 800d256:	d10b      	bne.n	800d270 <_free_r+0x6c>
 800d258:	6820      	ldr	r0, [r4, #0]
 800d25a:	4401      	add	r1, r0
 800d25c:	1850      	adds	r0, r2, r1
 800d25e:	4283      	cmp	r3, r0
 800d260:	6011      	str	r1, [r2, #0]
 800d262:	d1e0      	bne.n	800d226 <_free_r+0x22>
 800d264:	6818      	ldr	r0, [r3, #0]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	6053      	str	r3, [r2, #4]
 800d26a:	4408      	add	r0, r1
 800d26c:	6010      	str	r0, [r2, #0]
 800d26e:	e7da      	b.n	800d226 <_free_r+0x22>
 800d270:	d902      	bls.n	800d278 <_free_r+0x74>
 800d272:	230c      	movs	r3, #12
 800d274:	602b      	str	r3, [r5, #0]
 800d276:	e7d6      	b.n	800d226 <_free_r+0x22>
 800d278:	6820      	ldr	r0, [r4, #0]
 800d27a:	1821      	adds	r1, r4, r0
 800d27c:	428b      	cmp	r3, r1
 800d27e:	bf04      	itt	eq
 800d280:	6819      	ldreq	r1, [r3, #0]
 800d282:	685b      	ldreq	r3, [r3, #4]
 800d284:	6063      	str	r3, [r4, #4]
 800d286:	bf04      	itt	eq
 800d288:	1809      	addeq	r1, r1, r0
 800d28a:	6021      	streq	r1, [r4, #0]
 800d28c:	6054      	str	r4, [r2, #4]
 800d28e:	e7ca      	b.n	800d226 <_free_r+0x22>
 800d290:	bd38      	pop	{r3, r4, r5, pc}
 800d292:	bf00      	nop
 800d294:	20008ecc 	.word	0x20008ecc

0800d298 <_init>:
 800d298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29a:	bf00      	nop
 800d29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d29e:	bc08      	pop	{r3}
 800d2a0:	469e      	mov	lr, r3
 800d2a2:	4770      	bx	lr

0800d2a4 <_fini>:
 800d2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a6:	bf00      	nop
 800d2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2aa:	bc08      	pop	{r3}
 800d2ac:	469e      	mov	lr, r3
 800d2ae:	4770      	bx	lr
